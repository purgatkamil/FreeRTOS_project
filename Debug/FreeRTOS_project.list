
FreeRTOS_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b988  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  0800bb18  0800bb18  0001bb18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c094  0800c094  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c094  0800c094  0001c094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c09c  0800c09c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c09c  0800c09c  0001c09c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0a0  0800c0a0  0001c0a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800c0a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000037fc  200001d8  0800c27c  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200039d4  0800c27c  000239d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d463  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e96  00000000  00000000  0003d6ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017c8  00000000  00000000  00041548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000125f  00000000  00000000  00042d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a525  00000000  00000000  00043f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c0b5  00000000  00000000  0006e494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fed48  00000000  00000000  0008a549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007350  00000000  00000000  00189294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  001905e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bb00 	.word	0x0800bb00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800bb00 	.word	0x0800bb00

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b970 	b.w	8000ec0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	460d      	mov	r5, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	460f      	mov	r7, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4694      	mov	ip, r2
 8000c0c:	d965      	bls.n	8000cda <__udivmoddi4+0xe2>
 8000c0e:	fab2 f382 	clz	r3, r2
 8000c12:	b143      	cbz	r3, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c18:	f1c3 0220 	rsb	r2, r3, #32
 8000c1c:	409f      	lsls	r7, r3
 8000c1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c22:	4317      	orrs	r7, r2
 8000c24:	409c      	lsls	r4, r3
 8000c26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c2a:	fa1f f58c 	uxth.w	r5, ip
 8000c2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c32:	0c22      	lsrs	r2, r4, #16
 8000c34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c3c:	fb01 f005 	mul.w	r0, r1, r5
 8000c40:	4290      	cmp	r0, r2
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c4c:	f080 811c 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c50:	4290      	cmp	r0, r2
 8000c52:	f240 8119 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c56:	3902      	subs	r1, #2
 8000c58:	4462      	add	r2, ip
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	b2a4      	uxth	r4, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c6a:	fb00 f505 	mul.w	r5, r0, r5
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x90>
 8000c72:	eb1c 0404 	adds.w	r4, ip, r4
 8000c76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c7a:	f080 8107 	bcs.w	8000e8c <__udivmoddi4+0x294>
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	f240 8104 	bls.w	8000e8c <__udivmoddi4+0x294>
 8000c84:	4464      	add	r4, ip
 8000c86:	3802      	subs	r0, #2
 8000c88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11e      	cbz	r6, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40dc      	lsrs	r4, r3
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0xbc>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80ed 	beq.w	8000e82 <__udivmoddi4+0x28a>
 8000ca8:	2100      	movs	r1, #0
 8000caa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	fab3 f183 	clz	r1, r3
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	d149      	bne.n	8000d50 <__udivmoddi4+0x158>
 8000cbc:	42ab      	cmp	r3, r5
 8000cbe:	d302      	bcc.n	8000cc6 <__udivmoddi4+0xce>
 8000cc0:	4282      	cmp	r2, r0
 8000cc2:	f200 80f8 	bhi.w	8000eb6 <__udivmoddi4+0x2be>
 8000cc6:	1a84      	subs	r4, r0, r2
 8000cc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ccc:	2001      	movs	r0, #1
 8000cce:	4617      	mov	r7, r2
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d0e2      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cd8:	e7df      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cda:	b902      	cbnz	r2, 8000cde <__udivmoddi4+0xe6>
 8000cdc:	deff      	udf	#255	; 0xff
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8090 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000ce8:	1a8a      	subs	r2, r1, r2
 8000cea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cf8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cfc:	0c22      	lsrs	r2, r4, #16
 8000cfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d02:	fb0e f005 	mul.w	r0, lr, r5
 8000d06:	4290      	cmp	r0, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d0e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4290      	cmp	r0, r2
 8000d16:	f200 80cb 	bhi.w	8000eb0 <__udivmoddi4+0x2b8>
 8000d1a:	4645      	mov	r5, r8
 8000d1c:	1a12      	subs	r2, r2, r0
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d24:	fb07 2210 	mls	r2, r7, r0, r2
 8000d28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x14e>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x14c>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	f200 80bb 	bhi.w	8000eba <__udivmoddi4+0x2c2>
 8000d44:	4610      	mov	r0, r2
 8000d46:	eba4 040e 	sub.w	r4, r4, lr
 8000d4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d4e:	e79f      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d50:	f1c1 0720 	rsb	r7, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d62:	fa20 f307 	lsr.w	r3, r0, r7
 8000d66:	40fd      	lsrs	r5, r7
 8000d68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6c:	4323      	orrs	r3, r4
 8000d6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d72:	fa1f fe8c 	uxth.w	lr, ip
 8000d76:	fb09 5518 	mls	r5, r9, r8, r5
 8000d7a:	0c1c      	lsrs	r4, r3, #16
 8000d7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d80:	fb08 f50e 	mul.w	r5, r8, lr
 8000d84:	42a5      	cmp	r5, r4
 8000d86:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d98:	f080 8088 	bcs.w	8000eac <__udivmoddi4+0x2b4>
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	f240 8085 	bls.w	8000eac <__udivmoddi4+0x2b4>
 8000da2:	f1a8 0802 	sub.w	r8, r8, #2
 8000da6:	4464      	add	r4, ip
 8000da8:	1b64      	subs	r4, r4, r5
 8000daa:	b29d      	uxth	r5, r3
 8000dac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db0:	fb09 4413 	mls	r4, r9, r3, r4
 8000db4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000db8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dc8:	d26c      	bcs.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	d96a      	bls.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dd6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dda:	eba4 040e 	sub.w	r4, r4, lr
 8000dde:	42ac      	cmp	r4, r5
 8000de0:	46c8      	mov	r8, r9
 8000de2:	46ae      	mov	lr, r5
 8000de4:	d356      	bcc.n	8000e94 <__udivmoddi4+0x29c>
 8000de6:	d053      	beq.n	8000e90 <__udivmoddi4+0x298>
 8000de8:	b156      	cbz	r6, 8000e00 <__udivmoddi4+0x208>
 8000dea:	ebb0 0208 	subs.w	r2, r0, r8
 8000dee:	eb64 040e 	sbc.w	r4, r4, lr
 8000df2:	fa04 f707 	lsl.w	r7, r4, r7
 8000df6:	40ca      	lsrs	r2, r1
 8000df8:	40cc      	lsrs	r4, r1
 8000dfa:	4317      	orrs	r7, r2
 8000dfc:	e9c6 7400 	strd	r7, r4, [r6]
 8000e00:	4618      	mov	r0, r3
 8000e02:	2100      	movs	r1, #0
 8000e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e08:	f1c3 0120 	rsb	r1, r3, #32
 8000e0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e10:	fa20 f201 	lsr.w	r2, r0, r1
 8000e14:	fa25 f101 	lsr.w	r1, r5, r1
 8000e18:	409d      	lsls	r5, r3
 8000e1a:	432a      	orrs	r2, r5
 8000e1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e28:	fb07 1510 	mls	r5, r7, r0, r1
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e32:	fb00 f50e 	mul.w	r5, r0, lr
 8000e36:	428d      	cmp	r5, r1
 8000e38:	fa04 f403 	lsl.w	r4, r4, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x258>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e46:	d22f      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e48:	428d      	cmp	r5, r1
 8000e4a:	d92d      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1b49      	subs	r1, r1, r5
 8000e52:	b292      	uxth	r2, r2
 8000e54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e58:	fb07 1115 	mls	r1, r7, r5, r1
 8000e5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e60:	fb05 f10e 	mul.w	r1, r5, lr
 8000e64:	4291      	cmp	r1, r2
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x282>
 8000e68:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e70:	d216      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e72:	4291      	cmp	r1, r2
 8000e74:	d914      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e76:	3d02      	subs	r5, #2
 8000e78:	4462      	add	r2, ip
 8000e7a:	1a52      	subs	r2, r2, r1
 8000e7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e80:	e738      	b.n	8000cf4 <__udivmoddi4+0xfc>
 8000e82:	4631      	mov	r1, r6
 8000e84:	4630      	mov	r0, r6
 8000e86:	e708      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000e88:	4639      	mov	r1, r7
 8000e8a:	e6e6      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	e6fb      	b.n	8000c88 <__udivmoddi4+0x90>
 8000e90:	4548      	cmp	r0, r9
 8000e92:	d2a9      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e94:	ebb9 0802 	subs.w	r8, r9, r2
 8000e98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	e7a3      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000ea0:	4645      	mov	r5, r8
 8000ea2:	e7ea      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ea4:	462b      	mov	r3, r5
 8000ea6:	e794      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea8:	4640      	mov	r0, r8
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x258>
 8000eac:	46d0      	mov	r8, sl
 8000eae:	e77b      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eb0:	3d02      	subs	r5, #2
 8000eb2:	4462      	add	r2, ip
 8000eb4:	e732      	b.n	8000d1c <__udivmoddi4+0x124>
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e70a      	b.n	8000cd0 <__udivmoddi4+0xd8>
 8000eba:	4464      	add	r4, ip
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	e742      	b.n	8000d46 <__udivmoddi4+0x14e>

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Queue1_Commands */
  Queue1_CommandsHandle = osMessageQueueNew (10, 20, &Queue1_Commands_attributes);
 8000ec8:	4a14      	ldr	r2, [pc, #80]	; (8000f1c <MX_FREERTOS_Init+0x58>)
 8000eca:	2114      	movs	r1, #20
 8000ecc:	200a      	movs	r0, #10
 8000ece:	f005 f993 	bl	80061f8 <osMessageQueueNew>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	4a12      	ldr	r2, [pc, #72]	; (8000f20 <MX_FREERTOS_Init+0x5c>)
 8000ed6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ed8:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <MX_FREERTOS_Init+0x60>)
 8000eda:	2100      	movs	r1, #0
 8000edc:	4812      	ldr	r0, [pc, #72]	; (8000f28 <MX_FREERTOS_Init+0x64>)
 8000ede:	f005 f8b1 	bl	8006044 <osThreadNew>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	4a11      	ldr	r2, [pc, #68]	; (8000f2c <MX_FREERTOS_Init+0x68>)
 8000ee6:	6013      	str	r3, [r2, #0]

  /* creation of Task3_CommandDetection */
  Task3_CommandDetectionHandle = osThreadNew(CommandDetection, NULL, &Task3_CommandDetection_attributes);
 8000ee8:	4a11      	ldr	r2, [pc, #68]	; (8000f30 <MX_FREERTOS_Init+0x6c>)
 8000eea:	2100      	movs	r1, #0
 8000eec:	4811      	ldr	r0, [pc, #68]	; (8000f34 <MX_FREERTOS_Init+0x70>)
 8000eee:	f005 f8a9 	bl	8006044 <osThreadNew>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	4a10      	ldr	r2, [pc, #64]	; (8000f38 <MX_FREERTOS_Init+0x74>)
 8000ef6:	6013      	str	r3, [r2, #0]

  /* creation of Task4_UltrasoundSensor */
  Task4_UltrasoundSensorHandle = osThreadNew(UltrasoundSensor, NULL, &Task4_UltrasoundSensor_attributes);
 8000ef8:	4a10      	ldr	r2, [pc, #64]	; (8000f3c <MX_FREERTOS_Init+0x78>)
 8000efa:	2100      	movs	r1, #0
 8000efc:	4810      	ldr	r0, [pc, #64]	; (8000f40 <MX_FREERTOS_Init+0x7c>)
 8000efe:	f005 f8a1 	bl	8006044 <osThreadNew>
 8000f02:	4603      	mov	r3, r0
 8000f04:	4a0f      	ldr	r2, [pc, #60]	; (8000f44 <MX_FREERTOS_Init+0x80>)
 8000f06:	6013      	str	r3, [r2, #0]

  /* creation of Task2_UsartReceiving */
  Task2_UsartReceivingHandle = osThreadNew(UsartReceiving, NULL, &Task2_UsartReceiving_attributes);
 8000f08:	4a0f      	ldr	r2, [pc, #60]	; (8000f48 <MX_FREERTOS_Init+0x84>)
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	480f      	ldr	r0, [pc, #60]	; (8000f4c <MX_FREERTOS_Init+0x88>)
 8000f0e:	f005 f899 	bl	8006044 <osThreadNew>
 8000f12:	4603      	mov	r3, r0
 8000f14:	4a0e      	ldr	r2, [pc, #56]	; (8000f50 <MX_FREERTOS_Init+0x8c>)
 8000f16:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	0800bcc0 	.word	0x0800bcc0
 8000f20:	2000020c 	.word	0x2000020c
 8000f24:	0800bbe8 	.word	0x0800bbe8
 8000f28:	08000f55 	.word	0x08000f55
 8000f2c:	200001f4 	.word	0x200001f4
 8000f30:	0800bc0c 	.word	0x0800bc0c
 8000f34:	08000f65 	.word	0x08000f65
 8000f38:	200001f8 	.word	0x200001f8
 8000f3c:	0800bc30 	.word	0x0800bc30
 8000f40:	08001019 	.word	0x08001019
 8000f44:	200001fc 	.word	0x200001fc
 8000f48:	0800bc54 	.word	0x0800bc54
 8000f4c:	08001095 	.word	0x08001095
 8000f50:	20000200 	.word	0x20000200

08000f54 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f005 f930 	bl	80061c2 <osDelay>
 8000f62:	e7fb      	b.n	8000f5c <StartDefaultTask+0x8>

08000f64 <CommandDetection>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CommandDetection */
void CommandDetection(void *argument)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CommandDetection */
	char ReceivedValue[MAX_LENGTH_OF_LINE_RECEIVED_BY_USART + 1];
	  /* Infinite loop */
	  for(;;){
		 osMessageQueueGet(Queue1_CommandsHandle, ReceivedValue, 0, osWaitForever);
 8000f6c:	4b20      	ldr	r3, [pc, #128]	; (8000ff0 <CommandDetection+0x8c>)
 8000f6e:	6818      	ldr	r0, [r3, #0]
 8000f70:	f107 0108 	add.w	r1, r7, #8
 8000f74:	f04f 33ff 	mov.w	r3, #4294967295
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f005 fa11 	bl	80063a0 <osMessageQueueGet>
		  //ReceivedValue = osMessageGet(Queue1_CommandsHandle, osWaitForever)
		  if (strcmp(ReceivedValue, "on") == 0){
 8000f7e:	f107 0308 	add.w	r3, r7, #8
 8000f82:	491c      	ldr	r1, [pc, #112]	; (8000ff4 <CommandDetection+0x90>)
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff f923 	bl	80001d0 <strcmp>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d10d      	bne.n	8000fac <CommandDetection+0x48>
			  //HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
			  osThreadTerminate(Task6_StopMovingHandle);
 8000f90:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <CommandDetection+0x94>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f005 f8e7 	bl	8006168 <osThreadTerminate>
			  Task5_MoveForwardHandle = osThreadNew(MoveForward, NULL, &Task5_MoveForward_attributes);
 8000f9a:	4a18      	ldr	r2, [pc, #96]	; (8000ffc <CommandDetection+0x98>)
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4818      	ldr	r0, [pc, #96]	; (8001000 <CommandDetection+0x9c>)
 8000fa0:	f005 f850 	bl	8006044 <osThreadNew>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	4a17      	ldr	r2, [pc, #92]	; (8001004 <CommandDetection+0xa0>)
 8000fa8:	6013      	str	r3, [r2, #0]
 8000faa:	e01c      	b.n	8000fe6 <CommandDetection+0x82>
		  }else if (strcmp(ReceivedValue, "off") == 0) {
 8000fac:	f107 0308 	add.w	r3, r7, #8
 8000fb0:	4915      	ldr	r1, [pc, #84]	; (8001008 <CommandDetection+0xa4>)
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff f90c 	bl	80001d0 <strcmp>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d10d      	bne.n	8000fda <CommandDetection+0x76>
			  osThreadTerminate(Task5_MoveForwardHandle);
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <CommandDetection+0xa0>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f005 f8d0 	bl	8006168 <osThreadTerminate>
			  Task6_StopMovingHandle = osThreadNew(StopMoving, NULL, &Task6_StopMoving_attributes);
 8000fc8:	4a10      	ldr	r2, [pc, #64]	; (800100c <CommandDetection+0xa8>)
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4810      	ldr	r0, [pc, #64]	; (8001010 <CommandDetection+0xac>)
 8000fce:	f005 f839 	bl	8006044 <osThreadNew>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	4a08      	ldr	r2, [pc, #32]	; (8000ff8 <CommandDetection+0x94>)
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	e005      	b.n	8000fe6 <CommandDetection+0x82>

		  } else {
			  printf("Nieznane polecenie: %s\n", ReceivedValue);
 8000fda:	f107 0308 	add.w	r3, r7, #8
 8000fde:	4619      	mov	r1, r3
 8000fe0:	480c      	ldr	r0, [pc, #48]	; (8001014 <CommandDetection+0xb0>)
 8000fe2:	f008 fd7b 	bl	8009adc <iprintf>
		  }

		  osDelay(1);
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	f005 f8eb 	bl	80061c2 <osDelay>
		 osMessageQueueGet(Queue1_CommandsHandle, ReceivedValue, 0, osWaitForever);
 8000fec:	e7be      	b.n	8000f6c <CommandDetection+0x8>
 8000fee:	bf00      	nop
 8000ff0:	2000020c 	.word	0x2000020c
 8000ff4:	0800bba4 	.word	0x0800bba4
 8000ff8:	20000208 	.word	0x20000208
 8000ffc:	0800bc78 	.word	0x0800bc78
 8001000:	08001141 	.word	0x08001141
 8001004:	20000204 	.word	0x20000204
 8001008:	0800bba8 	.word	0x0800bba8
 800100c:	0800bc9c 	.word	0x0800bc9c
 8001010:	0800119d 	.word	0x0800119d
 8001014:	0800bbac 	.word	0x0800bbac

08001018 <UltrasoundSensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UltrasoundSensor */
void UltrasoundSensor(void *argument)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UltrasoundSensor */
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8001020:	2100      	movs	r1, #0
 8001022:	4819      	ldr	r0, [pc, #100]	; (8001088 <UltrasoundSensor+0x70>)
 8001024:	f002 fe32 	bl	8003c8c <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8001028:	2104      	movs	r1, #4
 800102a:	4817      	ldr	r0, [pc, #92]	; (8001088 <UltrasoundSensor+0x70>)
 800102c:	f002 fe2e 	bl	8003c8c <HAL_TIM_IC_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001030:	2108      	movs	r1, #8
 8001032:	4815      	ldr	r0, [pc, #84]	; (8001088 <UltrasoundSensor+0x70>)
 8001034:	f002 fcc2 	bl	80039bc <HAL_TIM_PWM_Start>
	osDelay(1000);
 8001038:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800103c:	f005 f8c1 	bl	80061c2 <osDelay>
  /* Infinite loop */
  for(;;)
  {

	uint32_t start = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8001040:	2100      	movs	r1, #0
 8001042:	4811      	ldr	r0, [pc, #68]	; (8001088 <UltrasoundSensor+0x70>)
 8001044:	f003 fa9a 	bl	800457c <HAL_TIM_ReadCapturedValue>
 8001048:	60f8      	str	r0, [r7, #12]
	uint32_t stop = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 800104a:	2104      	movs	r1, #4
 800104c:	480e      	ldr	r0, [pc, #56]	; (8001088 <UltrasoundSensor+0x70>)
 800104e:	f003 fa95 	bl	800457c <HAL_TIM_ReadCapturedValue>
 8001052:	60b8      	str	r0, [r7, #8]
	printf("%.1f cm\n", (stop - start) / 58.0f);
 8001054:	68ba      	ldr	r2, [r7, #8]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	ee07 3a90 	vmov	s15, r3
 800105e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001062:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800108c <UltrasoundSensor+0x74>
 8001066:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800106a:	ee16 0a90 	vmov	r0, s13
 800106e:	f7ff fa7b 	bl	8000568 <__aeabi_f2d>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	4806      	ldr	r0, [pc, #24]	; (8001090 <UltrasoundSensor+0x78>)
 8001078:	f008 fd30 	bl	8009adc <iprintf>
	osDelay(1000);
 800107c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001080:	f005 f89f 	bl	80061c2 <osDelay>
  {
 8001084:	e7dc      	b.n	8001040 <UltrasoundSensor+0x28>
 8001086:	bf00      	nop
 8001088:	20000298 	.word	0x20000298
 800108c:	42680000 	.word	0x42680000
 8001090:	0800bbc4 	.word	0x0800bbc4

08001094 <UsartReceiving>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UsartReceiving */
void UsartReceiving(void *argument)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	  static char receivedLine[MAX_LENGTH_OF_LINE_RECEIVED_BY_USART + 1]; // +1 for null terminator

	  /* Infinite loop */
	  for(;;)
	  {
		  if (HAL_UART_Receive(&huart2, &value, 1, 0) == HAL_OK){
 800109c:	2300      	movs	r3, #0
 800109e:	2201      	movs	r2, #1
 80010a0:	4921      	ldr	r1, [pc, #132]	; (8001128 <UsartReceiving+0x94>)
 80010a2:	4822      	ldr	r0, [pc, #136]	; (800112c <UsartReceiving+0x98>)
 80010a4:	f004 f9a8 	bl	80053f8 <HAL_UART_Receive>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d137      	bne.n	800111e <UsartReceiving+0x8a>
		  		if (value == '\r' || value == '\n') {
 80010ae:	4b1e      	ldr	r3, [pc, #120]	; (8001128 <UsartReceiving+0x94>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2b0d      	cmp	r3, #13
 80010b4:	d003      	beq.n	80010be <UsartReceiving+0x2a>
 80010b6:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <UsartReceiving+0x94>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b0a      	cmp	r3, #10
 80010bc:	d11f      	bne.n	80010fe <UsartReceiving+0x6a>
		  			// end of line character received
		  			if (line_length > 0){
 80010be:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <UsartReceiving+0x9c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d02b      	beq.n	800111e <UsartReceiving+0x8a>
		  				// if the buffer is not empty, we add the \0 character at the end of the line
		  				line_buffer[line_length] = '\0';
 80010c6:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <UsartReceiving+0x9c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a1a      	ldr	r2, [pc, #104]	; (8001134 <UsartReceiving+0xa0>)
 80010cc:	2100      	movs	r1, #0
 80010ce:	54d1      	strb	r1, [r2, r3]
		  				// passing the buffer to CommendDetection Task by queue
		  			    strncpy(receivedLine, line_buffer, line_length);
 80010d0:	4b17      	ldr	r3, [pc, #92]	; (8001130 <UsartReceiving+0x9c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4917      	ldr	r1, [pc, #92]	; (8001134 <UsartReceiving+0xa0>)
 80010d8:	4817      	ldr	r0, [pc, #92]	; (8001138 <UsartReceiving+0xa4>)
 80010da:	f008 fd5c 	bl	8009b96 <strncpy>
		  			    receivedLine[line_length] = '\0'; // Ensure null termination
 80010de:	4b14      	ldr	r3, [pc, #80]	; (8001130 <UsartReceiving+0x9c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a15      	ldr	r2, [pc, #84]	; (8001138 <UsartReceiving+0xa4>)
 80010e4:	2100      	movs	r1, #0
 80010e6:	54d1      	strb	r1, [r2, r3]
		  				osMessageQueuePut(Queue1_CommandsHandle, receivedLine, 0, 200);
 80010e8:	4b14      	ldr	r3, [pc, #80]	; (800113c <UsartReceiving+0xa8>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	23c8      	movs	r3, #200	; 0xc8
 80010ee:	2200      	movs	r2, #0
 80010f0:	4911      	ldr	r1, [pc, #68]	; (8001138 <UsartReceiving+0xa4>)
 80010f2:	f005 f8f5 	bl	80062e0 <osMessageQueuePut>
		  				int y = osMessageQueueGetMsgSize(Queue1_CommandsHandle

		  				**************************/

		  				// starting data collection again
		  				line_length = 0;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <UsartReceiving+0x9c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
		  			if (line_length > 0){
 80010fc:	e00f      	b.n	800111e <UsartReceiving+0x8a>
		  			}
		  		}
		  		else {
		  			if (line_length >= MAX_LENGTH_OF_LINE_RECEIVED_BY_USART) {
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <UsartReceiving+0x9c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b13      	cmp	r3, #19
 8001104:	d902      	bls.n	800110c <UsartReceiving+0x78>
		  				// too much data, we delete what we have collected so far
		  				line_length = 0;
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <UsartReceiving+0x9c>)
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
		  			}
		  			// we add the value to the buffer
		  			line_buffer[line_length++] = value;
 800110c:	4b08      	ldr	r3, [pc, #32]	; (8001130 <UsartReceiving+0x9c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	1c5a      	adds	r2, r3, #1
 8001112:	4907      	ldr	r1, [pc, #28]	; (8001130 <UsartReceiving+0x9c>)
 8001114:	600a      	str	r2, [r1, #0]
 8001116:	4a04      	ldr	r2, [pc, #16]	; (8001128 <UsartReceiving+0x94>)
 8001118:	7811      	ldrb	r1, [r2, #0]
 800111a:	4a06      	ldr	r2, [pc, #24]	; (8001134 <UsartReceiving+0xa0>)
 800111c:	54d1      	strb	r1, [r2, r3]
		  		}
		  	}

	    osDelay(1);
 800111e:	2001      	movs	r0, #1
 8001120:	f005 f84f 	bl	80061c2 <osDelay>
		  if (HAL_UART_Receive(&huart2, &value, 1, 0) == HAL_OK){
 8001124:	e7ba      	b.n	800109c <UsartReceiving+0x8>
 8001126:	bf00      	nop
 8001128:	20000210 	.word	0x20000210
 800112c:	200002e4 	.word	0x200002e4
 8001130:	20000214 	.word	0x20000214
 8001134:	20000218 	.word	0x20000218
 8001138:	20000230 	.word	0x20000230
 800113c:	2000020c 	.word	0x2000020c

08001140 <MoveForward>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MoveForward */
void MoveForward(void *argument)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MoveForward */
	HAL_GPIO_WritePin(Enable_A_GPIO_Port, Enable_A_Pin, GPIO_PIN_SET);
 8001148:	2201      	movs	r2, #1
 800114a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800114e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001152:	f000 ff9f 	bl	8002094 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Enable_B_GPIO_Port, Enable_B_Pin, GPIO_PIN_SET);
 8001156:	2201      	movs	r2, #1
 8001158:	2108      	movs	r1, #8
 800115a:	480e      	ldr	r0, [pc, #56]	; (8001194 <MoveForward+0x54>)
 800115c:	f000 ff9a 	bl	8002094 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_WritePin(Engine_IN1_GPIO_Port, Engine_IN1_Pin, GPIO_PIN_SET);
 8001160:	2201      	movs	r2, #1
 8001162:	2110      	movs	r1, #16
 8001164:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001168:	f000 ff94 	bl	8002094 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Engine_IN3_GPIO_Port, Engine_IN3_Pin, GPIO_PIN_SET);
 800116c:	2201      	movs	r2, #1
 800116e:	2102      	movs	r1, #2
 8001170:	4809      	ldr	r0, [pc, #36]	; (8001198 <MoveForward+0x58>)
 8001172:	f000 ff8f 	bl	8002094 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Engine_IN2_GPIO_Port, Engine_IN2_Pin, GPIO_PIN_RESET);
 8001176:	2200      	movs	r2, #0
 8001178:	2101      	movs	r1, #1
 800117a:	4806      	ldr	r0, [pc, #24]	; (8001194 <MoveForward+0x54>)
 800117c:	f000 ff8a 	bl	8002094 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Engine_IN4_GPIO_Port, Engine_IN4_Pin, GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2101      	movs	r1, #1
 8001184:	4804      	ldr	r0, [pc, #16]	; (8001198 <MoveForward+0x58>)
 8001186:	f000 ff85 	bl	8002094 <HAL_GPIO_WritePin>

    osDelay(1);
 800118a:	2001      	movs	r0, #1
 800118c:	f005 f819 	bl	80061c2 <osDelay>
    HAL_GPIO_WritePin(Engine_IN1_GPIO_Port, Engine_IN1_Pin, GPIO_PIN_SET);
 8001190:	e7e6      	b.n	8001160 <MoveForward+0x20>
 8001192:	bf00      	nop
 8001194:	48000400 	.word	0x48000400
 8001198:	48000800 	.word	0x48000800

0800119c <StopMoving>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StopMoving */
void StopMoving(void *argument)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StopMoving */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(Engine_IN1_GPIO_Port, Engine_IN1_Pin, GPIO_PIN_SET);
 80011a4:	2201      	movs	r2, #1
 80011a6:	2110      	movs	r1, #16
 80011a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ac:	f000 ff72 	bl	8002094 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Engine_IN3_GPIO_Port, Engine_IN3_Pin, GPIO_PIN_SET);
 80011b0:	2201      	movs	r2, #1
 80011b2:	2102      	movs	r1, #2
 80011b4:	4808      	ldr	r0, [pc, #32]	; (80011d8 <StopMoving+0x3c>)
 80011b6:	f000 ff6d 	bl	8002094 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Engine_IN2_GPIO_Port, Engine_IN2_Pin, GPIO_PIN_SET);
 80011ba:	2201      	movs	r2, #1
 80011bc:	2101      	movs	r1, #1
 80011be:	4807      	ldr	r0, [pc, #28]	; (80011dc <StopMoving+0x40>)
 80011c0:	f000 ff68 	bl	8002094 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Engine_IN4_GPIO_Port, Engine_IN4_Pin, GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	2101      	movs	r1, #1
 80011c8:	4803      	ldr	r0, [pc, #12]	; (80011d8 <StopMoving+0x3c>)
 80011ca:	f000 ff63 	bl	8002094 <HAL_GPIO_WritePin>
    osDelay(2000);
 80011ce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011d2:	f004 fff6 	bl	80061c2 <osDelay>
	HAL_GPIO_WritePin(Engine_IN1_GPIO_Port, Engine_IN1_Pin, GPIO_PIN_SET);
 80011d6:	e7e5      	b.n	80011a4 <StopMoving+0x8>
 80011d8:	48000800 	.word	0x48000800
 80011dc:	48000400 	.word	0x48000400

080011e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e6:	f107 030c 	add.w	r3, r7, #12
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f6:	4b32      	ldr	r3, [pc, #200]	; (80012c0 <MX_GPIO_Init+0xe0>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fa:	4a31      	ldr	r2, [pc, #196]	; (80012c0 <MX_GPIO_Init+0xe0>)
 80011fc:	f043 0304 	orr.w	r3, r3, #4
 8001200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001202:	4b2f      	ldr	r3, [pc, #188]	; (80012c0 <MX_GPIO_Init+0xe0>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001206:	f003 0304 	and.w	r3, r3, #4
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120e:	4b2c      	ldr	r3, [pc, #176]	; (80012c0 <MX_GPIO_Init+0xe0>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001212:	4a2b      	ldr	r2, [pc, #172]	; (80012c0 <MX_GPIO_Init+0xe0>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121a:	4b29      	ldr	r3, [pc, #164]	; (80012c0 <MX_GPIO_Init+0xe0>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001226:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <MX_GPIO_Init+0xe0>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122a:	4a25      	ldr	r2, [pc, #148]	; (80012c0 <MX_GPIO_Init+0xe0>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001232:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <MX_GPIO_Init+0xe0>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Engine_IN4_Pin|Engine_IN3_Pin, GPIO_PIN_RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	2103      	movs	r1, #3
 8001242:	4820      	ldr	r0, [pc, #128]	; (80012c4 <MX_GPIO_Init+0xe4>)
 8001244:	f000 ff26 	bl	8002094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Engine_IN1_Pin|LD2_Pin|Enable_A_Pin, GPIO_PIN_RESET);
 8001248:	2200      	movs	r2, #0
 800124a:	f44f 6186 	mov.w	r1, #1072	; 0x430
 800124e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001252:	f000 ff1f 	bl	8002094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Engine_IN2_Pin|Enable_B_Pin, GPIO_PIN_RESET);
 8001256:	2200      	movs	r2, #0
 8001258:	2109      	movs	r1, #9
 800125a:	481b      	ldr	r0, [pc, #108]	; (80012c8 <MX_GPIO_Init+0xe8>)
 800125c:	f000 ff1a 	bl	8002094 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Engine_IN4_Pin|Engine_IN3_Pin;
 8001260:	2303      	movs	r3, #3
 8001262:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001264:	2301      	movs	r3, #1
 8001266:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	2300      	movs	r3, #0
 800126e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	4619      	mov	r1, r3
 8001276:	4813      	ldr	r0, [pc, #76]	; (80012c4 <MX_GPIO_Init+0xe4>)
 8001278:	f000 fd62 	bl	8001d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Engine_IN1_Pin|LD2_Pin|Enable_A_Pin;
 800127c:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001280:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001282:	2301      	movs	r3, #1
 8001284:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	f107 030c 	add.w	r3, r7, #12
 8001292:	4619      	mov	r1, r3
 8001294:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001298:	f000 fd52 	bl	8001d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Engine_IN2_Pin|Enable_B_Pin;
 800129c:	2309      	movs	r3, #9
 800129e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a0:	2301      	movs	r3, #1
 80012a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ac:	f107 030c 	add.w	r3, r7, #12
 80012b0:	4619      	mov	r1, r3
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <MX_GPIO_Init+0xe8>)
 80012b4:	f000 fd44 	bl	8001d40 <HAL_GPIO_Init>

}
 80012b8:	bf00      	nop
 80012ba:	3720      	adds	r7, #32
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40021000 	.word	0x40021000
 80012c4:	48000800 	.word	0x48000800
 80012c8:	48000400 	.word	0x48000400

080012cc <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b0a      	cmp	r3, #10
 80012d8:	d109      	bne.n	80012ee <__io_putchar+0x22>
        uint8_t ch2 = '\r';
 80012da:	230d      	movs	r3, #13
 80012dc:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 80012de:	f107 010f 	add.w	r1, r7, #15
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295
 80012e6:	2201      	movs	r2, #1
 80012e8:	4807      	ldr	r0, [pc, #28]	; (8001308 <__io_putchar+0x3c>)
 80012ea:	f003 fffb 	bl	80052e4 <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80012ee:	1d39      	adds	r1, r7, #4
 80012f0:	f04f 33ff 	mov.w	r3, #4294967295
 80012f4:	2201      	movs	r2, #1
 80012f6:	4804      	ldr	r0, [pc, #16]	; (8001308 <__io_putchar+0x3c>)
 80012f8:	f003 fff4 	bl	80052e4 <HAL_UART_Transmit>
    return 1;
 80012fc:	2301      	movs	r3, #1
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200002e4 	.word	0x200002e4

0800130c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001310:	f000 fbfb 	bl	8001b0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001314:	f000 f80d 	bl	8001332 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001318:	f7ff ff62 	bl	80011e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800131c:	f000 fb40 	bl	80019a0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001320:	f000 fa16 	bl	8001750 <MX_TIM2_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001324:	f004 fe44 	bl	8005fb0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001328:	f7ff fdcc 	bl	8000ec4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800132c:	f004 fe64 	bl	8005ff8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001330:	e7fe      	b.n	8001330 <main+0x24>

08001332 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b096      	sub	sp, #88	; 0x58
 8001336:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	2244      	movs	r2, #68	; 0x44
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f008 fc20 	bl	8009b86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001346:	463b      	mov	r3, r7
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001354:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001358:	f000 fec2 	bl	80020e0 <HAL_PWREx_ControlVoltageScaling>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001362:	f000 f84b 	bl	80013fc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001366:	2310      	movs	r3, #16
 8001368:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800136a:	2301      	movs	r3, #1
 800136c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001372:	2360      	movs	r3, #96	; 0x60
 8001374:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001376:	2302      	movs	r3, #2
 8001378:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800137a:	2301      	movs	r3, #1
 800137c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800137e:	2301      	movs	r3, #1
 8001380:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001382:	2328      	movs	r3, #40	; 0x28
 8001384:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001386:	2307      	movs	r3, #7
 8001388:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800138a:	2302      	movs	r3, #2
 800138c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800138e:	2302      	movs	r3, #2
 8001390:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	4618      	mov	r0, r3
 8001398:	f000 fef8 	bl	800218c <HAL_RCC_OscConfig>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80013a2:	f000 f82b 	bl	80013fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a6:	230f      	movs	r3, #15
 80013a8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013aa:	2303      	movs	r3, #3
 80013ac:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013ba:	463b      	mov	r3, r7
 80013bc:	2104      	movs	r1, #4
 80013be:	4618      	mov	r0, r3
 80013c0:	f001 fac0 	bl	8002944 <HAL_RCC_ClockConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80013ca:	f000 f817 	bl	80013fc <Error_Handler>
  }
}
 80013ce:	bf00      	nop
 80013d0:	3758      	adds	r7, #88	; 0x58
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d101      	bne.n	80013ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013ea:	f000 fba7 	bl	8001b3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40001400 	.word	0x40001400

080013fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001400:	b672      	cpsid	i
}
 8001402:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001404:	e7fe      	b.n	8001404 <Error_Handler+0x8>
	...

08001408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <HAL_MspInit+0x4c>)
 8001410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001412:	4a10      	ldr	r2, [pc, #64]	; (8001454 <HAL_MspInit+0x4c>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6613      	str	r3, [r2, #96]	; 0x60
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <HAL_MspInit+0x4c>)
 800141c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001426:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <HAL_MspInit+0x4c>)
 8001428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142a:	4a0a      	ldr	r2, [pc, #40]	; (8001454 <HAL_MspInit+0x4c>)
 800142c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001430:	6593      	str	r3, [r2, #88]	; 0x58
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <HAL_MspInit+0x4c>)
 8001434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800143e:	2200      	movs	r2, #0
 8001440:	210f      	movs	r1, #15
 8001442:	f06f 0001 	mvn.w	r0, #1
 8001446:	f000 fc51 	bl	8001cec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40021000 	.word	0x40021000

08001458 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08e      	sub	sp, #56	; 0x38
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001460:	2300      	movs	r3, #0
 8001462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001466:	4b34      	ldr	r3, [pc, #208]	; (8001538 <HAL_InitTick+0xe0>)
 8001468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146a:	4a33      	ldr	r2, [pc, #204]	; (8001538 <HAL_InitTick+0xe0>)
 800146c:	f043 0320 	orr.w	r3, r3, #32
 8001470:	6593      	str	r3, [r2, #88]	; 0x58
 8001472:	4b31      	ldr	r3, [pc, #196]	; (8001538 <HAL_InitTick+0xe0>)
 8001474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001476:	f003 0320 	and.w	r3, r3, #32
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800147e:	f107 0210 	add.w	r2, r7, #16
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	4611      	mov	r1, r2
 8001488:	4618      	mov	r0, r3
 800148a:	f001 fc1f 	bl	8002ccc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800148e:	6a3b      	ldr	r3, [r7, #32]
 8001490:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001494:	2b00      	cmp	r3, #0
 8001496:	d103      	bne.n	80014a0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001498:	f001 fbec 	bl	8002c74 <HAL_RCC_GetPCLK1Freq>
 800149c:	6378      	str	r0, [r7, #52]	; 0x34
 800149e:	e004      	b.n	80014aa <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80014a0:	f001 fbe8 	bl	8002c74 <HAL_RCC_GetPCLK1Freq>
 80014a4:	4603      	mov	r3, r0
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ac:	4a23      	ldr	r2, [pc, #140]	; (800153c <HAL_InitTick+0xe4>)
 80014ae:	fba2 2303 	umull	r2, r3, r2, r3
 80014b2:	0c9b      	lsrs	r3, r3, #18
 80014b4:	3b01      	subs	r3, #1
 80014b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80014b8:	4b21      	ldr	r3, [pc, #132]	; (8001540 <HAL_InitTick+0xe8>)
 80014ba:	4a22      	ldr	r2, [pc, #136]	; (8001544 <HAL_InitTick+0xec>)
 80014bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80014be:	4b20      	ldr	r3, [pc, #128]	; (8001540 <HAL_InitTick+0xe8>)
 80014c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014c4:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80014c6:	4a1e      	ldr	r2, [pc, #120]	; (8001540 <HAL_InitTick+0xe8>)
 80014c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ca:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80014cc:	4b1c      	ldr	r3, [pc, #112]	; (8001540 <HAL_InitTick+0xe8>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d2:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <HAL_InitTick+0xe8>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d8:	4b19      	ldr	r3, [pc, #100]	; (8001540 <HAL_InitTick+0xe8>)
 80014da:	2200      	movs	r2, #0
 80014dc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 80014de:	4818      	ldr	r0, [pc, #96]	; (8001540 <HAL_InitTick+0xe8>)
 80014e0:	f002 f942 	bl	8003768 <HAL_TIM_Base_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80014ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d11b      	bne.n	800152a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80014f2:	4813      	ldr	r0, [pc, #76]	; (8001540 <HAL_InitTick+0xe8>)
 80014f4:	f002 f990 	bl	8003818 <HAL_TIM_Base_Start_IT>
 80014f8:	4603      	mov	r3, r0
 80014fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80014fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001502:	2b00      	cmp	r3, #0
 8001504:	d111      	bne.n	800152a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001506:	2037      	movs	r0, #55	; 0x37
 8001508:	f000 fc0c 	bl	8001d24 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b0f      	cmp	r3, #15
 8001510:	d808      	bhi.n	8001524 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001512:	2200      	movs	r2, #0
 8001514:	6879      	ldr	r1, [r7, #4]
 8001516:	2037      	movs	r0, #55	; 0x37
 8001518:	f000 fbe8 	bl	8001cec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800151c:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <HAL_InitTick+0xf0>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	e002      	b.n	800152a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800152a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800152e:	4618      	mov	r0, r3
 8001530:	3738      	adds	r7, #56	; 0x38
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40021000 	.word	0x40021000
 800153c:	431bde83 	.word	0x431bde83
 8001540:	20000248 	.word	0x20000248
 8001544:	40001400 	.word	0x40001400
 8001548:	20000004 	.word	0x20000004

0800154c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <NMI_Handler+0x4>

08001552 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001556:	e7fe      	b.n	8001556 <HardFault_Handler+0x4>

08001558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800155c:	e7fe      	b.n	800155c <MemManage_Handler+0x4>

0800155e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001562:	e7fe      	b.n	8001562 <BusFault_Handler+0x4>

08001564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001568:	e7fe      	b.n	8001568 <UsageFault_Handler+0x4>

0800156a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800157c:	4802      	ldr	r0, [pc, #8]	; (8001588 <TIM2_IRQHandler+0x10>)
 800157e:	f002 fc81 	bl	8003e84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000298 	.word	0x20000298

0800158c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001590:	4802      	ldr	r0, [pc, #8]	; (800159c <TIM7_IRQHandler+0x10>)
 8001592:	f002 fc77 	bl	8003e84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000248 	.word	0x20000248

080015a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return 1;
 80015a4:	2301      	movs	r3, #1
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <_kill>:

int _kill(int pid, int sig)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015ba:	f008 fb9f 	bl	8009cfc <__errno>
 80015be:	4603      	mov	r3, r0
 80015c0:	2216      	movs	r2, #22
 80015c2:	601a      	str	r2, [r3, #0]
  return -1;
 80015c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <_exit>:

void _exit (int status)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015d8:	f04f 31ff 	mov.w	r1, #4294967295
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff ffe7 	bl	80015b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015e2:	e7fe      	b.n	80015e2 <_exit+0x12>

080015e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	e00a      	b.n	800160c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015f6:	f3af 8000 	nop.w
 80015fa:	4601      	mov	r1, r0
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	1c5a      	adds	r2, r3, #1
 8001600:	60ba      	str	r2, [r7, #8]
 8001602:	b2ca      	uxtb	r2, r1
 8001604:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	3301      	adds	r3, #1
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	697a      	ldr	r2, [r7, #20]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	429a      	cmp	r2, r3
 8001612:	dbf0      	blt.n	80015f6 <_read+0x12>
  }

  return len;
 8001614:	687b      	ldr	r3, [r7, #4]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b086      	sub	sp, #24
 8001622:	af00      	add	r7, sp, #0
 8001624:	60f8      	str	r0, [r7, #12]
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	e009      	b.n	8001644 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	60ba      	str	r2, [r7, #8]
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fe47 	bl	80012cc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	3301      	adds	r3, #1
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	429a      	cmp	r2, r3
 800164a:	dbf1      	blt.n	8001630 <_write+0x12>
  }
  return len;
 800164c:	687b      	ldr	r3, [r7, #4]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <_close>:

int _close(int file)
{
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800165e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001662:	4618      	mov	r0, r3
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800167e:	605a      	str	r2, [r3, #4]
  return 0;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <_isatty>:

int _isatty(int file)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001696:	2301      	movs	r3, #1
}
 8001698:	4618      	mov	r0, r3
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c8:	4a14      	ldr	r2, [pc, #80]	; (800171c <_sbrk+0x5c>)
 80016ca:	4b15      	ldr	r3, [pc, #84]	; (8001720 <_sbrk+0x60>)
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d4:	4b13      	ldr	r3, [pc, #76]	; (8001724 <_sbrk+0x64>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d102      	bne.n	80016e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016dc:	4b11      	ldr	r3, [pc, #68]	; (8001724 <_sbrk+0x64>)
 80016de:	4a12      	ldr	r2, [pc, #72]	; (8001728 <_sbrk+0x68>)
 80016e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016e2:	4b10      	ldr	r3, [pc, #64]	; (8001724 <_sbrk+0x64>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d207      	bcs.n	8001700 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f0:	f008 fb04 	bl	8009cfc <__errno>
 80016f4:	4603      	mov	r3, r0
 80016f6:	220c      	movs	r2, #12
 80016f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016fa:	f04f 33ff 	mov.w	r3, #4294967295
 80016fe:	e009      	b.n	8001714 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <_sbrk+0x64>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001706:	4b07      	ldr	r3, [pc, #28]	; (8001724 <_sbrk+0x64>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	4a05      	ldr	r2, [pc, #20]	; (8001724 <_sbrk+0x64>)
 8001710:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001712:	68fb      	ldr	r3, [r7, #12]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20018000 	.word	0x20018000
 8001720:	00000400 	.word	0x00000400
 8001724:	20000294 	.word	0x20000294
 8001728:	200039d8 	.word	0x200039d8

0800172c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <SystemInit+0x20>)
 8001732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001736:	4a05      	ldr	r2, [pc, #20]	; (800174c <SystemInit+0x20>)
 8001738:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800173c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b092      	sub	sp, #72	; 0x48
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001756:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001764:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001770:	f107 031c 	add.w	r3, r7, #28
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800177e:	463b      	mov	r3, r7
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]
 800178c:	615a      	str	r2, [r3, #20]
 800178e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001790:	4b42      	ldr	r3, [pc, #264]	; (800189c <MX_TIM2_Init+0x14c>)
 8001792:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001796:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001798:	4b40      	ldr	r3, [pc, #256]	; (800189c <MX_TIM2_Init+0x14c>)
 800179a:	224f      	movs	r2, #79	; 0x4f
 800179c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179e:	4b3f      	ldr	r3, [pc, #252]	; (800189c <MX_TIM2_Init+0x14c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999999;
 80017a4:	4b3d      	ldr	r3, [pc, #244]	; (800189c <MX_TIM2_Init+0x14c>)
 80017a6:	4a3e      	ldr	r2, [pc, #248]	; (80018a0 <MX_TIM2_Init+0x150>)
 80017a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017aa:	4b3c      	ldr	r3, [pc, #240]	; (800189c <MX_TIM2_Init+0x14c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b0:	4b3a      	ldr	r3, [pc, #232]	; (800189c <MX_TIM2_Init+0x14c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017b6:	4839      	ldr	r0, [pc, #228]	; (800189c <MX_TIM2_Init+0x14c>)
 80017b8:	f001 ffd6 	bl	8003768 <HAL_TIM_Base_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80017c2:	f7ff fe1b 	bl	80013fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ca:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017d0:	4619      	mov	r1, r3
 80017d2:	4832      	ldr	r0, [pc, #200]	; (800189c <MX_TIM2_Init+0x14c>)
 80017d4:	f002 fe08 	bl	80043e8 <HAL_TIM_ConfigClockSource>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80017de:	f7ff fe0d 	bl	80013fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80017e2:	482e      	ldr	r0, [pc, #184]	; (800189c <MX_TIM2_Init+0x14c>)
 80017e4:	f002 f9f0 	bl	8003bc8 <HAL_TIM_IC_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80017ee:	f7ff fe05 	bl	80013fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80017f2:	482a      	ldr	r0, [pc, #168]	; (800189c <MX_TIM2_Init+0x14c>)
 80017f4:	f002 f880 	bl	80038f8 <HAL_TIM_PWM_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80017fe:	f7ff fdfd 	bl	80013fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001802:	2300      	movs	r3, #0
 8001804:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800180a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800180e:	4619      	mov	r1, r3
 8001810:	4822      	ldr	r0, [pc, #136]	; (800189c <MX_TIM2_Init+0x14c>)
 8001812:	f003 fc73 	bl	80050fc <HAL_TIMEx_MasterConfigSynchronization>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800181c:	f7ff fdee 	bl	80013fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001824:	2301      	movs	r3, #1
 8001826:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001828:	2300      	movs	r3, #0
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001830:	f107 031c 	add.w	r3, r7, #28
 8001834:	2200      	movs	r2, #0
 8001836:	4619      	mov	r1, r3
 8001838:	4818      	ldr	r0, [pc, #96]	; (800189c <MX_TIM2_Init+0x14c>)
 800183a:	f002 fc25 	bl	8004088 <HAL_TIM_IC_ConfigChannel>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 8001844:	f7ff fdda 	bl	80013fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001848:	2302      	movs	r3, #2
 800184a:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800184c:	2302      	movs	r3, #2
 800184e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001850:	f107 031c 	add.w	r3, r7, #28
 8001854:	2204      	movs	r2, #4
 8001856:	4619      	mov	r1, r3
 8001858:	4810      	ldr	r0, [pc, #64]	; (800189c <MX_TIM2_Init+0x14c>)
 800185a:	f002 fc15 	bl	8004088 <HAL_TIM_IC_ConfigChannel>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8001864:	f7ff fdca 	bl	80013fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001868:	2360      	movs	r3, #96	; 0x60
 800186a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 800186c:	230a      	movs	r3, #10
 800186e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001870:	2300      	movs	r3, #0
 8001872:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001878:	463b      	mov	r3, r7
 800187a:	2208      	movs	r2, #8
 800187c:	4619      	mov	r1, r3
 800187e:	4807      	ldr	r0, [pc, #28]	; (800189c <MX_TIM2_Init+0x14c>)
 8001880:	f002 fc9e 	bl	80041c0 <HAL_TIM_PWM_ConfigChannel>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM2_Init+0x13e>
  {
    Error_Handler();
 800188a:	f7ff fdb7 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800188e:	4803      	ldr	r0, [pc, #12]	; (800189c <MX_TIM2_Init+0x14c>)
 8001890:	f000 f850 	bl	8001934 <HAL_TIM_MspPostInit>

}
 8001894:	bf00      	nop
 8001896:	3748      	adds	r7, #72	; 0x48
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000298 	.word	0x20000298
 80018a0:	000f423f 	.word	0x000f423f

080018a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08a      	sub	sp, #40	; 0x28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018c4:	d130      	bne.n	8001928 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018c6:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <HAL_TIM_Base_MspInit+0x8c>)
 80018c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ca:	4a19      	ldr	r2, [pc, #100]	; (8001930 <HAL_TIM_Base_MspInit+0x8c>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6593      	str	r3, [r2, #88]	; 0x58
 80018d2:	4b17      	ldr	r3, [pc, #92]	; (8001930 <HAL_TIM_Base_MspInit+0x8c>)
 80018d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	613b      	str	r3, [r7, #16]
 80018dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018de:	4b14      	ldr	r3, [pc, #80]	; (8001930 <HAL_TIM_Base_MspInit+0x8c>)
 80018e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e2:	4a13      	ldr	r2, [pc, #76]	; (8001930 <HAL_TIM_Base_MspInit+0x8c>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ea:	4b11      	ldr	r3, [pc, #68]	; (8001930 <HAL_TIM_Base_MspInit+0x8c>)
 80018ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018f6:	2301      	movs	r3, #1
 80018f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fa:	2302      	movs	r3, #2
 80018fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	2300      	movs	r3, #0
 8001904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001906:	2301      	movs	r3, #1
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	4619      	mov	r1, r3
 8001910:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001914:	f000 fa14 	bl	8001d40 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001918:	2200      	movs	r2, #0
 800191a:	2105      	movs	r1, #5
 800191c:	201c      	movs	r0, #28
 800191e:	f000 f9e5 	bl	8001cec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001922:	201c      	movs	r0, #28
 8001924:	f000 f9fe 	bl	8001d24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001928:	bf00      	nop
 800192a:	3728      	adds	r7, #40	; 0x28
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40021000 	.word	0x40021000

08001934 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 030c 	add.w	r3, r7, #12
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001954:	d11c      	bne.n	8001990 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <HAL_TIM_MspPostInit+0x64>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195a:	4a0f      	ldr	r2, [pc, #60]	; (8001998 <HAL_TIM_MspPostInit+0x64>)
 800195c:	f043 0302 	orr.w	r3, r3, #2
 8001960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001962:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <HAL_TIM_MspPostInit+0x64>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800196e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001972:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001980:	2301      	movs	r3, #1
 8001982:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001984:	f107 030c 	add.w	r3, r7, #12
 8001988:	4619      	mov	r1, r3
 800198a:	4804      	ldr	r0, [pc, #16]	; (800199c <HAL_TIM_MspPostInit+0x68>)
 800198c:	f000 f9d8 	bl	8001d40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001990:	bf00      	nop
 8001992:	3720      	adds	r7, #32
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40021000 	.word	0x40021000
 800199c:	48000400 	.word	0x48000400

080019a0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019a4:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <MX_USART2_UART_Init+0x58>)
 80019a6:	4a15      	ldr	r2, [pc, #84]	; (80019fc <MX_USART2_UART_Init+0x5c>)
 80019a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019aa:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <MX_USART2_UART_Init+0x58>)
 80019ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019b2:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <MX_USART2_UART_Init+0x58>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019b8:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <MX_USART2_UART_Init+0x58>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <MX_USART2_UART_Init+0x58>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <MX_USART2_UART_Init+0x58>)
 80019c6:	220c      	movs	r2, #12
 80019c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ca:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <MX_USART2_UART_Init+0x58>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019d0:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <MX_USART2_UART_Init+0x58>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019d6:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <MX_USART2_UART_Init+0x58>)
 80019d8:	2200      	movs	r2, #0
 80019da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019dc:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <MX_USART2_UART_Init+0x58>)
 80019de:	2200      	movs	r2, #0
 80019e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019e2:	4805      	ldr	r0, [pc, #20]	; (80019f8 <MX_USART2_UART_Init+0x58>)
 80019e4:	f003 fc30 	bl	8005248 <HAL_UART_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019ee:	f7ff fd05 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	200002e4 	.word	0x200002e4
 80019fc:	40004400 	.word	0x40004400

08001a00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b0ac      	sub	sp, #176	; 0xb0
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	2288      	movs	r2, #136	; 0x88
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4618      	mov	r0, r3
 8001a22:	f008 f8b0 	bl	8009b86 <memset>
  if(uartHandle->Instance==USART2)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a21      	ldr	r2, [pc, #132]	; (8001ab0 <HAL_UART_MspInit+0xb0>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d13b      	bne.n	8001aa8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a30:	2302      	movs	r3, #2
 8001a32:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a34:	2300      	movs	r3, #0
 8001a36:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f001 f9d7 	bl	8002df0 <HAL_RCCEx_PeriphCLKConfig>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a48:	f7ff fcd8 	bl	80013fc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a4c:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <HAL_UART_MspInit+0xb4>)
 8001a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a50:	4a18      	ldr	r2, [pc, #96]	; (8001ab4 <HAL_UART_MspInit+0xb4>)
 8001a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a56:	6593      	str	r3, [r2, #88]	; 0x58
 8001a58:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <HAL_UART_MspInit+0xb4>)
 8001a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a60:	613b      	str	r3, [r7, #16]
 8001a62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a64:	4b13      	ldr	r3, [pc, #76]	; (8001ab4 <HAL_UART_MspInit+0xb4>)
 8001a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a68:	4a12      	ldr	r2, [pc, #72]	; (8001ab4 <HAL_UART_MspInit+0xb4>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a70:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <HAL_UART_MspInit+0xb4>)
 8001a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a7c:	230c      	movs	r3, #12
 8001a7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a94:	2307      	movs	r3, #7
 8001a96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa4:	f000 f94c 	bl	8001d40 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001aa8:	bf00      	nop
 8001aaa:	37b0      	adds	r7, #176	; 0xb0
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40004400 	.word	0x40004400
 8001ab4:	40021000 	.word	0x40021000

08001ab8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ab8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001af0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001abc:	f7ff fe36 	bl	800172c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ac0:	480c      	ldr	r0, [pc, #48]	; (8001af4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ac2:	490d      	ldr	r1, [pc, #52]	; (8001af8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ac4:	4a0d      	ldr	r2, [pc, #52]	; (8001afc <LoopForever+0xe>)
  movs r3, #0
 8001ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac8:	e002      	b.n	8001ad0 <LoopCopyDataInit>

08001aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ace:	3304      	adds	r3, #4

08001ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad4:	d3f9      	bcc.n	8001aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ad6:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ad8:	4c0a      	ldr	r4, [pc, #40]	; (8001b04 <LoopForever+0x16>)
  movs r3, #0
 8001ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001adc:	e001      	b.n	8001ae2 <LoopFillZerobss>

08001ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae0:	3204      	adds	r2, #4

08001ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae4:	d3fb      	bcc.n	8001ade <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ae6:	f008 f90f 	bl	8009d08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aea:	f7ff fc0f 	bl	800130c <main>

08001aee <LoopForever>:

LoopForever:
    b LoopForever
 8001aee:	e7fe      	b.n	8001aee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001af0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001afc:	0800c0a4 	.word	0x0800c0a4
  ldr r2, =_sbss
 8001b00:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001b04:	200039d4 	.word	0x200039d4

08001b08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b08:	e7fe      	b.n	8001b08 <ADC1_2_IRQHandler>

08001b0a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b14:	2003      	movs	r0, #3
 8001b16:	f000 f8de 	bl	8001cd6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b1a:	200f      	movs	r0, #15
 8001b1c:	f7ff fc9c 	bl	8001458 <HAL_InitTick>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d002      	beq.n	8001b2c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	71fb      	strb	r3, [r7, #7]
 8001b2a:	e001      	b.n	8001b30 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b2c:	f7ff fc6c 	bl	8001408 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b30:	79fb      	ldrb	r3, [r7, #7]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_IncTick+0x20>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_IncTick+0x24>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <HAL_IncTick+0x24>)
 8001b4e:	6013      	str	r3, [r2, #0]
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	20000008 	.word	0x20000008
 8001b60:	2000036c 	.word	0x2000036c

08001b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return uwTick;
 8001b68:	4b03      	ldr	r3, [pc, #12]	; (8001b78 <HAL_GetTick+0x14>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	2000036c 	.word	0x2000036c

08001b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bae:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	60d3      	str	r3, [r2, #12]
}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc8:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <__NVIC_GetPriorityGrouping+0x18>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	f003 0307 	and.w	r3, r3, #7
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	db0b      	blt.n	8001c0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	f003 021f 	and.w	r2, r3, #31
 8001bf8:	4907      	ldr	r1, [pc, #28]	; (8001c18 <__NVIC_EnableIRQ+0x38>)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	095b      	lsrs	r3, r3, #5
 8001c00:	2001      	movs	r0, #1
 8001c02:	fa00 f202 	lsl.w	r2, r0, r2
 8001c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000e100 	.word	0xe000e100

08001c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	6039      	str	r1, [r7, #0]
 8001c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	db0a      	blt.n	8001c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	490c      	ldr	r1, [pc, #48]	; (8001c68 <__NVIC_SetPriority+0x4c>)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	0112      	lsls	r2, r2, #4
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	440b      	add	r3, r1
 8001c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c44:	e00a      	b.n	8001c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	4908      	ldr	r1, [pc, #32]	; (8001c6c <__NVIC_SetPriority+0x50>)
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	3b04      	subs	r3, #4
 8001c54:	0112      	lsls	r2, r2, #4
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	440b      	add	r3, r1
 8001c5a:	761a      	strb	r2, [r3, #24]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000e100 	.word	0xe000e100
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b089      	sub	sp, #36	; 0x24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f1c3 0307 	rsb	r3, r3, #7
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	bf28      	it	cs
 8001c8e:	2304      	movcs	r3, #4
 8001c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3304      	adds	r3, #4
 8001c96:	2b06      	cmp	r3, #6
 8001c98:	d902      	bls.n	8001ca0 <NVIC_EncodePriority+0x30>
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3b03      	subs	r3, #3
 8001c9e:	e000      	b.n	8001ca2 <NVIC_EncodePriority+0x32>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc2:	43d9      	mvns	r1, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc8:	4313      	orrs	r3, r2
         );
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3724      	adds	r7, #36	; 0x24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7ff ff4c 	bl	8001b7c <__NVIC_SetPriorityGrouping>
}
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cfe:	f7ff ff61 	bl	8001bc4 <__NVIC_GetPriorityGrouping>
 8001d02:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	68b9      	ldr	r1, [r7, #8]
 8001d08:	6978      	ldr	r0, [r7, #20]
 8001d0a:	f7ff ffb1 	bl	8001c70 <NVIC_EncodePriority>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d14:	4611      	mov	r1, r2
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff ff80 	bl	8001c1c <__NVIC_SetPriority>
}
 8001d1c:	bf00      	nop
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff ff54 	bl	8001be0 <__NVIC_EnableIRQ>
}
 8001d38:	bf00      	nop
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b087      	sub	sp, #28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d4e:	e17f      	b.n	8002050 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	2101      	movs	r1, #1
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 8171 	beq.w	800204a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 0303 	and.w	r3, r3, #3
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d005      	beq.n	8001d80 <HAL_GPIO_Init+0x40>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d130      	bne.n	8001de2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	2203      	movs	r2, #3
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4013      	ands	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	68da      	ldr	r2, [r3, #12]
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001db6:	2201      	movs	r2, #1
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	091b      	lsrs	r3, r3, #4
 8001dcc:	f003 0201 	and.w	r2, r3, #1
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	2b03      	cmp	r3, #3
 8001dec:	d118      	bne.n	8001e20 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001df4:	2201      	movs	r2, #1
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	08db      	lsrs	r3, r3, #3
 8001e0a:	f003 0201 	and.w	r2, r3, #1
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	2b03      	cmp	r3, #3
 8001e2a:	d017      	beq.n	8001e5c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	2203      	movs	r2, #3
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4013      	ands	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 0303 	and.w	r3, r3, #3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d123      	bne.n	8001eb0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	08da      	lsrs	r2, r3, #3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3208      	adds	r2, #8
 8001e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e74:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	220f      	movs	r2, #15
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	691a      	ldr	r2, [r3, #16]
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	08da      	lsrs	r2, r3, #3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3208      	adds	r2, #8
 8001eaa:	6939      	ldr	r1, [r7, #16]
 8001eac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	2203      	movs	r2, #3
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 0203 	and.w	r2, r3, #3
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 80ac 	beq.w	800204a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef2:	4b5f      	ldr	r3, [pc, #380]	; (8002070 <HAL_GPIO_Init+0x330>)
 8001ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ef6:	4a5e      	ldr	r2, [pc, #376]	; (8002070 <HAL_GPIO_Init+0x330>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	6613      	str	r3, [r2, #96]	; 0x60
 8001efe:	4b5c      	ldr	r3, [pc, #368]	; (8002070 <HAL_GPIO_Init+0x330>)
 8001f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f0a:	4a5a      	ldr	r2, [pc, #360]	; (8002074 <HAL_GPIO_Init+0x334>)
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	089b      	lsrs	r3, r3, #2
 8001f10:	3302      	adds	r3, #2
 8001f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f16:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	220f      	movs	r2, #15
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43db      	mvns	r3, r3
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f34:	d025      	beq.n	8001f82 <HAL_GPIO_Init+0x242>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a4f      	ldr	r2, [pc, #316]	; (8002078 <HAL_GPIO_Init+0x338>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d01f      	beq.n	8001f7e <HAL_GPIO_Init+0x23e>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a4e      	ldr	r2, [pc, #312]	; (800207c <HAL_GPIO_Init+0x33c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d019      	beq.n	8001f7a <HAL_GPIO_Init+0x23a>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a4d      	ldr	r2, [pc, #308]	; (8002080 <HAL_GPIO_Init+0x340>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d013      	beq.n	8001f76 <HAL_GPIO_Init+0x236>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a4c      	ldr	r2, [pc, #304]	; (8002084 <HAL_GPIO_Init+0x344>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d00d      	beq.n	8001f72 <HAL_GPIO_Init+0x232>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a4b      	ldr	r2, [pc, #300]	; (8002088 <HAL_GPIO_Init+0x348>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d007      	beq.n	8001f6e <HAL_GPIO_Init+0x22e>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a4a      	ldr	r2, [pc, #296]	; (800208c <HAL_GPIO_Init+0x34c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d101      	bne.n	8001f6a <HAL_GPIO_Init+0x22a>
 8001f66:	2306      	movs	r3, #6
 8001f68:	e00c      	b.n	8001f84 <HAL_GPIO_Init+0x244>
 8001f6a:	2307      	movs	r3, #7
 8001f6c:	e00a      	b.n	8001f84 <HAL_GPIO_Init+0x244>
 8001f6e:	2305      	movs	r3, #5
 8001f70:	e008      	b.n	8001f84 <HAL_GPIO_Init+0x244>
 8001f72:	2304      	movs	r3, #4
 8001f74:	e006      	b.n	8001f84 <HAL_GPIO_Init+0x244>
 8001f76:	2303      	movs	r3, #3
 8001f78:	e004      	b.n	8001f84 <HAL_GPIO_Init+0x244>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e002      	b.n	8001f84 <HAL_GPIO_Init+0x244>
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e000      	b.n	8001f84 <HAL_GPIO_Init+0x244>
 8001f82:	2300      	movs	r3, #0
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	f002 0203 	and.w	r2, r2, #3
 8001f8a:	0092      	lsls	r2, r2, #2
 8001f8c:	4093      	lsls	r3, r2
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f94:	4937      	ldr	r1, [pc, #220]	; (8002074 <HAL_GPIO_Init+0x334>)
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	089b      	lsrs	r3, r3, #2
 8001f9a:	3302      	adds	r3, #2
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fa2:	4b3b      	ldr	r3, [pc, #236]	; (8002090 <HAL_GPIO_Init+0x350>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	43db      	mvns	r3, r3
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fc6:	4a32      	ldr	r2, [pc, #200]	; (8002090 <HAL_GPIO_Init+0x350>)
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fcc:	4b30      	ldr	r3, [pc, #192]	; (8002090 <HAL_GPIO_Init+0x350>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ff0:	4a27      	ldr	r2, [pc, #156]	; (8002090 <HAL_GPIO_Init+0x350>)
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ff6:	4b26      	ldr	r3, [pc, #152]	; (8002090 <HAL_GPIO_Init+0x350>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	4013      	ands	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4313      	orrs	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800201a:	4a1d      	ldr	r2, [pc, #116]	; (8002090 <HAL_GPIO_Init+0x350>)
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002020:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <HAL_GPIO_Init+0x350>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	43db      	mvns	r3, r3
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	4013      	ands	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	4313      	orrs	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002044:	4a12      	ldr	r2, [pc, #72]	; (8002090 <HAL_GPIO_Init+0x350>)
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	3301      	adds	r3, #1
 800204e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	fa22 f303 	lsr.w	r3, r2, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	f47f ae78 	bne.w	8001d50 <HAL_GPIO_Init+0x10>
  }
}
 8002060:	bf00      	nop
 8002062:	bf00      	nop
 8002064:	371c      	adds	r7, #28
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40021000 	.word	0x40021000
 8002074:	40010000 	.word	0x40010000
 8002078:	48000400 	.word	0x48000400
 800207c:	48000800 	.word	0x48000800
 8002080:	48000c00 	.word	0x48000c00
 8002084:	48001000 	.word	0x48001000
 8002088:	48001400 	.word	0x48001400
 800208c:	48001800 	.word	0x48001800
 8002090:	40010400 	.word	0x40010400

08002094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	807b      	strh	r3, [r7, #2]
 80020a0:	4613      	mov	r3, r2
 80020a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020a4:	787b      	ldrb	r3, [r7, #1]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020aa:	887a      	ldrh	r2, [r7, #2]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020b0:	e002      	b.n	80020b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020b2:	887a      	ldrh	r2, [r7, #2]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80020c8:	4b04      	ldr	r3, [pc, #16]	; (80020dc <HAL_PWREx_GetVoltageRange+0x18>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40007000 	.word	0x40007000

080020e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020ee:	d130      	bne.n	8002152 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80020f0:	4b23      	ldr	r3, [pc, #140]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020fc:	d038      	beq.n	8002170 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020fe:	4b20      	ldr	r3, [pc, #128]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002106:	4a1e      	ldr	r2, [pc, #120]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002108:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800210c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800210e:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2232      	movs	r2, #50	; 0x32
 8002114:	fb02 f303 	mul.w	r3, r2, r3
 8002118:	4a1b      	ldr	r2, [pc, #108]	; (8002188 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	0c9b      	lsrs	r3, r3, #18
 8002120:	3301      	adds	r3, #1
 8002122:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002124:	e002      	b.n	800212c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	3b01      	subs	r3, #1
 800212a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800212c:	4b14      	ldr	r3, [pc, #80]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002138:	d102      	bne.n	8002140 <HAL_PWREx_ControlVoltageScaling+0x60>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1f2      	bne.n	8002126 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002140:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800214c:	d110      	bne.n	8002170 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e00f      	b.n	8002172 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002152:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800215a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800215e:	d007      	beq.n	8002170 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002160:	4b07      	ldr	r3, [pc, #28]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002168:	4a05      	ldr	r2, [pc, #20]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800216a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800216e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40007000 	.word	0x40007000
 8002184:	20000000 	.word	0x20000000
 8002188:	431bde83 	.word	0x431bde83

0800218c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e3ca      	b.n	8002934 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800219e:	4b97      	ldr	r3, [pc, #604]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 030c 	and.w	r3, r3, #12
 80021a6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021a8:	4b94      	ldr	r3, [pc, #592]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0310 	and.w	r3, r3, #16
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 80e4 	beq.w	8002388 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d007      	beq.n	80021d6 <HAL_RCC_OscConfig+0x4a>
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	2b0c      	cmp	r3, #12
 80021ca:	f040 808b 	bne.w	80022e4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	f040 8087 	bne.w	80022e4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021d6:	4b89      	ldr	r3, [pc, #548]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d005      	beq.n	80021ee <HAL_RCC_OscConfig+0x62>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e3a2      	b.n	8002934 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a1a      	ldr	r2, [r3, #32]
 80021f2:	4b82      	ldr	r3, [pc, #520]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d004      	beq.n	8002208 <HAL_RCC_OscConfig+0x7c>
 80021fe:	4b7f      	ldr	r3, [pc, #508]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002206:	e005      	b.n	8002214 <HAL_RCC_OscConfig+0x88>
 8002208:	4b7c      	ldr	r3, [pc, #496]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 800220a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800220e:	091b      	lsrs	r3, r3, #4
 8002210:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002214:	4293      	cmp	r3, r2
 8002216:	d223      	bcs.n	8002260 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	4618      	mov	r0, r3
 800221e:	f000 fd87 	bl	8002d30 <RCC_SetFlashLatencyFromMSIRange>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e383      	b.n	8002934 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800222c:	4b73      	ldr	r3, [pc, #460]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a72      	ldr	r2, [pc, #456]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 8002232:	f043 0308 	orr.w	r3, r3, #8
 8002236:	6013      	str	r3, [r2, #0]
 8002238:	4b70      	ldr	r3, [pc, #448]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	496d      	ldr	r1, [pc, #436]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 8002246:	4313      	orrs	r3, r2
 8002248:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800224a:	4b6c      	ldr	r3, [pc, #432]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	021b      	lsls	r3, r3, #8
 8002258:	4968      	ldr	r1, [pc, #416]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 800225a:	4313      	orrs	r3, r2
 800225c:	604b      	str	r3, [r1, #4]
 800225e:	e025      	b.n	80022ac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002260:	4b66      	ldr	r3, [pc, #408]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a65      	ldr	r2, [pc, #404]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 8002266:	f043 0308 	orr.w	r3, r3, #8
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	4b63      	ldr	r3, [pc, #396]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	4960      	ldr	r1, [pc, #384]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 800227a:	4313      	orrs	r3, r2
 800227c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800227e:	4b5f      	ldr	r3, [pc, #380]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	021b      	lsls	r3, r3, #8
 800228c:	495b      	ldr	r1, [pc, #364]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 800228e:	4313      	orrs	r3, r2
 8002290:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d109      	bne.n	80022ac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	4618      	mov	r0, r3
 800229e:	f000 fd47 	bl	8002d30 <RCC_SetFlashLatencyFromMSIRange>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e343      	b.n	8002934 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022ac:	f000 fc4a 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 80022b0:	4602      	mov	r2, r0
 80022b2:	4b52      	ldr	r3, [pc, #328]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	091b      	lsrs	r3, r3, #4
 80022b8:	f003 030f 	and.w	r3, r3, #15
 80022bc:	4950      	ldr	r1, [pc, #320]	; (8002400 <HAL_RCC_OscConfig+0x274>)
 80022be:	5ccb      	ldrb	r3, [r1, r3]
 80022c0:	f003 031f 	and.w	r3, r3, #31
 80022c4:	fa22 f303 	lsr.w	r3, r2, r3
 80022c8:	4a4e      	ldr	r2, [pc, #312]	; (8002404 <HAL_RCC_OscConfig+0x278>)
 80022ca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80022cc:	4b4e      	ldr	r3, [pc, #312]	; (8002408 <HAL_RCC_OscConfig+0x27c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff f8c1 	bl	8001458 <HAL_InitTick>
 80022d6:	4603      	mov	r3, r0
 80022d8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80022da:	7bfb      	ldrb	r3, [r7, #15]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d052      	beq.n	8002386 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
 80022e2:	e327      	b.n	8002934 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d032      	beq.n	8002352 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022ec:	4b43      	ldr	r3, [pc, #268]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a42      	ldr	r2, [pc, #264]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022f8:	f7ff fc34 	bl	8001b64 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002300:	f7ff fc30 	bl	8001b64 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e310      	b.n	8002934 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002312:	4b3a      	ldr	r3, [pc, #232]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0f0      	beq.n	8002300 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800231e:	4b37      	ldr	r3, [pc, #220]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a36      	ldr	r2, [pc, #216]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 8002324:	f043 0308 	orr.w	r3, r3, #8
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	4b34      	ldr	r3, [pc, #208]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	4931      	ldr	r1, [pc, #196]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 8002338:	4313      	orrs	r3, r2
 800233a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800233c:	4b2f      	ldr	r3, [pc, #188]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	021b      	lsls	r3, r3, #8
 800234a:	492c      	ldr	r1, [pc, #176]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 800234c:	4313      	orrs	r3, r2
 800234e:	604b      	str	r3, [r1, #4]
 8002350:	e01a      	b.n	8002388 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002352:	4b2a      	ldr	r3, [pc, #168]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a29      	ldr	r2, [pc, #164]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 8002358:	f023 0301 	bic.w	r3, r3, #1
 800235c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800235e:	f7ff fc01 	bl	8001b64 <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002364:	e008      	b.n	8002378 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002366:	f7ff fbfd 	bl	8001b64 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e2dd      	b.n	8002934 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002378:	4b20      	ldr	r3, [pc, #128]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1f0      	bne.n	8002366 <HAL_RCC_OscConfig+0x1da>
 8002384:	e000      	b.n	8002388 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002386:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b00      	cmp	r3, #0
 8002392:	d074      	beq.n	800247e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	2b08      	cmp	r3, #8
 8002398:	d005      	beq.n	80023a6 <HAL_RCC_OscConfig+0x21a>
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	2b0c      	cmp	r3, #12
 800239e:	d10e      	bne.n	80023be <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d10b      	bne.n	80023be <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a6:	4b15      	ldr	r3, [pc, #84]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d064      	beq.n	800247c <HAL_RCC_OscConfig+0x2f0>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d160      	bne.n	800247c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e2ba      	b.n	8002934 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c6:	d106      	bne.n	80023d6 <HAL_RCC_OscConfig+0x24a>
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a0b      	ldr	r2, [pc, #44]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 80023ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d2:	6013      	str	r3, [r2, #0]
 80023d4:	e026      	b.n	8002424 <HAL_RCC_OscConfig+0x298>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023de:	d115      	bne.n	800240c <HAL_RCC_OscConfig+0x280>
 80023e0:	4b06      	ldr	r3, [pc, #24]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a05      	ldr	r2, [pc, #20]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 80023e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023ea:	6013      	str	r3, [r2, #0]
 80023ec:	4b03      	ldr	r3, [pc, #12]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a02      	ldr	r2, [pc, #8]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 80023f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f6:	6013      	str	r3, [r2, #0]
 80023f8:	e014      	b.n	8002424 <HAL_RCC_OscConfig+0x298>
 80023fa:	bf00      	nop
 80023fc:	40021000 	.word	0x40021000
 8002400:	0800bcd8 	.word	0x0800bcd8
 8002404:	20000000 	.word	0x20000000
 8002408:	20000004 	.word	0x20000004
 800240c:	4ba0      	ldr	r3, [pc, #640]	; (8002690 <HAL_RCC_OscConfig+0x504>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a9f      	ldr	r2, [pc, #636]	; (8002690 <HAL_RCC_OscConfig+0x504>)
 8002412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002416:	6013      	str	r3, [r2, #0]
 8002418:	4b9d      	ldr	r3, [pc, #628]	; (8002690 <HAL_RCC_OscConfig+0x504>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a9c      	ldr	r2, [pc, #624]	; (8002690 <HAL_RCC_OscConfig+0x504>)
 800241e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d013      	beq.n	8002454 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242c:	f7ff fb9a 	bl	8001b64 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002434:	f7ff fb96 	bl	8001b64 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b64      	cmp	r3, #100	; 0x64
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e276      	b.n	8002934 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002446:	4b92      	ldr	r3, [pc, #584]	; (8002690 <HAL_RCC_OscConfig+0x504>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f0      	beq.n	8002434 <HAL_RCC_OscConfig+0x2a8>
 8002452:	e014      	b.n	800247e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002454:	f7ff fb86 	bl	8001b64 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800245c:	f7ff fb82 	bl	8001b64 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b64      	cmp	r3, #100	; 0x64
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e262      	b.n	8002934 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800246e:	4b88      	ldr	r3, [pc, #544]	; (8002690 <HAL_RCC_OscConfig+0x504>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f0      	bne.n	800245c <HAL_RCC_OscConfig+0x2d0>
 800247a:	e000      	b.n	800247e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800247c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d060      	beq.n	800254c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	2b04      	cmp	r3, #4
 800248e:	d005      	beq.n	800249c <HAL_RCC_OscConfig+0x310>
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	2b0c      	cmp	r3, #12
 8002494:	d119      	bne.n	80024ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	2b02      	cmp	r3, #2
 800249a:	d116      	bne.n	80024ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800249c:	4b7c      	ldr	r3, [pc, #496]	; (8002690 <HAL_RCC_OscConfig+0x504>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d005      	beq.n	80024b4 <HAL_RCC_OscConfig+0x328>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e23f      	b.n	8002934 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b4:	4b76      	ldr	r3, [pc, #472]	; (8002690 <HAL_RCC_OscConfig+0x504>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	061b      	lsls	r3, r3, #24
 80024c2:	4973      	ldr	r1, [pc, #460]	; (8002690 <HAL_RCC_OscConfig+0x504>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024c8:	e040      	b.n	800254c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d023      	beq.n	800251a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024d2:	4b6f      	ldr	r3, [pc, #444]	; (8002690 <HAL_RCC_OscConfig+0x504>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a6e      	ldr	r2, [pc, #440]	; (8002690 <HAL_RCC_OscConfig+0x504>)
 80024d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024de:	f7ff fb41 	bl	8001b64 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e6:	f7ff fb3d 	bl	8001b64 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e21d      	b.n	8002934 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024f8:	4b65      	ldr	r3, [pc, #404]	; (8002690 <HAL_RCC_OscConfig+0x504>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0f0      	beq.n	80024e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002504:	4b62      	ldr	r3, [pc, #392]	; (8002690 <HAL_RCC_OscConfig+0x504>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	061b      	lsls	r3, r3, #24
 8002512:	495f      	ldr	r1, [pc, #380]	; (8002690 <HAL_RCC_OscConfig+0x504>)
 8002514:	4313      	orrs	r3, r2
 8002516:	604b      	str	r3, [r1, #4]
 8002518:	e018      	b.n	800254c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800251a:	4b5d      	ldr	r3, [pc, #372]	; (8002690 <HAL_RCC_OscConfig+0x504>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a5c      	ldr	r2, [pc, #368]	; (8002690 <HAL_RCC_OscConfig+0x504>)
 8002520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002524:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002526:	f7ff fb1d 	bl	8001b64 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800252e:	f7ff fb19 	bl	8001b64 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e1f9      	b.n	8002934 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002540:	4b53      	ldr	r3, [pc, #332]	; (8002690 <HAL_RCC_OscConfig+0x504>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1f0      	bne.n	800252e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	2b00      	cmp	r3, #0
 8002556:	d03c      	beq.n	80025d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d01c      	beq.n	800259a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002560:	4b4b      	ldr	r3, [pc, #300]	; (8002690 <HAL_RCC_OscConfig+0x504>)
 8002562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002566:	4a4a      	ldr	r2, [pc, #296]	; (8002690 <HAL_RCC_OscConfig+0x504>)
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002570:	f7ff faf8 	bl	8001b64 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002578:	f7ff faf4 	bl	8001b64 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e1d4      	b.n	8002934 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800258a:	4b41      	ldr	r3, [pc, #260]	; (8002690 <HAL_RCC_OscConfig+0x504>)
 800258c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0ef      	beq.n	8002578 <HAL_RCC_OscConfig+0x3ec>
 8002598:	e01b      	b.n	80025d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800259a:	4b3d      	ldr	r3, [pc, #244]	; (8002690 <HAL_RCC_OscConfig+0x504>)
 800259c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025a0:	4a3b      	ldr	r2, [pc, #236]	; (8002690 <HAL_RCC_OscConfig+0x504>)
 80025a2:	f023 0301 	bic.w	r3, r3, #1
 80025a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025aa:	f7ff fadb 	bl	8001b64 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b2:	f7ff fad7 	bl	8001b64 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e1b7      	b.n	8002934 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025c4:	4b32      	ldr	r3, [pc, #200]	; (8002690 <HAL_RCC_OscConfig+0x504>)
 80025c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1ef      	bne.n	80025b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0304 	and.w	r3, r3, #4
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 80a6 	beq.w	800272c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025e0:	2300      	movs	r3, #0
 80025e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80025e4:	4b2a      	ldr	r3, [pc, #168]	; (8002690 <HAL_RCC_OscConfig+0x504>)
 80025e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10d      	bne.n	800260c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025f0:	4b27      	ldr	r3, [pc, #156]	; (8002690 <HAL_RCC_OscConfig+0x504>)
 80025f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f4:	4a26      	ldr	r2, [pc, #152]	; (8002690 <HAL_RCC_OscConfig+0x504>)
 80025f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025fa:	6593      	str	r3, [r2, #88]	; 0x58
 80025fc:	4b24      	ldr	r3, [pc, #144]	; (8002690 <HAL_RCC_OscConfig+0x504>)
 80025fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002608:	2301      	movs	r3, #1
 800260a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800260c:	4b21      	ldr	r3, [pc, #132]	; (8002694 <HAL_RCC_OscConfig+0x508>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002614:	2b00      	cmp	r3, #0
 8002616:	d118      	bne.n	800264a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002618:	4b1e      	ldr	r3, [pc, #120]	; (8002694 <HAL_RCC_OscConfig+0x508>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a1d      	ldr	r2, [pc, #116]	; (8002694 <HAL_RCC_OscConfig+0x508>)
 800261e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002622:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002624:	f7ff fa9e 	bl	8001b64 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800262c:	f7ff fa9a 	bl	8001b64 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e17a      	b.n	8002934 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800263e:	4b15      	ldr	r3, [pc, #84]	; (8002694 <HAL_RCC_OscConfig+0x508>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0f0      	beq.n	800262c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d108      	bne.n	8002664 <HAL_RCC_OscConfig+0x4d8>
 8002652:	4b0f      	ldr	r3, [pc, #60]	; (8002690 <HAL_RCC_OscConfig+0x504>)
 8002654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002658:	4a0d      	ldr	r2, [pc, #52]	; (8002690 <HAL_RCC_OscConfig+0x504>)
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002662:	e029      	b.n	80026b8 <HAL_RCC_OscConfig+0x52c>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2b05      	cmp	r3, #5
 800266a:	d115      	bne.n	8002698 <HAL_RCC_OscConfig+0x50c>
 800266c:	4b08      	ldr	r3, [pc, #32]	; (8002690 <HAL_RCC_OscConfig+0x504>)
 800266e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002672:	4a07      	ldr	r2, [pc, #28]	; (8002690 <HAL_RCC_OscConfig+0x504>)
 8002674:	f043 0304 	orr.w	r3, r3, #4
 8002678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800267c:	4b04      	ldr	r3, [pc, #16]	; (8002690 <HAL_RCC_OscConfig+0x504>)
 800267e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002682:	4a03      	ldr	r2, [pc, #12]	; (8002690 <HAL_RCC_OscConfig+0x504>)
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800268c:	e014      	b.n	80026b8 <HAL_RCC_OscConfig+0x52c>
 800268e:	bf00      	nop
 8002690:	40021000 	.word	0x40021000
 8002694:	40007000 	.word	0x40007000
 8002698:	4b9c      	ldr	r3, [pc, #624]	; (800290c <HAL_RCC_OscConfig+0x780>)
 800269a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269e:	4a9b      	ldr	r2, [pc, #620]	; (800290c <HAL_RCC_OscConfig+0x780>)
 80026a0:	f023 0301 	bic.w	r3, r3, #1
 80026a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026a8:	4b98      	ldr	r3, [pc, #608]	; (800290c <HAL_RCC_OscConfig+0x780>)
 80026aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ae:	4a97      	ldr	r2, [pc, #604]	; (800290c <HAL_RCC_OscConfig+0x780>)
 80026b0:	f023 0304 	bic.w	r3, r3, #4
 80026b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d016      	beq.n	80026ee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c0:	f7ff fa50 	bl	8001b64 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026c6:	e00a      	b.n	80026de <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c8:	f7ff fa4c 	bl	8001b64 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e12a      	b.n	8002934 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026de:	4b8b      	ldr	r3, [pc, #556]	; (800290c <HAL_RCC_OscConfig+0x780>)
 80026e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0ed      	beq.n	80026c8 <HAL_RCC_OscConfig+0x53c>
 80026ec:	e015      	b.n	800271a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ee:	f7ff fa39 	bl	8001b64 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026f4:	e00a      	b.n	800270c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f6:	f7ff fa35 	bl	8001b64 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	f241 3288 	movw	r2, #5000	; 0x1388
 8002704:	4293      	cmp	r3, r2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e113      	b.n	8002934 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800270c:	4b7f      	ldr	r3, [pc, #508]	; (800290c <HAL_RCC_OscConfig+0x780>)
 800270e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1ed      	bne.n	80026f6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800271a:	7ffb      	ldrb	r3, [r7, #31]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d105      	bne.n	800272c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002720:	4b7a      	ldr	r3, [pc, #488]	; (800290c <HAL_RCC_OscConfig+0x780>)
 8002722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002724:	4a79      	ldr	r2, [pc, #484]	; (800290c <HAL_RCC_OscConfig+0x780>)
 8002726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800272a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 80fe 	beq.w	8002932 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273a:	2b02      	cmp	r3, #2
 800273c:	f040 80d0 	bne.w	80028e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002740:	4b72      	ldr	r3, [pc, #456]	; (800290c <HAL_RCC_OscConfig+0x780>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f003 0203 	and.w	r2, r3, #3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002750:	429a      	cmp	r2, r3
 8002752:	d130      	bne.n	80027b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	3b01      	subs	r3, #1
 8002760:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002762:	429a      	cmp	r2, r3
 8002764:	d127      	bne.n	80027b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002770:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002772:	429a      	cmp	r2, r3
 8002774:	d11f      	bne.n	80027b6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002780:	2a07      	cmp	r2, #7
 8002782:	bf14      	ite	ne
 8002784:	2201      	movne	r2, #1
 8002786:	2200      	moveq	r2, #0
 8002788:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800278a:	4293      	cmp	r3, r2
 800278c:	d113      	bne.n	80027b6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002798:	085b      	lsrs	r3, r3, #1
 800279a:	3b01      	subs	r3, #1
 800279c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800279e:	429a      	cmp	r2, r3
 80027a0:	d109      	bne.n	80027b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	085b      	lsrs	r3, r3, #1
 80027ae:	3b01      	subs	r3, #1
 80027b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d06e      	beq.n	8002894 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	2b0c      	cmp	r3, #12
 80027ba:	d069      	beq.n	8002890 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027bc:	4b53      	ldr	r3, [pc, #332]	; (800290c <HAL_RCC_OscConfig+0x780>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d105      	bne.n	80027d4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80027c8:	4b50      	ldr	r3, [pc, #320]	; (800290c <HAL_RCC_OscConfig+0x780>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e0ad      	b.n	8002934 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80027d8:	4b4c      	ldr	r3, [pc, #304]	; (800290c <HAL_RCC_OscConfig+0x780>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a4b      	ldr	r2, [pc, #300]	; (800290c <HAL_RCC_OscConfig+0x780>)
 80027de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027e2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027e4:	f7ff f9be 	bl	8001b64 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ec:	f7ff f9ba 	bl	8001b64 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e09a      	b.n	8002934 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027fe:	4b43      	ldr	r3, [pc, #268]	; (800290c <HAL_RCC_OscConfig+0x780>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800280a:	4b40      	ldr	r3, [pc, #256]	; (800290c <HAL_RCC_OscConfig+0x780>)
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	4b40      	ldr	r3, [pc, #256]	; (8002910 <HAL_RCC_OscConfig+0x784>)
 8002810:	4013      	ands	r3, r2
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800281a:	3a01      	subs	r2, #1
 800281c:	0112      	lsls	r2, r2, #4
 800281e:	4311      	orrs	r1, r2
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002824:	0212      	lsls	r2, r2, #8
 8002826:	4311      	orrs	r1, r2
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800282c:	0852      	lsrs	r2, r2, #1
 800282e:	3a01      	subs	r2, #1
 8002830:	0552      	lsls	r2, r2, #21
 8002832:	4311      	orrs	r1, r2
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002838:	0852      	lsrs	r2, r2, #1
 800283a:	3a01      	subs	r2, #1
 800283c:	0652      	lsls	r2, r2, #25
 800283e:	4311      	orrs	r1, r2
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002844:	0912      	lsrs	r2, r2, #4
 8002846:	0452      	lsls	r2, r2, #17
 8002848:	430a      	orrs	r2, r1
 800284a:	4930      	ldr	r1, [pc, #192]	; (800290c <HAL_RCC_OscConfig+0x780>)
 800284c:	4313      	orrs	r3, r2
 800284e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002850:	4b2e      	ldr	r3, [pc, #184]	; (800290c <HAL_RCC_OscConfig+0x780>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a2d      	ldr	r2, [pc, #180]	; (800290c <HAL_RCC_OscConfig+0x780>)
 8002856:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800285a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800285c:	4b2b      	ldr	r3, [pc, #172]	; (800290c <HAL_RCC_OscConfig+0x780>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	4a2a      	ldr	r2, [pc, #168]	; (800290c <HAL_RCC_OscConfig+0x780>)
 8002862:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002866:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002868:	f7ff f97c 	bl	8001b64 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002870:	f7ff f978 	bl	8001b64 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e058      	b.n	8002934 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002882:	4b22      	ldr	r3, [pc, #136]	; (800290c <HAL_RCC_OscConfig+0x780>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f0      	beq.n	8002870 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800288e:	e050      	b.n	8002932 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e04f      	b.n	8002934 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002894:	4b1d      	ldr	r3, [pc, #116]	; (800290c <HAL_RCC_OscConfig+0x780>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d148      	bne.n	8002932 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028a0:	4b1a      	ldr	r3, [pc, #104]	; (800290c <HAL_RCC_OscConfig+0x780>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a19      	ldr	r2, [pc, #100]	; (800290c <HAL_RCC_OscConfig+0x780>)
 80028a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028ac:	4b17      	ldr	r3, [pc, #92]	; (800290c <HAL_RCC_OscConfig+0x780>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	4a16      	ldr	r2, [pc, #88]	; (800290c <HAL_RCC_OscConfig+0x780>)
 80028b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028b8:	f7ff f954 	bl	8001b64 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c0:	f7ff f950 	bl	8001b64 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e030      	b.n	8002934 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028d2:	4b0e      	ldr	r3, [pc, #56]	; (800290c <HAL_RCC_OscConfig+0x780>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f0      	beq.n	80028c0 <HAL_RCC_OscConfig+0x734>
 80028de:	e028      	b.n	8002932 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	2b0c      	cmp	r3, #12
 80028e4:	d023      	beq.n	800292e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <HAL_RCC_OscConfig+0x780>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a08      	ldr	r2, [pc, #32]	; (800290c <HAL_RCC_OscConfig+0x780>)
 80028ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f2:	f7ff f937 	bl	8001b64 <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028f8:	e00c      	b.n	8002914 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028fa:	f7ff f933 	bl	8001b64 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d905      	bls.n	8002914 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e013      	b.n	8002934 <HAL_RCC_OscConfig+0x7a8>
 800290c:	40021000 	.word	0x40021000
 8002910:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002914:	4b09      	ldr	r3, [pc, #36]	; (800293c <HAL_RCC_OscConfig+0x7b0>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1ec      	bne.n	80028fa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002920:	4b06      	ldr	r3, [pc, #24]	; (800293c <HAL_RCC_OscConfig+0x7b0>)
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	4905      	ldr	r1, [pc, #20]	; (800293c <HAL_RCC_OscConfig+0x7b0>)
 8002926:	4b06      	ldr	r3, [pc, #24]	; (8002940 <HAL_RCC_OscConfig+0x7b4>)
 8002928:	4013      	ands	r3, r2
 800292a:	60cb      	str	r3, [r1, #12]
 800292c:	e001      	b.n	8002932 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3720      	adds	r7, #32
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40021000 	.word	0x40021000
 8002940:	feeefffc 	.word	0xfeeefffc

08002944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0e7      	b.n	8002b28 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002958:	4b75      	ldr	r3, [pc, #468]	; (8002b30 <HAL_RCC_ClockConfig+0x1ec>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d910      	bls.n	8002988 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002966:	4b72      	ldr	r3, [pc, #456]	; (8002b30 <HAL_RCC_ClockConfig+0x1ec>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f023 0207 	bic.w	r2, r3, #7
 800296e:	4970      	ldr	r1, [pc, #448]	; (8002b30 <HAL_RCC_ClockConfig+0x1ec>)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	4313      	orrs	r3, r2
 8002974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002976:	4b6e      	ldr	r3, [pc, #440]	; (8002b30 <HAL_RCC_ClockConfig+0x1ec>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	429a      	cmp	r2, r3
 8002982:	d001      	beq.n	8002988 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e0cf      	b.n	8002b28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d010      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	4b66      	ldr	r3, [pc, #408]	; (8002b34 <HAL_RCC_ClockConfig+0x1f0>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d908      	bls.n	80029b6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a4:	4b63      	ldr	r3, [pc, #396]	; (8002b34 <HAL_RCC_ClockConfig+0x1f0>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	4960      	ldr	r1, [pc, #384]	; (8002b34 <HAL_RCC_ClockConfig+0x1f0>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d04c      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d107      	bne.n	80029da <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ca:	4b5a      	ldr	r3, [pc, #360]	; (8002b34 <HAL_RCC_ClockConfig+0x1f0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d121      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e0a6      	b.n	8002b28 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d107      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029e2:	4b54      	ldr	r3, [pc, #336]	; (8002b34 <HAL_RCC_ClockConfig+0x1f0>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d115      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e09a      	b.n	8002b28 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d107      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029fa:	4b4e      	ldr	r3, [pc, #312]	; (8002b34 <HAL_RCC_ClockConfig+0x1f0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d109      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e08e      	b.n	8002b28 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a0a:	4b4a      	ldr	r3, [pc, #296]	; (8002b34 <HAL_RCC_ClockConfig+0x1f0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e086      	b.n	8002b28 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a1a:	4b46      	ldr	r3, [pc, #280]	; (8002b34 <HAL_RCC_ClockConfig+0x1f0>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f023 0203 	bic.w	r2, r3, #3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	4943      	ldr	r1, [pc, #268]	; (8002b34 <HAL_RCC_ClockConfig+0x1f0>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a2c:	f7ff f89a 	bl	8001b64 <HAL_GetTick>
 8002a30:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a32:	e00a      	b.n	8002a4a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a34:	f7ff f896 	bl	8001b64 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e06e      	b.n	8002b28 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4a:	4b3a      	ldr	r3, [pc, #232]	; (8002b34 <HAL_RCC_ClockConfig+0x1f0>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 020c 	and.w	r2, r3, #12
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d1eb      	bne.n	8002a34 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d010      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	4b31      	ldr	r3, [pc, #196]	; (8002b34 <HAL_RCC_ClockConfig+0x1f0>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d208      	bcs.n	8002a8a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a78:	4b2e      	ldr	r3, [pc, #184]	; (8002b34 <HAL_RCC_ClockConfig+0x1f0>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	492b      	ldr	r1, [pc, #172]	; (8002b34 <HAL_RCC_ClockConfig+0x1f0>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a8a:	4b29      	ldr	r3, [pc, #164]	; (8002b30 <HAL_RCC_ClockConfig+0x1ec>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d210      	bcs.n	8002aba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a98:	4b25      	ldr	r3, [pc, #148]	; (8002b30 <HAL_RCC_ClockConfig+0x1ec>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f023 0207 	bic.w	r2, r3, #7
 8002aa0:	4923      	ldr	r1, [pc, #140]	; (8002b30 <HAL_RCC_ClockConfig+0x1ec>)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa8:	4b21      	ldr	r3, [pc, #132]	; (8002b30 <HAL_RCC_ClockConfig+0x1ec>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d001      	beq.n	8002aba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e036      	b.n	8002b28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d008      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ac6:	4b1b      	ldr	r3, [pc, #108]	; (8002b34 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	4918      	ldr	r1, [pc, #96]	; (8002b34 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0308 	and.w	r3, r3, #8
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d009      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ae4:	4b13      	ldr	r3, [pc, #76]	; (8002b34 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	4910      	ldr	r1, [pc, #64]	; (8002b34 <HAL_RCC_ClockConfig+0x1f0>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002af8:	f000 f824 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 8002afc:	4602      	mov	r2, r0
 8002afe:	4b0d      	ldr	r3, [pc, #52]	; (8002b34 <HAL_RCC_ClockConfig+0x1f0>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	091b      	lsrs	r3, r3, #4
 8002b04:	f003 030f 	and.w	r3, r3, #15
 8002b08:	490b      	ldr	r1, [pc, #44]	; (8002b38 <HAL_RCC_ClockConfig+0x1f4>)
 8002b0a:	5ccb      	ldrb	r3, [r1, r3]
 8002b0c:	f003 031f 	and.w	r3, r3, #31
 8002b10:	fa22 f303 	lsr.w	r3, r2, r3
 8002b14:	4a09      	ldr	r2, [pc, #36]	; (8002b3c <HAL_RCC_ClockConfig+0x1f8>)
 8002b16:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b18:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <HAL_RCC_ClockConfig+0x1fc>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fe fc9b 	bl	8001458 <HAL_InitTick>
 8002b22:	4603      	mov	r3, r0
 8002b24:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b26:	7afb      	ldrb	r3, [r7, #11]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40022000 	.word	0x40022000
 8002b34:	40021000 	.word	0x40021000
 8002b38:	0800bcd8 	.word	0x0800bcd8
 8002b3c:	20000000 	.word	0x20000000
 8002b40:	20000004 	.word	0x20000004

08002b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b089      	sub	sp, #36	; 0x24
 8002b48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61fb      	str	r3, [r7, #28]
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b52:	4b3e      	ldr	r3, [pc, #248]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 030c 	and.w	r3, r3, #12
 8002b5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b5c:	4b3b      	ldr	r3, [pc, #236]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f003 0303 	and.w	r3, r3, #3
 8002b64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_RCC_GetSysClockFreq+0x34>
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	2b0c      	cmp	r3, #12
 8002b70:	d121      	bne.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d11e      	bne.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b78:	4b34      	ldr	r3, [pc, #208]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0308 	and.w	r3, r3, #8
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d107      	bne.n	8002b94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b84:	4b31      	ldr	r3, [pc, #196]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b8a:	0a1b      	lsrs	r3, r3, #8
 8002b8c:	f003 030f 	and.w	r3, r3, #15
 8002b90:	61fb      	str	r3, [r7, #28]
 8002b92:	e005      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b94:	4b2d      	ldr	r3, [pc, #180]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	091b      	lsrs	r3, r3, #4
 8002b9a:	f003 030f 	and.w	r3, r3, #15
 8002b9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ba0:	4a2b      	ldr	r2, [pc, #172]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10d      	bne.n	8002bcc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bb4:	e00a      	b.n	8002bcc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d102      	bne.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bbc:	4b25      	ldr	r3, [pc, #148]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x110>)
 8002bbe:	61bb      	str	r3, [r7, #24]
 8002bc0:	e004      	b.n	8002bcc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d101      	bne.n	8002bcc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002bc8:	4b23      	ldr	r3, [pc, #140]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x114>)
 8002bca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	2b0c      	cmp	r3, #12
 8002bd0:	d134      	bne.n	8002c3c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bd2:	4b1e      	ldr	r3, [pc, #120]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d003      	beq.n	8002bea <HAL_RCC_GetSysClockFreq+0xa6>
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	2b03      	cmp	r3, #3
 8002be6:	d003      	beq.n	8002bf0 <HAL_RCC_GetSysClockFreq+0xac>
 8002be8:	e005      	b.n	8002bf6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002bea:	4b1a      	ldr	r3, [pc, #104]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x110>)
 8002bec:	617b      	str	r3, [r7, #20]
      break;
 8002bee:	e005      	b.n	8002bfc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002bf0:	4b19      	ldr	r3, [pc, #100]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x114>)
 8002bf2:	617b      	str	r3, [r7, #20]
      break;
 8002bf4:	e002      	b.n	8002bfc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	617b      	str	r3, [r7, #20]
      break;
 8002bfa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bfc:	4b13      	ldr	r3, [pc, #76]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	091b      	lsrs	r3, r3, #4
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	3301      	adds	r3, #1
 8002c08:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c0a:	4b10      	ldr	r3, [pc, #64]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	0a1b      	lsrs	r3, r3, #8
 8002c10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	fb03 f202 	mul.w	r2, r3, r2
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c20:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c22:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	0e5b      	lsrs	r3, r3, #25
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c3c:	69bb      	ldr	r3, [r7, #24]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3724      	adds	r7, #36	; 0x24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	0800bcf0 	.word	0x0800bcf0
 8002c54:	00f42400 	.word	0x00f42400
 8002c58:	007a1200 	.word	0x007a1200

08002c5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c60:	4b03      	ldr	r3, [pc, #12]	; (8002c70 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c62:	681b      	ldr	r3, [r3, #0]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	20000000 	.word	0x20000000

08002c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c78:	f7ff fff0 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	0a1b      	lsrs	r3, r3, #8
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	4904      	ldr	r1, [pc, #16]	; (8002c9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c8a:	5ccb      	ldrb	r3, [r1, r3]
 8002c8c:	f003 031f 	and.w	r3, r3, #31
 8002c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	0800bce8 	.word	0x0800bce8

08002ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ca4:	f7ff ffda 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	0adb      	lsrs	r3, r3, #11
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	4904      	ldr	r1, [pc, #16]	; (8002cc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cb6:	5ccb      	ldrb	r3, [r1, r3]
 8002cb8:	f003 031f 	and.w	r3, r3, #31
 8002cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	0800bce8 	.word	0x0800bce8

08002ccc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	220f      	movs	r2, #15
 8002cda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002cdc:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <HAL_RCC_GetClockConfig+0x5c>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 0203 	and.w	r2, r3, #3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002ce8:	4b0f      	ldr	r3, [pc, #60]	; (8002d28 <HAL_RCC_GetClockConfig+0x5c>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002cf4:	4b0c      	ldr	r3, [pc, #48]	; (8002d28 <HAL_RCC_GetClockConfig+0x5c>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002d00:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <HAL_RCC_GetClockConfig+0x5c>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	08db      	lsrs	r3, r3, #3
 8002d06:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002d0e:	4b07      	ldr	r3, [pc, #28]	; (8002d2c <HAL_RCC_GetClockConfig+0x60>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0207 	and.w	r2, r3, #7
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	601a      	str	r2, [r3, #0]
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	40022000 	.word	0x40022000

08002d30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d38:	2300      	movs	r3, #0
 8002d3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d3c:	4b2a      	ldr	r3, [pc, #168]	; (8002de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d48:	f7ff f9bc 	bl	80020c4 <HAL_PWREx_GetVoltageRange>
 8002d4c:	6178      	str	r0, [r7, #20]
 8002d4e:	e014      	b.n	8002d7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d50:	4b25      	ldr	r3, [pc, #148]	; (8002de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d54:	4a24      	ldr	r2, [pc, #144]	; (8002de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d5a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d5c:	4b22      	ldr	r3, [pc, #136]	; (8002de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d68:	f7ff f9ac 	bl	80020c4 <HAL_PWREx_GetVoltageRange>
 8002d6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d6e:	4b1e      	ldr	r3, [pc, #120]	; (8002de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d72:	4a1d      	ldr	r2, [pc, #116]	; (8002de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d80:	d10b      	bne.n	8002d9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b80      	cmp	r3, #128	; 0x80
 8002d86:	d919      	bls.n	8002dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2ba0      	cmp	r3, #160	; 0xa0
 8002d8c:	d902      	bls.n	8002d94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d8e:	2302      	movs	r3, #2
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	e013      	b.n	8002dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d94:	2301      	movs	r3, #1
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	e010      	b.n	8002dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b80      	cmp	r3, #128	; 0x80
 8002d9e:	d902      	bls.n	8002da6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002da0:	2303      	movs	r3, #3
 8002da2:	613b      	str	r3, [r7, #16]
 8002da4:	e00a      	b.n	8002dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b80      	cmp	r3, #128	; 0x80
 8002daa:	d102      	bne.n	8002db2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002dac:	2302      	movs	r3, #2
 8002dae:	613b      	str	r3, [r7, #16]
 8002db0:	e004      	b.n	8002dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b70      	cmp	r3, #112	; 0x70
 8002db6:	d101      	bne.n	8002dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002db8:	2301      	movs	r3, #1
 8002dba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f023 0207 	bic.w	r2, r3, #7
 8002dc4:	4909      	ldr	r1, [pc, #36]	; (8002dec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002dcc:	4b07      	ldr	r3, [pc, #28]	; (8002dec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d001      	beq.n	8002dde <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e000      	b.n	8002de0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40021000 	.word	0x40021000
 8002dec:	40022000 	.word	0x40022000

08002df0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002df8:	2300      	movs	r3, #0
 8002dfa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d041      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e10:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e14:	d02a      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002e16:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e1a:	d824      	bhi.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e20:	d008      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e26:	d81e      	bhi.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00a      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002e2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e30:	d010      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e32:	e018      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e34:	4b86      	ldr	r3, [pc, #536]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	4a85      	ldr	r2, [pc, #532]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e3e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e40:	e015      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	3304      	adds	r3, #4
 8002e46:	2100      	movs	r1, #0
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 fabb 	bl	80033c4 <RCCEx_PLLSAI1_Config>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e52:	e00c      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3320      	adds	r3, #32
 8002e58:	2100      	movs	r1, #0
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 fba6 	bl	80035ac <RCCEx_PLLSAI2_Config>
 8002e60:	4603      	mov	r3, r0
 8002e62:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e64:	e003      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	74fb      	strb	r3, [r7, #19]
      break;
 8002e6a:	e000      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002e6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e6e:	7cfb      	ldrb	r3, [r7, #19]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10b      	bne.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e74:	4b76      	ldr	r3, [pc, #472]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e82:	4973      	ldr	r1, [pc, #460]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e8a:	e001      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e8c:	7cfb      	ldrb	r3, [r7, #19]
 8002e8e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d041      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ea0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ea4:	d02a      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002ea6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002eaa:	d824      	bhi.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002eac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002eb0:	d008      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002eb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002eb6:	d81e      	bhi.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00a      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002ebc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ec0:	d010      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ec2:	e018      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ec4:	4b62      	ldr	r3, [pc, #392]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	4a61      	ldr	r2, [pc, #388]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ece:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ed0:	e015      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 fa73 	bl	80033c4 <RCCEx_PLLSAI1_Config>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ee2:	e00c      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3320      	adds	r3, #32
 8002ee8:	2100      	movs	r1, #0
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 fb5e 	bl	80035ac <RCCEx_PLLSAI2_Config>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ef4:	e003      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	74fb      	strb	r3, [r7, #19]
      break;
 8002efa:	e000      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002efc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002efe:	7cfb      	ldrb	r3, [r7, #19]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10b      	bne.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f04:	4b52      	ldr	r3, [pc, #328]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f12:	494f      	ldr	r1, [pc, #316]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f1a:	e001      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f1c:	7cfb      	ldrb	r3, [r7, #19]
 8002f1e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 80a0 	beq.w	800306e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f32:	4b47      	ldr	r3, [pc, #284]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002f42:	2300      	movs	r3, #0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00d      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f48:	4b41      	ldr	r3, [pc, #260]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4c:	4a40      	ldr	r2, [pc, #256]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f52:	6593      	str	r3, [r2, #88]	; 0x58
 8002f54:	4b3e      	ldr	r3, [pc, #248]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5c:	60bb      	str	r3, [r7, #8]
 8002f5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f60:	2301      	movs	r3, #1
 8002f62:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f64:	4b3b      	ldr	r3, [pc, #236]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a3a      	ldr	r2, [pc, #232]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f70:	f7fe fdf8 	bl	8001b64 <HAL_GetTick>
 8002f74:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f76:	e009      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f78:	f7fe fdf4 	bl	8001b64 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d902      	bls.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	74fb      	strb	r3, [r7, #19]
        break;
 8002f8a:	e005      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f8c:	4b31      	ldr	r3, [pc, #196]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0ef      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002f98:	7cfb      	ldrb	r3, [r7, #19]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d15c      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f9e:	4b2c      	ldr	r3, [pc, #176]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fa8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d01f      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d019      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fbc:	4b24      	ldr	r3, [pc, #144]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fc6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fc8:	4b21      	ldr	r3, [pc, #132]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fce:	4a20      	ldr	r2, [pc, #128]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fd8:	4b1d      	ldr	r3, [pc, #116]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fde:	4a1c      	ldr	r2, [pc, #112]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002fe8:	4a19      	ldr	r2, [pc, #100]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d016      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffa:	f7fe fdb3 	bl	8001b64 <HAL_GetTick>
 8002ffe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003000:	e00b      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003002:	f7fe fdaf 	bl	8001b64 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003010:	4293      	cmp	r3, r2
 8003012:	d902      	bls.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	74fb      	strb	r3, [r7, #19]
            break;
 8003018:	e006      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800301a:	4b0d      	ldr	r3, [pc, #52]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800301c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0ec      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003028:	7cfb      	ldrb	r3, [r7, #19]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10c      	bne.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800302e:	4b08      	ldr	r3, [pc, #32]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003034:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800303e:	4904      	ldr	r1, [pc, #16]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003046:	e009      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003048:	7cfb      	ldrb	r3, [r7, #19]
 800304a:	74bb      	strb	r3, [r7, #18]
 800304c:	e006      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800304e:	bf00      	nop
 8003050:	40021000 	.word	0x40021000
 8003054:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003058:	7cfb      	ldrb	r3, [r7, #19]
 800305a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800305c:	7c7b      	ldrb	r3, [r7, #17]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d105      	bne.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003062:	4b9e      	ldr	r3, [pc, #632]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003066:	4a9d      	ldr	r2, [pc, #628]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003068:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800306c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00a      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800307a:	4b98      	ldr	r3, [pc, #608]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800307c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003080:	f023 0203 	bic.w	r2, r3, #3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003088:	4994      	ldr	r1, [pc, #592]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800308a:	4313      	orrs	r3, r2
 800308c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00a      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800309c:	4b8f      	ldr	r3, [pc, #572]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800309e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a2:	f023 020c 	bic.w	r2, r3, #12
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030aa:	498c      	ldr	r1, [pc, #560]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0304 	and.w	r3, r3, #4
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00a      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030be:	4b87      	ldr	r3, [pc, #540]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	4983      	ldr	r1, [pc, #524]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0308 	and.w	r3, r3, #8
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00a      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030e0:	4b7e      	ldr	r3, [pc, #504]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ee:	497b      	ldr	r1, [pc, #492]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0310 	and.w	r3, r3, #16
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00a      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003102:	4b76      	ldr	r3, [pc, #472]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003108:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003110:	4972      	ldr	r1, [pc, #456]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003112:	4313      	orrs	r3, r2
 8003114:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0320 	and.w	r3, r3, #32
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00a      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003124:	4b6d      	ldr	r3, [pc, #436]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003132:	496a      	ldr	r1, [pc, #424]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003134:	4313      	orrs	r3, r2
 8003136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00a      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003146:	4b65      	ldr	r3, [pc, #404]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003154:	4961      	ldr	r1, [pc, #388]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003156:	4313      	orrs	r3, r2
 8003158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00a      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003168:	4b5c      	ldr	r3, [pc, #368]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800316a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003176:	4959      	ldr	r1, [pc, #356]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003178:	4313      	orrs	r3, r2
 800317a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00a      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800318a:	4b54      	ldr	r3, [pc, #336]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003190:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003198:	4950      	ldr	r1, [pc, #320]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800319a:	4313      	orrs	r3, r2
 800319c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00a      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031ac:	4b4b      	ldr	r3, [pc, #300]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ba:	4948      	ldr	r1, [pc, #288]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031ce:	4b43      	ldr	r3, [pc, #268]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031dc:	493f      	ldr	r1, [pc, #252]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d028      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031f0:	4b3a      	ldr	r3, [pc, #232]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031fe:	4937      	ldr	r1, [pc, #220]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003200:	4313      	orrs	r3, r2
 8003202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800320a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800320e:	d106      	bne.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003210:	4b32      	ldr	r3, [pc, #200]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	4a31      	ldr	r2, [pc, #196]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003216:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800321a:	60d3      	str	r3, [r2, #12]
 800321c:	e011      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003222:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003226:	d10c      	bne.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3304      	adds	r3, #4
 800322c:	2101      	movs	r1, #1
 800322e:	4618      	mov	r0, r3
 8003230:	f000 f8c8 	bl	80033c4 <RCCEx_PLLSAI1_Config>
 8003234:	4603      	mov	r3, r0
 8003236:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003238:	7cfb      	ldrb	r3, [r7, #19]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800323e:	7cfb      	ldrb	r3, [r7, #19]
 8003240:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d028      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800324e:	4b23      	ldr	r3, [pc, #140]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003254:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325c:	491f      	ldr	r1, [pc, #124]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800325e:	4313      	orrs	r3, r2
 8003260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003268:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800326c:	d106      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800326e:	4b1b      	ldr	r3, [pc, #108]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	4a1a      	ldr	r2, [pc, #104]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003274:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003278:	60d3      	str	r3, [r2, #12]
 800327a:	e011      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003280:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003284:	d10c      	bne.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	3304      	adds	r3, #4
 800328a:	2101      	movs	r1, #1
 800328c:	4618      	mov	r0, r3
 800328e:	f000 f899 	bl	80033c4 <RCCEx_PLLSAI1_Config>
 8003292:	4603      	mov	r3, r0
 8003294:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003296:	7cfb      	ldrb	r3, [r7, #19]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800329c:	7cfb      	ldrb	r3, [r7, #19]
 800329e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d02b      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032ac:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ba:	4908      	ldr	r1, [pc, #32]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032ca:	d109      	bne.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032cc:	4b03      	ldr	r3, [pc, #12]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	4a02      	ldr	r2, [pc, #8]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032d6:	60d3      	str	r3, [r2, #12]
 80032d8:	e014      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80032da:	bf00      	nop
 80032dc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032e8:	d10c      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3304      	adds	r3, #4
 80032ee:	2101      	movs	r1, #1
 80032f0:	4618      	mov	r0, r3
 80032f2:	f000 f867 	bl	80033c4 <RCCEx_PLLSAI1_Config>
 80032f6:	4603      	mov	r3, r0
 80032f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032fa:	7cfb      	ldrb	r3, [r7, #19]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003300:	7cfb      	ldrb	r3, [r7, #19]
 8003302:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d02f      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003310:	4b2b      	ldr	r3, [pc, #172]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003316:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800331e:	4928      	ldr	r1, [pc, #160]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800332a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800332e:	d10d      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3304      	adds	r3, #4
 8003334:	2102      	movs	r1, #2
 8003336:	4618      	mov	r0, r3
 8003338:	f000 f844 	bl	80033c4 <RCCEx_PLLSAI1_Config>
 800333c:	4603      	mov	r3, r0
 800333e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003340:	7cfb      	ldrb	r3, [r7, #19]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d014      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003346:	7cfb      	ldrb	r3, [r7, #19]
 8003348:	74bb      	strb	r3, [r7, #18]
 800334a:	e011      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003350:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003354:	d10c      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3320      	adds	r3, #32
 800335a:	2102      	movs	r1, #2
 800335c:	4618      	mov	r0, r3
 800335e:	f000 f925 	bl	80035ac <RCCEx_PLLSAI2_Config>
 8003362:	4603      	mov	r3, r0
 8003364:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003366:	7cfb      	ldrb	r3, [r7, #19]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800336c:	7cfb      	ldrb	r3, [r7, #19]
 800336e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00a      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800337c:	4b10      	ldr	r3, [pc, #64]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800337e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003382:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800338a:	490d      	ldr	r1, [pc, #52]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00b      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800339e:	4b08      	ldr	r3, [pc, #32]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033ae:	4904      	ldr	r1, [pc, #16]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80033b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40021000 	.word	0x40021000

080033c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033ce:	2300      	movs	r3, #0
 80033d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033d2:	4b75      	ldr	r3, [pc, #468]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d018      	beq.n	8003410 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80033de:	4b72      	ldr	r3, [pc, #456]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	f003 0203 	and.w	r2, r3, #3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d10d      	bne.n	800340a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
       ||
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d009      	beq.n	800340a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80033f6:	4b6c      	ldr	r3, [pc, #432]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	091b      	lsrs	r3, r3, #4
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	1c5a      	adds	r2, r3, #1
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
       ||
 8003406:	429a      	cmp	r2, r3
 8003408:	d047      	beq.n	800349a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	73fb      	strb	r3, [r7, #15]
 800340e:	e044      	b.n	800349a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b03      	cmp	r3, #3
 8003416:	d018      	beq.n	800344a <RCCEx_PLLSAI1_Config+0x86>
 8003418:	2b03      	cmp	r3, #3
 800341a:	d825      	bhi.n	8003468 <RCCEx_PLLSAI1_Config+0xa4>
 800341c:	2b01      	cmp	r3, #1
 800341e:	d002      	beq.n	8003426 <RCCEx_PLLSAI1_Config+0x62>
 8003420:	2b02      	cmp	r3, #2
 8003422:	d009      	beq.n	8003438 <RCCEx_PLLSAI1_Config+0x74>
 8003424:	e020      	b.n	8003468 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003426:	4b60      	ldr	r3, [pc, #384]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d11d      	bne.n	800346e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003436:	e01a      	b.n	800346e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003438:	4b5b      	ldr	r3, [pc, #364]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003440:	2b00      	cmp	r3, #0
 8003442:	d116      	bne.n	8003472 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003448:	e013      	b.n	8003472 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800344a:	4b57      	ldr	r3, [pc, #348]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10f      	bne.n	8003476 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003456:	4b54      	ldr	r3, [pc, #336]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d109      	bne.n	8003476 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003466:	e006      	b.n	8003476 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	73fb      	strb	r3, [r7, #15]
      break;
 800346c:	e004      	b.n	8003478 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800346e:	bf00      	nop
 8003470:	e002      	b.n	8003478 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003472:	bf00      	nop
 8003474:	e000      	b.n	8003478 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003476:	bf00      	nop
    }

    if(status == HAL_OK)
 8003478:	7bfb      	ldrb	r3, [r7, #15]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10d      	bne.n	800349a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800347e:	4b4a      	ldr	r3, [pc, #296]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6819      	ldr	r1, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	3b01      	subs	r3, #1
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	430b      	orrs	r3, r1
 8003494:	4944      	ldr	r1, [pc, #272]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003496:	4313      	orrs	r3, r2
 8003498:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800349a:	7bfb      	ldrb	r3, [r7, #15]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d17d      	bne.n	800359c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80034a0:	4b41      	ldr	r3, [pc, #260]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a40      	ldr	r2, [pc, #256]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ac:	f7fe fb5a 	bl	8001b64 <HAL_GetTick>
 80034b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034b2:	e009      	b.n	80034c8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034b4:	f7fe fb56 	bl	8001b64 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d902      	bls.n	80034c8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	73fb      	strb	r3, [r7, #15]
        break;
 80034c6:	e005      	b.n	80034d4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034c8:	4b37      	ldr	r3, [pc, #220]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1ef      	bne.n	80034b4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d160      	bne.n	800359c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d111      	bne.n	8003504 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034e0:	4b31      	ldr	r3, [pc, #196]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80034e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6892      	ldr	r2, [r2, #8]
 80034f0:	0211      	lsls	r1, r2, #8
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	68d2      	ldr	r2, [r2, #12]
 80034f6:	0912      	lsrs	r2, r2, #4
 80034f8:	0452      	lsls	r2, r2, #17
 80034fa:	430a      	orrs	r2, r1
 80034fc:	492a      	ldr	r1, [pc, #168]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	610b      	str	r3, [r1, #16]
 8003502:	e027      	b.n	8003554 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d112      	bne.n	8003530 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800350a:	4b27      	ldr	r3, [pc, #156]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003512:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6892      	ldr	r2, [r2, #8]
 800351a:	0211      	lsls	r1, r2, #8
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6912      	ldr	r2, [r2, #16]
 8003520:	0852      	lsrs	r2, r2, #1
 8003522:	3a01      	subs	r2, #1
 8003524:	0552      	lsls	r2, r2, #21
 8003526:	430a      	orrs	r2, r1
 8003528:	491f      	ldr	r1, [pc, #124]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800352a:	4313      	orrs	r3, r2
 800352c:	610b      	str	r3, [r1, #16]
 800352e:	e011      	b.n	8003554 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003530:	4b1d      	ldr	r3, [pc, #116]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003538:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6892      	ldr	r2, [r2, #8]
 8003540:	0211      	lsls	r1, r2, #8
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6952      	ldr	r2, [r2, #20]
 8003546:	0852      	lsrs	r2, r2, #1
 8003548:	3a01      	subs	r2, #1
 800354a:	0652      	lsls	r2, r2, #25
 800354c:	430a      	orrs	r2, r1
 800354e:	4916      	ldr	r1, [pc, #88]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003550:	4313      	orrs	r3, r2
 8003552:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003554:	4b14      	ldr	r3, [pc, #80]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a13      	ldr	r2, [pc, #76]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800355a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800355e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003560:	f7fe fb00 	bl	8001b64 <HAL_GetTick>
 8003564:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003566:	e009      	b.n	800357c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003568:	f7fe fafc 	bl	8001b64 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d902      	bls.n	800357c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	73fb      	strb	r3, [r7, #15]
          break;
 800357a:	e005      	b.n	8003588 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800357c:	4b0a      	ldr	r3, [pc, #40]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0ef      	beq.n	8003568 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003588:	7bfb      	ldrb	r3, [r7, #15]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d106      	bne.n	800359c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800358e:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003590:	691a      	ldr	r2, [r3, #16]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	4904      	ldr	r1, [pc, #16]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003598:	4313      	orrs	r3, r2
 800359a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800359c:	7bfb      	ldrb	r3, [r7, #15]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	40021000 	.word	0x40021000

080035ac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035ba:	4b6a      	ldr	r3, [pc, #424]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d018      	beq.n	80035f8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80035c6:	4b67      	ldr	r3, [pc, #412]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f003 0203 	and.w	r2, r3, #3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d10d      	bne.n	80035f2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
       ||
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d009      	beq.n	80035f2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80035de:	4b61      	ldr	r3, [pc, #388]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	091b      	lsrs	r3, r3, #4
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
       ||
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d047      	beq.n	8003682 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	73fb      	strb	r3, [r7, #15]
 80035f6:	e044      	b.n	8003682 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b03      	cmp	r3, #3
 80035fe:	d018      	beq.n	8003632 <RCCEx_PLLSAI2_Config+0x86>
 8003600:	2b03      	cmp	r3, #3
 8003602:	d825      	bhi.n	8003650 <RCCEx_PLLSAI2_Config+0xa4>
 8003604:	2b01      	cmp	r3, #1
 8003606:	d002      	beq.n	800360e <RCCEx_PLLSAI2_Config+0x62>
 8003608:	2b02      	cmp	r3, #2
 800360a:	d009      	beq.n	8003620 <RCCEx_PLLSAI2_Config+0x74>
 800360c:	e020      	b.n	8003650 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800360e:	4b55      	ldr	r3, [pc, #340]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d11d      	bne.n	8003656 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800361e:	e01a      	b.n	8003656 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003620:	4b50      	ldr	r3, [pc, #320]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003628:	2b00      	cmp	r3, #0
 800362a:	d116      	bne.n	800365a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003630:	e013      	b.n	800365a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003632:	4b4c      	ldr	r3, [pc, #304]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10f      	bne.n	800365e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800363e:	4b49      	ldr	r3, [pc, #292]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d109      	bne.n	800365e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800364e:	e006      	b.n	800365e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	73fb      	strb	r3, [r7, #15]
      break;
 8003654:	e004      	b.n	8003660 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003656:	bf00      	nop
 8003658:	e002      	b.n	8003660 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800365a:	bf00      	nop
 800365c:	e000      	b.n	8003660 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800365e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003660:	7bfb      	ldrb	r3, [r7, #15]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10d      	bne.n	8003682 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003666:	4b3f      	ldr	r3, [pc, #252]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6819      	ldr	r1, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	3b01      	subs	r3, #1
 8003678:	011b      	lsls	r3, r3, #4
 800367a:	430b      	orrs	r3, r1
 800367c:	4939      	ldr	r1, [pc, #228]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 800367e:	4313      	orrs	r3, r2
 8003680:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003682:	7bfb      	ldrb	r3, [r7, #15]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d167      	bne.n	8003758 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003688:	4b36      	ldr	r3, [pc, #216]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a35      	ldr	r2, [pc, #212]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 800368e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003692:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003694:	f7fe fa66 	bl	8001b64 <HAL_GetTick>
 8003698:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800369a:	e009      	b.n	80036b0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800369c:	f7fe fa62 	bl	8001b64 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d902      	bls.n	80036b0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	73fb      	strb	r3, [r7, #15]
        break;
 80036ae:	e005      	b.n	80036bc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036b0:	4b2c      	ldr	r3, [pc, #176]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1ef      	bne.n	800369c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d14a      	bne.n	8003758 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d111      	bne.n	80036ec <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036c8:	4b26      	ldr	r3, [pc, #152]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80036d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6892      	ldr	r2, [r2, #8]
 80036d8:	0211      	lsls	r1, r2, #8
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	68d2      	ldr	r2, [r2, #12]
 80036de:	0912      	lsrs	r2, r2, #4
 80036e0:	0452      	lsls	r2, r2, #17
 80036e2:	430a      	orrs	r2, r1
 80036e4:	491f      	ldr	r1, [pc, #124]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	614b      	str	r3, [r1, #20]
 80036ea:	e011      	b.n	8003710 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036ec:	4b1d      	ldr	r3, [pc, #116]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80036f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6892      	ldr	r2, [r2, #8]
 80036fc:	0211      	lsls	r1, r2, #8
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6912      	ldr	r2, [r2, #16]
 8003702:	0852      	lsrs	r2, r2, #1
 8003704:	3a01      	subs	r2, #1
 8003706:	0652      	lsls	r2, r2, #25
 8003708:	430a      	orrs	r2, r1
 800370a:	4916      	ldr	r1, [pc, #88]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 800370c:	4313      	orrs	r3, r2
 800370e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003710:	4b14      	ldr	r3, [pc, #80]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a13      	ldr	r2, [pc, #76]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800371a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371c:	f7fe fa22 	bl	8001b64 <HAL_GetTick>
 8003720:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003722:	e009      	b.n	8003738 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003724:	f7fe fa1e 	bl	8001b64 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d902      	bls.n	8003738 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	73fb      	strb	r3, [r7, #15]
          break;
 8003736:	e005      	b.n	8003744 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003738:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0ef      	beq.n	8003724 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003744:	7bfb      	ldrb	r3, [r7, #15]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800374a:	4b06      	ldr	r3, [pc, #24]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 800374c:	695a      	ldr	r2, [r3, #20]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	4904      	ldr	r1, [pc, #16]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003754:	4313      	orrs	r3, r2
 8003756:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003758:	7bfb      	ldrb	r3, [r7, #15]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	40021000 	.word	0x40021000

08003768 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e049      	b.n	800380e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d106      	bne.n	8003794 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7fe f888 	bl	80018a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2202      	movs	r2, #2
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	3304      	adds	r3, #4
 80037a4:	4619      	mov	r1, r3
 80037a6:	4610      	mov	r0, r2
 80037a8:	f000 ff54 	bl	8004654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
	...

08003818 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b01      	cmp	r3, #1
 800382a:	d001      	beq.n	8003830 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e04f      	b.n	80038d0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0201 	orr.w	r2, r2, #1
 8003846:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a23      	ldr	r2, [pc, #140]	; (80038dc <HAL_TIM_Base_Start_IT+0xc4>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d01d      	beq.n	800388e <HAL_TIM_Base_Start_IT+0x76>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800385a:	d018      	beq.n	800388e <HAL_TIM_Base_Start_IT+0x76>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a1f      	ldr	r2, [pc, #124]	; (80038e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d013      	beq.n	800388e <HAL_TIM_Base_Start_IT+0x76>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a1e      	ldr	r2, [pc, #120]	; (80038e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d00e      	beq.n	800388e <HAL_TIM_Base_Start_IT+0x76>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a1c      	ldr	r2, [pc, #112]	; (80038e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d009      	beq.n	800388e <HAL_TIM_Base_Start_IT+0x76>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a1b      	ldr	r2, [pc, #108]	; (80038ec <HAL_TIM_Base_Start_IT+0xd4>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d004      	beq.n	800388e <HAL_TIM_Base_Start_IT+0x76>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a19      	ldr	r2, [pc, #100]	; (80038f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d115      	bne.n	80038ba <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	4b17      	ldr	r3, [pc, #92]	; (80038f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003896:	4013      	ands	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2b06      	cmp	r3, #6
 800389e:	d015      	beq.n	80038cc <HAL_TIM_Base_Start_IT+0xb4>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a6:	d011      	beq.n	80038cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0201 	orr.w	r2, r2, #1
 80038b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038b8:	e008      	b.n	80038cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f042 0201 	orr.w	r2, r2, #1
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	e000      	b.n	80038ce <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	40012c00 	.word	0x40012c00
 80038e0:	40000400 	.word	0x40000400
 80038e4:	40000800 	.word	0x40000800
 80038e8:	40000c00 	.word	0x40000c00
 80038ec:	40013400 	.word	0x40013400
 80038f0:	40014000 	.word	0x40014000
 80038f4:	00010007 	.word	0x00010007

080038f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e049      	b.n	800399e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d106      	bne.n	8003924 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f841 	bl	80039a6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2202      	movs	r2, #2
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3304      	adds	r3, #4
 8003934:	4619      	mov	r1, r3
 8003936:	4610      	mov	r0, r2
 8003938:	f000 fe8c 	bl	8004654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
	...

080039bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d109      	bne.n	80039e0 <HAL_TIM_PWM_Start+0x24>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	bf14      	ite	ne
 80039d8:	2301      	movne	r3, #1
 80039da:	2300      	moveq	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	e03c      	b.n	8003a5a <HAL_TIM_PWM_Start+0x9e>
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	d109      	bne.n	80039fa <HAL_TIM_PWM_Start+0x3e>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	bf14      	ite	ne
 80039f2:	2301      	movne	r3, #1
 80039f4:	2300      	moveq	r3, #0
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	e02f      	b.n	8003a5a <HAL_TIM_PWM_Start+0x9e>
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d109      	bne.n	8003a14 <HAL_TIM_PWM_Start+0x58>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	bf14      	ite	ne
 8003a0c:	2301      	movne	r3, #1
 8003a0e:	2300      	moveq	r3, #0
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	e022      	b.n	8003a5a <HAL_TIM_PWM_Start+0x9e>
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	2b0c      	cmp	r3, #12
 8003a18:	d109      	bne.n	8003a2e <HAL_TIM_PWM_Start+0x72>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	bf14      	ite	ne
 8003a26:	2301      	movne	r3, #1
 8003a28:	2300      	moveq	r3, #0
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	e015      	b.n	8003a5a <HAL_TIM_PWM_Start+0x9e>
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b10      	cmp	r3, #16
 8003a32:	d109      	bne.n	8003a48 <HAL_TIM_PWM_Start+0x8c>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	bf14      	ite	ne
 8003a40:	2301      	movne	r3, #1
 8003a42:	2300      	moveq	r3, #0
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	e008      	b.n	8003a5a <HAL_TIM_PWM_Start+0x9e>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	bf14      	ite	ne
 8003a54:	2301      	movne	r3, #1
 8003a56:	2300      	moveq	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e09c      	b.n	8003b9c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d104      	bne.n	8003a72 <HAL_TIM_PWM_Start+0xb6>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a70:	e023      	b.n	8003aba <HAL_TIM_PWM_Start+0xfe>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d104      	bne.n	8003a82 <HAL_TIM_PWM_Start+0xc6>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a80:	e01b      	b.n	8003aba <HAL_TIM_PWM_Start+0xfe>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d104      	bne.n	8003a92 <HAL_TIM_PWM_Start+0xd6>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a90:	e013      	b.n	8003aba <HAL_TIM_PWM_Start+0xfe>
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	2b0c      	cmp	r3, #12
 8003a96:	d104      	bne.n	8003aa2 <HAL_TIM_PWM_Start+0xe6>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003aa0:	e00b      	b.n	8003aba <HAL_TIM_PWM_Start+0xfe>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	2b10      	cmp	r3, #16
 8003aa6:	d104      	bne.n	8003ab2 <HAL_TIM_PWM_Start+0xf6>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2202      	movs	r2, #2
 8003aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ab0:	e003      	b.n	8003aba <HAL_TIM_PWM_Start+0xfe>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	6839      	ldr	r1, [r7, #0]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f001 faf4 	bl	80050b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a35      	ldr	r2, [pc, #212]	; (8003ba4 <HAL_TIM_PWM_Start+0x1e8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d013      	beq.n	8003afa <HAL_TIM_PWM_Start+0x13e>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a34      	ldr	r2, [pc, #208]	; (8003ba8 <HAL_TIM_PWM_Start+0x1ec>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d00e      	beq.n	8003afa <HAL_TIM_PWM_Start+0x13e>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a32      	ldr	r2, [pc, #200]	; (8003bac <HAL_TIM_PWM_Start+0x1f0>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d009      	beq.n	8003afa <HAL_TIM_PWM_Start+0x13e>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a31      	ldr	r2, [pc, #196]	; (8003bb0 <HAL_TIM_PWM_Start+0x1f4>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d004      	beq.n	8003afa <HAL_TIM_PWM_Start+0x13e>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a2f      	ldr	r2, [pc, #188]	; (8003bb4 <HAL_TIM_PWM_Start+0x1f8>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d101      	bne.n	8003afe <HAL_TIM_PWM_Start+0x142>
 8003afa:	2301      	movs	r3, #1
 8003afc:	e000      	b.n	8003b00 <HAL_TIM_PWM_Start+0x144>
 8003afe:	2300      	movs	r3, #0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d007      	beq.n	8003b14 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b12:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a22      	ldr	r2, [pc, #136]	; (8003ba4 <HAL_TIM_PWM_Start+0x1e8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d01d      	beq.n	8003b5a <HAL_TIM_PWM_Start+0x19e>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b26:	d018      	beq.n	8003b5a <HAL_TIM_PWM_Start+0x19e>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a22      	ldr	r2, [pc, #136]	; (8003bb8 <HAL_TIM_PWM_Start+0x1fc>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d013      	beq.n	8003b5a <HAL_TIM_PWM_Start+0x19e>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a21      	ldr	r2, [pc, #132]	; (8003bbc <HAL_TIM_PWM_Start+0x200>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d00e      	beq.n	8003b5a <HAL_TIM_PWM_Start+0x19e>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a1f      	ldr	r2, [pc, #124]	; (8003bc0 <HAL_TIM_PWM_Start+0x204>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d009      	beq.n	8003b5a <HAL_TIM_PWM_Start+0x19e>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a17      	ldr	r2, [pc, #92]	; (8003ba8 <HAL_TIM_PWM_Start+0x1ec>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d004      	beq.n	8003b5a <HAL_TIM_PWM_Start+0x19e>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a15      	ldr	r2, [pc, #84]	; (8003bac <HAL_TIM_PWM_Start+0x1f0>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d115      	bne.n	8003b86 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	4b18      	ldr	r3, [pc, #96]	; (8003bc4 <HAL_TIM_PWM_Start+0x208>)
 8003b62:	4013      	ands	r3, r2
 8003b64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2b06      	cmp	r3, #6
 8003b6a:	d015      	beq.n	8003b98 <HAL_TIM_PWM_Start+0x1dc>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b72:	d011      	beq.n	8003b98 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0201 	orr.w	r2, r2, #1
 8003b82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b84:	e008      	b.n	8003b98 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f042 0201 	orr.w	r2, r2, #1
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	e000      	b.n	8003b9a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40012c00 	.word	0x40012c00
 8003ba8:	40013400 	.word	0x40013400
 8003bac:	40014000 	.word	0x40014000
 8003bb0:	40014400 	.word	0x40014400
 8003bb4:	40014800 	.word	0x40014800
 8003bb8:	40000400 	.word	0x40000400
 8003bbc:	40000800 	.word	0x40000800
 8003bc0:	40000c00 	.word	0x40000c00
 8003bc4:	00010007 	.word	0x00010007

08003bc8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e049      	b.n	8003c6e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d106      	bne.n	8003bf4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f841 	bl	8003c76 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3304      	adds	r3, #4
 8003c04:	4619      	mov	r1, r3
 8003c06:	4610      	mov	r0, r2
 8003c08:	f000 fd24 	bl	8004654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b083      	sub	sp, #12
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
	...

08003c8c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d104      	bne.n	8003ca6 <HAL_TIM_IC_Start+0x1a>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	e023      	b.n	8003cee <HAL_TIM_IC_Start+0x62>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	2b04      	cmp	r3, #4
 8003caa:	d104      	bne.n	8003cb6 <HAL_TIM_IC_Start+0x2a>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	e01b      	b.n	8003cee <HAL_TIM_IC_Start+0x62>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d104      	bne.n	8003cc6 <HAL_TIM_IC_Start+0x3a>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	e013      	b.n	8003cee <HAL_TIM_IC_Start+0x62>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b0c      	cmp	r3, #12
 8003cca:	d104      	bne.n	8003cd6 <HAL_TIM_IC_Start+0x4a>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	e00b      	b.n	8003cee <HAL_TIM_IC_Start+0x62>
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	2b10      	cmp	r3, #16
 8003cda:	d104      	bne.n	8003ce6 <HAL_TIM_IC_Start+0x5a>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	e003      	b.n	8003cee <HAL_TIM_IC_Start+0x62>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d104      	bne.n	8003d00 <HAL_TIM_IC_Start+0x74>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	e013      	b.n	8003d28 <HAL_TIM_IC_Start+0x9c>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d104      	bne.n	8003d10 <HAL_TIM_IC_Start+0x84>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	e00b      	b.n	8003d28 <HAL_TIM_IC_Start+0x9c>
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	2b08      	cmp	r3, #8
 8003d14:	d104      	bne.n	8003d20 <HAL_TIM_IC_Start+0x94>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	e003      	b.n	8003d28 <HAL_TIM_IC_Start+0x9c>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d2a:	7bfb      	ldrb	r3, [r7, #15]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d102      	bne.n	8003d36 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d30:	7bbb      	ldrb	r3, [r7, #14]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d001      	beq.n	8003d3a <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e092      	b.n	8003e60 <HAL_TIM_IC_Start+0x1d4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d104      	bne.n	8003d4a <HAL_TIM_IC_Start+0xbe>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2202      	movs	r2, #2
 8003d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d48:	e023      	b.n	8003d92 <HAL_TIM_IC_Start+0x106>
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d104      	bne.n	8003d5a <HAL_TIM_IC_Start+0xce>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d58:	e01b      	b.n	8003d92 <HAL_TIM_IC_Start+0x106>
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	d104      	bne.n	8003d6a <HAL_TIM_IC_Start+0xde>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2202      	movs	r2, #2
 8003d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d68:	e013      	b.n	8003d92 <HAL_TIM_IC_Start+0x106>
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b0c      	cmp	r3, #12
 8003d6e:	d104      	bne.n	8003d7a <HAL_TIM_IC_Start+0xee>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d78:	e00b      	b.n	8003d92 <HAL_TIM_IC_Start+0x106>
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	2b10      	cmp	r3, #16
 8003d7e:	d104      	bne.n	8003d8a <HAL_TIM_IC_Start+0xfe>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2202      	movs	r2, #2
 8003d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d88:	e003      	b.n	8003d92 <HAL_TIM_IC_Start+0x106>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d104      	bne.n	8003da2 <HAL_TIM_IC_Start+0x116>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003da0:	e013      	b.n	8003dca <HAL_TIM_IC_Start+0x13e>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b04      	cmp	r3, #4
 8003da6:	d104      	bne.n	8003db2 <HAL_TIM_IC_Start+0x126>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003db0:	e00b      	b.n	8003dca <HAL_TIM_IC_Start+0x13e>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b08      	cmp	r3, #8
 8003db6:	d104      	bne.n	8003dc2 <HAL_TIM_IC_Start+0x136>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003dc0:	e003      	b.n	8003dca <HAL_TIM_IC_Start+0x13e>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2202      	movs	r2, #2
 8003dc6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	6839      	ldr	r1, [r7, #0]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f001 f96c 	bl	80050b0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a22      	ldr	r2, [pc, #136]	; (8003e68 <HAL_TIM_IC_Start+0x1dc>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d01d      	beq.n	8003e1e <HAL_TIM_IC_Start+0x192>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dea:	d018      	beq.n	8003e1e <HAL_TIM_IC_Start+0x192>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a1e      	ldr	r2, [pc, #120]	; (8003e6c <HAL_TIM_IC_Start+0x1e0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d013      	beq.n	8003e1e <HAL_TIM_IC_Start+0x192>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a1d      	ldr	r2, [pc, #116]	; (8003e70 <HAL_TIM_IC_Start+0x1e4>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d00e      	beq.n	8003e1e <HAL_TIM_IC_Start+0x192>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a1b      	ldr	r2, [pc, #108]	; (8003e74 <HAL_TIM_IC_Start+0x1e8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d009      	beq.n	8003e1e <HAL_TIM_IC_Start+0x192>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a1a      	ldr	r2, [pc, #104]	; (8003e78 <HAL_TIM_IC_Start+0x1ec>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d004      	beq.n	8003e1e <HAL_TIM_IC_Start+0x192>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a18      	ldr	r2, [pc, #96]	; (8003e7c <HAL_TIM_IC_Start+0x1f0>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d115      	bne.n	8003e4a <HAL_TIM_IC_Start+0x1be>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689a      	ldr	r2, [r3, #8]
 8003e24:	4b16      	ldr	r3, [pc, #88]	; (8003e80 <HAL_TIM_IC_Start+0x1f4>)
 8003e26:	4013      	ands	r3, r2
 8003e28:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2b06      	cmp	r3, #6
 8003e2e:	d015      	beq.n	8003e5c <HAL_TIM_IC_Start+0x1d0>
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e36:	d011      	beq.n	8003e5c <HAL_TIM_IC_Start+0x1d0>
    {
      __HAL_TIM_ENABLE(htim);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0201 	orr.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e48:	e008      	b.n	8003e5c <HAL_TIM_IC_Start+0x1d0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f042 0201 	orr.w	r2, r2, #1
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	e000      	b.n	8003e5e <HAL_TIM_IC_Start+0x1d2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	40012c00 	.word	0x40012c00
 8003e6c:	40000400 	.word	0x40000400
 8003e70:	40000800 	.word	0x40000800
 8003e74:	40000c00 	.word	0x40000c00
 8003e78:	40013400 	.word	0x40013400
 8003e7c:	40014000 	.word	0x40014000
 8003e80:	00010007 	.word	0x00010007

08003e84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d020      	beq.n	8003ee8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d01b      	beq.n	8003ee8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f06f 0202 	mvn.w	r2, #2
 8003eb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	f003 0303 	and.w	r3, r3, #3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 fba2 	bl	8004618 <HAL_TIM_IC_CaptureCallback>
 8003ed4:	e005      	b.n	8003ee2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 fb94 	bl	8004604 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 fba5 	bl	800462c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	f003 0304 	and.w	r3, r3, #4
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d020      	beq.n	8003f34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d01b      	beq.n	8003f34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f06f 0204 	mvn.w	r2, #4
 8003f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2202      	movs	r2, #2
 8003f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 fb7c 	bl	8004618 <HAL_TIM_IC_CaptureCallback>
 8003f20:	e005      	b.n	8003f2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 fb6e 	bl	8004604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 fb7f 	bl	800462c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d020      	beq.n	8003f80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f003 0308 	and.w	r3, r3, #8
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d01b      	beq.n	8003f80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f06f 0208 	mvn.w	r2, #8
 8003f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2204      	movs	r2, #4
 8003f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 fb56 	bl	8004618 <HAL_TIM_IC_CaptureCallback>
 8003f6c:	e005      	b.n	8003f7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 fb48 	bl	8004604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 fb59 	bl	800462c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	f003 0310 	and.w	r3, r3, #16
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d020      	beq.n	8003fcc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f003 0310 	and.w	r3, r3, #16
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d01b      	beq.n	8003fcc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f06f 0210 	mvn.w	r2, #16
 8003f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2208      	movs	r2, #8
 8003fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 fb30 	bl	8004618 <HAL_TIM_IC_CaptureCallback>
 8003fb8:	e005      	b.n	8003fc6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 fb22 	bl	8004604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 fb33 	bl	800462c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00c      	beq.n	8003ff0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d007      	beq.n	8003ff0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f06f 0201 	mvn.w	r2, #1
 8003fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7fd f9f4 	bl	80013d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00c      	beq.n	8004014 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004000:	2b00      	cmp	r3, #0
 8004002:	d007      	beq.n	8004014 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800400c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f001 f906 	bl	8005220 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00c      	beq.n	8004038 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004024:	2b00      	cmp	r3, #0
 8004026:	d007      	beq.n	8004038 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f001 f8fe 	bl	8005234 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00c      	beq.n	800405c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004048:	2b00      	cmp	r3, #0
 800404a:	d007      	beq.n	800405c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 faf2 	bl	8004640 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f003 0320 	and.w	r3, r3, #32
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00c      	beq.n	8004080 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f003 0320 	and.w	r3, r3, #32
 800406c:	2b00      	cmp	r3, #0
 800406e:	d007      	beq.n	8004080 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f06f 0220 	mvn.w	r2, #32
 8004078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f001 f8c6 	bl	800520c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004080:	bf00      	nop
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004094:	2300      	movs	r3, #0
 8004096:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d101      	bne.n	80040a6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80040a2:	2302      	movs	r3, #2
 80040a4:	e088      	b.n	80041b8 <HAL_TIM_IC_ConfigChannel+0x130>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d11b      	bne.n	80040ec <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80040c4:	f000 fe36 	bl	8004d34 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699a      	ldr	r2, [r3, #24]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 020c 	bic.w	r2, r2, #12
 80040d6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6999      	ldr	r1, [r3, #24]
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	619a      	str	r2, [r3, #24]
 80040ea:	e060      	b.n	80041ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d11c      	bne.n	800412c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004102:	f000 feb4 	bl	8004e6e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	699a      	ldr	r2, [r3, #24]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004114:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6999      	ldr	r1, [r3, #24]
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	021a      	lsls	r2, r3, #8
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	619a      	str	r2, [r3, #24]
 800412a:	e040      	b.n	80041ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b08      	cmp	r3, #8
 8004130:	d11b      	bne.n	800416a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004142:	f000 ff01 	bl	8004f48 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	69da      	ldr	r2, [r3, #28]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 020c 	bic.w	r2, r2, #12
 8004154:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	69d9      	ldr	r1, [r3, #28]
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	61da      	str	r2, [r3, #28]
 8004168:	e021      	b.n	80041ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b0c      	cmp	r3, #12
 800416e:	d11c      	bne.n	80041aa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004180:	f000 ff1e 	bl	8004fc0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	69da      	ldr	r2, [r3, #28]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004192:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	69d9      	ldr	r1, [r3, #28]
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	021a      	lsls	r2, r3, #8
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	61da      	str	r2, [r3, #28]
 80041a8:	e001      	b.n	80041ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3718      	adds	r7, #24
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d101      	bne.n	80041de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80041da:	2302      	movs	r3, #2
 80041dc:	e0ff      	b.n	80043de <HAL_TIM_PWM_ConfigChannel+0x21e>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b14      	cmp	r3, #20
 80041ea:	f200 80f0 	bhi.w	80043ce <HAL_TIM_PWM_ConfigChannel+0x20e>
 80041ee:	a201      	add	r2, pc, #4	; (adr r2, 80041f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80041f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f4:	08004249 	.word	0x08004249
 80041f8:	080043cf 	.word	0x080043cf
 80041fc:	080043cf 	.word	0x080043cf
 8004200:	080043cf 	.word	0x080043cf
 8004204:	08004289 	.word	0x08004289
 8004208:	080043cf 	.word	0x080043cf
 800420c:	080043cf 	.word	0x080043cf
 8004210:	080043cf 	.word	0x080043cf
 8004214:	080042cb 	.word	0x080042cb
 8004218:	080043cf 	.word	0x080043cf
 800421c:	080043cf 	.word	0x080043cf
 8004220:	080043cf 	.word	0x080043cf
 8004224:	0800430b 	.word	0x0800430b
 8004228:	080043cf 	.word	0x080043cf
 800422c:	080043cf 	.word	0x080043cf
 8004230:	080043cf 	.word	0x080043cf
 8004234:	0800434d 	.word	0x0800434d
 8004238:	080043cf 	.word	0x080043cf
 800423c:	080043cf 	.word	0x080043cf
 8004240:	080043cf 	.word	0x080043cf
 8004244:	0800438d 	.word	0x0800438d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68b9      	ldr	r1, [r7, #8]
 800424e:	4618      	mov	r0, r3
 8004250:	f000 fa9a 	bl	8004788 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	699a      	ldr	r2, [r3, #24]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0208 	orr.w	r2, r2, #8
 8004262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699a      	ldr	r2, [r3, #24]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0204 	bic.w	r2, r2, #4
 8004272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6999      	ldr	r1, [r3, #24]
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	691a      	ldr	r2, [r3, #16]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	619a      	str	r2, [r3, #24]
      break;
 8004286:	e0a5      	b.n	80043d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68b9      	ldr	r1, [r7, #8]
 800428e:	4618      	mov	r0, r3
 8004290:	f000 fb0a 	bl	80048a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	699a      	ldr	r2, [r3, #24]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	699a      	ldr	r2, [r3, #24]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6999      	ldr	r1, [r3, #24]
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	021a      	lsls	r2, r3, #8
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	430a      	orrs	r2, r1
 80042c6:	619a      	str	r2, [r3, #24]
      break;
 80042c8:	e084      	b.n	80043d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68b9      	ldr	r1, [r7, #8]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f000 fb73 	bl	80049bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	69da      	ldr	r2, [r3, #28]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f042 0208 	orr.w	r2, r2, #8
 80042e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	69da      	ldr	r2, [r3, #28]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0204 	bic.w	r2, r2, #4
 80042f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	69d9      	ldr	r1, [r3, #28]
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	61da      	str	r2, [r3, #28]
      break;
 8004308:	e064      	b.n	80043d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68b9      	ldr	r1, [r7, #8]
 8004310:	4618      	mov	r0, r3
 8004312:	f000 fbdb 	bl	8004acc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	69da      	ldr	r2, [r3, #28]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004324:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69da      	ldr	r2, [r3, #28]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004334:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	69d9      	ldr	r1, [r3, #28]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	021a      	lsls	r2, r3, #8
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	61da      	str	r2, [r3, #28]
      break;
 800434a:	e043      	b.n	80043d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68b9      	ldr	r1, [r7, #8]
 8004352:	4618      	mov	r0, r3
 8004354:	f000 fc24 	bl	8004ba0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f042 0208 	orr.w	r2, r2, #8
 8004366:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0204 	bic.w	r2, r2, #4
 8004376:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	691a      	ldr	r2, [r3, #16]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800438a:	e023      	b.n	80043d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68b9      	ldr	r1, [r7, #8]
 8004392:	4618      	mov	r0, r3
 8004394:	f000 fc68 	bl	8004c68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	021a      	lsls	r2, r3, #8
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80043cc:	e002      	b.n	80043d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	75fb      	strb	r3, [r7, #23]
      break;
 80043d2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop

080043e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d101      	bne.n	8004404 <HAL_TIM_ConfigClockSource+0x1c>
 8004400:	2302      	movs	r3, #2
 8004402:	e0b6      	b.n	8004572 <HAL_TIM_ConfigClockSource+0x18a>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004422:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004426:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800442e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004440:	d03e      	beq.n	80044c0 <HAL_TIM_ConfigClockSource+0xd8>
 8004442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004446:	f200 8087 	bhi.w	8004558 <HAL_TIM_ConfigClockSource+0x170>
 800444a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800444e:	f000 8086 	beq.w	800455e <HAL_TIM_ConfigClockSource+0x176>
 8004452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004456:	d87f      	bhi.n	8004558 <HAL_TIM_ConfigClockSource+0x170>
 8004458:	2b70      	cmp	r3, #112	; 0x70
 800445a:	d01a      	beq.n	8004492 <HAL_TIM_ConfigClockSource+0xaa>
 800445c:	2b70      	cmp	r3, #112	; 0x70
 800445e:	d87b      	bhi.n	8004558 <HAL_TIM_ConfigClockSource+0x170>
 8004460:	2b60      	cmp	r3, #96	; 0x60
 8004462:	d050      	beq.n	8004506 <HAL_TIM_ConfigClockSource+0x11e>
 8004464:	2b60      	cmp	r3, #96	; 0x60
 8004466:	d877      	bhi.n	8004558 <HAL_TIM_ConfigClockSource+0x170>
 8004468:	2b50      	cmp	r3, #80	; 0x50
 800446a:	d03c      	beq.n	80044e6 <HAL_TIM_ConfigClockSource+0xfe>
 800446c:	2b50      	cmp	r3, #80	; 0x50
 800446e:	d873      	bhi.n	8004558 <HAL_TIM_ConfigClockSource+0x170>
 8004470:	2b40      	cmp	r3, #64	; 0x40
 8004472:	d058      	beq.n	8004526 <HAL_TIM_ConfigClockSource+0x13e>
 8004474:	2b40      	cmp	r3, #64	; 0x40
 8004476:	d86f      	bhi.n	8004558 <HAL_TIM_ConfigClockSource+0x170>
 8004478:	2b30      	cmp	r3, #48	; 0x30
 800447a:	d064      	beq.n	8004546 <HAL_TIM_ConfigClockSource+0x15e>
 800447c:	2b30      	cmp	r3, #48	; 0x30
 800447e:	d86b      	bhi.n	8004558 <HAL_TIM_ConfigClockSource+0x170>
 8004480:	2b20      	cmp	r3, #32
 8004482:	d060      	beq.n	8004546 <HAL_TIM_ConfigClockSource+0x15e>
 8004484:	2b20      	cmp	r3, #32
 8004486:	d867      	bhi.n	8004558 <HAL_TIM_ConfigClockSource+0x170>
 8004488:	2b00      	cmp	r3, #0
 800448a:	d05c      	beq.n	8004546 <HAL_TIM_ConfigClockSource+0x15e>
 800448c:	2b10      	cmp	r3, #16
 800448e:	d05a      	beq.n	8004546 <HAL_TIM_ConfigClockSource+0x15e>
 8004490:	e062      	b.n	8004558 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044a2:	f000 fde5 	bl	8005070 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	609a      	str	r2, [r3, #8]
      break;
 80044be:	e04f      	b.n	8004560 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044d0:	f000 fdce 	bl	8005070 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689a      	ldr	r2, [r3, #8]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044e2:	609a      	str	r2, [r3, #8]
      break;
 80044e4:	e03c      	b.n	8004560 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044f2:	461a      	mov	r2, r3
 80044f4:	f000 fc8c 	bl	8004e10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2150      	movs	r1, #80	; 0x50
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 fd9b 	bl	800503a <TIM_ITRx_SetConfig>
      break;
 8004504:	e02c      	b.n	8004560 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004512:	461a      	mov	r2, r3
 8004514:	f000 fce8 	bl	8004ee8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2160      	movs	r1, #96	; 0x60
 800451e:	4618      	mov	r0, r3
 8004520:	f000 fd8b 	bl	800503a <TIM_ITRx_SetConfig>
      break;
 8004524:	e01c      	b.n	8004560 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004532:	461a      	mov	r2, r3
 8004534:	f000 fc6c 	bl	8004e10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2140      	movs	r1, #64	; 0x40
 800453e:	4618      	mov	r0, r3
 8004540:	f000 fd7b 	bl	800503a <TIM_ITRx_SetConfig>
      break;
 8004544:	e00c      	b.n	8004560 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4619      	mov	r1, r3
 8004550:	4610      	mov	r0, r2
 8004552:	f000 fd72 	bl	800503a <TIM_ITRx_SetConfig>
      break;
 8004556:	e003      	b.n	8004560 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	73fb      	strb	r3, [r7, #15]
      break;
 800455c:	e000      	b.n	8004560 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800455e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004570:	7bfb      	ldrb	r3, [r7, #15]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
	...

0800457c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004586:	2300      	movs	r3, #0
 8004588:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b0c      	cmp	r3, #12
 800458e:	d831      	bhi.n	80045f4 <HAL_TIM_ReadCapturedValue+0x78>
 8004590:	a201      	add	r2, pc, #4	; (adr r2, 8004598 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004596:	bf00      	nop
 8004598:	080045cd 	.word	0x080045cd
 800459c:	080045f5 	.word	0x080045f5
 80045a0:	080045f5 	.word	0x080045f5
 80045a4:	080045f5 	.word	0x080045f5
 80045a8:	080045d7 	.word	0x080045d7
 80045ac:	080045f5 	.word	0x080045f5
 80045b0:	080045f5 	.word	0x080045f5
 80045b4:	080045f5 	.word	0x080045f5
 80045b8:	080045e1 	.word	0x080045e1
 80045bc:	080045f5 	.word	0x080045f5
 80045c0:	080045f5 	.word	0x080045f5
 80045c4:	080045f5 	.word	0x080045f5
 80045c8:	080045eb 	.word	0x080045eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d2:	60fb      	str	r3, [r7, #12]

      break;
 80045d4:	e00f      	b.n	80045f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045dc:	60fb      	str	r3, [r7, #12]

      break;
 80045de:	e00a      	b.n	80045f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e6:	60fb      	str	r3, [r7, #12]

      break;
 80045e8:	e005      	b.n	80045f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f0:	60fb      	str	r3, [r7, #12]

      break;
 80045f2:	e000      	b.n	80045f6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80045f4:	bf00      	nop
  }

  return tmpreg;
 80045f6:	68fb      	ldr	r3, [r7, #12]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a40      	ldr	r2, [pc, #256]	; (8004768 <TIM_Base_SetConfig+0x114>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d013      	beq.n	8004694 <TIM_Base_SetConfig+0x40>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004672:	d00f      	beq.n	8004694 <TIM_Base_SetConfig+0x40>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a3d      	ldr	r2, [pc, #244]	; (800476c <TIM_Base_SetConfig+0x118>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d00b      	beq.n	8004694 <TIM_Base_SetConfig+0x40>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a3c      	ldr	r2, [pc, #240]	; (8004770 <TIM_Base_SetConfig+0x11c>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d007      	beq.n	8004694 <TIM_Base_SetConfig+0x40>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a3b      	ldr	r2, [pc, #236]	; (8004774 <TIM_Base_SetConfig+0x120>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d003      	beq.n	8004694 <TIM_Base_SetConfig+0x40>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a3a      	ldr	r2, [pc, #232]	; (8004778 <TIM_Base_SetConfig+0x124>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d108      	bne.n	80046a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a2f      	ldr	r2, [pc, #188]	; (8004768 <TIM_Base_SetConfig+0x114>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d01f      	beq.n	80046ee <TIM_Base_SetConfig+0x9a>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b4:	d01b      	beq.n	80046ee <TIM_Base_SetConfig+0x9a>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a2c      	ldr	r2, [pc, #176]	; (800476c <TIM_Base_SetConfig+0x118>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d017      	beq.n	80046ee <TIM_Base_SetConfig+0x9a>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a2b      	ldr	r2, [pc, #172]	; (8004770 <TIM_Base_SetConfig+0x11c>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d013      	beq.n	80046ee <TIM_Base_SetConfig+0x9a>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a2a      	ldr	r2, [pc, #168]	; (8004774 <TIM_Base_SetConfig+0x120>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d00f      	beq.n	80046ee <TIM_Base_SetConfig+0x9a>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a29      	ldr	r2, [pc, #164]	; (8004778 <TIM_Base_SetConfig+0x124>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d00b      	beq.n	80046ee <TIM_Base_SetConfig+0x9a>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a28      	ldr	r2, [pc, #160]	; (800477c <TIM_Base_SetConfig+0x128>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d007      	beq.n	80046ee <TIM_Base_SetConfig+0x9a>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a27      	ldr	r2, [pc, #156]	; (8004780 <TIM_Base_SetConfig+0x12c>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d003      	beq.n	80046ee <TIM_Base_SetConfig+0x9a>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a26      	ldr	r2, [pc, #152]	; (8004784 <TIM_Base_SetConfig+0x130>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d108      	bne.n	8004700 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	4313      	orrs	r3, r2
 800470c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a10      	ldr	r2, [pc, #64]	; (8004768 <TIM_Base_SetConfig+0x114>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d00f      	beq.n	800474c <TIM_Base_SetConfig+0xf8>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a12      	ldr	r2, [pc, #72]	; (8004778 <TIM_Base_SetConfig+0x124>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d00b      	beq.n	800474c <TIM_Base_SetConfig+0xf8>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a11      	ldr	r2, [pc, #68]	; (800477c <TIM_Base_SetConfig+0x128>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d007      	beq.n	800474c <TIM_Base_SetConfig+0xf8>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a10      	ldr	r2, [pc, #64]	; (8004780 <TIM_Base_SetConfig+0x12c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d003      	beq.n	800474c <TIM_Base_SetConfig+0xf8>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a0f      	ldr	r2, [pc, #60]	; (8004784 <TIM_Base_SetConfig+0x130>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d103      	bne.n	8004754 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	691a      	ldr	r2, [r3, #16]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	615a      	str	r2, [r3, #20]
}
 800475a:	bf00      	nop
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	40012c00 	.word	0x40012c00
 800476c:	40000400 	.word	0x40000400
 8004770:	40000800 	.word	0x40000800
 8004774:	40000c00 	.word	0x40000c00
 8004778:	40013400 	.word	0x40013400
 800477c:	40014000 	.word	0x40014000
 8004780:	40014400 	.word	0x40014400
 8004784:	40014800 	.word	0x40014800

08004788 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004788:	b480      	push	{r7}
 800478a:	b087      	sub	sp, #28
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	f023 0201 	bic.w	r2, r3, #1
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f023 0303 	bic.w	r3, r3, #3
 80047c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f023 0302 	bic.w	r3, r3, #2
 80047d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	4313      	orrs	r3, r2
 80047de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a2c      	ldr	r2, [pc, #176]	; (8004894 <TIM_OC1_SetConfig+0x10c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d00f      	beq.n	8004808 <TIM_OC1_SetConfig+0x80>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a2b      	ldr	r2, [pc, #172]	; (8004898 <TIM_OC1_SetConfig+0x110>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d00b      	beq.n	8004808 <TIM_OC1_SetConfig+0x80>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a2a      	ldr	r2, [pc, #168]	; (800489c <TIM_OC1_SetConfig+0x114>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d007      	beq.n	8004808 <TIM_OC1_SetConfig+0x80>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a29      	ldr	r2, [pc, #164]	; (80048a0 <TIM_OC1_SetConfig+0x118>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d003      	beq.n	8004808 <TIM_OC1_SetConfig+0x80>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a28      	ldr	r2, [pc, #160]	; (80048a4 <TIM_OC1_SetConfig+0x11c>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d10c      	bne.n	8004822 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	f023 0308 	bic.w	r3, r3, #8
 800480e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	4313      	orrs	r3, r2
 8004818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f023 0304 	bic.w	r3, r3, #4
 8004820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a1b      	ldr	r2, [pc, #108]	; (8004894 <TIM_OC1_SetConfig+0x10c>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d00f      	beq.n	800484a <TIM_OC1_SetConfig+0xc2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a1a      	ldr	r2, [pc, #104]	; (8004898 <TIM_OC1_SetConfig+0x110>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d00b      	beq.n	800484a <TIM_OC1_SetConfig+0xc2>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a19      	ldr	r2, [pc, #100]	; (800489c <TIM_OC1_SetConfig+0x114>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d007      	beq.n	800484a <TIM_OC1_SetConfig+0xc2>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a18      	ldr	r2, [pc, #96]	; (80048a0 <TIM_OC1_SetConfig+0x118>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d003      	beq.n	800484a <TIM_OC1_SetConfig+0xc2>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a17      	ldr	r2, [pc, #92]	; (80048a4 <TIM_OC1_SetConfig+0x11c>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d111      	bne.n	800486e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	4313      	orrs	r3, r2
 8004862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	4313      	orrs	r3, r2
 800486c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	621a      	str	r2, [r3, #32]
}
 8004888:	bf00      	nop
 800488a:	371c      	adds	r7, #28
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr
 8004894:	40012c00 	.word	0x40012c00
 8004898:	40013400 	.word	0x40013400
 800489c:	40014000 	.word	0x40014000
 80048a0:	40014400 	.word	0x40014400
 80048a4:	40014800 	.word	0x40014800

080048a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	f023 0210 	bic.w	r2, r3, #16
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	021b      	lsls	r3, r3, #8
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f023 0320 	bic.w	r3, r3, #32
 80048f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	4313      	orrs	r3, r2
 8004902:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a28      	ldr	r2, [pc, #160]	; (80049a8 <TIM_OC2_SetConfig+0x100>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d003      	beq.n	8004914 <TIM_OC2_SetConfig+0x6c>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a27      	ldr	r2, [pc, #156]	; (80049ac <TIM_OC2_SetConfig+0x104>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d10d      	bne.n	8004930 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800491a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	011b      	lsls	r3, r3, #4
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	4313      	orrs	r3, r2
 8004926:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800492e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a1d      	ldr	r2, [pc, #116]	; (80049a8 <TIM_OC2_SetConfig+0x100>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d00f      	beq.n	8004958 <TIM_OC2_SetConfig+0xb0>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a1c      	ldr	r2, [pc, #112]	; (80049ac <TIM_OC2_SetConfig+0x104>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d00b      	beq.n	8004958 <TIM_OC2_SetConfig+0xb0>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a1b      	ldr	r2, [pc, #108]	; (80049b0 <TIM_OC2_SetConfig+0x108>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d007      	beq.n	8004958 <TIM_OC2_SetConfig+0xb0>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a1a      	ldr	r2, [pc, #104]	; (80049b4 <TIM_OC2_SetConfig+0x10c>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d003      	beq.n	8004958 <TIM_OC2_SetConfig+0xb0>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a19      	ldr	r2, [pc, #100]	; (80049b8 <TIM_OC2_SetConfig+0x110>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d113      	bne.n	8004980 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800495e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004966:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	4313      	orrs	r3, r2
 8004972:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	4313      	orrs	r3, r2
 800497e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	621a      	str	r2, [r3, #32]
}
 800499a:	bf00      	nop
 800499c:	371c      	adds	r7, #28
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	40012c00 	.word	0x40012c00
 80049ac:	40013400 	.word	0x40013400
 80049b0:	40014000 	.word	0x40014000
 80049b4:	40014400 	.word	0x40014400
 80049b8:	40014800 	.word	0x40014800

080049bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049bc:	b480      	push	{r7}
 80049be:	b087      	sub	sp, #28
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f023 0303 	bic.w	r3, r3, #3
 80049f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	021b      	lsls	r3, r3, #8
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a27      	ldr	r2, [pc, #156]	; (8004ab8 <TIM_OC3_SetConfig+0xfc>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d003      	beq.n	8004a26 <TIM_OC3_SetConfig+0x6a>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a26      	ldr	r2, [pc, #152]	; (8004abc <TIM_OC3_SetConfig+0x100>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d10d      	bne.n	8004a42 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	021b      	lsls	r3, r3, #8
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a1c      	ldr	r2, [pc, #112]	; (8004ab8 <TIM_OC3_SetConfig+0xfc>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d00f      	beq.n	8004a6a <TIM_OC3_SetConfig+0xae>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a1b      	ldr	r2, [pc, #108]	; (8004abc <TIM_OC3_SetConfig+0x100>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d00b      	beq.n	8004a6a <TIM_OC3_SetConfig+0xae>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a1a      	ldr	r2, [pc, #104]	; (8004ac0 <TIM_OC3_SetConfig+0x104>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d007      	beq.n	8004a6a <TIM_OC3_SetConfig+0xae>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a19      	ldr	r2, [pc, #100]	; (8004ac4 <TIM_OC3_SetConfig+0x108>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d003      	beq.n	8004a6a <TIM_OC3_SetConfig+0xae>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a18      	ldr	r2, [pc, #96]	; (8004ac8 <TIM_OC3_SetConfig+0x10c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d113      	bne.n	8004a92 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	011b      	lsls	r3, r3, #4
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	621a      	str	r2, [r3, #32]
}
 8004aac:	bf00      	nop
 8004aae:	371c      	adds	r7, #28
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	40012c00 	.word	0x40012c00
 8004abc:	40013400 	.word	0x40013400
 8004ac0:	40014000 	.word	0x40014000
 8004ac4:	40014400 	.word	0x40014400
 8004ac8:	40014800 	.word	0x40014800

08004acc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b087      	sub	sp, #28
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	021b      	lsls	r3, r3, #8
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	031b      	lsls	r3, r3, #12
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a18      	ldr	r2, [pc, #96]	; (8004b8c <TIM_OC4_SetConfig+0xc0>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d00f      	beq.n	8004b50 <TIM_OC4_SetConfig+0x84>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a17      	ldr	r2, [pc, #92]	; (8004b90 <TIM_OC4_SetConfig+0xc4>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d00b      	beq.n	8004b50 <TIM_OC4_SetConfig+0x84>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a16      	ldr	r2, [pc, #88]	; (8004b94 <TIM_OC4_SetConfig+0xc8>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d007      	beq.n	8004b50 <TIM_OC4_SetConfig+0x84>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a15      	ldr	r2, [pc, #84]	; (8004b98 <TIM_OC4_SetConfig+0xcc>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d003      	beq.n	8004b50 <TIM_OC4_SetConfig+0x84>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a14      	ldr	r2, [pc, #80]	; (8004b9c <TIM_OC4_SetConfig+0xd0>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d109      	bne.n	8004b64 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	019b      	lsls	r3, r3, #6
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	621a      	str	r2, [r3, #32]
}
 8004b7e:	bf00      	nop
 8004b80:	371c      	adds	r7, #28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	40012c00 	.word	0x40012c00
 8004b90:	40013400 	.word	0x40013400
 8004b94:	40014000 	.word	0x40014000
 8004b98:	40014400 	.word	0x40014400
 8004b9c:	40014800 	.word	0x40014800

08004ba0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004be4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	041b      	lsls	r3, r3, #16
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a17      	ldr	r2, [pc, #92]	; (8004c54 <TIM_OC5_SetConfig+0xb4>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d00f      	beq.n	8004c1a <TIM_OC5_SetConfig+0x7a>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a16      	ldr	r2, [pc, #88]	; (8004c58 <TIM_OC5_SetConfig+0xb8>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d00b      	beq.n	8004c1a <TIM_OC5_SetConfig+0x7a>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a15      	ldr	r2, [pc, #84]	; (8004c5c <TIM_OC5_SetConfig+0xbc>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d007      	beq.n	8004c1a <TIM_OC5_SetConfig+0x7a>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a14      	ldr	r2, [pc, #80]	; (8004c60 <TIM_OC5_SetConfig+0xc0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d003      	beq.n	8004c1a <TIM_OC5_SetConfig+0x7a>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a13      	ldr	r2, [pc, #76]	; (8004c64 <TIM_OC5_SetConfig+0xc4>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d109      	bne.n	8004c2e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	021b      	lsls	r3, r3, #8
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685a      	ldr	r2, [r3, #4]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	621a      	str	r2, [r3, #32]
}
 8004c48:	bf00      	nop
 8004c4a:	371c      	adds	r7, #28
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	40012c00 	.word	0x40012c00
 8004c58:	40013400 	.word	0x40013400
 8004c5c:	40014000 	.word	0x40014000
 8004c60:	40014400 	.word	0x40014400
 8004c64:	40014800 	.word	0x40014800

08004c68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b087      	sub	sp, #28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	021b      	lsls	r3, r3, #8
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004cae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	051b      	lsls	r3, r3, #20
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a18      	ldr	r2, [pc, #96]	; (8004d20 <TIM_OC6_SetConfig+0xb8>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d00f      	beq.n	8004ce4 <TIM_OC6_SetConfig+0x7c>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a17      	ldr	r2, [pc, #92]	; (8004d24 <TIM_OC6_SetConfig+0xbc>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d00b      	beq.n	8004ce4 <TIM_OC6_SetConfig+0x7c>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a16      	ldr	r2, [pc, #88]	; (8004d28 <TIM_OC6_SetConfig+0xc0>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d007      	beq.n	8004ce4 <TIM_OC6_SetConfig+0x7c>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a15      	ldr	r2, [pc, #84]	; (8004d2c <TIM_OC6_SetConfig+0xc4>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d003      	beq.n	8004ce4 <TIM_OC6_SetConfig+0x7c>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a14      	ldr	r2, [pc, #80]	; (8004d30 <TIM_OC6_SetConfig+0xc8>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d109      	bne.n	8004cf8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	029b      	lsls	r3, r3, #10
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	621a      	str	r2, [r3, #32]
}
 8004d12:	bf00      	nop
 8004d14:	371c      	adds	r7, #28
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	40012c00 	.word	0x40012c00
 8004d24:	40013400 	.word	0x40013400
 8004d28:	40014000 	.word	0x40014000
 8004d2c:	40014400 	.word	0x40014400
 8004d30:	40014800 	.word	0x40014800

08004d34 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b087      	sub	sp, #28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
 8004d40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	f023 0201 	bic.w	r2, r3, #1
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	4a26      	ldr	r2, [pc, #152]	; (8004df8 <TIM_TI1_SetConfig+0xc4>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d017      	beq.n	8004d92 <TIM_TI1_SetConfig+0x5e>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d68:	d013      	beq.n	8004d92 <TIM_TI1_SetConfig+0x5e>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	4a23      	ldr	r2, [pc, #140]	; (8004dfc <TIM_TI1_SetConfig+0xc8>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d00f      	beq.n	8004d92 <TIM_TI1_SetConfig+0x5e>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	4a22      	ldr	r2, [pc, #136]	; (8004e00 <TIM_TI1_SetConfig+0xcc>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d00b      	beq.n	8004d92 <TIM_TI1_SetConfig+0x5e>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	4a21      	ldr	r2, [pc, #132]	; (8004e04 <TIM_TI1_SetConfig+0xd0>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d007      	beq.n	8004d92 <TIM_TI1_SetConfig+0x5e>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	4a20      	ldr	r2, [pc, #128]	; (8004e08 <TIM_TI1_SetConfig+0xd4>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d003      	beq.n	8004d92 <TIM_TI1_SetConfig+0x5e>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	4a1f      	ldr	r2, [pc, #124]	; (8004e0c <TIM_TI1_SetConfig+0xd8>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d101      	bne.n	8004d96 <TIM_TI1_SetConfig+0x62>
 8004d92:	2301      	movs	r3, #1
 8004d94:	e000      	b.n	8004d98 <TIM_TI1_SetConfig+0x64>
 8004d96:	2300      	movs	r3, #0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d008      	beq.n	8004dae <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f023 0303 	bic.w	r3, r3, #3
 8004da2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	617b      	str	r3, [r7, #20]
 8004dac:	e003      	b.n	8004db6 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f043 0301 	orr.w	r3, r3, #1
 8004db4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	011b      	lsls	r3, r3, #4
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f023 030a 	bic.w	r3, r3, #10
 8004dd0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	f003 030a 	and.w	r3, r3, #10
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	621a      	str	r2, [r3, #32]
}
 8004dea:	bf00      	nop
 8004dec:	371c      	adds	r7, #28
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	40012c00 	.word	0x40012c00
 8004dfc:	40000400 	.word	0x40000400
 8004e00:	40000800 	.word	0x40000800
 8004e04:	40000c00 	.word	0x40000c00
 8004e08:	40013400 	.word	0x40013400
 8004e0c:	40014000 	.word	0x40014000

08004e10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6a1b      	ldr	r3, [r3, #32]
 8004e20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	f023 0201 	bic.w	r2, r3, #1
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	011b      	lsls	r3, r3, #4
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f023 030a 	bic.w	r3, r3, #10
 8004e4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	621a      	str	r2, [r3, #32]
}
 8004e62:	bf00      	nop
 8004e64:	371c      	adds	r7, #28
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr

08004e6e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b087      	sub	sp, #28
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	60f8      	str	r0, [r7, #12]
 8004e76:	60b9      	str	r1, [r7, #8]
 8004e78:	607a      	str	r2, [r7, #4]
 8004e7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	f023 0210 	bic.w	r2, r3, #16
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	021b      	lsls	r3, r3, #8
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004eac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	031b      	lsls	r3, r3, #12
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ec0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	011b      	lsls	r3, r3, #4
 8004ec6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	621a      	str	r2, [r3, #32]
}
 8004edc:	bf00      	nop
 8004ede:	371c      	adds	r7, #28
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	f023 0210 	bic.w	r2, r3, #16
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	031b      	lsls	r3, r3, #12
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f24:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	011b      	lsls	r3, r3, #4
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	621a      	str	r2, [r3, #32]
}
 8004f3c:	bf00      	nop
 8004f3e:	371c      	adds	r7, #28
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
 8004f54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	69db      	ldr	r3, [r3, #28]
 8004f6c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	f023 0303 	bic.w	r3, r3, #3
 8004f74:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f84:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	011b      	lsls	r3, r3, #4
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004f98:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	021b      	lsls	r3, r3, #8
 8004f9e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	621a      	str	r2, [r3, #32]
}
 8004fb4:	bf00      	nop
 8004fb6:	371c      	adds	r7, #28
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b087      	sub	sp, #28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
 8004fcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	021b      	lsls	r3, r3, #8
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ffe:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	031b      	lsls	r3, r3, #12
 8005004:	b29b      	uxth	r3, r3
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	4313      	orrs	r3, r2
 800500a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005012:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	031b      	lsls	r3, r3, #12
 8005018:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	621a      	str	r2, [r3, #32]
}
 800502e:	bf00      	nop
 8005030:	371c      	adds	r7, #28
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800503a:	b480      	push	{r7}
 800503c:	b085      	sub	sp, #20
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
 8005042:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005050:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4313      	orrs	r3, r2
 8005058:	f043 0307 	orr.w	r3, r3, #7
 800505c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	609a      	str	r2, [r3, #8]
}
 8005064:	bf00      	nop
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005070:	b480      	push	{r7}
 8005072:	b087      	sub	sp, #28
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
 800507c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800508a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	021a      	lsls	r2, r3, #8
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	431a      	orrs	r2, r3
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	4313      	orrs	r3, r2
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	4313      	orrs	r3, r2
 800509c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	609a      	str	r2, [r3, #8]
}
 80050a4:	bf00      	nop
 80050a6:	371c      	adds	r7, #28
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b087      	sub	sp, #28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f003 031f 	and.w	r3, r3, #31
 80050c2:	2201      	movs	r2, #1
 80050c4:	fa02 f303 	lsl.w	r3, r2, r3
 80050c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6a1a      	ldr	r2, [r3, #32]
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	43db      	mvns	r3, r3
 80050d2:	401a      	ands	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6a1a      	ldr	r2, [r3, #32]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	f003 031f 	and.w	r3, r3, #31
 80050e2:	6879      	ldr	r1, [r7, #4]
 80050e4:	fa01 f303 	lsl.w	r3, r1, r3
 80050e8:	431a      	orrs	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	621a      	str	r2, [r3, #32]
}
 80050ee:	bf00      	nop
 80050f0:	371c      	adds	r7, #28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
	...

080050fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800510c:	2b01      	cmp	r3, #1
 800510e:	d101      	bne.n	8005114 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005110:	2302      	movs	r3, #2
 8005112:	e068      	b.n	80051e6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2202      	movs	r2, #2
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a2e      	ldr	r2, [pc, #184]	; (80051f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d004      	beq.n	8005148 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a2d      	ldr	r2, [pc, #180]	; (80051f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d108      	bne.n	800515a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800514e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005160:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	4313      	orrs	r3, r2
 800516a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a1e      	ldr	r2, [pc, #120]	; (80051f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d01d      	beq.n	80051ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005186:	d018      	beq.n	80051ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a1b      	ldr	r2, [pc, #108]	; (80051fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d013      	beq.n	80051ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a1a      	ldr	r2, [pc, #104]	; (8005200 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d00e      	beq.n	80051ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a18      	ldr	r2, [pc, #96]	; (8005204 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d009      	beq.n	80051ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a13      	ldr	r2, [pc, #76]	; (80051f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d004      	beq.n	80051ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a14      	ldr	r2, [pc, #80]	; (8005208 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d10c      	bne.n	80051d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3714      	adds	r7, #20
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	40012c00 	.word	0x40012c00
 80051f8:	40013400 	.word	0x40013400
 80051fc:	40000400 	.word	0x40000400
 8005200:	40000800 	.word	0x40000800
 8005204:	40000c00 	.word	0x40000c00
 8005208:	40014000 	.word	0x40014000

0800520c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e040      	b.n	80052dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800525e:	2b00      	cmp	r3, #0
 8005260:	d106      	bne.n	8005270 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7fc fbc8 	bl	8001a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2224      	movs	r2, #36	; 0x24
 8005274:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f022 0201 	bic.w	r2, r2, #1
 8005284:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 fc34 	bl	8005afc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f979 	bl	800558c <UART_SetConfig>
 800529a:	4603      	mov	r3, r0
 800529c:	2b01      	cmp	r3, #1
 800529e:	d101      	bne.n	80052a4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e01b      	b.n	80052dc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689a      	ldr	r2, [r3, #8]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f042 0201 	orr.w	r2, r2, #1
 80052d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 fcb3 	bl	8005c40 <UART_CheckIdleState>
 80052da:	4603      	mov	r3, r0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3708      	adds	r7, #8
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b08a      	sub	sp, #40	; 0x28
 80052e8:	af02      	add	r7, sp, #8
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	603b      	str	r3, [r7, #0]
 80052f0:	4613      	mov	r3, r2
 80052f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052f8:	2b20      	cmp	r3, #32
 80052fa:	d178      	bne.n	80053ee <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d002      	beq.n	8005308 <HAL_UART_Transmit+0x24>
 8005302:	88fb      	ldrh	r3, [r7, #6]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e071      	b.n	80053f0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2221      	movs	r2, #33	; 0x21
 8005318:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800531a:	f7fc fc23 	bl	8001b64 <HAL_GetTick>
 800531e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	88fa      	ldrh	r2, [r7, #6]
 8005324:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	88fa      	ldrh	r2, [r7, #6]
 800532c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005338:	d108      	bne.n	800534c <HAL_UART_Transmit+0x68>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d104      	bne.n	800534c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005342:	2300      	movs	r3, #0
 8005344:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	61bb      	str	r3, [r7, #24]
 800534a:	e003      	b.n	8005354 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005350:	2300      	movs	r3, #0
 8005352:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005354:	e030      	b.n	80053b8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	2200      	movs	r2, #0
 800535e:	2180      	movs	r1, #128	; 0x80
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f000 fd15 	bl	8005d90 <UART_WaitOnFlagUntilTimeout>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d004      	beq.n	8005376 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2220      	movs	r2, #32
 8005370:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e03c      	b.n	80053f0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10b      	bne.n	8005394 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	881a      	ldrh	r2, [r3, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005388:	b292      	uxth	r2, r2
 800538a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	3302      	adds	r3, #2
 8005390:	61bb      	str	r3, [r7, #24]
 8005392:	e008      	b.n	80053a6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	781a      	ldrb	r2, [r3, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	b292      	uxth	r2, r2
 800539e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	3301      	adds	r3, #1
 80053a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	3b01      	subs	r3, #1
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053be:	b29b      	uxth	r3, r3
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1c8      	bne.n	8005356 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	2200      	movs	r2, #0
 80053cc:	2140      	movs	r1, #64	; 0x40
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f000 fcde 	bl	8005d90 <UART_WaitOnFlagUntilTimeout>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d004      	beq.n	80053e4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2220      	movs	r2, #32
 80053de:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e005      	b.n	80053f0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2220      	movs	r2, #32
 80053e8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80053ea:	2300      	movs	r3, #0
 80053ec:	e000      	b.n	80053f0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80053ee:	2302      	movs	r3, #2
  }
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3720      	adds	r7, #32
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b08a      	sub	sp, #40	; 0x28
 80053fc:	af02      	add	r7, sp, #8
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	603b      	str	r3, [r7, #0]
 8005404:	4613      	mov	r3, r2
 8005406:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800540e:	2b20      	cmp	r3, #32
 8005410:	f040 80b6 	bne.w	8005580 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d002      	beq.n	8005420 <HAL_UART_Receive+0x28>
 800541a:	88fb      	ldrh	r3, [r7, #6]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d101      	bne.n	8005424 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e0ae      	b.n	8005582 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2222      	movs	r2, #34	; 0x22
 8005430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800543a:	f7fc fb93 	bl	8001b64 <HAL_GetTick>
 800543e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	88fa      	ldrh	r2, [r7, #6]
 8005444:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	88fa      	ldrh	r2, [r7, #6]
 800544c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005458:	d10e      	bne.n	8005478 <HAL_UART_Receive+0x80>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d105      	bne.n	800546e <HAL_UART_Receive+0x76>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005468:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800546c:	e02d      	b.n	80054ca <HAL_UART_Receive+0xd2>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	22ff      	movs	r2, #255	; 0xff
 8005472:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005476:	e028      	b.n	80054ca <HAL_UART_Receive+0xd2>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d10d      	bne.n	800549c <HAL_UART_Receive+0xa4>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d104      	bne.n	8005492 <HAL_UART_Receive+0x9a>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	22ff      	movs	r2, #255	; 0xff
 800548c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005490:	e01b      	b.n	80054ca <HAL_UART_Receive+0xd2>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	227f      	movs	r2, #127	; 0x7f
 8005496:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800549a:	e016      	b.n	80054ca <HAL_UART_Receive+0xd2>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054a4:	d10d      	bne.n	80054c2 <HAL_UART_Receive+0xca>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d104      	bne.n	80054b8 <HAL_UART_Receive+0xc0>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	227f      	movs	r2, #127	; 0x7f
 80054b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054b6:	e008      	b.n	80054ca <HAL_UART_Receive+0xd2>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	223f      	movs	r2, #63	; 0x3f
 80054bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054c0:	e003      	b.n	80054ca <HAL_UART_Receive+0xd2>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80054d0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054da:	d108      	bne.n	80054ee <HAL_UART_Receive+0xf6>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d104      	bne.n	80054ee <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80054e4:	2300      	movs	r3, #0
 80054e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	61bb      	str	r3, [r7, #24]
 80054ec:	e003      	b.n	80054f6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054f2:	2300      	movs	r3, #0
 80054f4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80054f6:	e037      	b.n	8005568 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	2200      	movs	r2, #0
 8005500:	2120      	movs	r1, #32
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f000 fc44 	bl	8005d90 <UART_WaitOnFlagUntilTimeout>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d005      	beq.n	800551a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2220      	movs	r2, #32
 8005512:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e033      	b.n	8005582 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10c      	bne.n	800553a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005526:	b29a      	uxth	r2, r3
 8005528:	8a7b      	ldrh	r3, [r7, #18]
 800552a:	4013      	ands	r3, r2
 800552c:	b29a      	uxth	r2, r3
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	3302      	adds	r3, #2
 8005536:	61bb      	str	r3, [r7, #24]
 8005538:	e00d      	b.n	8005556 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005540:	b29b      	uxth	r3, r3
 8005542:	b2da      	uxtb	r2, r3
 8005544:	8a7b      	ldrh	r3, [r7, #18]
 8005546:	b2db      	uxtb	r3, r3
 8005548:	4013      	ands	r3, r2
 800554a:	b2da      	uxtb	r2, r3
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	3301      	adds	r3, #1
 8005554:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800555c:	b29b      	uxth	r3, r3
 800555e:	3b01      	subs	r3, #1
 8005560:	b29a      	uxth	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800556e:	b29b      	uxth	r3, r3
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1c1      	bne.n	80054f8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2220      	movs	r2, #32
 8005578:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800557c:	2300      	movs	r3, #0
 800557e:	e000      	b.n	8005582 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8005580:	2302      	movs	r3, #2
  }
}
 8005582:	4618      	mov	r0, r3
 8005584:	3720      	adds	r7, #32
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
	...

0800558c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800558c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005590:	b08a      	sub	sp, #40	; 0x28
 8005592:	af00      	add	r7, sp, #0
 8005594:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005596:	2300      	movs	r3, #0
 8005598:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	689a      	ldr	r2, [r3, #8]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	431a      	orrs	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	431a      	orrs	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	69db      	ldr	r3, [r3, #28]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	4ba4      	ldr	r3, [pc, #656]	; (800584c <UART_SetConfig+0x2c0>)
 80055bc:	4013      	ands	r3, r2
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	6812      	ldr	r2, [r2, #0]
 80055c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055c4:	430b      	orrs	r3, r1
 80055c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	68da      	ldr	r2, [r3, #12]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	430a      	orrs	r2, r1
 80055dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a99      	ldr	r2, [pc, #612]	; (8005850 <UART_SetConfig+0x2c4>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d004      	beq.n	80055f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f4:	4313      	orrs	r3, r2
 80055f6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005608:	430a      	orrs	r2, r1
 800560a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a90      	ldr	r2, [pc, #576]	; (8005854 <UART_SetConfig+0x2c8>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d126      	bne.n	8005664 <UART_SetConfig+0xd8>
 8005616:	4b90      	ldr	r3, [pc, #576]	; (8005858 <UART_SetConfig+0x2cc>)
 8005618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800561c:	f003 0303 	and.w	r3, r3, #3
 8005620:	2b03      	cmp	r3, #3
 8005622:	d81b      	bhi.n	800565c <UART_SetConfig+0xd0>
 8005624:	a201      	add	r2, pc, #4	; (adr r2, 800562c <UART_SetConfig+0xa0>)
 8005626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562a:	bf00      	nop
 800562c:	0800563d 	.word	0x0800563d
 8005630:	0800564d 	.word	0x0800564d
 8005634:	08005645 	.word	0x08005645
 8005638:	08005655 	.word	0x08005655
 800563c:	2301      	movs	r3, #1
 800563e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005642:	e116      	b.n	8005872 <UART_SetConfig+0x2e6>
 8005644:	2302      	movs	r3, #2
 8005646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800564a:	e112      	b.n	8005872 <UART_SetConfig+0x2e6>
 800564c:	2304      	movs	r3, #4
 800564e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005652:	e10e      	b.n	8005872 <UART_SetConfig+0x2e6>
 8005654:	2308      	movs	r3, #8
 8005656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800565a:	e10a      	b.n	8005872 <UART_SetConfig+0x2e6>
 800565c:	2310      	movs	r3, #16
 800565e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005662:	e106      	b.n	8005872 <UART_SetConfig+0x2e6>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a7c      	ldr	r2, [pc, #496]	; (800585c <UART_SetConfig+0x2d0>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d138      	bne.n	80056e0 <UART_SetConfig+0x154>
 800566e:	4b7a      	ldr	r3, [pc, #488]	; (8005858 <UART_SetConfig+0x2cc>)
 8005670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005674:	f003 030c 	and.w	r3, r3, #12
 8005678:	2b0c      	cmp	r3, #12
 800567a:	d82d      	bhi.n	80056d8 <UART_SetConfig+0x14c>
 800567c:	a201      	add	r2, pc, #4	; (adr r2, 8005684 <UART_SetConfig+0xf8>)
 800567e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005682:	bf00      	nop
 8005684:	080056b9 	.word	0x080056b9
 8005688:	080056d9 	.word	0x080056d9
 800568c:	080056d9 	.word	0x080056d9
 8005690:	080056d9 	.word	0x080056d9
 8005694:	080056c9 	.word	0x080056c9
 8005698:	080056d9 	.word	0x080056d9
 800569c:	080056d9 	.word	0x080056d9
 80056a0:	080056d9 	.word	0x080056d9
 80056a4:	080056c1 	.word	0x080056c1
 80056a8:	080056d9 	.word	0x080056d9
 80056ac:	080056d9 	.word	0x080056d9
 80056b0:	080056d9 	.word	0x080056d9
 80056b4:	080056d1 	.word	0x080056d1
 80056b8:	2300      	movs	r3, #0
 80056ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056be:	e0d8      	b.n	8005872 <UART_SetConfig+0x2e6>
 80056c0:	2302      	movs	r3, #2
 80056c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056c6:	e0d4      	b.n	8005872 <UART_SetConfig+0x2e6>
 80056c8:	2304      	movs	r3, #4
 80056ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ce:	e0d0      	b.n	8005872 <UART_SetConfig+0x2e6>
 80056d0:	2308      	movs	r3, #8
 80056d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056d6:	e0cc      	b.n	8005872 <UART_SetConfig+0x2e6>
 80056d8:	2310      	movs	r3, #16
 80056da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056de:	e0c8      	b.n	8005872 <UART_SetConfig+0x2e6>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a5e      	ldr	r2, [pc, #376]	; (8005860 <UART_SetConfig+0x2d4>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d125      	bne.n	8005736 <UART_SetConfig+0x1aa>
 80056ea:	4b5b      	ldr	r3, [pc, #364]	; (8005858 <UART_SetConfig+0x2cc>)
 80056ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80056f4:	2b30      	cmp	r3, #48	; 0x30
 80056f6:	d016      	beq.n	8005726 <UART_SetConfig+0x19a>
 80056f8:	2b30      	cmp	r3, #48	; 0x30
 80056fa:	d818      	bhi.n	800572e <UART_SetConfig+0x1a2>
 80056fc:	2b20      	cmp	r3, #32
 80056fe:	d00a      	beq.n	8005716 <UART_SetConfig+0x18a>
 8005700:	2b20      	cmp	r3, #32
 8005702:	d814      	bhi.n	800572e <UART_SetConfig+0x1a2>
 8005704:	2b00      	cmp	r3, #0
 8005706:	d002      	beq.n	800570e <UART_SetConfig+0x182>
 8005708:	2b10      	cmp	r3, #16
 800570a:	d008      	beq.n	800571e <UART_SetConfig+0x192>
 800570c:	e00f      	b.n	800572e <UART_SetConfig+0x1a2>
 800570e:	2300      	movs	r3, #0
 8005710:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005714:	e0ad      	b.n	8005872 <UART_SetConfig+0x2e6>
 8005716:	2302      	movs	r3, #2
 8005718:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800571c:	e0a9      	b.n	8005872 <UART_SetConfig+0x2e6>
 800571e:	2304      	movs	r3, #4
 8005720:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005724:	e0a5      	b.n	8005872 <UART_SetConfig+0x2e6>
 8005726:	2308      	movs	r3, #8
 8005728:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800572c:	e0a1      	b.n	8005872 <UART_SetConfig+0x2e6>
 800572e:	2310      	movs	r3, #16
 8005730:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005734:	e09d      	b.n	8005872 <UART_SetConfig+0x2e6>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a4a      	ldr	r2, [pc, #296]	; (8005864 <UART_SetConfig+0x2d8>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d125      	bne.n	800578c <UART_SetConfig+0x200>
 8005740:	4b45      	ldr	r3, [pc, #276]	; (8005858 <UART_SetConfig+0x2cc>)
 8005742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005746:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800574a:	2bc0      	cmp	r3, #192	; 0xc0
 800574c:	d016      	beq.n	800577c <UART_SetConfig+0x1f0>
 800574e:	2bc0      	cmp	r3, #192	; 0xc0
 8005750:	d818      	bhi.n	8005784 <UART_SetConfig+0x1f8>
 8005752:	2b80      	cmp	r3, #128	; 0x80
 8005754:	d00a      	beq.n	800576c <UART_SetConfig+0x1e0>
 8005756:	2b80      	cmp	r3, #128	; 0x80
 8005758:	d814      	bhi.n	8005784 <UART_SetConfig+0x1f8>
 800575a:	2b00      	cmp	r3, #0
 800575c:	d002      	beq.n	8005764 <UART_SetConfig+0x1d8>
 800575e:	2b40      	cmp	r3, #64	; 0x40
 8005760:	d008      	beq.n	8005774 <UART_SetConfig+0x1e8>
 8005762:	e00f      	b.n	8005784 <UART_SetConfig+0x1f8>
 8005764:	2300      	movs	r3, #0
 8005766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800576a:	e082      	b.n	8005872 <UART_SetConfig+0x2e6>
 800576c:	2302      	movs	r3, #2
 800576e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005772:	e07e      	b.n	8005872 <UART_SetConfig+0x2e6>
 8005774:	2304      	movs	r3, #4
 8005776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800577a:	e07a      	b.n	8005872 <UART_SetConfig+0x2e6>
 800577c:	2308      	movs	r3, #8
 800577e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005782:	e076      	b.n	8005872 <UART_SetConfig+0x2e6>
 8005784:	2310      	movs	r3, #16
 8005786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800578a:	e072      	b.n	8005872 <UART_SetConfig+0x2e6>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a35      	ldr	r2, [pc, #212]	; (8005868 <UART_SetConfig+0x2dc>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d12a      	bne.n	80057ec <UART_SetConfig+0x260>
 8005796:	4b30      	ldr	r3, [pc, #192]	; (8005858 <UART_SetConfig+0x2cc>)
 8005798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800579c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057a4:	d01a      	beq.n	80057dc <UART_SetConfig+0x250>
 80057a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057aa:	d81b      	bhi.n	80057e4 <UART_SetConfig+0x258>
 80057ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057b0:	d00c      	beq.n	80057cc <UART_SetConfig+0x240>
 80057b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057b6:	d815      	bhi.n	80057e4 <UART_SetConfig+0x258>
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d003      	beq.n	80057c4 <UART_SetConfig+0x238>
 80057bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057c0:	d008      	beq.n	80057d4 <UART_SetConfig+0x248>
 80057c2:	e00f      	b.n	80057e4 <UART_SetConfig+0x258>
 80057c4:	2300      	movs	r3, #0
 80057c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ca:	e052      	b.n	8005872 <UART_SetConfig+0x2e6>
 80057cc:	2302      	movs	r3, #2
 80057ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057d2:	e04e      	b.n	8005872 <UART_SetConfig+0x2e6>
 80057d4:	2304      	movs	r3, #4
 80057d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057da:	e04a      	b.n	8005872 <UART_SetConfig+0x2e6>
 80057dc:	2308      	movs	r3, #8
 80057de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057e2:	e046      	b.n	8005872 <UART_SetConfig+0x2e6>
 80057e4:	2310      	movs	r3, #16
 80057e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ea:	e042      	b.n	8005872 <UART_SetConfig+0x2e6>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a17      	ldr	r2, [pc, #92]	; (8005850 <UART_SetConfig+0x2c4>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d13a      	bne.n	800586c <UART_SetConfig+0x2e0>
 80057f6:	4b18      	ldr	r3, [pc, #96]	; (8005858 <UART_SetConfig+0x2cc>)
 80057f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005800:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005804:	d01a      	beq.n	800583c <UART_SetConfig+0x2b0>
 8005806:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800580a:	d81b      	bhi.n	8005844 <UART_SetConfig+0x2b8>
 800580c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005810:	d00c      	beq.n	800582c <UART_SetConfig+0x2a0>
 8005812:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005816:	d815      	bhi.n	8005844 <UART_SetConfig+0x2b8>
 8005818:	2b00      	cmp	r3, #0
 800581a:	d003      	beq.n	8005824 <UART_SetConfig+0x298>
 800581c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005820:	d008      	beq.n	8005834 <UART_SetConfig+0x2a8>
 8005822:	e00f      	b.n	8005844 <UART_SetConfig+0x2b8>
 8005824:	2300      	movs	r3, #0
 8005826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800582a:	e022      	b.n	8005872 <UART_SetConfig+0x2e6>
 800582c:	2302      	movs	r3, #2
 800582e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005832:	e01e      	b.n	8005872 <UART_SetConfig+0x2e6>
 8005834:	2304      	movs	r3, #4
 8005836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800583a:	e01a      	b.n	8005872 <UART_SetConfig+0x2e6>
 800583c:	2308      	movs	r3, #8
 800583e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005842:	e016      	b.n	8005872 <UART_SetConfig+0x2e6>
 8005844:	2310      	movs	r3, #16
 8005846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800584a:	e012      	b.n	8005872 <UART_SetConfig+0x2e6>
 800584c:	efff69f3 	.word	0xefff69f3
 8005850:	40008000 	.word	0x40008000
 8005854:	40013800 	.word	0x40013800
 8005858:	40021000 	.word	0x40021000
 800585c:	40004400 	.word	0x40004400
 8005860:	40004800 	.word	0x40004800
 8005864:	40004c00 	.word	0x40004c00
 8005868:	40005000 	.word	0x40005000
 800586c:	2310      	movs	r3, #16
 800586e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a9f      	ldr	r2, [pc, #636]	; (8005af4 <UART_SetConfig+0x568>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d17a      	bne.n	8005972 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800587c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005880:	2b08      	cmp	r3, #8
 8005882:	d824      	bhi.n	80058ce <UART_SetConfig+0x342>
 8005884:	a201      	add	r2, pc, #4	; (adr r2, 800588c <UART_SetConfig+0x300>)
 8005886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588a:	bf00      	nop
 800588c:	080058b1 	.word	0x080058b1
 8005890:	080058cf 	.word	0x080058cf
 8005894:	080058b9 	.word	0x080058b9
 8005898:	080058cf 	.word	0x080058cf
 800589c:	080058bf 	.word	0x080058bf
 80058a0:	080058cf 	.word	0x080058cf
 80058a4:	080058cf 	.word	0x080058cf
 80058a8:	080058cf 	.word	0x080058cf
 80058ac:	080058c7 	.word	0x080058c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058b0:	f7fd f9e0 	bl	8002c74 <HAL_RCC_GetPCLK1Freq>
 80058b4:	61f8      	str	r0, [r7, #28]
        break;
 80058b6:	e010      	b.n	80058da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058b8:	4b8f      	ldr	r3, [pc, #572]	; (8005af8 <UART_SetConfig+0x56c>)
 80058ba:	61fb      	str	r3, [r7, #28]
        break;
 80058bc:	e00d      	b.n	80058da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058be:	f7fd f941 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 80058c2:	61f8      	str	r0, [r7, #28]
        break;
 80058c4:	e009      	b.n	80058da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058ca:	61fb      	str	r3, [r7, #28]
        break;
 80058cc:	e005      	b.n	80058da <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80058ce:	2300      	movs	r3, #0
 80058d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80058d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 80fb 	beq.w	8005ad8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	4613      	mov	r3, r2
 80058e8:	005b      	lsls	r3, r3, #1
 80058ea:	4413      	add	r3, r2
 80058ec:	69fa      	ldr	r2, [r7, #28]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d305      	bcc.n	80058fe <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80058f8:	69fa      	ldr	r2, [r7, #28]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d903      	bls.n	8005906 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005904:	e0e8      	b.n	8005ad8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	2200      	movs	r2, #0
 800590a:	461c      	mov	r4, r3
 800590c:	4615      	mov	r5, r2
 800590e:	f04f 0200 	mov.w	r2, #0
 8005912:	f04f 0300 	mov.w	r3, #0
 8005916:	022b      	lsls	r3, r5, #8
 8005918:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800591c:	0222      	lsls	r2, r4, #8
 800591e:	68f9      	ldr	r1, [r7, #12]
 8005920:	6849      	ldr	r1, [r1, #4]
 8005922:	0849      	lsrs	r1, r1, #1
 8005924:	2000      	movs	r0, #0
 8005926:	4688      	mov	r8, r1
 8005928:	4681      	mov	r9, r0
 800592a:	eb12 0a08 	adds.w	sl, r2, r8
 800592e:	eb43 0b09 	adc.w	fp, r3, r9
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	603b      	str	r3, [r7, #0]
 800593a:	607a      	str	r2, [r7, #4]
 800593c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005940:	4650      	mov	r0, sl
 8005942:	4659      	mov	r1, fp
 8005944:	f7fb f940 	bl	8000bc8 <__aeabi_uldivmod>
 8005948:	4602      	mov	r2, r0
 800594a:	460b      	mov	r3, r1
 800594c:	4613      	mov	r3, r2
 800594e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005956:	d308      	bcc.n	800596a <UART_SetConfig+0x3de>
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800595e:	d204      	bcs.n	800596a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	60da      	str	r2, [r3, #12]
 8005968:	e0b6      	b.n	8005ad8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005970:	e0b2      	b.n	8005ad8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800597a:	d15e      	bne.n	8005a3a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800597c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005980:	2b08      	cmp	r3, #8
 8005982:	d828      	bhi.n	80059d6 <UART_SetConfig+0x44a>
 8005984:	a201      	add	r2, pc, #4	; (adr r2, 800598c <UART_SetConfig+0x400>)
 8005986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800598a:	bf00      	nop
 800598c:	080059b1 	.word	0x080059b1
 8005990:	080059b9 	.word	0x080059b9
 8005994:	080059c1 	.word	0x080059c1
 8005998:	080059d7 	.word	0x080059d7
 800599c:	080059c7 	.word	0x080059c7
 80059a0:	080059d7 	.word	0x080059d7
 80059a4:	080059d7 	.word	0x080059d7
 80059a8:	080059d7 	.word	0x080059d7
 80059ac:	080059cf 	.word	0x080059cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059b0:	f7fd f960 	bl	8002c74 <HAL_RCC_GetPCLK1Freq>
 80059b4:	61f8      	str	r0, [r7, #28]
        break;
 80059b6:	e014      	b.n	80059e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059b8:	f7fd f972 	bl	8002ca0 <HAL_RCC_GetPCLK2Freq>
 80059bc:	61f8      	str	r0, [r7, #28]
        break;
 80059be:	e010      	b.n	80059e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059c0:	4b4d      	ldr	r3, [pc, #308]	; (8005af8 <UART_SetConfig+0x56c>)
 80059c2:	61fb      	str	r3, [r7, #28]
        break;
 80059c4:	e00d      	b.n	80059e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059c6:	f7fd f8bd 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 80059ca:	61f8      	str	r0, [r7, #28]
        break;
 80059cc:	e009      	b.n	80059e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059d2:	61fb      	str	r3, [r7, #28]
        break;
 80059d4:	e005      	b.n	80059e2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80059d6:	2300      	movs	r3, #0
 80059d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80059e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d077      	beq.n	8005ad8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	005a      	lsls	r2, r3, #1
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	085b      	lsrs	r3, r3, #1
 80059f2:	441a      	add	r2, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059fc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	2b0f      	cmp	r3, #15
 8005a02:	d916      	bls.n	8005a32 <UART_SetConfig+0x4a6>
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a0a:	d212      	bcs.n	8005a32 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	f023 030f 	bic.w	r3, r3, #15
 8005a14:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	085b      	lsrs	r3, r3, #1
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	f003 0307 	and.w	r3, r3, #7
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	8afb      	ldrh	r3, [r7, #22]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	8afa      	ldrh	r2, [r7, #22]
 8005a2e:	60da      	str	r2, [r3, #12]
 8005a30:	e052      	b.n	8005ad8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005a38:	e04e      	b.n	8005ad8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a3e:	2b08      	cmp	r3, #8
 8005a40:	d827      	bhi.n	8005a92 <UART_SetConfig+0x506>
 8005a42:	a201      	add	r2, pc, #4	; (adr r2, 8005a48 <UART_SetConfig+0x4bc>)
 8005a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a48:	08005a6d 	.word	0x08005a6d
 8005a4c:	08005a75 	.word	0x08005a75
 8005a50:	08005a7d 	.word	0x08005a7d
 8005a54:	08005a93 	.word	0x08005a93
 8005a58:	08005a83 	.word	0x08005a83
 8005a5c:	08005a93 	.word	0x08005a93
 8005a60:	08005a93 	.word	0x08005a93
 8005a64:	08005a93 	.word	0x08005a93
 8005a68:	08005a8b 	.word	0x08005a8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a6c:	f7fd f902 	bl	8002c74 <HAL_RCC_GetPCLK1Freq>
 8005a70:	61f8      	str	r0, [r7, #28]
        break;
 8005a72:	e014      	b.n	8005a9e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a74:	f7fd f914 	bl	8002ca0 <HAL_RCC_GetPCLK2Freq>
 8005a78:	61f8      	str	r0, [r7, #28]
        break;
 8005a7a:	e010      	b.n	8005a9e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a7c:	4b1e      	ldr	r3, [pc, #120]	; (8005af8 <UART_SetConfig+0x56c>)
 8005a7e:	61fb      	str	r3, [r7, #28]
        break;
 8005a80:	e00d      	b.n	8005a9e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a82:	f7fd f85f 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 8005a86:	61f8      	str	r0, [r7, #28]
        break;
 8005a88:	e009      	b.n	8005a9e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a8e:	61fb      	str	r3, [r7, #28]
        break;
 8005a90:	e005      	b.n	8005a9e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005a92:	2300      	movs	r3, #0
 8005a94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005a9c:	bf00      	nop
    }

    if (pclk != 0U)
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d019      	beq.n	8005ad8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	085a      	lsrs	r2, r3, #1
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	441a      	add	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	2b0f      	cmp	r3, #15
 8005abc:	d909      	bls.n	8005ad2 <UART_SetConfig+0x546>
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ac4:	d205      	bcs.n	8005ad2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	60da      	str	r2, [r3, #12]
 8005ad0:	e002      	b.n	8005ad8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005ae4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3728      	adds	r7, #40	; 0x28
 8005aec:	46bd      	mov	sp, r7
 8005aee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005af2:	bf00      	nop
 8005af4:	40008000 	.word	0x40008000
 8005af8:	00f42400 	.word	0x00f42400

08005afc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	f003 0308 	and.w	r3, r3, #8
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00a      	beq.n	8005b26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00a      	beq.n	8005b48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	430a      	orrs	r2, r1
 8005b46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	f003 0302 	and.w	r3, r3, #2
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00a      	beq.n	8005b6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	430a      	orrs	r2, r1
 8005b68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6e:	f003 0304 	and.w	r3, r3, #4
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00a      	beq.n	8005b8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b90:	f003 0310 	and.w	r3, r3, #16
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00a      	beq.n	8005bae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	f003 0320 	and.w	r3, r3, #32
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00a      	beq.n	8005bd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	430a      	orrs	r2, r1
 8005bce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d01a      	beq.n	8005c12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bfa:	d10a      	bne.n	8005c12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00a      	beq.n	8005c34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	430a      	orrs	r2, r1
 8005c32:	605a      	str	r2, [r3, #4]
  }
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b098      	sub	sp, #96	; 0x60
 8005c44:	af02      	add	r7, sp, #8
 8005c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c50:	f7fb ff88 	bl	8001b64 <HAL_GetTick>
 8005c54:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0308 	and.w	r3, r3, #8
 8005c60:	2b08      	cmp	r3, #8
 8005c62:	d12e      	bne.n	8005cc2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 f88c 	bl	8005d90 <UART_WaitOnFlagUntilTimeout>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d021      	beq.n	8005cc2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c86:	e853 3f00 	ldrex	r3, [r3]
 8005c8a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c92:	653b      	str	r3, [r7, #80]	; 0x50
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	461a      	mov	r2, r3
 8005c9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c9c:	647b      	str	r3, [r7, #68]	; 0x44
 8005c9e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ca2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ca4:	e841 2300 	strex	r3, r2, [r1]
 8005ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1e6      	bne.n	8005c7e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e062      	b.n	8005d88 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0304 	and.w	r3, r3, #4
 8005ccc:	2b04      	cmp	r3, #4
 8005cce:	d149      	bne.n	8005d64 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cd4:	9300      	str	r3, [sp, #0]
 8005cd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f856 	bl	8005d90 <UART_WaitOnFlagUntilTimeout>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d03c      	beq.n	8005d64 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	e853 3f00 	ldrex	r3, [r3]
 8005cf6:	623b      	str	r3, [r7, #32]
   return(result);
 8005cf8:	6a3b      	ldr	r3, [r7, #32]
 8005cfa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	461a      	mov	r2, r3
 8005d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d08:	633b      	str	r3, [r7, #48]	; 0x30
 8005d0a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d10:	e841 2300 	strex	r3, r2, [r1]
 8005d14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1e6      	bne.n	8005cea <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3308      	adds	r3, #8
 8005d22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	e853 3f00 	ldrex	r3, [r3]
 8005d2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f023 0301 	bic.w	r3, r3, #1
 8005d32:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	3308      	adds	r3, #8
 8005d3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d3c:	61fa      	str	r2, [r7, #28]
 8005d3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d40:	69b9      	ldr	r1, [r7, #24]
 8005d42:	69fa      	ldr	r2, [r7, #28]
 8005d44:	e841 2300 	strex	r3, r2, [r1]
 8005d48:	617b      	str	r3, [r7, #20]
   return(result);
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1e5      	bne.n	8005d1c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2220      	movs	r2, #32
 8005d54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e011      	b.n	8005d88 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2220      	movs	r2, #32
 8005d68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3758      	adds	r7, #88	; 0x58
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	603b      	str	r3, [r7, #0]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005da0:	e049      	b.n	8005e36 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da8:	d045      	beq.n	8005e36 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005daa:	f7fb fedb 	bl	8001b64 <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	69ba      	ldr	r2, [r7, #24]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d302      	bcc.n	8005dc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e048      	b.n	8005e56 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0304 	and.w	r3, r3, #4
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d031      	beq.n	8005e36 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	69db      	ldr	r3, [r3, #28]
 8005dd8:	f003 0308 	and.w	r3, r3, #8
 8005ddc:	2b08      	cmp	r3, #8
 8005dde:	d110      	bne.n	8005e02 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2208      	movs	r2, #8
 8005de6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f000 f838 	bl	8005e5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2208      	movs	r2, #8
 8005df2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e029      	b.n	8005e56 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	69db      	ldr	r3, [r3, #28]
 8005e08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e10:	d111      	bne.n	8005e36 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f000 f81e 	bl	8005e5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2220      	movs	r2, #32
 8005e26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e00f      	b.n	8005e56 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	69da      	ldr	r2, [r3, #28]
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	4013      	ands	r3, r2
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	bf0c      	ite	eq
 8005e46:	2301      	moveq	r3, #1
 8005e48:	2300      	movne	r3, #0
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	79fb      	ldrb	r3, [r7, #7]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d0a6      	beq.n	8005da2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b095      	sub	sp, #84	; 0x54
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e6e:	e853 3f00 	ldrex	r3, [r3]
 8005e72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	461a      	mov	r2, r3
 8005e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e84:	643b      	str	r3, [r7, #64]	; 0x40
 8005e86:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e8c:	e841 2300 	strex	r3, r2, [r1]
 8005e90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1e6      	bne.n	8005e66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	3308      	adds	r3, #8
 8005e9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea0:	6a3b      	ldr	r3, [r7, #32]
 8005ea2:	e853 3f00 	ldrex	r3, [r3]
 8005ea6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	f023 0301 	bic.w	r3, r3, #1
 8005eae:	64bb      	str	r3, [r7, #72]	; 0x48
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	3308      	adds	r3, #8
 8005eb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005eb8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005eba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ebe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ec0:	e841 2300 	strex	r3, r2, [r1]
 8005ec4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1e5      	bne.n	8005e98 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d118      	bne.n	8005f06 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	e853 3f00 	ldrex	r3, [r3]
 8005ee0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	f023 0310 	bic.w	r3, r3, #16
 8005ee8:	647b      	str	r3, [r7, #68]	; 0x44
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ef2:	61bb      	str	r3, [r7, #24]
 8005ef4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef6:	6979      	ldr	r1, [r7, #20]
 8005ef8:	69ba      	ldr	r2, [r7, #24]
 8005efa:	e841 2300 	strex	r3, r2, [r1]
 8005efe:	613b      	str	r3, [r7, #16]
   return(result);
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1e6      	bne.n	8005ed4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2220      	movs	r2, #32
 8005f0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005f1a:	bf00      	nop
 8005f1c:	3754      	adds	r7, #84	; 0x54
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
	...

08005f28 <__NVIC_SetPriority>:
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	4603      	mov	r3, r0
 8005f30:	6039      	str	r1, [r7, #0]
 8005f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	db0a      	blt.n	8005f52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	b2da      	uxtb	r2, r3
 8005f40:	490c      	ldr	r1, [pc, #48]	; (8005f74 <__NVIC_SetPriority+0x4c>)
 8005f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f46:	0112      	lsls	r2, r2, #4
 8005f48:	b2d2      	uxtb	r2, r2
 8005f4a:	440b      	add	r3, r1
 8005f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005f50:	e00a      	b.n	8005f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	b2da      	uxtb	r2, r3
 8005f56:	4908      	ldr	r1, [pc, #32]	; (8005f78 <__NVIC_SetPriority+0x50>)
 8005f58:	79fb      	ldrb	r3, [r7, #7]
 8005f5a:	f003 030f 	and.w	r3, r3, #15
 8005f5e:	3b04      	subs	r3, #4
 8005f60:	0112      	lsls	r2, r2, #4
 8005f62:	b2d2      	uxtb	r2, r2
 8005f64:	440b      	add	r3, r1
 8005f66:	761a      	strb	r2, [r3, #24]
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	e000e100 	.word	0xe000e100
 8005f78:	e000ed00 	.word	0xe000ed00

08005f7c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005f80:	4b05      	ldr	r3, [pc, #20]	; (8005f98 <SysTick_Handler+0x1c>)
 8005f82:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005f84:	f002 f818 	bl	8007fb8 <xTaskGetSchedulerState>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d001      	beq.n	8005f92 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005f8e:	f002 fe03 	bl	8008b98 <xPortSysTickHandler>
  }
}
 8005f92:	bf00      	nop
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	e000e010 	.word	0xe000e010

08005f9c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	f06f 0004 	mvn.w	r0, #4
 8005fa6:	f7ff ffbf 	bl	8005f28 <__NVIC_SetPriority>
#endif
}
 8005faa:	bf00      	nop
 8005fac:	bd80      	pop	{r7, pc}
	...

08005fb0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fb6:	f3ef 8305 	mrs	r3, IPSR
 8005fba:	603b      	str	r3, [r7, #0]
  return(result);
 8005fbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d003      	beq.n	8005fca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005fc2:	f06f 0305 	mvn.w	r3, #5
 8005fc6:	607b      	str	r3, [r7, #4]
 8005fc8:	e00c      	b.n	8005fe4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005fca:	4b0a      	ldr	r3, [pc, #40]	; (8005ff4 <osKernelInitialize+0x44>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d105      	bne.n	8005fde <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005fd2:	4b08      	ldr	r3, [pc, #32]	; (8005ff4 <osKernelInitialize+0x44>)
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	607b      	str	r3, [r7, #4]
 8005fdc:	e002      	b.n	8005fe4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005fde:	f04f 33ff 	mov.w	r3, #4294967295
 8005fe2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005fe4:	687b      	ldr	r3, [r7, #4]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	370c      	adds	r7, #12
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	20000370 	.word	0x20000370

08005ff8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ffe:	f3ef 8305 	mrs	r3, IPSR
 8006002:	603b      	str	r3, [r7, #0]
  return(result);
 8006004:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006006:	2b00      	cmp	r3, #0
 8006008:	d003      	beq.n	8006012 <osKernelStart+0x1a>
    stat = osErrorISR;
 800600a:	f06f 0305 	mvn.w	r3, #5
 800600e:	607b      	str	r3, [r7, #4]
 8006010:	e010      	b.n	8006034 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006012:	4b0b      	ldr	r3, [pc, #44]	; (8006040 <osKernelStart+0x48>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d109      	bne.n	800602e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800601a:	f7ff ffbf 	bl	8005f9c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800601e:	4b08      	ldr	r3, [pc, #32]	; (8006040 <osKernelStart+0x48>)
 8006020:	2202      	movs	r2, #2
 8006022:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006024:	f001 fb6c 	bl	8007700 <vTaskStartScheduler>
      stat = osOK;
 8006028:	2300      	movs	r3, #0
 800602a:	607b      	str	r3, [r7, #4]
 800602c:	e002      	b.n	8006034 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800602e:	f04f 33ff 	mov.w	r3, #4294967295
 8006032:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006034:	687b      	ldr	r3, [r7, #4]
}
 8006036:	4618      	mov	r0, r3
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	20000370 	.word	0x20000370

08006044 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006044:	b580      	push	{r7, lr}
 8006046:	b08e      	sub	sp, #56	; 0x38
 8006048:	af04      	add	r7, sp, #16
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006050:	2300      	movs	r3, #0
 8006052:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006054:	f3ef 8305 	mrs	r3, IPSR
 8006058:	617b      	str	r3, [r7, #20]
  return(result);
 800605a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800605c:	2b00      	cmp	r3, #0
 800605e:	d17e      	bne.n	800615e <osThreadNew+0x11a>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d07b      	beq.n	800615e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006066:	2380      	movs	r3, #128	; 0x80
 8006068:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800606a:	2318      	movs	r3, #24
 800606c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800606e:	2300      	movs	r3, #0
 8006070:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006072:	f04f 33ff 	mov.w	r3, #4294967295
 8006076:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d045      	beq.n	800610a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d002      	beq.n	800608c <osThreadNew+0x48>
        name = attr->name;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d002      	beq.n	800609a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d008      	beq.n	80060b2 <osThreadNew+0x6e>
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	2b38      	cmp	r3, #56	; 0x38
 80060a4:	d805      	bhi.n	80060b2 <osThreadNew+0x6e>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f003 0301 	and.w	r3, r3, #1
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d001      	beq.n	80060b6 <osThreadNew+0x72>
        return (NULL);
 80060b2:	2300      	movs	r3, #0
 80060b4:	e054      	b.n	8006160 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d003      	beq.n	80060c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	089b      	lsrs	r3, r3, #2
 80060c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00e      	beq.n	80060ec <osThreadNew+0xa8>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	2bb7      	cmp	r3, #183	; 0xb7
 80060d4:	d90a      	bls.n	80060ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d006      	beq.n	80060ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d002      	beq.n	80060ec <osThreadNew+0xa8>
        mem = 1;
 80060e6:	2301      	movs	r3, #1
 80060e8:	61bb      	str	r3, [r7, #24]
 80060ea:	e010      	b.n	800610e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10c      	bne.n	800610e <osThreadNew+0xca>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d108      	bne.n	800610e <osThreadNew+0xca>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d104      	bne.n	800610e <osThreadNew+0xca>
          mem = 0;
 8006104:	2300      	movs	r3, #0
 8006106:	61bb      	str	r3, [r7, #24]
 8006108:	e001      	b.n	800610e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800610a:	2300      	movs	r3, #0
 800610c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d110      	bne.n	8006136 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800611c:	9202      	str	r2, [sp, #8]
 800611e:	9301      	str	r3, [sp, #4]
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	9300      	str	r3, [sp, #0]
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	6a3a      	ldr	r2, [r7, #32]
 8006128:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f001 f824 	bl	8007178 <xTaskCreateStatic>
 8006130:	4603      	mov	r3, r0
 8006132:	613b      	str	r3, [r7, #16]
 8006134:	e013      	b.n	800615e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d110      	bne.n	800615e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800613c:	6a3b      	ldr	r3, [r7, #32]
 800613e:	b29a      	uxth	r2, r3
 8006140:	f107 0310 	add.w	r3, r7, #16
 8006144:	9301      	str	r3, [sp, #4]
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f001 f86f 	bl	8007232 <xTaskCreate>
 8006154:	4603      	mov	r3, r0
 8006156:	2b01      	cmp	r3, #1
 8006158:	d001      	beq.n	800615e <osThreadNew+0x11a>
            hTask = NULL;
 800615a:	2300      	movs	r3, #0
 800615c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800615e:	693b      	ldr	r3, [r7, #16]
}
 8006160:	4618      	mov	r0, r3
 8006162:	3728      	adds	r7, #40	; 0x28
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8006168:	b580      	push	{r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006174:	f3ef 8305 	mrs	r3, IPSR
 8006178:	60bb      	str	r3, [r7, #8]
  return(result);
 800617a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 800617c:	2b00      	cmp	r3, #0
 800617e:	d003      	beq.n	8006188 <osThreadTerminate+0x20>
    stat = osErrorISR;
 8006180:	f06f 0305 	mvn.w	r3, #5
 8006184:	617b      	str	r3, [r7, #20]
 8006186:	e017      	b.n	80061b8 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d103      	bne.n	8006196 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 800618e:	f06f 0303 	mvn.w	r3, #3
 8006192:	617b      	str	r3, [r7, #20]
 8006194:	e010      	b.n	80061b8 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8006196:	6938      	ldr	r0, [r7, #16]
 8006198:	f001 fa4c 	bl	8007634 <eTaskGetState>
 800619c:	4603      	mov	r3, r0
 800619e:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 80061a0:	7bfb      	ldrb	r3, [r7, #15]
 80061a2:	2b04      	cmp	r3, #4
 80061a4:	d005      	beq.n	80061b2 <osThreadTerminate+0x4a>
      stat = osOK;
 80061a6:	2300      	movs	r3, #0
 80061a8:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 80061aa:	6938      	ldr	r0, [r7, #16]
 80061ac:	f001 f99c 	bl	80074e8 <vTaskDelete>
 80061b0:	e002      	b.n	80061b8 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 80061b2:	f06f 0302 	mvn.w	r3, #2
 80061b6:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 80061b8:	697b      	ldr	r3, [r7, #20]
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3718      	adds	r7, #24
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b084      	sub	sp, #16
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061ca:	f3ef 8305 	mrs	r3, IPSR
 80061ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80061d0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d003      	beq.n	80061de <osDelay+0x1c>
    stat = osErrorISR;
 80061d6:	f06f 0305 	mvn.w	r3, #5
 80061da:	60fb      	str	r3, [r7, #12]
 80061dc:	e007      	b.n	80061ee <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80061de:	2300      	movs	r3, #0
 80061e0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d002      	beq.n	80061ee <osDelay+0x2c>
      vTaskDelay(ticks);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f001 f9ef 	bl	80075cc <vTaskDelay>
    }
  }

  return (stat);
 80061ee:	68fb      	ldr	r3, [r7, #12]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b08a      	sub	sp, #40	; 0x28
 80061fc:	af02      	add	r7, sp, #8
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006204:	2300      	movs	r3, #0
 8006206:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006208:	f3ef 8305 	mrs	r3, IPSR
 800620c:	613b      	str	r3, [r7, #16]
  return(result);
 800620e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006210:	2b00      	cmp	r3, #0
 8006212:	d15f      	bne.n	80062d4 <osMessageQueueNew+0xdc>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d05c      	beq.n	80062d4 <osMessageQueueNew+0xdc>
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d059      	beq.n	80062d4 <osMessageQueueNew+0xdc>
    mem = -1;
 8006220:	f04f 33ff 	mov.w	r3, #4294967295
 8006224:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d029      	beq.n	8006280 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d012      	beq.n	800625a <osMessageQueueNew+0x62>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	2b4f      	cmp	r3, #79	; 0x4f
 800623a:	d90e      	bls.n	800625a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00a      	beq.n	800625a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	695a      	ldr	r2, [r3, #20]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	68b9      	ldr	r1, [r7, #8]
 800624c:	fb01 f303 	mul.w	r3, r1, r3
 8006250:	429a      	cmp	r2, r3
 8006252:	d302      	bcc.n	800625a <osMessageQueueNew+0x62>
        mem = 1;
 8006254:	2301      	movs	r3, #1
 8006256:	61bb      	str	r3, [r7, #24]
 8006258:	e014      	b.n	8006284 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d110      	bne.n	8006284 <osMessageQueueNew+0x8c>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10c      	bne.n	8006284 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800626e:	2b00      	cmp	r3, #0
 8006270:	d108      	bne.n	8006284 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d104      	bne.n	8006284 <osMessageQueueNew+0x8c>
          mem = 0;
 800627a:	2300      	movs	r3, #0
 800627c:	61bb      	str	r3, [r7, #24]
 800627e:	e001      	b.n	8006284 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006280:	2300      	movs	r3, #0
 8006282:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d10b      	bne.n	80062a2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	691a      	ldr	r2, [r3, #16]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	2100      	movs	r1, #0
 8006294:	9100      	str	r1, [sp, #0]
 8006296:	68b9      	ldr	r1, [r7, #8]
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f000 fa2f 	bl	80066fc <xQueueGenericCreateStatic>
 800629e:	61f8      	str	r0, [r7, #28]
 80062a0:	e008      	b.n	80062b4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d105      	bne.n	80062b4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80062a8:	2200      	movs	r2, #0
 80062aa:	68b9      	ldr	r1, [r7, #8]
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f000 fa9d 	bl	80067ec <xQueueGenericCreate>
 80062b2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00c      	beq.n	80062d4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d003      	beq.n	80062c8 <osMessageQueueNew+0xd0>
        name = attr->name;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	617b      	str	r3, [r7, #20]
 80062c6:	e001      	b.n	80062cc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80062c8:	2300      	movs	r3, #0
 80062ca:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80062cc:	6979      	ldr	r1, [r7, #20]
 80062ce:	69f8      	ldr	r0, [r7, #28]
 80062d0:	f000 fef4 	bl	80070bc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80062d4:	69fb      	ldr	r3, [r7, #28]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3720      	adds	r7, #32
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
	...

080062e0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b088      	sub	sp, #32
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	603b      	str	r3, [r7, #0]
 80062ec:	4613      	mov	r3, r2
 80062ee:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80062f4:	2300      	movs	r3, #0
 80062f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062f8:	f3ef 8305 	mrs	r3, IPSR
 80062fc:	617b      	str	r3, [r7, #20]
  return(result);
 80062fe:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006300:	2b00      	cmp	r3, #0
 8006302:	d028      	beq.n	8006356 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d005      	beq.n	8006316 <osMessageQueuePut+0x36>
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d002      	beq.n	8006316 <osMessageQueuePut+0x36>
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d003      	beq.n	800631e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006316:	f06f 0303 	mvn.w	r3, #3
 800631a:	61fb      	str	r3, [r7, #28]
 800631c:	e038      	b.n	8006390 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800631e:	2300      	movs	r3, #0
 8006320:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006322:	f107 0210 	add.w	r2, r7, #16
 8006326:	2300      	movs	r3, #0
 8006328:	68b9      	ldr	r1, [r7, #8]
 800632a:	69b8      	ldr	r0, [r7, #24]
 800632c:	f000 fbba 	bl	8006aa4 <xQueueGenericSendFromISR>
 8006330:	4603      	mov	r3, r0
 8006332:	2b01      	cmp	r3, #1
 8006334:	d003      	beq.n	800633e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006336:	f06f 0302 	mvn.w	r3, #2
 800633a:	61fb      	str	r3, [r7, #28]
 800633c:	e028      	b.n	8006390 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d025      	beq.n	8006390 <osMessageQueuePut+0xb0>
 8006344:	4b15      	ldr	r3, [pc, #84]	; (800639c <osMessageQueuePut+0xbc>)
 8006346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800634a:	601a      	str	r2, [r3, #0]
 800634c:	f3bf 8f4f 	dsb	sy
 8006350:	f3bf 8f6f 	isb	sy
 8006354:	e01c      	b.n	8006390 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d002      	beq.n	8006362 <osMessageQueuePut+0x82>
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d103      	bne.n	800636a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006362:	f06f 0303 	mvn.w	r3, #3
 8006366:	61fb      	str	r3, [r7, #28]
 8006368:	e012      	b.n	8006390 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800636a:	2300      	movs	r3, #0
 800636c:	683a      	ldr	r2, [r7, #0]
 800636e:	68b9      	ldr	r1, [r7, #8]
 8006370:	69b8      	ldr	r0, [r7, #24]
 8006372:	f000 fa99 	bl	80068a8 <xQueueGenericSend>
 8006376:	4603      	mov	r3, r0
 8006378:	2b01      	cmp	r3, #1
 800637a:	d009      	beq.n	8006390 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006382:	f06f 0301 	mvn.w	r3, #1
 8006386:	61fb      	str	r3, [r7, #28]
 8006388:	e002      	b.n	8006390 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800638a:	f06f 0302 	mvn.w	r3, #2
 800638e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006390:	69fb      	ldr	r3, [r7, #28]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3720      	adds	r7, #32
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	e000ed04 	.word	0xe000ed04

080063a0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b088      	sub	sp, #32
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
 80063ac:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80063b2:	2300      	movs	r3, #0
 80063b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063b6:	f3ef 8305 	mrs	r3, IPSR
 80063ba:	617b      	str	r3, [r7, #20]
  return(result);
 80063bc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d028      	beq.n	8006414 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d005      	beq.n	80063d4 <osMessageQueueGet+0x34>
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d002      	beq.n	80063d4 <osMessageQueueGet+0x34>
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d003      	beq.n	80063dc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80063d4:	f06f 0303 	mvn.w	r3, #3
 80063d8:	61fb      	str	r3, [r7, #28]
 80063da:	e037      	b.n	800644c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80063dc:	2300      	movs	r3, #0
 80063de:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80063e0:	f107 0310 	add.w	r3, r7, #16
 80063e4:	461a      	mov	r2, r3
 80063e6:	68b9      	ldr	r1, [r7, #8]
 80063e8:	69b8      	ldr	r0, [r7, #24]
 80063ea:	f000 fcd7 	bl	8006d9c <xQueueReceiveFromISR>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d003      	beq.n	80063fc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80063f4:	f06f 0302 	mvn.w	r3, #2
 80063f8:	61fb      	str	r3, [r7, #28]
 80063fa:	e027      	b.n	800644c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d024      	beq.n	800644c <osMessageQueueGet+0xac>
 8006402:	4b15      	ldr	r3, [pc, #84]	; (8006458 <osMessageQueueGet+0xb8>)
 8006404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	f3bf 8f6f 	isb	sy
 8006412:	e01b      	b.n	800644c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d002      	beq.n	8006420 <osMessageQueueGet+0x80>
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d103      	bne.n	8006428 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006420:	f06f 0303 	mvn.w	r3, #3
 8006424:	61fb      	str	r3, [r7, #28]
 8006426:	e011      	b.n	800644c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006428:	683a      	ldr	r2, [r7, #0]
 800642a:	68b9      	ldr	r1, [r7, #8]
 800642c:	69b8      	ldr	r0, [r7, #24]
 800642e:	f000 fbd5 	bl	8006bdc <xQueueReceive>
 8006432:	4603      	mov	r3, r0
 8006434:	2b01      	cmp	r3, #1
 8006436:	d009      	beq.n	800644c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d003      	beq.n	8006446 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800643e:	f06f 0301 	mvn.w	r3, #1
 8006442:	61fb      	str	r3, [r7, #28]
 8006444:	e002      	b.n	800644c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006446:	f06f 0302 	mvn.w	r3, #2
 800644a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800644c:	69fb      	ldr	r3, [r7, #28]
}
 800644e:	4618      	mov	r0, r3
 8006450:	3720      	adds	r7, #32
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	e000ed04 	.word	0xe000ed04

0800645c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	4a07      	ldr	r2, [pc, #28]	; (8006488 <vApplicationGetIdleTaskMemory+0x2c>)
 800646c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	4a06      	ldr	r2, [pc, #24]	; (800648c <vApplicationGetIdleTaskMemory+0x30>)
 8006472:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2280      	movs	r2, #128	; 0x80
 8006478:	601a      	str	r2, [r3, #0]
}
 800647a:	bf00      	nop
 800647c:	3714      	adds	r7, #20
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	20000374 	.word	0x20000374
 800648c:	2000042c 	.word	0x2000042c

08006490 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	4a07      	ldr	r2, [pc, #28]	; (80064bc <vApplicationGetTimerTaskMemory+0x2c>)
 80064a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	4a06      	ldr	r2, [pc, #24]	; (80064c0 <vApplicationGetTimerTaskMemory+0x30>)
 80064a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064ae:	601a      	str	r2, [r3, #0]
}
 80064b0:	bf00      	nop
 80064b2:	3714      	adds	r7, #20
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	2000062c 	.word	0x2000062c
 80064c0:	200006e4 	.word	0x200006e4

080064c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f103 0208 	add.w	r2, r3, #8
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f04f 32ff 	mov.w	r2, #4294967295
 80064dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f103 0208 	add.w	r2, r3, #8
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f103 0208 	add.w	r2, r3, #8
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006512:	bf00      	nop
 8006514:	370c      	adds	r7, #12
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800651e:	b480      	push	{r7}
 8006520:	b085      	sub	sp, #20
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	689a      	ldr	r2, [r3, #8]
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	683a      	ldr	r2, [r7, #0]
 8006542:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	683a      	ldr	r2, [r7, #0]
 8006548:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	1c5a      	adds	r2, r3, #1
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	601a      	str	r2, [r3, #0]
}
 800655a:	bf00      	nop
 800655c:	3714      	adds	r7, #20
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr

08006566 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006566:	b480      	push	{r7}
 8006568:	b085      	sub	sp, #20
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
 800656e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800657c:	d103      	bne.n	8006586 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	60fb      	str	r3, [r7, #12]
 8006584:	e00c      	b.n	80065a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	3308      	adds	r3, #8
 800658a:	60fb      	str	r3, [r7, #12]
 800658c:	e002      	b.n	8006594 <vListInsert+0x2e>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	60fb      	str	r3, [r7, #12]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	429a      	cmp	r2, r3
 800659e:	d2f6      	bcs.n	800658e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	685a      	ldr	r2, [r3, #4]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	683a      	ldr	r2, [r7, #0]
 80065ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	683a      	ldr	r2, [r7, #0]
 80065ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	1c5a      	adds	r2, r3, #1
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	601a      	str	r2, [r3, #0]
}
 80065cc:	bf00      	nop
 80065ce:	3714      	adds	r7, #20
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	6892      	ldr	r2, [r2, #8]
 80065ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	6852      	ldr	r2, [r2, #4]
 80065f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	429a      	cmp	r2, r3
 8006602:	d103      	bne.n	800660c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	689a      	ldr	r2, [r3, #8]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	1e5a      	subs	r2, r3, #1
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
}
 8006620:	4618      	mov	r0, r3
 8006622:	3714      	adds	r7, #20
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10a      	bne.n	8006656 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006644:	f383 8811 	msr	BASEPRI, r3
 8006648:	f3bf 8f6f 	isb	sy
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006652:	bf00      	nop
 8006654:	e7fe      	b.n	8006654 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006656:	f002 fa0d 	bl	8008a74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006662:	68f9      	ldr	r1, [r7, #12]
 8006664:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006666:	fb01 f303 	mul.w	r3, r1, r3
 800666a:	441a      	add	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006686:	3b01      	subs	r3, #1
 8006688:	68f9      	ldr	r1, [r7, #12]
 800668a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800668c:	fb01 f303 	mul.w	r3, r1, r3
 8006690:	441a      	add	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	22ff      	movs	r2, #255	; 0xff
 800669a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	22ff      	movs	r2, #255	; 0xff
 80066a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d114      	bne.n	80066d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d01a      	beq.n	80066ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	3310      	adds	r3, #16
 80066b8:	4618      	mov	r0, r3
 80066ba:	f001 fabb 	bl	8007c34 <xTaskRemoveFromEventList>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d012      	beq.n	80066ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80066c4:	4b0c      	ldr	r3, [pc, #48]	; (80066f8 <xQueueGenericReset+0xcc>)
 80066c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066ca:	601a      	str	r2, [r3, #0]
 80066cc:	f3bf 8f4f 	dsb	sy
 80066d0:	f3bf 8f6f 	isb	sy
 80066d4:	e009      	b.n	80066ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	3310      	adds	r3, #16
 80066da:	4618      	mov	r0, r3
 80066dc:	f7ff fef2 	bl	80064c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	3324      	adds	r3, #36	; 0x24
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7ff feed 	bl	80064c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80066ea:	f002 f9f3 	bl	8008ad4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80066ee:	2301      	movs	r3, #1
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	e000ed04 	.word	0xe000ed04

080066fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b08e      	sub	sp, #56	; 0x38
 8006700:	af02      	add	r7, sp, #8
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]
 8006708:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10a      	bne.n	8006726 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006714:	f383 8811 	msr	BASEPRI, r3
 8006718:	f3bf 8f6f 	isb	sy
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006722:	bf00      	nop
 8006724:	e7fe      	b.n	8006724 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d10a      	bne.n	8006742 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800672c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006730:	f383 8811 	msr	BASEPRI, r3
 8006734:	f3bf 8f6f 	isb	sy
 8006738:	f3bf 8f4f 	dsb	sy
 800673c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800673e:	bf00      	nop
 8006740:	e7fe      	b.n	8006740 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d002      	beq.n	800674e <xQueueGenericCreateStatic+0x52>
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d001      	beq.n	8006752 <xQueueGenericCreateStatic+0x56>
 800674e:	2301      	movs	r3, #1
 8006750:	e000      	b.n	8006754 <xQueueGenericCreateStatic+0x58>
 8006752:	2300      	movs	r3, #0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10a      	bne.n	800676e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675c:	f383 8811 	msr	BASEPRI, r3
 8006760:	f3bf 8f6f 	isb	sy
 8006764:	f3bf 8f4f 	dsb	sy
 8006768:	623b      	str	r3, [r7, #32]
}
 800676a:	bf00      	nop
 800676c:	e7fe      	b.n	800676c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d102      	bne.n	800677a <xQueueGenericCreateStatic+0x7e>
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d101      	bne.n	800677e <xQueueGenericCreateStatic+0x82>
 800677a:	2301      	movs	r3, #1
 800677c:	e000      	b.n	8006780 <xQueueGenericCreateStatic+0x84>
 800677e:	2300      	movs	r3, #0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10a      	bne.n	800679a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006788:	f383 8811 	msr	BASEPRI, r3
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	61fb      	str	r3, [r7, #28]
}
 8006796:	bf00      	nop
 8006798:	e7fe      	b.n	8006798 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800679a:	2350      	movs	r3, #80	; 0x50
 800679c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	2b50      	cmp	r3, #80	; 0x50
 80067a2:	d00a      	beq.n	80067ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80067a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a8:	f383 8811 	msr	BASEPRI, r3
 80067ac:	f3bf 8f6f 	isb	sy
 80067b0:	f3bf 8f4f 	dsb	sy
 80067b4:	61bb      	str	r3, [r7, #24]
}
 80067b6:	bf00      	nop
 80067b8:	e7fe      	b.n	80067b8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80067ba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80067c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00d      	beq.n	80067e2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80067c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80067ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80067d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	4613      	mov	r3, r2
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	68b9      	ldr	r1, [r7, #8]
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f000 f83f 	bl	8006860 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80067e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3730      	adds	r7, #48	; 0x30
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b08a      	sub	sp, #40	; 0x28
 80067f0:	af02      	add	r7, sp, #8
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	4613      	mov	r3, r2
 80067f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d10a      	bne.n	8006816 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006804:	f383 8811 	msr	BASEPRI, r3
 8006808:	f3bf 8f6f 	isb	sy
 800680c:	f3bf 8f4f 	dsb	sy
 8006810:	613b      	str	r3, [r7, #16]
}
 8006812:	bf00      	nop
 8006814:	e7fe      	b.n	8006814 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	fb02 f303 	mul.w	r3, r2, r3
 800681e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	3350      	adds	r3, #80	; 0x50
 8006824:	4618      	mov	r0, r3
 8006826:	f002 fa47 	bl	8008cb8 <pvPortMalloc>
 800682a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d011      	beq.n	8006856 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	3350      	adds	r3, #80	; 0x50
 800683a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006844:	79fa      	ldrb	r2, [r7, #7]
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	9300      	str	r3, [sp, #0]
 800684a:	4613      	mov	r3, r2
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	68b9      	ldr	r1, [r7, #8]
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f000 f805 	bl	8006860 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006856:	69bb      	ldr	r3, [r7, #24]
	}
 8006858:	4618      	mov	r0, r3
 800685a:	3720      	adds	r7, #32
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
 800686c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d103      	bne.n	800687c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	69ba      	ldr	r2, [r7, #24]
 8006878:	601a      	str	r2, [r3, #0]
 800687a:	e002      	b.n	8006882 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800688e:	2101      	movs	r1, #1
 8006890:	69b8      	ldr	r0, [r7, #24]
 8006892:	f7ff fecb 	bl	800662c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	78fa      	ldrb	r2, [r7, #3]
 800689a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800689e:	bf00      	nop
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
	...

080068a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b08e      	sub	sp, #56	; 0x38
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
 80068b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80068b6:	2300      	movs	r3, #0
 80068b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80068be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10a      	bne.n	80068da <xQueueGenericSend+0x32>
	__asm volatile
 80068c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c8:	f383 8811 	msr	BASEPRI, r3
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80068d6:	bf00      	nop
 80068d8:	e7fe      	b.n	80068d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d103      	bne.n	80068e8 <xQueueGenericSend+0x40>
 80068e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d101      	bne.n	80068ec <xQueueGenericSend+0x44>
 80068e8:	2301      	movs	r3, #1
 80068ea:	e000      	b.n	80068ee <xQueueGenericSend+0x46>
 80068ec:	2300      	movs	r3, #0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d10a      	bne.n	8006908 <xQueueGenericSend+0x60>
	__asm volatile
 80068f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f6:	f383 8811 	msr	BASEPRI, r3
 80068fa:	f3bf 8f6f 	isb	sy
 80068fe:	f3bf 8f4f 	dsb	sy
 8006902:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006904:	bf00      	nop
 8006906:	e7fe      	b.n	8006906 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	2b02      	cmp	r3, #2
 800690c:	d103      	bne.n	8006916 <xQueueGenericSend+0x6e>
 800690e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006912:	2b01      	cmp	r3, #1
 8006914:	d101      	bne.n	800691a <xQueueGenericSend+0x72>
 8006916:	2301      	movs	r3, #1
 8006918:	e000      	b.n	800691c <xQueueGenericSend+0x74>
 800691a:	2300      	movs	r3, #0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d10a      	bne.n	8006936 <xQueueGenericSend+0x8e>
	__asm volatile
 8006920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006924:	f383 8811 	msr	BASEPRI, r3
 8006928:	f3bf 8f6f 	isb	sy
 800692c:	f3bf 8f4f 	dsb	sy
 8006930:	623b      	str	r3, [r7, #32]
}
 8006932:	bf00      	nop
 8006934:	e7fe      	b.n	8006934 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006936:	f001 fb3f 	bl	8007fb8 <xTaskGetSchedulerState>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d102      	bne.n	8006946 <xQueueGenericSend+0x9e>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d101      	bne.n	800694a <xQueueGenericSend+0xa2>
 8006946:	2301      	movs	r3, #1
 8006948:	e000      	b.n	800694c <xQueueGenericSend+0xa4>
 800694a:	2300      	movs	r3, #0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10a      	bne.n	8006966 <xQueueGenericSend+0xbe>
	__asm volatile
 8006950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006954:	f383 8811 	msr	BASEPRI, r3
 8006958:	f3bf 8f6f 	isb	sy
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	61fb      	str	r3, [r7, #28]
}
 8006962:	bf00      	nop
 8006964:	e7fe      	b.n	8006964 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006966:	f002 f885 	bl	8008a74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800696a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800696e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006972:	429a      	cmp	r2, r3
 8006974:	d302      	bcc.n	800697c <xQueueGenericSend+0xd4>
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	2b02      	cmp	r3, #2
 800697a:	d129      	bne.n	80069d0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800697c:	683a      	ldr	r2, [r7, #0]
 800697e:	68b9      	ldr	r1, [r7, #8]
 8006980:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006982:	f000 fa8b 	bl	8006e9c <prvCopyDataToQueue>
 8006986:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698c:	2b00      	cmp	r3, #0
 800698e:	d010      	beq.n	80069b2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006992:	3324      	adds	r3, #36	; 0x24
 8006994:	4618      	mov	r0, r3
 8006996:	f001 f94d 	bl	8007c34 <xTaskRemoveFromEventList>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d013      	beq.n	80069c8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80069a0:	4b3f      	ldr	r3, [pc, #252]	; (8006aa0 <xQueueGenericSend+0x1f8>)
 80069a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069a6:	601a      	str	r2, [r3, #0]
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	e00a      	b.n	80069c8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80069b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d007      	beq.n	80069c8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80069b8:	4b39      	ldr	r3, [pc, #228]	; (8006aa0 <xQueueGenericSend+0x1f8>)
 80069ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069be:	601a      	str	r2, [r3, #0]
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80069c8:	f002 f884 	bl	8008ad4 <vPortExitCritical>
				return pdPASS;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e063      	b.n	8006a98 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d103      	bne.n	80069de <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80069d6:	f002 f87d 	bl	8008ad4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80069da:	2300      	movs	r3, #0
 80069dc:	e05c      	b.n	8006a98 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80069de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d106      	bne.n	80069f2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069e4:	f107 0314 	add.w	r3, r7, #20
 80069e8:	4618      	mov	r0, r3
 80069ea:	f001 f987 	bl	8007cfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069ee:	2301      	movs	r3, #1
 80069f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80069f2:	f002 f86f 	bl	8008ad4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80069f6:	f000 fef3 	bl	80077e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80069fa:	f002 f83b 	bl	8008a74 <vPortEnterCritical>
 80069fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a04:	b25b      	sxtb	r3, r3
 8006a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a0a:	d103      	bne.n	8006a14 <xQueueGenericSend+0x16c>
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a1a:	b25b      	sxtb	r3, r3
 8006a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a20:	d103      	bne.n	8006a2a <xQueueGenericSend+0x182>
 8006a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a2a:	f002 f853 	bl	8008ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a2e:	1d3a      	adds	r2, r7, #4
 8006a30:	f107 0314 	add.w	r3, r7, #20
 8006a34:	4611      	mov	r1, r2
 8006a36:	4618      	mov	r0, r3
 8006a38:	f001 f976 	bl	8007d28 <xTaskCheckForTimeOut>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d124      	bne.n	8006a8c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a44:	f000 fb22 	bl	800708c <prvIsQueueFull>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d018      	beq.n	8006a80 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a50:	3310      	adds	r3, #16
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	4611      	mov	r1, r2
 8006a56:	4618      	mov	r0, r3
 8006a58:	f001 f89c 	bl	8007b94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006a5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a5e:	f000 faad 	bl	8006fbc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006a62:	f000 fecb 	bl	80077fc <xTaskResumeAll>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f47f af7c 	bne.w	8006966 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006a6e:	4b0c      	ldr	r3, [pc, #48]	; (8006aa0 <xQueueGenericSend+0x1f8>)
 8006a70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a74:	601a      	str	r2, [r3, #0]
 8006a76:	f3bf 8f4f 	dsb	sy
 8006a7a:	f3bf 8f6f 	isb	sy
 8006a7e:	e772      	b.n	8006966 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006a80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a82:	f000 fa9b 	bl	8006fbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a86:	f000 feb9 	bl	80077fc <xTaskResumeAll>
 8006a8a:	e76c      	b.n	8006966 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006a8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a8e:	f000 fa95 	bl	8006fbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a92:	f000 feb3 	bl	80077fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006a96:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3738      	adds	r7, #56	; 0x38
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	e000ed04 	.word	0xe000ed04

08006aa4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b090      	sub	sp, #64	; 0x40
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
 8006ab0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10a      	bne.n	8006ad2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac0:	f383 8811 	msr	BASEPRI, r3
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006ace:	bf00      	nop
 8006ad0:	e7fe      	b.n	8006ad0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d103      	bne.n	8006ae0 <xQueueGenericSendFromISR+0x3c>
 8006ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d101      	bne.n	8006ae4 <xQueueGenericSendFromISR+0x40>
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e000      	b.n	8006ae6 <xQueueGenericSendFromISR+0x42>
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d10a      	bne.n	8006b00 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aee:	f383 8811 	msr	BASEPRI, r3
 8006af2:	f3bf 8f6f 	isb	sy
 8006af6:	f3bf 8f4f 	dsb	sy
 8006afa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006afc:	bf00      	nop
 8006afe:	e7fe      	b.n	8006afe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d103      	bne.n	8006b0e <xQueueGenericSendFromISR+0x6a>
 8006b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d101      	bne.n	8006b12 <xQueueGenericSendFromISR+0x6e>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e000      	b.n	8006b14 <xQueueGenericSendFromISR+0x70>
 8006b12:	2300      	movs	r3, #0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d10a      	bne.n	8006b2e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1c:	f383 8811 	msr	BASEPRI, r3
 8006b20:	f3bf 8f6f 	isb	sy
 8006b24:	f3bf 8f4f 	dsb	sy
 8006b28:	623b      	str	r3, [r7, #32]
}
 8006b2a:	bf00      	nop
 8006b2c:	e7fe      	b.n	8006b2c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b2e:	f002 f883 	bl	8008c38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006b32:	f3ef 8211 	mrs	r2, BASEPRI
 8006b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3a:	f383 8811 	msr	BASEPRI, r3
 8006b3e:	f3bf 8f6f 	isb	sy
 8006b42:	f3bf 8f4f 	dsb	sy
 8006b46:	61fa      	str	r2, [r7, #28]
 8006b48:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006b4a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b4c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d302      	bcc.n	8006b60 <xQueueGenericSendFromISR+0xbc>
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d12f      	bne.n	8006bc0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b70:	683a      	ldr	r2, [r7, #0]
 8006b72:	68b9      	ldr	r1, [r7, #8]
 8006b74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006b76:	f000 f991 	bl	8006e9c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006b7a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b82:	d112      	bne.n	8006baa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d016      	beq.n	8006bba <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8e:	3324      	adds	r3, #36	; 0x24
 8006b90:	4618      	mov	r0, r3
 8006b92:	f001 f84f 	bl	8007c34 <xTaskRemoveFromEventList>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00e      	beq.n	8006bba <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00b      	beq.n	8006bba <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	601a      	str	r2, [r3, #0]
 8006ba8:	e007      	b.n	8006bba <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006baa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006bae:	3301      	adds	r3, #1
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	b25a      	sxtb	r2, r3
 8006bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006bbe:	e001      	b.n	8006bc4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006bce:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3740      	adds	r7, #64	; 0x40
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
	...

08006bdc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b08c      	sub	sp, #48	; 0x30
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006be8:	2300      	movs	r3, #0
 8006bea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d10a      	bne.n	8006c0c <xQueueReceive+0x30>
	__asm volatile
 8006bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfa:	f383 8811 	msr	BASEPRI, r3
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f3bf 8f4f 	dsb	sy
 8006c06:	623b      	str	r3, [r7, #32]
}
 8006c08:	bf00      	nop
 8006c0a:	e7fe      	b.n	8006c0a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d103      	bne.n	8006c1a <xQueueReceive+0x3e>
 8006c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <xQueueReceive+0x42>
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e000      	b.n	8006c20 <xQueueReceive+0x44>
 8006c1e:	2300      	movs	r3, #0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d10a      	bne.n	8006c3a <xQueueReceive+0x5e>
	__asm volatile
 8006c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c28:	f383 8811 	msr	BASEPRI, r3
 8006c2c:	f3bf 8f6f 	isb	sy
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	61fb      	str	r3, [r7, #28]
}
 8006c36:	bf00      	nop
 8006c38:	e7fe      	b.n	8006c38 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c3a:	f001 f9bd 	bl	8007fb8 <xTaskGetSchedulerState>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d102      	bne.n	8006c4a <xQueueReceive+0x6e>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <xQueueReceive+0x72>
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e000      	b.n	8006c50 <xQueueReceive+0x74>
 8006c4e:	2300      	movs	r3, #0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10a      	bne.n	8006c6a <xQueueReceive+0x8e>
	__asm volatile
 8006c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c58:	f383 8811 	msr	BASEPRI, r3
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	61bb      	str	r3, [r7, #24]
}
 8006c66:	bf00      	nop
 8006c68:	e7fe      	b.n	8006c68 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c6a:	f001 ff03 	bl	8008a74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c72:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d01f      	beq.n	8006cba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c7a:	68b9      	ldr	r1, [r7, #8]
 8006c7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c7e:	f000 f977 	bl	8006f70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c84:	1e5a      	subs	r2, r3, #1
 8006c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c88:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00f      	beq.n	8006cb2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c94:	3310      	adds	r3, #16
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 ffcc 	bl	8007c34 <xTaskRemoveFromEventList>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d007      	beq.n	8006cb2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006ca2:	4b3d      	ldr	r3, [pc, #244]	; (8006d98 <xQueueReceive+0x1bc>)
 8006ca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ca8:	601a      	str	r2, [r3, #0]
 8006caa:	f3bf 8f4f 	dsb	sy
 8006cae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006cb2:	f001 ff0f 	bl	8008ad4 <vPortExitCritical>
				return pdPASS;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e069      	b.n	8006d8e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d103      	bne.n	8006cc8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006cc0:	f001 ff08 	bl	8008ad4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	e062      	b.n	8006d8e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d106      	bne.n	8006cdc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006cce:	f107 0310 	add.w	r3, r7, #16
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f001 f812 	bl	8007cfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006cdc:	f001 fefa 	bl	8008ad4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ce0:	f000 fd7e 	bl	80077e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ce4:	f001 fec6 	bl	8008a74 <vPortEnterCritical>
 8006ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cee:	b25b      	sxtb	r3, r3
 8006cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cf4:	d103      	bne.n	8006cfe <xQueueReceive+0x122>
 8006cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d04:	b25b      	sxtb	r3, r3
 8006d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d0a:	d103      	bne.n	8006d14 <xQueueReceive+0x138>
 8006d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d14:	f001 fede 	bl	8008ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d18:	1d3a      	adds	r2, r7, #4
 8006d1a:	f107 0310 	add.w	r3, r7, #16
 8006d1e:	4611      	mov	r1, r2
 8006d20:	4618      	mov	r0, r3
 8006d22:	f001 f801 	bl	8007d28 <xTaskCheckForTimeOut>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d123      	bne.n	8006d74 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d2e:	f000 f997 	bl	8007060 <prvIsQueueEmpty>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d017      	beq.n	8006d68 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3a:	3324      	adds	r3, #36	; 0x24
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	4611      	mov	r1, r2
 8006d40:	4618      	mov	r0, r3
 8006d42:	f000 ff27 	bl	8007b94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d48:	f000 f938 	bl	8006fbc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d4c:	f000 fd56 	bl	80077fc <xTaskResumeAll>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d189      	bne.n	8006c6a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006d56:	4b10      	ldr	r3, [pc, #64]	; (8006d98 <xQueueReceive+0x1bc>)
 8006d58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d5c:	601a      	str	r2, [r3, #0]
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	f3bf 8f6f 	isb	sy
 8006d66:	e780      	b.n	8006c6a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006d68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d6a:	f000 f927 	bl	8006fbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d6e:	f000 fd45 	bl	80077fc <xTaskResumeAll>
 8006d72:	e77a      	b.n	8006c6a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006d74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d76:	f000 f921 	bl	8006fbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d7a:	f000 fd3f 	bl	80077fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d80:	f000 f96e 	bl	8007060 <prvIsQueueEmpty>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f43f af6f 	beq.w	8006c6a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3730      	adds	r7, #48	; 0x30
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	e000ed04 	.word	0xe000ed04

08006d9c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b08e      	sub	sp, #56	; 0x38
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d10a      	bne.n	8006dc8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db6:	f383 8811 	msr	BASEPRI, r3
 8006dba:	f3bf 8f6f 	isb	sy
 8006dbe:	f3bf 8f4f 	dsb	sy
 8006dc2:	623b      	str	r3, [r7, #32]
}
 8006dc4:	bf00      	nop
 8006dc6:	e7fe      	b.n	8006dc6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d103      	bne.n	8006dd6 <xQueueReceiveFromISR+0x3a>
 8006dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d101      	bne.n	8006dda <xQueueReceiveFromISR+0x3e>
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e000      	b.n	8006ddc <xQueueReceiveFromISR+0x40>
 8006dda:	2300      	movs	r3, #0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d10a      	bne.n	8006df6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de4:	f383 8811 	msr	BASEPRI, r3
 8006de8:	f3bf 8f6f 	isb	sy
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	61fb      	str	r3, [r7, #28]
}
 8006df2:	bf00      	nop
 8006df4:	e7fe      	b.n	8006df4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006df6:	f001 ff1f 	bl	8008c38 <vPortValidateInterruptPriority>
	__asm volatile
 8006dfa:	f3ef 8211 	mrs	r2, BASEPRI
 8006dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e02:	f383 8811 	msr	BASEPRI, r3
 8006e06:	f3bf 8f6f 	isb	sy
 8006e0a:	f3bf 8f4f 	dsb	sy
 8006e0e:	61ba      	str	r2, [r7, #24]
 8006e10:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006e12:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e14:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e1a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d02f      	beq.n	8006e82 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e2c:	68b9      	ldr	r1, [r7, #8]
 8006e2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e30:	f000 f89e 	bl	8006f70 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e36:	1e5a      	subs	r2, r3, #1
 8006e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006e3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e44:	d112      	bne.n	8006e6c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d016      	beq.n	8006e7c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e50:	3310      	adds	r3, #16
 8006e52:	4618      	mov	r0, r3
 8006e54:	f000 feee 	bl	8007c34 <xTaskRemoveFromEventList>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00e      	beq.n	8006e7c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00b      	beq.n	8006e7c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	601a      	str	r2, [r3, #0]
 8006e6a:	e007      	b.n	8006e7c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e70:	3301      	adds	r3, #1
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	b25a      	sxtb	r2, r3
 8006e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8006e80:	e001      	b.n	8006e86 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006e82:	2300      	movs	r3, #0
 8006e84:	637b      	str	r3, [r7, #52]	; 0x34
 8006e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e88:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	f383 8811 	msr	BASEPRI, r3
}
 8006e90:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3738      	adds	r7, #56	; 0x38
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b086      	sub	sp, #24
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10d      	bne.n	8006ed6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d14d      	bne.n	8006f5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f001 f894 	bl	8007ff4 <xTaskPriorityDisinherit>
 8006ecc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	609a      	str	r2, [r3, #8]
 8006ed4:	e043      	b.n	8006f5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d119      	bne.n	8006f10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6858      	ldr	r0, [r3, #4]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	68b9      	ldr	r1, [r7, #8]
 8006ee8:	f002 ff35 	bl	8009d56 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	685a      	ldr	r2, [r3, #4]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef4:	441a      	add	r2, r3
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	685a      	ldr	r2, [r3, #4]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d32b      	bcc.n	8006f5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	605a      	str	r2, [r3, #4]
 8006f0e:	e026      	b.n	8006f5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	68d8      	ldr	r0, [r3, #12]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f18:	461a      	mov	r2, r3
 8006f1a:	68b9      	ldr	r1, [r7, #8]
 8006f1c:	f002 ff1b 	bl	8009d56 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	68da      	ldr	r2, [r3, #12]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f28:	425b      	negs	r3, r3
 8006f2a:	441a      	add	r2, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	68da      	ldr	r2, [r3, #12]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d207      	bcs.n	8006f4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	689a      	ldr	r2, [r3, #8]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f44:	425b      	negs	r3, r3
 8006f46:	441a      	add	r2, r3
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d105      	bne.n	8006f5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d002      	beq.n	8006f5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	1c5a      	adds	r2, r3, #1
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006f66:	697b      	ldr	r3, [r7, #20]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3718      	adds	r7, #24
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d018      	beq.n	8006fb4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	68da      	ldr	r2, [r3, #12]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8a:	441a      	add	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	68da      	ldr	r2, [r3, #12]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d303      	bcc.n	8006fa4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	68d9      	ldr	r1, [r3, #12]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fac:	461a      	mov	r2, r3
 8006fae:	6838      	ldr	r0, [r7, #0]
 8006fb0:	f002 fed1 	bl	8009d56 <memcpy>
	}
}
 8006fb4:	bf00      	nop
 8006fb6:	3708      	adds	r7, #8
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006fc4:	f001 fd56 	bl	8008a74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006fd0:	e011      	b.n	8006ff6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d012      	beq.n	8007000 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	3324      	adds	r3, #36	; 0x24
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f000 fe28 	bl	8007c34 <xTaskRemoveFromEventList>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d001      	beq.n	8006fee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006fea:	f000 feff 	bl	8007dec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006fee:	7bfb      	ldrb	r3, [r7, #15]
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	dce9      	bgt.n	8006fd2 <prvUnlockQueue+0x16>
 8006ffe:	e000      	b.n	8007002 <prvUnlockQueue+0x46>
					break;
 8007000:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	22ff      	movs	r2, #255	; 0xff
 8007006:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800700a:	f001 fd63 	bl	8008ad4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800700e:	f001 fd31 	bl	8008a74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007018:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800701a:	e011      	b.n	8007040 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d012      	beq.n	800704a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	3310      	adds	r3, #16
 8007028:	4618      	mov	r0, r3
 800702a:	f000 fe03 	bl	8007c34 <xTaskRemoveFromEventList>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d001      	beq.n	8007038 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007034:	f000 feda 	bl	8007dec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007038:	7bbb      	ldrb	r3, [r7, #14]
 800703a:	3b01      	subs	r3, #1
 800703c:	b2db      	uxtb	r3, r3
 800703e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007040:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007044:	2b00      	cmp	r3, #0
 8007046:	dce9      	bgt.n	800701c <prvUnlockQueue+0x60>
 8007048:	e000      	b.n	800704c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800704a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	22ff      	movs	r2, #255	; 0xff
 8007050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007054:	f001 fd3e 	bl	8008ad4 <vPortExitCritical>
}
 8007058:	bf00      	nop
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007068:	f001 fd04 	bl	8008a74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007070:	2b00      	cmp	r3, #0
 8007072:	d102      	bne.n	800707a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007074:	2301      	movs	r3, #1
 8007076:	60fb      	str	r3, [r7, #12]
 8007078:	e001      	b.n	800707e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800707a:	2300      	movs	r3, #0
 800707c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800707e:	f001 fd29 	bl	8008ad4 <vPortExitCritical>

	return xReturn;
 8007082:	68fb      	ldr	r3, [r7, #12]
}
 8007084:	4618      	mov	r0, r3
 8007086:	3710      	adds	r7, #16
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007094:	f001 fcee 	bl	8008a74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d102      	bne.n	80070aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80070a4:	2301      	movs	r3, #1
 80070a6:	60fb      	str	r3, [r7, #12]
 80070a8:	e001      	b.n	80070ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80070aa:	2300      	movs	r3, #0
 80070ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070ae:	f001 fd11 	bl	8008ad4 <vPortExitCritical>

	return xReturn;
 80070b2:	68fb      	ldr	r3, [r7, #12]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070c6:	2300      	movs	r3, #0
 80070c8:	60fb      	str	r3, [r7, #12]
 80070ca:	e014      	b.n	80070f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80070cc:	4a0f      	ldr	r2, [pc, #60]	; (800710c <vQueueAddToRegistry+0x50>)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d10b      	bne.n	80070f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80070d8:	490c      	ldr	r1, [pc, #48]	; (800710c <vQueueAddToRegistry+0x50>)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	683a      	ldr	r2, [r7, #0]
 80070de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80070e2:	4a0a      	ldr	r2, [pc, #40]	; (800710c <vQueueAddToRegistry+0x50>)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	00db      	lsls	r3, r3, #3
 80070e8:	4413      	add	r3, r2
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80070ee:	e006      	b.n	80070fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	3301      	adds	r3, #1
 80070f4:	60fb      	str	r3, [r7, #12]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2b07      	cmp	r3, #7
 80070fa:	d9e7      	bls.n	80070cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80070fc:	bf00      	nop
 80070fe:	bf00      	nop
 8007100:	3714      	adds	r7, #20
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	20000ae4 	.word	0x20000ae4

08007110 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007120:	f001 fca8 	bl	8008a74 <vPortEnterCritical>
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800712a:	b25b      	sxtb	r3, r3
 800712c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007130:	d103      	bne.n	800713a <vQueueWaitForMessageRestricted+0x2a>
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007140:	b25b      	sxtb	r3, r3
 8007142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007146:	d103      	bne.n	8007150 <vQueueWaitForMessageRestricted+0x40>
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007150:	f001 fcc0 	bl	8008ad4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007158:	2b00      	cmp	r3, #0
 800715a:	d106      	bne.n	800716a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	3324      	adds	r3, #36	; 0x24
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	68b9      	ldr	r1, [r7, #8]
 8007164:	4618      	mov	r0, r3
 8007166:	f000 fd39 	bl	8007bdc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800716a:	6978      	ldr	r0, [r7, #20]
 800716c:	f7ff ff26 	bl	8006fbc <prvUnlockQueue>
	}
 8007170:	bf00      	nop
 8007172:	3718      	adds	r7, #24
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007178:	b580      	push	{r7, lr}
 800717a:	b08e      	sub	sp, #56	; 0x38
 800717c:	af04      	add	r7, sp, #16
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	607a      	str	r2, [r7, #4]
 8007184:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007188:	2b00      	cmp	r3, #0
 800718a:	d10a      	bne.n	80071a2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800718c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007190:	f383 8811 	msr	BASEPRI, r3
 8007194:	f3bf 8f6f 	isb	sy
 8007198:	f3bf 8f4f 	dsb	sy
 800719c:	623b      	str	r3, [r7, #32]
}
 800719e:	bf00      	nop
 80071a0:	e7fe      	b.n	80071a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80071a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d10a      	bne.n	80071be <xTaskCreateStatic+0x46>
	__asm volatile
 80071a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ac:	f383 8811 	msr	BASEPRI, r3
 80071b0:	f3bf 8f6f 	isb	sy
 80071b4:	f3bf 8f4f 	dsb	sy
 80071b8:	61fb      	str	r3, [r7, #28]
}
 80071ba:	bf00      	nop
 80071bc:	e7fe      	b.n	80071bc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80071be:	23b8      	movs	r3, #184	; 0xb8
 80071c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	2bb8      	cmp	r3, #184	; 0xb8
 80071c6:	d00a      	beq.n	80071de <xTaskCreateStatic+0x66>
	__asm volatile
 80071c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071cc:	f383 8811 	msr	BASEPRI, r3
 80071d0:	f3bf 8f6f 	isb	sy
 80071d4:	f3bf 8f4f 	dsb	sy
 80071d8:	61bb      	str	r3, [r7, #24]
}
 80071da:	bf00      	nop
 80071dc:	e7fe      	b.n	80071dc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80071de:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80071e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d01e      	beq.n	8007224 <xTaskCreateStatic+0xac>
 80071e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d01b      	beq.n	8007224 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80071ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80071f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071f4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80071f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f8:	2202      	movs	r2, #2
 80071fa:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80071fe:	2300      	movs	r3, #0
 8007200:	9303      	str	r3, [sp, #12]
 8007202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007204:	9302      	str	r3, [sp, #8]
 8007206:	f107 0314 	add.w	r3, r7, #20
 800720a:	9301      	str	r3, [sp, #4]
 800720c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	68b9      	ldr	r1, [r7, #8]
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f000 f850 	bl	80072bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800721c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800721e:	f000 f8f3 	bl	8007408 <prvAddNewTaskToReadyList>
 8007222:	e001      	b.n	8007228 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007224:	2300      	movs	r3, #0
 8007226:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007228:	697b      	ldr	r3, [r7, #20]
	}
 800722a:	4618      	mov	r0, r3
 800722c:	3728      	adds	r7, #40	; 0x28
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007232:	b580      	push	{r7, lr}
 8007234:	b08c      	sub	sp, #48	; 0x30
 8007236:	af04      	add	r7, sp, #16
 8007238:	60f8      	str	r0, [r7, #12]
 800723a:	60b9      	str	r1, [r7, #8]
 800723c:	603b      	str	r3, [r7, #0]
 800723e:	4613      	mov	r3, r2
 8007240:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007242:	88fb      	ldrh	r3, [r7, #6]
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	4618      	mov	r0, r3
 8007248:	f001 fd36 	bl	8008cb8 <pvPortMalloc>
 800724c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00e      	beq.n	8007272 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007254:	20b8      	movs	r0, #184	; 0xb8
 8007256:	f001 fd2f 	bl	8008cb8 <pvPortMalloc>
 800725a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d003      	beq.n	800726a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	697a      	ldr	r2, [r7, #20]
 8007266:	631a      	str	r2, [r3, #48]	; 0x30
 8007268:	e005      	b.n	8007276 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800726a:	6978      	ldr	r0, [r7, #20]
 800726c:	f001 fdf0 	bl	8008e50 <vPortFree>
 8007270:	e001      	b.n	8007276 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007272:	2300      	movs	r3, #0
 8007274:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d017      	beq.n	80072ac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	2200      	movs	r2, #0
 8007280:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007284:	88fa      	ldrh	r2, [r7, #6]
 8007286:	2300      	movs	r3, #0
 8007288:	9303      	str	r3, [sp, #12]
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	9302      	str	r3, [sp, #8]
 800728e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007290:	9301      	str	r3, [sp, #4]
 8007292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007294:	9300      	str	r3, [sp, #0]
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	68b9      	ldr	r1, [r7, #8]
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f000 f80e 	bl	80072bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072a0:	69f8      	ldr	r0, [r7, #28]
 80072a2:	f000 f8b1 	bl	8007408 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80072a6:	2301      	movs	r3, #1
 80072a8:	61bb      	str	r3, [r7, #24]
 80072aa:	e002      	b.n	80072b2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80072ac:	f04f 33ff 	mov.w	r3, #4294967295
 80072b0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80072b2:	69bb      	ldr	r3, [r7, #24]
	}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3720      	adds	r7, #32
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b088      	sub	sp, #32
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]
 80072c8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80072ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072cc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	461a      	mov	r2, r3
 80072d4:	21a5      	movs	r1, #165	; 0xa5
 80072d6:	f002 fc56 	bl	8009b86 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80072da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80072e4:	3b01      	subs	r3, #1
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	4413      	add	r3, r2
 80072ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	f023 0307 	bic.w	r3, r3, #7
 80072f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	f003 0307 	and.w	r3, r3, #7
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00a      	beq.n	8007314 <prvInitialiseNewTask+0x58>
	__asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	617b      	str	r3, [r7, #20]
}
 8007310:	bf00      	nop
 8007312:	e7fe      	b.n	8007312 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d01f      	beq.n	800735a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800731a:	2300      	movs	r3, #0
 800731c:	61fb      	str	r3, [r7, #28]
 800731e:	e012      	b.n	8007346 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007320:	68ba      	ldr	r2, [r7, #8]
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	4413      	add	r3, r2
 8007326:	7819      	ldrb	r1, [r3, #0]
 8007328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	4413      	add	r3, r2
 800732e:	3334      	adds	r3, #52	; 0x34
 8007330:	460a      	mov	r2, r1
 8007332:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	4413      	add	r3, r2
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d006      	beq.n	800734e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	3301      	adds	r3, #1
 8007344:	61fb      	str	r3, [r7, #28]
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	2b1f      	cmp	r3, #31
 800734a:	d9e9      	bls.n	8007320 <prvInitialiseNewTask+0x64>
 800734c:	e000      	b.n	8007350 <prvInitialiseNewTask+0x94>
			{
				break;
 800734e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007352:	2200      	movs	r2, #0
 8007354:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8007358:	e003      	b.n	8007362 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800735a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735c:	2200      	movs	r2, #0
 800735e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007364:	2b37      	cmp	r3, #55	; 0x37
 8007366:	d901      	bls.n	800736c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007368:	2337      	movs	r3, #55	; 0x37
 800736a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800736c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007370:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007374:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007376:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8007378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737a:	2200      	movs	r2, #0
 800737c:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800737e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007380:	3304      	adds	r3, #4
 8007382:	4618      	mov	r0, r3
 8007384:	f7ff f8be 	bl	8006504 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738a:	3318      	adds	r3, #24
 800738c:	4618      	mov	r0, r3
 800738e:	f7ff f8b9 	bl	8006504 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007396:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800739e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80073a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80073a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073aa:	2200      	movs	r2, #0
 80073ac:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80073b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b2:	2200      	movs	r2, #0
 80073b4:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80073b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ba:	3364      	adds	r3, #100	; 0x64
 80073bc:	224c      	movs	r2, #76	; 0x4c
 80073be:	2100      	movs	r1, #0
 80073c0:	4618      	mov	r0, r3
 80073c2:	f002 fbe0 	bl	8009b86 <memset>
 80073c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c8:	4a0c      	ldr	r2, [pc, #48]	; (80073fc <prvInitialiseNewTask+0x140>)
 80073ca:	669a      	str	r2, [r3, #104]	; 0x68
 80073cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ce:	4a0c      	ldr	r2, [pc, #48]	; (8007400 <prvInitialiseNewTask+0x144>)
 80073d0:	66da      	str	r2, [r3, #108]	; 0x6c
 80073d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d4:	4a0b      	ldr	r2, [pc, #44]	; (8007404 <prvInitialiseNewTask+0x148>)
 80073d6:	671a      	str	r2, [r3, #112]	; 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80073d8:	683a      	ldr	r2, [r7, #0]
 80073da:	68f9      	ldr	r1, [r7, #12]
 80073dc:	69b8      	ldr	r0, [r7, #24]
 80073de:	f001 fa19 	bl	8008814 <pxPortInitialiseStack>
 80073e2:	4602      	mov	r2, r0
 80073e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80073e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d002      	beq.n	80073f4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80073ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073f4:	bf00      	nop
 80073f6:	3720      	adds	r7, #32
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	20003888 	.word	0x20003888
 8007400:	200038f0 	.word	0x200038f0
 8007404:	20003958 	.word	0x20003958

08007408 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007410:	f001 fb30 	bl	8008a74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007414:	4b2d      	ldr	r3, [pc, #180]	; (80074cc <prvAddNewTaskToReadyList+0xc4>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	3301      	adds	r3, #1
 800741a:	4a2c      	ldr	r2, [pc, #176]	; (80074cc <prvAddNewTaskToReadyList+0xc4>)
 800741c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800741e:	4b2c      	ldr	r3, [pc, #176]	; (80074d0 <prvAddNewTaskToReadyList+0xc8>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d109      	bne.n	800743a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007426:	4a2a      	ldr	r2, [pc, #168]	; (80074d0 <prvAddNewTaskToReadyList+0xc8>)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800742c:	4b27      	ldr	r3, [pc, #156]	; (80074cc <prvAddNewTaskToReadyList+0xc4>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2b01      	cmp	r3, #1
 8007432:	d110      	bne.n	8007456 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007434:	f000 fcfe 	bl	8007e34 <prvInitialiseTaskLists>
 8007438:	e00d      	b.n	8007456 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800743a:	4b26      	ldr	r3, [pc, #152]	; (80074d4 <prvAddNewTaskToReadyList+0xcc>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d109      	bne.n	8007456 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007442:	4b23      	ldr	r3, [pc, #140]	; (80074d0 <prvAddNewTaskToReadyList+0xc8>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744c:	429a      	cmp	r2, r3
 800744e:	d802      	bhi.n	8007456 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007450:	4a1f      	ldr	r2, [pc, #124]	; (80074d0 <prvAddNewTaskToReadyList+0xc8>)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007456:	4b20      	ldr	r3, [pc, #128]	; (80074d8 <prvAddNewTaskToReadyList+0xd0>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	3301      	adds	r3, #1
 800745c:	4a1e      	ldr	r2, [pc, #120]	; (80074d8 <prvAddNewTaskToReadyList+0xd0>)
 800745e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007460:	4b1d      	ldr	r3, [pc, #116]	; (80074d8 <prvAddNewTaskToReadyList+0xd0>)
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800746c:	4b1b      	ldr	r3, [pc, #108]	; (80074dc <prvAddNewTaskToReadyList+0xd4>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	429a      	cmp	r2, r3
 8007472:	d903      	bls.n	800747c <prvAddNewTaskToReadyList+0x74>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007478:	4a18      	ldr	r2, [pc, #96]	; (80074dc <prvAddNewTaskToReadyList+0xd4>)
 800747a:	6013      	str	r3, [r2, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007480:	4613      	mov	r3, r2
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4413      	add	r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	4a15      	ldr	r2, [pc, #84]	; (80074e0 <prvAddNewTaskToReadyList+0xd8>)
 800748a:	441a      	add	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	3304      	adds	r3, #4
 8007490:	4619      	mov	r1, r3
 8007492:	4610      	mov	r0, r2
 8007494:	f7ff f843 	bl	800651e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007498:	f001 fb1c 	bl	8008ad4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800749c:	4b0d      	ldr	r3, [pc, #52]	; (80074d4 <prvAddNewTaskToReadyList+0xcc>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00e      	beq.n	80074c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80074a4:	4b0a      	ldr	r3, [pc, #40]	; (80074d0 <prvAddNewTaskToReadyList+0xc8>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d207      	bcs.n	80074c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80074b2:	4b0c      	ldr	r3, [pc, #48]	; (80074e4 <prvAddNewTaskToReadyList+0xdc>)
 80074b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074b8:	601a      	str	r2, [r3, #0]
 80074ba:	f3bf 8f4f 	dsb	sy
 80074be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074c2:	bf00      	nop
 80074c4:	3708      	adds	r7, #8
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	20000ff8 	.word	0x20000ff8
 80074d0:	20000b24 	.word	0x20000b24
 80074d4:	20001004 	.word	0x20001004
 80074d8:	20001014 	.word	0x20001014
 80074dc:	20001000 	.word	0x20001000
 80074e0:	20000b28 	.word	0x20000b28
 80074e4:	e000ed04 	.word	0xe000ed04

080074e8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80074f0:	f001 fac0 	bl	8008a74 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d102      	bne.n	8007500 <vTaskDelete+0x18>
 80074fa:	4b2c      	ldr	r3, [pc, #176]	; (80075ac <vTaskDelete+0xc4>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	e000      	b.n	8007502 <vTaskDelete+0x1a>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	3304      	adds	r3, #4
 8007508:	4618      	mov	r0, r3
 800750a:	f7ff f865 	bl	80065d8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007512:	2b00      	cmp	r3, #0
 8007514:	d004      	beq.n	8007520 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	3318      	adds	r3, #24
 800751a:	4618      	mov	r0, r3
 800751c:	f7ff f85c 	bl	80065d8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007520:	4b23      	ldr	r3, [pc, #140]	; (80075b0 <vTaskDelete+0xc8>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	3301      	adds	r3, #1
 8007526:	4a22      	ldr	r2, [pc, #136]	; (80075b0 <vTaskDelete+0xc8>)
 8007528:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800752a:	4b20      	ldr	r3, [pc, #128]	; (80075ac <vTaskDelete+0xc4>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68fa      	ldr	r2, [r7, #12]
 8007530:	429a      	cmp	r2, r3
 8007532:	d10b      	bne.n	800754c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	3304      	adds	r3, #4
 8007538:	4619      	mov	r1, r3
 800753a:	481e      	ldr	r0, [pc, #120]	; (80075b4 <vTaskDelete+0xcc>)
 800753c:	f7fe ffef 	bl	800651e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007540:	4b1d      	ldr	r3, [pc, #116]	; (80075b8 <vTaskDelete+0xd0>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	3301      	adds	r3, #1
 8007546:	4a1c      	ldr	r2, [pc, #112]	; (80075b8 <vTaskDelete+0xd0>)
 8007548:	6013      	str	r3, [r2, #0]
 800754a:	e009      	b.n	8007560 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800754c:	4b1b      	ldr	r3, [pc, #108]	; (80075bc <vTaskDelete+0xd4>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	3b01      	subs	r3, #1
 8007552:	4a1a      	ldr	r2, [pc, #104]	; (80075bc <vTaskDelete+0xd4>)
 8007554:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f000 fcda 	bl	8007f10 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800755c:	f000 fd0c 	bl	8007f78 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8007560:	f001 fab8 	bl	8008ad4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007564:	4b16      	ldr	r3, [pc, #88]	; (80075c0 <vTaskDelete+0xd8>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d01b      	beq.n	80075a4 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800756c:	4b0f      	ldr	r3, [pc, #60]	; (80075ac <vTaskDelete+0xc4>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	429a      	cmp	r2, r3
 8007574:	d116      	bne.n	80075a4 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007576:	4b13      	ldr	r3, [pc, #76]	; (80075c4 <vTaskDelete+0xdc>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00a      	beq.n	8007594 <vTaskDelete+0xac>
	__asm volatile
 800757e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007582:	f383 8811 	msr	BASEPRI, r3
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	60bb      	str	r3, [r7, #8]
}
 8007590:	bf00      	nop
 8007592:	e7fe      	b.n	8007592 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8007594:	4b0c      	ldr	r3, [pc, #48]	; (80075c8 <vTaskDelete+0xe0>)
 8007596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800759a:	601a      	str	r2, [r3, #0]
 800759c:	f3bf 8f4f 	dsb	sy
 80075a0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80075a4:	bf00      	nop
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	20000b24 	.word	0x20000b24
 80075b0:	20001014 	.word	0x20001014
 80075b4:	20000fcc 	.word	0x20000fcc
 80075b8:	20000fe0 	.word	0x20000fe0
 80075bc:	20000ff8 	.word	0x20000ff8
 80075c0:	20001004 	.word	0x20001004
 80075c4:	20001020 	.word	0x20001020
 80075c8:	e000ed04 	.word	0xe000ed04

080075cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80075d4:	2300      	movs	r3, #0
 80075d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d017      	beq.n	800760e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80075de:	4b13      	ldr	r3, [pc, #76]	; (800762c <vTaskDelay+0x60>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00a      	beq.n	80075fc <vTaskDelay+0x30>
	__asm volatile
 80075e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ea:	f383 8811 	msr	BASEPRI, r3
 80075ee:	f3bf 8f6f 	isb	sy
 80075f2:	f3bf 8f4f 	dsb	sy
 80075f6:	60bb      	str	r3, [r7, #8]
}
 80075f8:	bf00      	nop
 80075fa:	e7fe      	b.n	80075fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80075fc:	f000 f8f0 	bl	80077e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007600:	2100      	movs	r1, #0
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fd64 	bl	80080d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007608:	f000 f8f8 	bl	80077fc <xTaskResumeAll>
 800760c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d107      	bne.n	8007624 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007614:	4b06      	ldr	r3, [pc, #24]	; (8007630 <vTaskDelay+0x64>)
 8007616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800761a:	601a      	str	r2, [r3, #0]
 800761c:	f3bf 8f4f 	dsb	sy
 8007620:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007624:	bf00      	nop
 8007626:	3710      	adds	r7, #16
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}
 800762c:	20001020 	.word	0x20001020
 8007630:	e000ed04 	.word	0xe000ed04

08007634 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8007634:	b580      	push	{r7, lr}
 8007636:	b088      	sub	sp, #32
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d10a      	bne.n	800765c <eTaskGetState+0x28>
	__asm volatile
 8007646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764a:	f383 8811 	msr	BASEPRI, r3
 800764e:	f3bf 8f6f 	isb	sy
 8007652:	f3bf 8f4f 	dsb	sy
 8007656:	60bb      	str	r3, [r7, #8]
}
 8007658:	bf00      	nop
 800765a:	e7fe      	b.n	800765a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800765c:	4b23      	ldr	r3, [pc, #140]	; (80076ec <eTaskGetState+0xb8>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	69ba      	ldr	r2, [r7, #24]
 8007662:	429a      	cmp	r2, r3
 8007664:	d102      	bne.n	800766c <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8007666:	2300      	movs	r3, #0
 8007668:	77fb      	strb	r3, [r7, #31]
 800766a:	e03a      	b.n	80076e2 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 800766c:	f001 fa02 	bl	8008a74 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	695b      	ldr	r3, [r3, #20]
 8007674:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8007676:	4b1e      	ldr	r3, [pc, #120]	; (80076f0 <eTaskGetState+0xbc>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800767c:	4b1d      	ldr	r3, [pc, #116]	; (80076f4 <eTaskGetState+0xc0>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8007682:	f001 fa27 	bl	8008ad4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8007686:	697a      	ldr	r2, [r7, #20]
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	429a      	cmp	r2, r3
 800768c:	d003      	beq.n	8007696 <eTaskGetState+0x62>
 800768e:	697a      	ldr	r2, [r7, #20]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	429a      	cmp	r2, r3
 8007694:	d102      	bne.n	800769c <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8007696:	2302      	movs	r3, #2
 8007698:	77fb      	strb	r3, [r7, #31]
 800769a:	e022      	b.n	80076e2 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	4a16      	ldr	r2, [pc, #88]	; (80076f8 <eTaskGetState+0xc4>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d112      	bne.n	80076ca <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d10b      	bne.n	80076c4 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d102      	bne.n	80076be <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 80076b8:	2302      	movs	r3, #2
 80076ba:	77fb      	strb	r3, [r7, #31]
 80076bc:	e011      	b.n	80076e2 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 80076be:	2303      	movs	r3, #3
 80076c0:	77fb      	strb	r3, [r7, #31]
 80076c2:	e00e      	b.n	80076e2 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 80076c4:	2302      	movs	r3, #2
 80076c6:	77fb      	strb	r3, [r7, #31]
 80076c8:	e00b      	b.n	80076e2 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	4a0b      	ldr	r2, [pc, #44]	; (80076fc <eTaskGetState+0xc8>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d002      	beq.n	80076d8 <eTaskGetState+0xa4>
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d102      	bne.n	80076de <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80076d8:	2304      	movs	r3, #4
 80076da:	77fb      	strb	r3, [r7, #31]
 80076dc:	e001      	b.n	80076e2 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80076de:	2301      	movs	r3, #1
 80076e0:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 80076e2:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80076e4:	4618      	mov	r0, r3
 80076e6:	3720      	adds	r7, #32
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	20000b24 	.word	0x20000b24
 80076f0:	20000fb0 	.word	0x20000fb0
 80076f4:	20000fb4 	.word	0x20000fb4
 80076f8:	20000fe4 	.word	0x20000fe4
 80076fc:	20000fcc 	.word	0x20000fcc

08007700 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b08a      	sub	sp, #40	; 0x28
 8007704:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007706:	2300      	movs	r3, #0
 8007708:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800770a:	2300      	movs	r3, #0
 800770c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800770e:	463a      	mov	r2, r7
 8007710:	1d39      	adds	r1, r7, #4
 8007712:	f107 0308 	add.w	r3, r7, #8
 8007716:	4618      	mov	r0, r3
 8007718:	f7fe fea0 	bl	800645c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800771c:	6839      	ldr	r1, [r7, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	68ba      	ldr	r2, [r7, #8]
 8007722:	9202      	str	r2, [sp, #8]
 8007724:	9301      	str	r3, [sp, #4]
 8007726:	2300      	movs	r3, #0
 8007728:	9300      	str	r3, [sp, #0]
 800772a:	2300      	movs	r3, #0
 800772c:	460a      	mov	r2, r1
 800772e:	4924      	ldr	r1, [pc, #144]	; (80077c0 <vTaskStartScheduler+0xc0>)
 8007730:	4824      	ldr	r0, [pc, #144]	; (80077c4 <vTaskStartScheduler+0xc4>)
 8007732:	f7ff fd21 	bl	8007178 <xTaskCreateStatic>
 8007736:	4603      	mov	r3, r0
 8007738:	4a23      	ldr	r2, [pc, #140]	; (80077c8 <vTaskStartScheduler+0xc8>)
 800773a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800773c:	4b22      	ldr	r3, [pc, #136]	; (80077c8 <vTaskStartScheduler+0xc8>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d002      	beq.n	800774a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007744:	2301      	movs	r3, #1
 8007746:	617b      	str	r3, [r7, #20]
 8007748:	e001      	b.n	800774e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800774a:	2300      	movs	r3, #0
 800774c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d102      	bne.n	800775a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007754:	f000 fd10 	bl	8008178 <xTimerCreateTimerTask>
 8007758:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	2b01      	cmp	r3, #1
 800775e:	d11b      	bne.n	8007798 <vTaskStartScheduler+0x98>
	__asm volatile
 8007760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	613b      	str	r3, [r7, #16]
}
 8007772:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007774:	4b15      	ldr	r3, [pc, #84]	; (80077cc <vTaskStartScheduler+0xcc>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	3364      	adds	r3, #100	; 0x64
 800777a:	4a15      	ldr	r2, [pc, #84]	; (80077d0 <vTaskStartScheduler+0xd0>)
 800777c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800777e:	4b15      	ldr	r3, [pc, #84]	; (80077d4 <vTaskStartScheduler+0xd4>)
 8007780:	f04f 32ff 	mov.w	r2, #4294967295
 8007784:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007786:	4b14      	ldr	r3, [pc, #80]	; (80077d8 <vTaskStartScheduler+0xd8>)
 8007788:	2201      	movs	r2, #1
 800778a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800778c:	4b13      	ldr	r3, [pc, #76]	; (80077dc <vTaskStartScheduler+0xdc>)
 800778e:	2200      	movs	r2, #0
 8007790:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007792:	f001 f8cd 	bl	8008930 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007796:	e00e      	b.n	80077b6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800779e:	d10a      	bne.n	80077b6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80077a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a4:	f383 8811 	msr	BASEPRI, r3
 80077a8:	f3bf 8f6f 	isb	sy
 80077ac:	f3bf 8f4f 	dsb	sy
 80077b0:	60fb      	str	r3, [r7, #12]
}
 80077b2:	bf00      	nop
 80077b4:	e7fe      	b.n	80077b4 <vTaskStartScheduler+0xb4>
}
 80077b6:	bf00      	nop
 80077b8:	3718      	adds	r7, #24
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	0800bbd0 	.word	0x0800bbd0
 80077c4:	08007e05 	.word	0x08007e05
 80077c8:	2000101c 	.word	0x2000101c
 80077cc:	20000b24 	.word	0x20000b24
 80077d0:	20000068 	.word	0x20000068
 80077d4:	20001018 	.word	0x20001018
 80077d8:	20001004 	.word	0x20001004
 80077dc:	20000ffc 	.word	0x20000ffc

080077e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80077e0:	b480      	push	{r7}
 80077e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80077e4:	4b04      	ldr	r3, [pc, #16]	; (80077f8 <vTaskSuspendAll+0x18>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	3301      	adds	r3, #1
 80077ea:	4a03      	ldr	r2, [pc, #12]	; (80077f8 <vTaskSuspendAll+0x18>)
 80077ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80077ee:	bf00      	nop
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr
 80077f8:	20001020 	.word	0x20001020

080077fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007802:	2300      	movs	r3, #0
 8007804:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007806:	2300      	movs	r3, #0
 8007808:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800780a:	4b42      	ldr	r3, [pc, #264]	; (8007914 <xTaskResumeAll+0x118>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d10a      	bne.n	8007828 <xTaskResumeAll+0x2c>
	__asm volatile
 8007812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007816:	f383 8811 	msr	BASEPRI, r3
 800781a:	f3bf 8f6f 	isb	sy
 800781e:	f3bf 8f4f 	dsb	sy
 8007822:	603b      	str	r3, [r7, #0]
}
 8007824:	bf00      	nop
 8007826:	e7fe      	b.n	8007826 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007828:	f001 f924 	bl	8008a74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800782c:	4b39      	ldr	r3, [pc, #228]	; (8007914 <xTaskResumeAll+0x118>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	3b01      	subs	r3, #1
 8007832:	4a38      	ldr	r2, [pc, #224]	; (8007914 <xTaskResumeAll+0x118>)
 8007834:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007836:	4b37      	ldr	r3, [pc, #220]	; (8007914 <xTaskResumeAll+0x118>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d162      	bne.n	8007904 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800783e:	4b36      	ldr	r3, [pc, #216]	; (8007918 <xTaskResumeAll+0x11c>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d05e      	beq.n	8007904 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007846:	e02f      	b.n	80078a8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007848:	4b34      	ldr	r3, [pc, #208]	; (800791c <xTaskResumeAll+0x120>)
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	3318      	adds	r3, #24
 8007854:	4618      	mov	r0, r3
 8007856:	f7fe febf 	bl	80065d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	3304      	adds	r3, #4
 800785e:	4618      	mov	r0, r3
 8007860:	f7fe feba 	bl	80065d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007868:	4b2d      	ldr	r3, [pc, #180]	; (8007920 <xTaskResumeAll+0x124>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	429a      	cmp	r2, r3
 800786e:	d903      	bls.n	8007878 <xTaskResumeAll+0x7c>
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007874:	4a2a      	ldr	r2, [pc, #168]	; (8007920 <xTaskResumeAll+0x124>)
 8007876:	6013      	str	r3, [r2, #0]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800787c:	4613      	mov	r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	4413      	add	r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	4a27      	ldr	r2, [pc, #156]	; (8007924 <xTaskResumeAll+0x128>)
 8007886:	441a      	add	r2, r3
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	3304      	adds	r3, #4
 800788c:	4619      	mov	r1, r3
 800788e:	4610      	mov	r0, r2
 8007890:	f7fe fe45 	bl	800651e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007898:	4b23      	ldr	r3, [pc, #140]	; (8007928 <xTaskResumeAll+0x12c>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789e:	429a      	cmp	r2, r3
 80078a0:	d302      	bcc.n	80078a8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80078a2:	4b22      	ldr	r3, [pc, #136]	; (800792c <xTaskResumeAll+0x130>)
 80078a4:	2201      	movs	r2, #1
 80078a6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078a8:	4b1c      	ldr	r3, [pc, #112]	; (800791c <xTaskResumeAll+0x120>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1cb      	bne.n	8007848 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d001      	beq.n	80078ba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80078b6:	f000 fb5f 	bl	8007f78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80078ba:	4b1d      	ldr	r3, [pc, #116]	; (8007930 <xTaskResumeAll+0x134>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d010      	beq.n	80078e8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80078c6:	f000 f847 	bl	8007958 <xTaskIncrementTick>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d002      	beq.n	80078d6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80078d0:	4b16      	ldr	r3, [pc, #88]	; (800792c <xTaskResumeAll+0x130>)
 80078d2:	2201      	movs	r2, #1
 80078d4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	3b01      	subs	r3, #1
 80078da:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d1f1      	bne.n	80078c6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80078e2:	4b13      	ldr	r3, [pc, #76]	; (8007930 <xTaskResumeAll+0x134>)
 80078e4:	2200      	movs	r2, #0
 80078e6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80078e8:	4b10      	ldr	r3, [pc, #64]	; (800792c <xTaskResumeAll+0x130>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d009      	beq.n	8007904 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80078f0:	2301      	movs	r3, #1
 80078f2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80078f4:	4b0f      	ldr	r3, [pc, #60]	; (8007934 <xTaskResumeAll+0x138>)
 80078f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078fa:	601a      	str	r2, [r3, #0]
 80078fc:	f3bf 8f4f 	dsb	sy
 8007900:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007904:	f001 f8e6 	bl	8008ad4 <vPortExitCritical>

	return xAlreadyYielded;
 8007908:	68bb      	ldr	r3, [r7, #8]
}
 800790a:	4618      	mov	r0, r3
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	20001020 	.word	0x20001020
 8007918:	20000ff8 	.word	0x20000ff8
 800791c:	20000fb8 	.word	0x20000fb8
 8007920:	20001000 	.word	0x20001000
 8007924:	20000b28 	.word	0x20000b28
 8007928:	20000b24 	.word	0x20000b24
 800792c:	2000100c 	.word	0x2000100c
 8007930:	20001008 	.word	0x20001008
 8007934:	e000ed04 	.word	0xe000ed04

08007938 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800793e:	4b05      	ldr	r3, [pc, #20]	; (8007954 <xTaskGetTickCount+0x1c>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007944:	687b      	ldr	r3, [r7, #4]
}
 8007946:	4618      	mov	r0, r3
 8007948:	370c      	adds	r7, #12
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	20000ffc 	.word	0x20000ffc

08007958 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b086      	sub	sp, #24
 800795c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800795e:	2300      	movs	r3, #0
 8007960:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007962:	4b4f      	ldr	r3, [pc, #316]	; (8007aa0 <xTaskIncrementTick+0x148>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	f040 808f 	bne.w	8007a8a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800796c:	4b4d      	ldr	r3, [pc, #308]	; (8007aa4 <xTaskIncrementTick+0x14c>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	3301      	adds	r3, #1
 8007972:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007974:	4a4b      	ldr	r2, [pc, #300]	; (8007aa4 <xTaskIncrementTick+0x14c>)
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d120      	bne.n	80079c2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007980:	4b49      	ldr	r3, [pc, #292]	; (8007aa8 <xTaskIncrementTick+0x150>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00a      	beq.n	80079a0 <xTaskIncrementTick+0x48>
	__asm volatile
 800798a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798e:	f383 8811 	msr	BASEPRI, r3
 8007992:	f3bf 8f6f 	isb	sy
 8007996:	f3bf 8f4f 	dsb	sy
 800799a:	603b      	str	r3, [r7, #0]
}
 800799c:	bf00      	nop
 800799e:	e7fe      	b.n	800799e <xTaskIncrementTick+0x46>
 80079a0:	4b41      	ldr	r3, [pc, #260]	; (8007aa8 <xTaskIncrementTick+0x150>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	60fb      	str	r3, [r7, #12]
 80079a6:	4b41      	ldr	r3, [pc, #260]	; (8007aac <xTaskIncrementTick+0x154>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a3f      	ldr	r2, [pc, #252]	; (8007aa8 <xTaskIncrementTick+0x150>)
 80079ac:	6013      	str	r3, [r2, #0]
 80079ae:	4a3f      	ldr	r2, [pc, #252]	; (8007aac <xTaskIncrementTick+0x154>)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6013      	str	r3, [r2, #0]
 80079b4:	4b3e      	ldr	r3, [pc, #248]	; (8007ab0 <xTaskIncrementTick+0x158>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	3301      	adds	r3, #1
 80079ba:	4a3d      	ldr	r2, [pc, #244]	; (8007ab0 <xTaskIncrementTick+0x158>)
 80079bc:	6013      	str	r3, [r2, #0]
 80079be:	f000 fadb 	bl	8007f78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80079c2:	4b3c      	ldr	r3, [pc, #240]	; (8007ab4 <xTaskIncrementTick+0x15c>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	693a      	ldr	r2, [r7, #16]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d349      	bcc.n	8007a60 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079cc:	4b36      	ldr	r3, [pc, #216]	; (8007aa8 <xTaskIncrementTick+0x150>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d104      	bne.n	80079e0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079d6:	4b37      	ldr	r3, [pc, #220]	; (8007ab4 <xTaskIncrementTick+0x15c>)
 80079d8:	f04f 32ff 	mov.w	r2, #4294967295
 80079dc:	601a      	str	r2, [r3, #0]
					break;
 80079de:	e03f      	b.n	8007a60 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079e0:	4b31      	ldr	r3, [pc, #196]	; (8007aa8 <xTaskIncrementTick+0x150>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80079f0:	693a      	ldr	r2, [r7, #16]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d203      	bcs.n	8007a00 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80079f8:	4a2e      	ldr	r2, [pc, #184]	; (8007ab4 <xTaskIncrementTick+0x15c>)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80079fe:	e02f      	b.n	8007a60 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	3304      	adds	r3, #4
 8007a04:	4618      	mov	r0, r3
 8007a06:	f7fe fde7 	bl	80065d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d004      	beq.n	8007a1c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	3318      	adds	r3, #24
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7fe fdde 	bl	80065d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a20:	4b25      	ldr	r3, [pc, #148]	; (8007ab8 <xTaskIncrementTick+0x160>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d903      	bls.n	8007a30 <xTaskIncrementTick+0xd8>
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2c:	4a22      	ldr	r2, [pc, #136]	; (8007ab8 <xTaskIncrementTick+0x160>)
 8007a2e:	6013      	str	r3, [r2, #0]
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a34:	4613      	mov	r3, r2
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	4413      	add	r3, r2
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	4a1f      	ldr	r2, [pc, #124]	; (8007abc <xTaskIncrementTick+0x164>)
 8007a3e:	441a      	add	r2, r3
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	3304      	adds	r3, #4
 8007a44:	4619      	mov	r1, r3
 8007a46:	4610      	mov	r0, r2
 8007a48:	f7fe fd69 	bl	800651e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a50:	4b1b      	ldr	r3, [pc, #108]	; (8007ac0 <xTaskIncrementTick+0x168>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d3b8      	bcc.n	80079cc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a5e:	e7b5      	b.n	80079cc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a60:	4b17      	ldr	r3, [pc, #92]	; (8007ac0 <xTaskIncrementTick+0x168>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a66:	4915      	ldr	r1, [pc, #84]	; (8007abc <xTaskIncrementTick+0x164>)
 8007a68:	4613      	mov	r3, r2
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	4413      	add	r3, r2
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	440b      	add	r3, r1
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d901      	bls.n	8007a7c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007a7c:	4b11      	ldr	r3, [pc, #68]	; (8007ac4 <xTaskIncrementTick+0x16c>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d007      	beq.n	8007a94 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007a84:	2301      	movs	r3, #1
 8007a86:	617b      	str	r3, [r7, #20]
 8007a88:	e004      	b.n	8007a94 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007a8a:	4b0f      	ldr	r3, [pc, #60]	; (8007ac8 <xTaskIncrementTick+0x170>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	3301      	adds	r3, #1
 8007a90:	4a0d      	ldr	r2, [pc, #52]	; (8007ac8 <xTaskIncrementTick+0x170>)
 8007a92:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007a94:	697b      	ldr	r3, [r7, #20]
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3718      	adds	r7, #24
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	20001020 	.word	0x20001020
 8007aa4:	20000ffc 	.word	0x20000ffc
 8007aa8:	20000fb0 	.word	0x20000fb0
 8007aac:	20000fb4 	.word	0x20000fb4
 8007ab0:	20001010 	.word	0x20001010
 8007ab4:	20001018 	.word	0x20001018
 8007ab8:	20001000 	.word	0x20001000
 8007abc:	20000b28 	.word	0x20000b28
 8007ac0:	20000b24 	.word	0x20000b24
 8007ac4:	2000100c 	.word	0x2000100c
 8007ac8:	20001008 	.word	0x20001008

08007acc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007ad2:	4b2a      	ldr	r3, [pc, #168]	; (8007b7c <vTaskSwitchContext+0xb0>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d003      	beq.n	8007ae2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007ada:	4b29      	ldr	r3, [pc, #164]	; (8007b80 <vTaskSwitchContext+0xb4>)
 8007adc:	2201      	movs	r2, #1
 8007ade:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007ae0:	e046      	b.n	8007b70 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007ae2:	4b27      	ldr	r3, [pc, #156]	; (8007b80 <vTaskSwitchContext+0xb4>)
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ae8:	4b26      	ldr	r3, [pc, #152]	; (8007b84 <vTaskSwitchContext+0xb8>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	60fb      	str	r3, [r7, #12]
 8007aee:	e010      	b.n	8007b12 <vTaskSwitchContext+0x46>
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d10a      	bne.n	8007b0c <vTaskSwitchContext+0x40>
	__asm volatile
 8007af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007afa:	f383 8811 	msr	BASEPRI, r3
 8007afe:	f3bf 8f6f 	isb	sy
 8007b02:	f3bf 8f4f 	dsb	sy
 8007b06:	607b      	str	r3, [r7, #4]
}
 8007b08:	bf00      	nop
 8007b0a:	e7fe      	b.n	8007b0a <vTaskSwitchContext+0x3e>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	60fb      	str	r3, [r7, #12]
 8007b12:	491d      	ldr	r1, [pc, #116]	; (8007b88 <vTaskSwitchContext+0xbc>)
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	4613      	mov	r3, r2
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	4413      	add	r3, r2
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	440b      	add	r3, r1
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d0e4      	beq.n	8007af0 <vTaskSwitchContext+0x24>
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	4613      	mov	r3, r2
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	4413      	add	r3, r2
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4a15      	ldr	r2, [pc, #84]	; (8007b88 <vTaskSwitchContext+0xbc>)
 8007b32:	4413      	add	r3, r2
 8007b34:	60bb      	str	r3, [r7, #8]
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	685a      	ldr	r2, [r3, #4]
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	605a      	str	r2, [r3, #4]
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	685a      	ldr	r2, [r3, #4]
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	3308      	adds	r3, #8
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d104      	bne.n	8007b56 <vTaskSwitchContext+0x8a>
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	685a      	ldr	r2, [r3, #4]
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	605a      	str	r2, [r3, #4]
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	4a0b      	ldr	r2, [pc, #44]	; (8007b8c <vTaskSwitchContext+0xc0>)
 8007b5e:	6013      	str	r3, [r2, #0]
 8007b60:	4a08      	ldr	r2, [pc, #32]	; (8007b84 <vTaskSwitchContext+0xb8>)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007b66:	4b09      	ldr	r3, [pc, #36]	; (8007b8c <vTaskSwitchContext+0xc0>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	3364      	adds	r3, #100	; 0x64
 8007b6c:	4a08      	ldr	r2, [pc, #32]	; (8007b90 <vTaskSwitchContext+0xc4>)
 8007b6e:	6013      	str	r3, [r2, #0]
}
 8007b70:	bf00      	nop
 8007b72:	3714      	adds	r7, #20
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr
 8007b7c:	20001020 	.word	0x20001020
 8007b80:	2000100c 	.word	0x2000100c
 8007b84:	20001000 	.word	0x20001000
 8007b88:	20000b28 	.word	0x20000b28
 8007b8c:	20000b24 	.word	0x20000b24
 8007b90:	20000068 	.word	0x20000068

08007b94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d10a      	bne.n	8007bba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba8:	f383 8811 	msr	BASEPRI, r3
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	60fb      	str	r3, [r7, #12]
}
 8007bb6:	bf00      	nop
 8007bb8:	e7fe      	b.n	8007bb8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007bba:	4b07      	ldr	r3, [pc, #28]	; (8007bd8 <vTaskPlaceOnEventList+0x44>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	3318      	adds	r3, #24
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f7fe fccf 	bl	8006566 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007bc8:	2101      	movs	r1, #1
 8007bca:	6838      	ldr	r0, [r7, #0]
 8007bcc:	f000 fa80 	bl	80080d0 <prvAddCurrentTaskToDelayedList>
}
 8007bd0:	bf00      	nop
 8007bd2:	3710      	adds	r7, #16
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	20000b24 	.word	0x20000b24

08007bdc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b086      	sub	sp, #24
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d10a      	bne.n	8007c04 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf2:	f383 8811 	msr	BASEPRI, r3
 8007bf6:	f3bf 8f6f 	isb	sy
 8007bfa:	f3bf 8f4f 	dsb	sy
 8007bfe:	617b      	str	r3, [r7, #20]
}
 8007c00:	bf00      	nop
 8007c02:	e7fe      	b.n	8007c02 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c04:	4b0a      	ldr	r3, [pc, #40]	; (8007c30 <vTaskPlaceOnEventListRestricted+0x54>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	3318      	adds	r3, #24
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f7fe fc86 	bl	800651e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d002      	beq.n	8007c1e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007c18:	f04f 33ff 	mov.w	r3, #4294967295
 8007c1c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007c1e:	6879      	ldr	r1, [r7, #4]
 8007c20:	68b8      	ldr	r0, [r7, #8]
 8007c22:	f000 fa55 	bl	80080d0 <prvAddCurrentTaskToDelayedList>
	}
 8007c26:	bf00      	nop
 8007c28:	3718      	adds	r7, #24
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	20000b24 	.word	0x20000b24

08007c34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b086      	sub	sp, #24
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d10a      	bne.n	8007c60 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4e:	f383 8811 	msr	BASEPRI, r3
 8007c52:	f3bf 8f6f 	isb	sy
 8007c56:	f3bf 8f4f 	dsb	sy
 8007c5a:	60fb      	str	r3, [r7, #12]
}
 8007c5c:	bf00      	nop
 8007c5e:	e7fe      	b.n	8007c5e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	3318      	adds	r3, #24
 8007c64:	4618      	mov	r0, r3
 8007c66:	f7fe fcb7 	bl	80065d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c6a:	4b1e      	ldr	r3, [pc, #120]	; (8007ce4 <xTaskRemoveFromEventList+0xb0>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d11d      	bne.n	8007cae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	3304      	adds	r3, #4
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7fe fcae 	bl	80065d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c80:	4b19      	ldr	r3, [pc, #100]	; (8007ce8 <xTaskRemoveFromEventList+0xb4>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d903      	bls.n	8007c90 <xTaskRemoveFromEventList+0x5c>
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c8c:	4a16      	ldr	r2, [pc, #88]	; (8007ce8 <xTaskRemoveFromEventList+0xb4>)
 8007c8e:	6013      	str	r3, [r2, #0]
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c94:	4613      	mov	r3, r2
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	4413      	add	r3, r2
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	4a13      	ldr	r2, [pc, #76]	; (8007cec <xTaskRemoveFromEventList+0xb8>)
 8007c9e:	441a      	add	r2, r3
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	3304      	adds	r3, #4
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	4610      	mov	r0, r2
 8007ca8:	f7fe fc39 	bl	800651e <vListInsertEnd>
 8007cac:	e005      	b.n	8007cba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	3318      	adds	r3, #24
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	480e      	ldr	r0, [pc, #56]	; (8007cf0 <xTaskRemoveFromEventList+0xbc>)
 8007cb6:	f7fe fc32 	bl	800651e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cbe:	4b0d      	ldr	r3, [pc, #52]	; (8007cf4 <xTaskRemoveFromEventList+0xc0>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d905      	bls.n	8007cd4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007ccc:	4b0a      	ldr	r3, [pc, #40]	; (8007cf8 <xTaskRemoveFromEventList+0xc4>)
 8007cce:	2201      	movs	r2, #1
 8007cd0:	601a      	str	r2, [r3, #0]
 8007cd2:	e001      	b.n	8007cd8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007cd8:	697b      	ldr	r3, [r7, #20]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3718      	adds	r7, #24
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	20001020 	.word	0x20001020
 8007ce8:	20001000 	.word	0x20001000
 8007cec:	20000b28 	.word	0x20000b28
 8007cf0:	20000fb8 	.word	0x20000fb8
 8007cf4:	20000b24 	.word	0x20000b24
 8007cf8:	2000100c 	.word	0x2000100c

08007cfc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d04:	4b06      	ldr	r3, [pc, #24]	; (8007d20 <vTaskInternalSetTimeOutState+0x24>)
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d0c:	4b05      	ldr	r3, [pc, #20]	; (8007d24 <vTaskInternalSetTimeOutState+0x28>)
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	605a      	str	r2, [r3, #4]
}
 8007d14:	bf00      	nop
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr
 8007d20:	20001010 	.word	0x20001010
 8007d24:	20000ffc 	.word	0x20000ffc

08007d28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b088      	sub	sp, #32
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d10a      	bne.n	8007d4e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d3c:	f383 8811 	msr	BASEPRI, r3
 8007d40:	f3bf 8f6f 	isb	sy
 8007d44:	f3bf 8f4f 	dsb	sy
 8007d48:	613b      	str	r3, [r7, #16]
}
 8007d4a:	bf00      	nop
 8007d4c:	e7fe      	b.n	8007d4c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d10a      	bne.n	8007d6a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d58:	f383 8811 	msr	BASEPRI, r3
 8007d5c:	f3bf 8f6f 	isb	sy
 8007d60:	f3bf 8f4f 	dsb	sy
 8007d64:	60fb      	str	r3, [r7, #12]
}
 8007d66:	bf00      	nop
 8007d68:	e7fe      	b.n	8007d68 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007d6a:	f000 fe83 	bl	8008a74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007d6e:	4b1d      	ldr	r3, [pc, #116]	; (8007de4 <xTaskCheckForTimeOut+0xbc>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	69ba      	ldr	r2, [r7, #24]
 8007d7a:	1ad3      	subs	r3, r2, r3
 8007d7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d86:	d102      	bne.n	8007d8e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	61fb      	str	r3, [r7, #28]
 8007d8c:	e023      	b.n	8007dd6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	4b15      	ldr	r3, [pc, #84]	; (8007de8 <xTaskCheckForTimeOut+0xc0>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d007      	beq.n	8007daa <xTaskCheckForTimeOut+0x82>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	69ba      	ldr	r2, [r7, #24]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d302      	bcc.n	8007daa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007da4:	2301      	movs	r3, #1
 8007da6:	61fb      	str	r3, [r7, #28]
 8007da8:	e015      	b.n	8007dd6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	697a      	ldr	r2, [r7, #20]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d20b      	bcs.n	8007dcc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	1ad2      	subs	r2, r2, r3
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f7ff ff9b 	bl	8007cfc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	61fb      	str	r3, [r7, #28]
 8007dca:	e004      	b.n	8007dd6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007dd6:	f000 fe7d 	bl	8008ad4 <vPortExitCritical>

	return xReturn;
 8007dda:	69fb      	ldr	r3, [r7, #28]
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3720      	adds	r7, #32
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	20000ffc 	.word	0x20000ffc
 8007de8:	20001010 	.word	0x20001010

08007dec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007dec:	b480      	push	{r7}
 8007dee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007df0:	4b03      	ldr	r3, [pc, #12]	; (8007e00 <vTaskMissedYield+0x14>)
 8007df2:	2201      	movs	r2, #1
 8007df4:	601a      	str	r2, [r3, #0]
}
 8007df6:	bf00      	nop
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr
 8007e00:	2000100c 	.word	0x2000100c

08007e04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e0c:	f000 f852 	bl	8007eb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e10:	4b06      	ldr	r3, [pc, #24]	; (8007e2c <prvIdleTask+0x28>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d9f9      	bls.n	8007e0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e18:	4b05      	ldr	r3, [pc, #20]	; (8007e30 <prvIdleTask+0x2c>)
 8007e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e1e:	601a      	str	r2, [r3, #0]
 8007e20:	f3bf 8f4f 	dsb	sy
 8007e24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e28:	e7f0      	b.n	8007e0c <prvIdleTask+0x8>
 8007e2a:	bf00      	nop
 8007e2c:	20000b28 	.word	0x20000b28
 8007e30:	e000ed04 	.word	0xe000ed04

08007e34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	607b      	str	r3, [r7, #4]
 8007e3e:	e00c      	b.n	8007e5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	4613      	mov	r3, r2
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	4413      	add	r3, r2
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	4a12      	ldr	r2, [pc, #72]	; (8007e94 <prvInitialiseTaskLists+0x60>)
 8007e4c:	4413      	add	r3, r2
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f7fe fb38 	bl	80064c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	3301      	adds	r3, #1
 8007e58:	607b      	str	r3, [r7, #4]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2b37      	cmp	r3, #55	; 0x37
 8007e5e:	d9ef      	bls.n	8007e40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e60:	480d      	ldr	r0, [pc, #52]	; (8007e98 <prvInitialiseTaskLists+0x64>)
 8007e62:	f7fe fb2f 	bl	80064c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e66:	480d      	ldr	r0, [pc, #52]	; (8007e9c <prvInitialiseTaskLists+0x68>)
 8007e68:	f7fe fb2c 	bl	80064c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e6c:	480c      	ldr	r0, [pc, #48]	; (8007ea0 <prvInitialiseTaskLists+0x6c>)
 8007e6e:	f7fe fb29 	bl	80064c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e72:	480c      	ldr	r0, [pc, #48]	; (8007ea4 <prvInitialiseTaskLists+0x70>)
 8007e74:	f7fe fb26 	bl	80064c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007e78:	480b      	ldr	r0, [pc, #44]	; (8007ea8 <prvInitialiseTaskLists+0x74>)
 8007e7a:	f7fe fb23 	bl	80064c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007e7e:	4b0b      	ldr	r3, [pc, #44]	; (8007eac <prvInitialiseTaskLists+0x78>)
 8007e80:	4a05      	ldr	r2, [pc, #20]	; (8007e98 <prvInitialiseTaskLists+0x64>)
 8007e82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e84:	4b0a      	ldr	r3, [pc, #40]	; (8007eb0 <prvInitialiseTaskLists+0x7c>)
 8007e86:	4a05      	ldr	r2, [pc, #20]	; (8007e9c <prvInitialiseTaskLists+0x68>)
 8007e88:	601a      	str	r2, [r3, #0]
}
 8007e8a:	bf00      	nop
 8007e8c:	3708      	adds	r7, #8
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	20000b28 	.word	0x20000b28
 8007e98:	20000f88 	.word	0x20000f88
 8007e9c:	20000f9c 	.word	0x20000f9c
 8007ea0:	20000fb8 	.word	0x20000fb8
 8007ea4:	20000fcc 	.word	0x20000fcc
 8007ea8:	20000fe4 	.word	0x20000fe4
 8007eac:	20000fb0 	.word	0x20000fb0
 8007eb0:	20000fb4 	.word	0x20000fb4

08007eb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007eba:	e019      	b.n	8007ef0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ebc:	f000 fdda 	bl	8008a74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ec0:	4b10      	ldr	r3, [pc, #64]	; (8007f04 <prvCheckTasksWaitingTermination+0x50>)
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	3304      	adds	r3, #4
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7fe fb83 	bl	80065d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007ed2:	4b0d      	ldr	r3, [pc, #52]	; (8007f08 <prvCheckTasksWaitingTermination+0x54>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	4a0b      	ldr	r2, [pc, #44]	; (8007f08 <prvCheckTasksWaitingTermination+0x54>)
 8007eda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007edc:	4b0b      	ldr	r3, [pc, #44]	; (8007f0c <prvCheckTasksWaitingTermination+0x58>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	4a0a      	ldr	r2, [pc, #40]	; (8007f0c <prvCheckTasksWaitingTermination+0x58>)
 8007ee4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007ee6:	f000 fdf5 	bl	8008ad4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 f810 	bl	8007f10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ef0:	4b06      	ldr	r3, [pc, #24]	; (8007f0c <prvCheckTasksWaitingTermination+0x58>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d1e1      	bne.n	8007ebc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007ef8:	bf00      	nop
 8007efa:	bf00      	nop
 8007efc:	3708      	adds	r7, #8
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	20000fcc 	.word	0x20000fcc
 8007f08:	20000ff8 	.word	0x20000ff8
 8007f0c:	20000fe0 	.word	0x20000fe0

08007f10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	3364      	adds	r3, #100	; 0x64
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f001 fe61 	bl	8009be4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d108      	bne.n	8007f3e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f30:	4618      	mov	r0, r3
 8007f32:	f000 ff8d 	bl	8008e50 <vPortFree>
				vPortFree( pxTCB );
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 ff8a 	bl	8008e50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f3c:	e018      	b.n	8007f70 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d103      	bne.n	8007f50 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 ff81 	bl	8008e50 <vPortFree>
	}
 8007f4e:	e00f      	b.n	8007f70 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d00a      	beq.n	8007f70 <prvDeleteTCB+0x60>
	__asm volatile
 8007f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5e:	f383 8811 	msr	BASEPRI, r3
 8007f62:	f3bf 8f6f 	isb	sy
 8007f66:	f3bf 8f4f 	dsb	sy
 8007f6a:	60fb      	str	r3, [r7, #12]
}
 8007f6c:	bf00      	nop
 8007f6e:	e7fe      	b.n	8007f6e <prvDeleteTCB+0x5e>
	}
 8007f70:	bf00      	nop
 8007f72:	3710      	adds	r7, #16
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f7e:	4b0c      	ldr	r3, [pc, #48]	; (8007fb0 <prvResetNextTaskUnblockTime+0x38>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d104      	bne.n	8007f92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f88:	4b0a      	ldr	r3, [pc, #40]	; (8007fb4 <prvResetNextTaskUnblockTime+0x3c>)
 8007f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f90:	e008      	b.n	8007fa4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f92:	4b07      	ldr	r3, [pc, #28]	; (8007fb0 <prvResetNextTaskUnblockTime+0x38>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	4a04      	ldr	r2, [pc, #16]	; (8007fb4 <prvResetNextTaskUnblockTime+0x3c>)
 8007fa2:	6013      	str	r3, [r2, #0]
}
 8007fa4:	bf00      	nop
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr
 8007fb0:	20000fb0 	.word	0x20000fb0
 8007fb4:	20001018 	.word	0x20001018

08007fb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007fbe:	4b0b      	ldr	r3, [pc, #44]	; (8007fec <xTaskGetSchedulerState+0x34>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d102      	bne.n	8007fcc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	607b      	str	r3, [r7, #4]
 8007fca:	e008      	b.n	8007fde <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fcc:	4b08      	ldr	r3, [pc, #32]	; (8007ff0 <xTaskGetSchedulerState+0x38>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d102      	bne.n	8007fda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007fd4:	2302      	movs	r3, #2
 8007fd6:	607b      	str	r3, [r7, #4]
 8007fd8:	e001      	b.n	8007fde <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007fde:	687b      	ldr	r3, [r7, #4]
	}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr
 8007fec:	20001004 	.word	0x20001004
 8007ff0:	20001020 	.word	0x20001020

08007ff4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b086      	sub	sp, #24
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008000:	2300      	movs	r3, #0
 8008002:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d056      	beq.n	80080b8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800800a:	4b2e      	ldr	r3, [pc, #184]	; (80080c4 <xTaskPriorityDisinherit+0xd0>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	693a      	ldr	r2, [r7, #16]
 8008010:	429a      	cmp	r2, r3
 8008012:	d00a      	beq.n	800802a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008018:	f383 8811 	msr	BASEPRI, r3
 800801c:	f3bf 8f6f 	isb	sy
 8008020:	f3bf 8f4f 	dsb	sy
 8008024:	60fb      	str	r3, [r7, #12]
}
 8008026:	bf00      	nop
 8008028:	e7fe      	b.n	8008028 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800802e:	2b00      	cmp	r3, #0
 8008030:	d10a      	bne.n	8008048 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008036:	f383 8811 	msr	BASEPRI, r3
 800803a:	f3bf 8f6f 	isb	sy
 800803e:	f3bf 8f4f 	dsb	sy
 8008042:	60bb      	str	r3, [r7, #8]
}
 8008044:	bf00      	nop
 8008046:	e7fe      	b.n	8008046 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800804c:	1e5a      	subs	r2, r3, #1
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800805a:	429a      	cmp	r2, r3
 800805c:	d02c      	beq.n	80080b8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008062:	2b00      	cmp	r3, #0
 8008064:	d128      	bne.n	80080b8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	3304      	adds	r3, #4
 800806a:	4618      	mov	r0, r3
 800806c:	f7fe fab4 	bl	80065d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008088:	4b0f      	ldr	r3, [pc, #60]	; (80080c8 <xTaskPriorityDisinherit+0xd4>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	429a      	cmp	r2, r3
 800808e:	d903      	bls.n	8008098 <xTaskPriorityDisinherit+0xa4>
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008094:	4a0c      	ldr	r2, [pc, #48]	; (80080c8 <xTaskPriorityDisinherit+0xd4>)
 8008096:	6013      	str	r3, [r2, #0]
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800809c:	4613      	mov	r3, r2
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	4413      	add	r3, r2
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	4a09      	ldr	r2, [pc, #36]	; (80080cc <xTaskPriorityDisinherit+0xd8>)
 80080a6:	441a      	add	r2, r3
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	3304      	adds	r3, #4
 80080ac:	4619      	mov	r1, r3
 80080ae:	4610      	mov	r0, r2
 80080b0:	f7fe fa35 	bl	800651e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80080b4:	2301      	movs	r3, #1
 80080b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80080b8:	697b      	ldr	r3, [r7, #20]
	}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3718      	adds	r7, #24
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	20000b24 	.word	0x20000b24
 80080c8:	20001000 	.word	0x20001000
 80080cc:	20000b28 	.word	0x20000b28

080080d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80080da:	4b21      	ldr	r3, [pc, #132]	; (8008160 <prvAddCurrentTaskToDelayedList+0x90>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080e0:	4b20      	ldr	r3, [pc, #128]	; (8008164 <prvAddCurrentTaskToDelayedList+0x94>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	3304      	adds	r3, #4
 80080e6:	4618      	mov	r0, r3
 80080e8:	f7fe fa76 	bl	80065d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f2:	d10a      	bne.n	800810a <prvAddCurrentTaskToDelayedList+0x3a>
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d007      	beq.n	800810a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080fa:	4b1a      	ldr	r3, [pc, #104]	; (8008164 <prvAddCurrentTaskToDelayedList+0x94>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	3304      	adds	r3, #4
 8008100:	4619      	mov	r1, r3
 8008102:	4819      	ldr	r0, [pc, #100]	; (8008168 <prvAddCurrentTaskToDelayedList+0x98>)
 8008104:	f7fe fa0b 	bl	800651e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008108:	e026      	b.n	8008158 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4413      	add	r3, r2
 8008110:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008112:	4b14      	ldr	r3, [pc, #80]	; (8008164 <prvAddCurrentTaskToDelayedList+0x94>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68ba      	ldr	r2, [r7, #8]
 8008118:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800811a:	68ba      	ldr	r2, [r7, #8]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	429a      	cmp	r2, r3
 8008120:	d209      	bcs.n	8008136 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008122:	4b12      	ldr	r3, [pc, #72]	; (800816c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	4b0f      	ldr	r3, [pc, #60]	; (8008164 <prvAddCurrentTaskToDelayedList+0x94>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	3304      	adds	r3, #4
 800812c:	4619      	mov	r1, r3
 800812e:	4610      	mov	r0, r2
 8008130:	f7fe fa19 	bl	8006566 <vListInsert>
}
 8008134:	e010      	b.n	8008158 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008136:	4b0e      	ldr	r3, [pc, #56]	; (8008170 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	4b0a      	ldr	r3, [pc, #40]	; (8008164 <prvAddCurrentTaskToDelayedList+0x94>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	3304      	adds	r3, #4
 8008140:	4619      	mov	r1, r3
 8008142:	4610      	mov	r0, r2
 8008144:	f7fe fa0f 	bl	8006566 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008148:	4b0a      	ldr	r3, [pc, #40]	; (8008174 <prvAddCurrentTaskToDelayedList+0xa4>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68ba      	ldr	r2, [r7, #8]
 800814e:	429a      	cmp	r2, r3
 8008150:	d202      	bcs.n	8008158 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008152:	4a08      	ldr	r2, [pc, #32]	; (8008174 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	6013      	str	r3, [r2, #0]
}
 8008158:	bf00      	nop
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	20000ffc 	.word	0x20000ffc
 8008164:	20000b24 	.word	0x20000b24
 8008168:	20000fe4 	.word	0x20000fe4
 800816c:	20000fb4 	.word	0x20000fb4
 8008170:	20000fb0 	.word	0x20000fb0
 8008174:	20001018 	.word	0x20001018

08008178 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b08a      	sub	sp, #40	; 0x28
 800817c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800817e:	2300      	movs	r3, #0
 8008180:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008182:	f000 fb07 	bl	8008794 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008186:	4b1c      	ldr	r3, [pc, #112]	; (80081f8 <xTimerCreateTimerTask+0x80>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d021      	beq.n	80081d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800818e:	2300      	movs	r3, #0
 8008190:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008192:	2300      	movs	r3, #0
 8008194:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008196:	1d3a      	adds	r2, r7, #4
 8008198:	f107 0108 	add.w	r1, r7, #8
 800819c:	f107 030c 	add.w	r3, r7, #12
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7fe f975 	bl	8006490 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80081a6:	6879      	ldr	r1, [r7, #4]
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	68fa      	ldr	r2, [r7, #12]
 80081ac:	9202      	str	r2, [sp, #8]
 80081ae:	9301      	str	r3, [sp, #4]
 80081b0:	2302      	movs	r3, #2
 80081b2:	9300      	str	r3, [sp, #0]
 80081b4:	2300      	movs	r3, #0
 80081b6:	460a      	mov	r2, r1
 80081b8:	4910      	ldr	r1, [pc, #64]	; (80081fc <xTimerCreateTimerTask+0x84>)
 80081ba:	4811      	ldr	r0, [pc, #68]	; (8008200 <xTimerCreateTimerTask+0x88>)
 80081bc:	f7fe ffdc 	bl	8007178 <xTaskCreateStatic>
 80081c0:	4603      	mov	r3, r0
 80081c2:	4a10      	ldr	r2, [pc, #64]	; (8008204 <xTimerCreateTimerTask+0x8c>)
 80081c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80081c6:	4b0f      	ldr	r3, [pc, #60]	; (8008204 <xTimerCreateTimerTask+0x8c>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d001      	beq.n	80081d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80081ce:	2301      	movs	r3, #1
 80081d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d10a      	bne.n	80081ee <xTimerCreateTimerTask+0x76>
	__asm volatile
 80081d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081dc:	f383 8811 	msr	BASEPRI, r3
 80081e0:	f3bf 8f6f 	isb	sy
 80081e4:	f3bf 8f4f 	dsb	sy
 80081e8:	613b      	str	r3, [r7, #16]
}
 80081ea:	bf00      	nop
 80081ec:	e7fe      	b.n	80081ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 80081ee:	697b      	ldr	r3, [r7, #20]
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3718      	adds	r7, #24
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	20001054 	.word	0x20001054
 80081fc:	0800bbd8 	.word	0x0800bbd8
 8008200:	0800833d 	.word	0x0800833d
 8008204:	20001058 	.word	0x20001058

08008208 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b08a      	sub	sp, #40	; 0x28
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	607a      	str	r2, [r7, #4]
 8008214:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008216:	2300      	movs	r3, #0
 8008218:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d10a      	bne.n	8008236 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008224:	f383 8811 	msr	BASEPRI, r3
 8008228:	f3bf 8f6f 	isb	sy
 800822c:	f3bf 8f4f 	dsb	sy
 8008230:	623b      	str	r3, [r7, #32]
}
 8008232:	bf00      	nop
 8008234:	e7fe      	b.n	8008234 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008236:	4b1a      	ldr	r3, [pc, #104]	; (80082a0 <xTimerGenericCommand+0x98>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d02a      	beq.n	8008294 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	2b05      	cmp	r3, #5
 800824e:	dc18      	bgt.n	8008282 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008250:	f7ff feb2 	bl	8007fb8 <xTaskGetSchedulerState>
 8008254:	4603      	mov	r3, r0
 8008256:	2b02      	cmp	r3, #2
 8008258:	d109      	bne.n	800826e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800825a:	4b11      	ldr	r3, [pc, #68]	; (80082a0 <xTimerGenericCommand+0x98>)
 800825c:	6818      	ldr	r0, [r3, #0]
 800825e:	f107 0110 	add.w	r1, r7, #16
 8008262:	2300      	movs	r3, #0
 8008264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008266:	f7fe fb1f 	bl	80068a8 <xQueueGenericSend>
 800826a:	6278      	str	r0, [r7, #36]	; 0x24
 800826c:	e012      	b.n	8008294 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800826e:	4b0c      	ldr	r3, [pc, #48]	; (80082a0 <xTimerGenericCommand+0x98>)
 8008270:	6818      	ldr	r0, [r3, #0]
 8008272:	f107 0110 	add.w	r1, r7, #16
 8008276:	2300      	movs	r3, #0
 8008278:	2200      	movs	r2, #0
 800827a:	f7fe fb15 	bl	80068a8 <xQueueGenericSend>
 800827e:	6278      	str	r0, [r7, #36]	; 0x24
 8008280:	e008      	b.n	8008294 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008282:	4b07      	ldr	r3, [pc, #28]	; (80082a0 <xTimerGenericCommand+0x98>)
 8008284:	6818      	ldr	r0, [r3, #0]
 8008286:	f107 0110 	add.w	r1, r7, #16
 800828a:	2300      	movs	r3, #0
 800828c:	683a      	ldr	r2, [r7, #0]
 800828e:	f7fe fc09 	bl	8006aa4 <xQueueGenericSendFromISR>
 8008292:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008296:	4618      	mov	r0, r3
 8008298:	3728      	adds	r7, #40	; 0x28
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	20001054 	.word	0x20001054

080082a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b088      	sub	sp, #32
 80082a8:	af02      	add	r7, sp, #8
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082ae:	4b22      	ldr	r3, [pc, #136]	; (8008338 <prvProcessExpiredTimer+0x94>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	3304      	adds	r3, #4
 80082bc:	4618      	mov	r0, r3
 80082be:	f7fe f98b 	bl	80065d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082c8:	f003 0304 	and.w	r3, r3, #4
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d022      	beq.n	8008316 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	699a      	ldr	r2, [r3, #24]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	18d1      	adds	r1, r2, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	683a      	ldr	r2, [r7, #0]
 80082dc:	6978      	ldr	r0, [r7, #20]
 80082de:	f000 f8d1 	bl	8008484 <prvInsertTimerInActiveList>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d01f      	beq.n	8008328 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80082e8:	2300      	movs	r3, #0
 80082ea:	9300      	str	r3, [sp, #0]
 80082ec:	2300      	movs	r3, #0
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	2100      	movs	r1, #0
 80082f2:	6978      	ldr	r0, [r7, #20]
 80082f4:	f7ff ff88 	bl	8008208 <xTimerGenericCommand>
 80082f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d113      	bne.n	8008328 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008304:	f383 8811 	msr	BASEPRI, r3
 8008308:	f3bf 8f6f 	isb	sy
 800830c:	f3bf 8f4f 	dsb	sy
 8008310:	60fb      	str	r3, [r7, #12]
}
 8008312:	bf00      	nop
 8008314:	e7fe      	b.n	8008314 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800831c:	f023 0301 	bic.w	r3, r3, #1
 8008320:	b2da      	uxtb	r2, r3
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	6a1b      	ldr	r3, [r3, #32]
 800832c:	6978      	ldr	r0, [r7, #20]
 800832e:	4798      	blx	r3
}
 8008330:	bf00      	nop
 8008332:	3718      	adds	r7, #24
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	2000104c 	.word	0x2000104c

0800833c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008344:	f107 0308 	add.w	r3, r7, #8
 8008348:	4618      	mov	r0, r3
 800834a:	f000 f857 	bl	80083fc <prvGetNextExpireTime>
 800834e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	4619      	mov	r1, r3
 8008354:	68f8      	ldr	r0, [r7, #12]
 8008356:	f000 f803 	bl	8008360 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800835a:	f000 f8d5 	bl	8008508 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800835e:	e7f1      	b.n	8008344 <prvTimerTask+0x8>

08008360 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800836a:	f7ff fa39 	bl	80077e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800836e:	f107 0308 	add.w	r3, r7, #8
 8008372:	4618      	mov	r0, r3
 8008374:	f000 f866 	bl	8008444 <prvSampleTimeNow>
 8008378:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d130      	bne.n	80083e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d10a      	bne.n	800839c <prvProcessTimerOrBlockTask+0x3c>
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	429a      	cmp	r2, r3
 800838c:	d806      	bhi.n	800839c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800838e:	f7ff fa35 	bl	80077fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008392:	68f9      	ldr	r1, [r7, #12]
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f7ff ff85 	bl	80082a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800839a:	e024      	b.n	80083e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d008      	beq.n	80083b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80083a2:	4b13      	ldr	r3, [pc, #76]	; (80083f0 <prvProcessTimerOrBlockTask+0x90>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d101      	bne.n	80083b0 <prvProcessTimerOrBlockTask+0x50>
 80083ac:	2301      	movs	r3, #1
 80083ae:	e000      	b.n	80083b2 <prvProcessTimerOrBlockTask+0x52>
 80083b0:	2300      	movs	r3, #0
 80083b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80083b4:	4b0f      	ldr	r3, [pc, #60]	; (80083f4 <prvProcessTimerOrBlockTask+0x94>)
 80083b6:	6818      	ldr	r0, [r3, #0]
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	1ad3      	subs	r3, r2, r3
 80083be:	683a      	ldr	r2, [r7, #0]
 80083c0:	4619      	mov	r1, r3
 80083c2:	f7fe fea5 	bl	8007110 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80083c6:	f7ff fa19 	bl	80077fc <xTaskResumeAll>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10a      	bne.n	80083e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80083d0:	4b09      	ldr	r3, [pc, #36]	; (80083f8 <prvProcessTimerOrBlockTask+0x98>)
 80083d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083d6:	601a      	str	r2, [r3, #0]
 80083d8:	f3bf 8f4f 	dsb	sy
 80083dc:	f3bf 8f6f 	isb	sy
}
 80083e0:	e001      	b.n	80083e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80083e2:	f7ff fa0b 	bl	80077fc <xTaskResumeAll>
}
 80083e6:	bf00      	nop
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	20001050 	.word	0x20001050
 80083f4:	20001054 	.word	0x20001054
 80083f8:	e000ed04 	.word	0xe000ed04

080083fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80083fc:	b480      	push	{r7}
 80083fe:	b085      	sub	sp, #20
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008404:	4b0e      	ldr	r3, [pc, #56]	; (8008440 <prvGetNextExpireTime+0x44>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d101      	bne.n	8008412 <prvGetNextExpireTime+0x16>
 800840e:	2201      	movs	r2, #1
 8008410:	e000      	b.n	8008414 <prvGetNextExpireTime+0x18>
 8008412:	2200      	movs	r2, #0
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d105      	bne.n	800842c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008420:	4b07      	ldr	r3, [pc, #28]	; (8008440 <prvGetNextExpireTime+0x44>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	60fb      	str	r3, [r7, #12]
 800842a:	e001      	b.n	8008430 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800842c:	2300      	movs	r3, #0
 800842e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008430:	68fb      	ldr	r3, [r7, #12]
}
 8008432:	4618      	mov	r0, r3
 8008434:	3714      	adds	r7, #20
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	2000104c 	.word	0x2000104c

08008444 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800844c:	f7ff fa74 	bl	8007938 <xTaskGetTickCount>
 8008450:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008452:	4b0b      	ldr	r3, [pc, #44]	; (8008480 <prvSampleTimeNow+0x3c>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	68fa      	ldr	r2, [r7, #12]
 8008458:	429a      	cmp	r2, r3
 800845a:	d205      	bcs.n	8008468 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800845c:	f000 f936 	bl	80086cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2201      	movs	r2, #1
 8008464:	601a      	str	r2, [r3, #0]
 8008466:	e002      	b.n	800846e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800846e:	4a04      	ldr	r2, [pc, #16]	; (8008480 <prvSampleTimeNow+0x3c>)
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008474:	68fb      	ldr	r3, [r7, #12]
}
 8008476:	4618      	mov	r0, r3
 8008478:	3710      	adds	r7, #16
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	2000105c 	.word	0x2000105c

08008484 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b086      	sub	sp, #24
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	607a      	str	r2, [r7, #4]
 8008490:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008492:	2300      	movs	r3, #0
 8008494:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80084a2:	68ba      	ldr	r2, [r7, #8]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d812      	bhi.n	80084d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	1ad2      	subs	r2, r2, r3
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	699b      	ldr	r3, [r3, #24]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d302      	bcc.n	80084be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80084b8:	2301      	movs	r3, #1
 80084ba:	617b      	str	r3, [r7, #20]
 80084bc:	e01b      	b.n	80084f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80084be:	4b10      	ldr	r3, [pc, #64]	; (8008500 <prvInsertTimerInActiveList+0x7c>)
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	3304      	adds	r3, #4
 80084c6:	4619      	mov	r1, r3
 80084c8:	4610      	mov	r0, r2
 80084ca:	f7fe f84c 	bl	8006566 <vListInsert>
 80084ce:	e012      	b.n	80084f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d206      	bcs.n	80084e6 <prvInsertTimerInActiveList+0x62>
 80084d8:	68ba      	ldr	r2, [r7, #8]
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d302      	bcc.n	80084e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80084e0:	2301      	movs	r3, #1
 80084e2:	617b      	str	r3, [r7, #20]
 80084e4:	e007      	b.n	80084f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80084e6:	4b07      	ldr	r3, [pc, #28]	; (8008504 <prvInsertTimerInActiveList+0x80>)
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	3304      	adds	r3, #4
 80084ee:	4619      	mov	r1, r3
 80084f0:	4610      	mov	r0, r2
 80084f2:	f7fe f838 	bl	8006566 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80084f6:	697b      	ldr	r3, [r7, #20]
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3718      	adds	r7, #24
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	20001050 	.word	0x20001050
 8008504:	2000104c 	.word	0x2000104c

08008508 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b08e      	sub	sp, #56	; 0x38
 800850c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800850e:	e0ca      	b.n	80086a6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2b00      	cmp	r3, #0
 8008514:	da18      	bge.n	8008548 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008516:	1d3b      	adds	r3, r7, #4
 8008518:	3304      	adds	r3, #4
 800851a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800851c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851e:	2b00      	cmp	r3, #0
 8008520:	d10a      	bne.n	8008538 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008526:	f383 8811 	msr	BASEPRI, r3
 800852a:	f3bf 8f6f 	isb	sy
 800852e:	f3bf 8f4f 	dsb	sy
 8008532:	61fb      	str	r3, [r7, #28]
}
 8008534:	bf00      	nop
 8008536:	e7fe      	b.n	8008536 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800853e:	6850      	ldr	r0, [r2, #4]
 8008540:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008542:	6892      	ldr	r2, [r2, #8]
 8008544:	4611      	mov	r1, r2
 8008546:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	f2c0 80ab 	blt.w	80086a6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008556:	695b      	ldr	r3, [r3, #20]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d004      	beq.n	8008566 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800855c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855e:	3304      	adds	r3, #4
 8008560:	4618      	mov	r0, r3
 8008562:	f7fe f839 	bl	80065d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008566:	463b      	mov	r3, r7
 8008568:	4618      	mov	r0, r3
 800856a:	f7ff ff6b 	bl	8008444 <prvSampleTimeNow>
 800856e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2b09      	cmp	r3, #9
 8008574:	f200 8096 	bhi.w	80086a4 <prvProcessReceivedCommands+0x19c>
 8008578:	a201      	add	r2, pc, #4	; (adr r2, 8008580 <prvProcessReceivedCommands+0x78>)
 800857a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800857e:	bf00      	nop
 8008580:	080085a9 	.word	0x080085a9
 8008584:	080085a9 	.word	0x080085a9
 8008588:	080085a9 	.word	0x080085a9
 800858c:	0800861d 	.word	0x0800861d
 8008590:	08008631 	.word	0x08008631
 8008594:	0800867b 	.word	0x0800867b
 8008598:	080085a9 	.word	0x080085a9
 800859c:	080085a9 	.word	0x080085a9
 80085a0:	0800861d 	.word	0x0800861d
 80085a4:	08008631 	.word	0x08008631
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80085a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085ae:	f043 0301 	orr.w	r3, r3, #1
 80085b2:	b2da      	uxtb	r2, r3
 80085b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80085ba:	68ba      	ldr	r2, [r7, #8]
 80085bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085be:	699b      	ldr	r3, [r3, #24]
 80085c0:	18d1      	adds	r1, r2, r3
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085c8:	f7ff ff5c 	bl	8008484 <prvInsertTimerInActiveList>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d069      	beq.n	80086a6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d4:	6a1b      	ldr	r3, [r3, #32]
 80085d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085e0:	f003 0304 	and.w	r3, r3, #4
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d05e      	beq.n	80086a6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80085e8:	68ba      	ldr	r2, [r7, #8]
 80085ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ec:	699b      	ldr	r3, [r3, #24]
 80085ee:	441a      	add	r2, r3
 80085f0:	2300      	movs	r3, #0
 80085f2:	9300      	str	r3, [sp, #0]
 80085f4:	2300      	movs	r3, #0
 80085f6:	2100      	movs	r1, #0
 80085f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085fa:	f7ff fe05 	bl	8008208 <xTimerGenericCommand>
 80085fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008600:	6a3b      	ldr	r3, [r7, #32]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d14f      	bne.n	80086a6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860a:	f383 8811 	msr	BASEPRI, r3
 800860e:	f3bf 8f6f 	isb	sy
 8008612:	f3bf 8f4f 	dsb	sy
 8008616:	61bb      	str	r3, [r7, #24]
}
 8008618:	bf00      	nop
 800861a:	e7fe      	b.n	800861a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800861c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008622:	f023 0301 	bic.w	r3, r3, #1
 8008626:	b2da      	uxtb	r2, r3
 8008628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800862e:	e03a      	b.n	80086a6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008632:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008636:	f043 0301 	orr.w	r3, r3, #1
 800863a:	b2da      	uxtb	r2, r3
 800863c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008642:	68ba      	ldr	r2, [r7, #8]
 8008644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008646:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864a:	699b      	ldr	r3, [r3, #24]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d10a      	bne.n	8008666 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008654:	f383 8811 	msr	BASEPRI, r3
 8008658:	f3bf 8f6f 	isb	sy
 800865c:	f3bf 8f4f 	dsb	sy
 8008660:	617b      	str	r3, [r7, #20]
}
 8008662:	bf00      	nop
 8008664:	e7fe      	b.n	8008664 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008668:	699a      	ldr	r2, [r3, #24]
 800866a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866c:	18d1      	adds	r1, r2, r3
 800866e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008672:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008674:	f7ff ff06 	bl	8008484 <prvInsertTimerInActiveList>
					break;
 8008678:	e015      	b.n	80086a6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800867a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800867c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008680:	f003 0302 	and.w	r3, r3, #2
 8008684:	2b00      	cmp	r3, #0
 8008686:	d103      	bne.n	8008690 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008688:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800868a:	f000 fbe1 	bl	8008e50 <vPortFree>
 800868e:	e00a      	b.n	80086a6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008692:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008696:	f023 0301 	bic.w	r3, r3, #1
 800869a:	b2da      	uxtb	r2, r3
 800869c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800869e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80086a2:	e000      	b.n	80086a6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80086a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80086a6:	4b08      	ldr	r3, [pc, #32]	; (80086c8 <prvProcessReceivedCommands+0x1c0>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	1d39      	adds	r1, r7, #4
 80086ac:	2200      	movs	r2, #0
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7fe fa94 	bl	8006bdc <xQueueReceive>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	f47f af2a 	bne.w	8008510 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80086bc:	bf00      	nop
 80086be:	bf00      	nop
 80086c0:	3730      	adds	r7, #48	; 0x30
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	20001054 	.word	0x20001054

080086cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b088      	sub	sp, #32
 80086d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80086d2:	e048      	b.n	8008766 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80086d4:	4b2d      	ldr	r3, [pc, #180]	; (800878c <prvSwitchTimerLists+0xc0>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086de:	4b2b      	ldr	r3, [pc, #172]	; (800878c <prvSwitchTimerLists+0xc0>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	68db      	ldr	r3, [r3, #12]
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	3304      	adds	r3, #4
 80086ec:	4618      	mov	r0, r3
 80086ee:	f7fd ff73 	bl	80065d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	6a1b      	ldr	r3, [r3, #32]
 80086f6:	68f8      	ldr	r0, [r7, #12]
 80086f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008700:	f003 0304 	and.w	r3, r3, #4
 8008704:	2b00      	cmp	r3, #0
 8008706:	d02e      	beq.n	8008766 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	699b      	ldr	r3, [r3, #24]
 800870c:	693a      	ldr	r2, [r7, #16]
 800870e:	4413      	add	r3, r2
 8008710:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008712:	68ba      	ldr	r2, [r7, #8]
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	429a      	cmp	r2, r3
 8008718:	d90e      	bls.n	8008738 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	68ba      	ldr	r2, [r7, #8]
 800871e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	68fa      	ldr	r2, [r7, #12]
 8008724:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008726:	4b19      	ldr	r3, [pc, #100]	; (800878c <prvSwitchTimerLists+0xc0>)
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	3304      	adds	r3, #4
 800872e:	4619      	mov	r1, r3
 8008730:	4610      	mov	r0, r2
 8008732:	f7fd ff18 	bl	8006566 <vListInsert>
 8008736:	e016      	b.n	8008766 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008738:	2300      	movs	r3, #0
 800873a:	9300      	str	r3, [sp, #0]
 800873c:	2300      	movs	r3, #0
 800873e:	693a      	ldr	r2, [r7, #16]
 8008740:	2100      	movs	r1, #0
 8008742:	68f8      	ldr	r0, [r7, #12]
 8008744:	f7ff fd60 	bl	8008208 <xTimerGenericCommand>
 8008748:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d10a      	bne.n	8008766 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008754:	f383 8811 	msr	BASEPRI, r3
 8008758:	f3bf 8f6f 	isb	sy
 800875c:	f3bf 8f4f 	dsb	sy
 8008760:	603b      	str	r3, [r7, #0]
}
 8008762:	bf00      	nop
 8008764:	e7fe      	b.n	8008764 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008766:	4b09      	ldr	r3, [pc, #36]	; (800878c <prvSwitchTimerLists+0xc0>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d1b1      	bne.n	80086d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008770:	4b06      	ldr	r3, [pc, #24]	; (800878c <prvSwitchTimerLists+0xc0>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008776:	4b06      	ldr	r3, [pc, #24]	; (8008790 <prvSwitchTimerLists+0xc4>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a04      	ldr	r2, [pc, #16]	; (800878c <prvSwitchTimerLists+0xc0>)
 800877c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800877e:	4a04      	ldr	r2, [pc, #16]	; (8008790 <prvSwitchTimerLists+0xc4>)
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	6013      	str	r3, [r2, #0]
}
 8008784:	bf00      	nop
 8008786:	3718      	adds	r7, #24
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}
 800878c:	2000104c 	.word	0x2000104c
 8008790:	20001050 	.word	0x20001050

08008794 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800879a:	f000 f96b 	bl	8008a74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800879e:	4b15      	ldr	r3, [pc, #84]	; (80087f4 <prvCheckForValidListAndQueue+0x60>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d120      	bne.n	80087e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80087a6:	4814      	ldr	r0, [pc, #80]	; (80087f8 <prvCheckForValidListAndQueue+0x64>)
 80087a8:	f7fd fe8c 	bl	80064c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80087ac:	4813      	ldr	r0, [pc, #76]	; (80087fc <prvCheckForValidListAndQueue+0x68>)
 80087ae:	f7fd fe89 	bl	80064c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80087b2:	4b13      	ldr	r3, [pc, #76]	; (8008800 <prvCheckForValidListAndQueue+0x6c>)
 80087b4:	4a10      	ldr	r2, [pc, #64]	; (80087f8 <prvCheckForValidListAndQueue+0x64>)
 80087b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80087b8:	4b12      	ldr	r3, [pc, #72]	; (8008804 <prvCheckForValidListAndQueue+0x70>)
 80087ba:	4a10      	ldr	r2, [pc, #64]	; (80087fc <prvCheckForValidListAndQueue+0x68>)
 80087bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80087be:	2300      	movs	r3, #0
 80087c0:	9300      	str	r3, [sp, #0]
 80087c2:	4b11      	ldr	r3, [pc, #68]	; (8008808 <prvCheckForValidListAndQueue+0x74>)
 80087c4:	4a11      	ldr	r2, [pc, #68]	; (800880c <prvCheckForValidListAndQueue+0x78>)
 80087c6:	2110      	movs	r1, #16
 80087c8:	200a      	movs	r0, #10
 80087ca:	f7fd ff97 	bl	80066fc <xQueueGenericCreateStatic>
 80087ce:	4603      	mov	r3, r0
 80087d0:	4a08      	ldr	r2, [pc, #32]	; (80087f4 <prvCheckForValidListAndQueue+0x60>)
 80087d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80087d4:	4b07      	ldr	r3, [pc, #28]	; (80087f4 <prvCheckForValidListAndQueue+0x60>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d005      	beq.n	80087e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80087dc:	4b05      	ldr	r3, [pc, #20]	; (80087f4 <prvCheckForValidListAndQueue+0x60>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	490b      	ldr	r1, [pc, #44]	; (8008810 <prvCheckForValidListAndQueue+0x7c>)
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7fe fc6a 	bl	80070bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80087e8:	f000 f974 	bl	8008ad4 <vPortExitCritical>
}
 80087ec:	bf00      	nop
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	20001054 	.word	0x20001054
 80087f8:	20001024 	.word	0x20001024
 80087fc:	20001038 	.word	0x20001038
 8008800:	2000104c 	.word	0x2000104c
 8008804:	20001050 	.word	0x20001050
 8008808:	20001100 	.word	0x20001100
 800880c:	20001060 	.word	0x20001060
 8008810:	0800bbe0 	.word	0x0800bbe0

08008814 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008814:	b480      	push	{r7}
 8008816:	b085      	sub	sp, #20
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	3b04      	subs	r3, #4
 8008824:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800882c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	3b04      	subs	r3, #4
 8008832:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	f023 0201 	bic.w	r2, r3, #1
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	3b04      	subs	r3, #4
 8008842:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008844:	4a0c      	ldr	r2, [pc, #48]	; (8008878 <pxPortInitialiseStack+0x64>)
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	3b14      	subs	r3, #20
 800884e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	3b04      	subs	r3, #4
 800885a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f06f 0202 	mvn.w	r2, #2
 8008862:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	3b20      	subs	r3, #32
 8008868:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800886a:	68fb      	ldr	r3, [r7, #12]
}
 800886c:	4618      	mov	r0, r3
 800886e:	3714      	adds	r7, #20
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr
 8008878:	0800887d 	.word	0x0800887d

0800887c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800887c:	b480      	push	{r7}
 800887e:	b085      	sub	sp, #20
 8008880:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008882:	2300      	movs	r3, #0
 8008884:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008886:	4b12      	ldr	r3, [pc, #72]	; (80088d0 <prvTaskExitError+0x54>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800888e:	d00a      	beq.n	80088a6 <prvTaskExitError+0x2a>
	__asm volatile
 8008890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008894:	f383 8811 	msr	BASEPRI, r3
 8008898:	f3bf 8f6f 	isb	sy
 800889c:	f3bf 8f4f 	dsb	sy
 80088a0:	60fb      	str	r3, [r7, #12]
}
 80088a2:	bf00      	nop
 80088a4:	e7fe      	b.n	80088a4 <prvTaskExitError+0x28>
	__asm volatile
 80088a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088aa:	f383 8811 	msr	BASEPRI, r3
 80088ae:	f3bf 8f6f 	isb	sy
 80088b2:	f3bf 8f4f 	dsb	sy
 80088b6:	60bb      	str	r3, [r7, #8]
}
 80088b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80088ba:	bf00      	nop
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d0fc      	beq.n	80088bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80088c2:	bf00      	nop
 80088c4:	bf00      	nop
 80088c6:	3714      	adds	r7, #20
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr
 80088d0:	2000000c 	.word	0x2000000c
	...

080088e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80088e0:	4b07      	ldr	r3, [pc, #28]	; (8008900 <pxCurrentTCBConst2>)
 80088e2:	6819      	ldr	r1, [r3, #0]
 80088e4:	6808      	ldr	r0, [r1, #0]
 80088e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ea:	f380 8809 	msr	PSP, r0
 80088ee:	f3bf 8f6f 	isb	sy
 80088f2:	f04f 0000 	mov.w	r0, #0
 80088f6:	f380 8811 	msr	BASEPRI, r0
 80088fa:	4770      	bx	lr
 80088fc:	f3af 8000 	nop.w

08008900 <pxCurrentTCBConst2>:
 8008900:	20000b24 	.word	0x20000b24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008904:	bf00      	nop
 8008906:	bf00      	nop

08008908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008908:	4808      	ldr	r0, [pc, #32]	; (800892c <prvPortStartFirstTask+0x24>)
 800890a:	6800      	ldr	r0, [r0, #0]
 800890c:	6800      	ldr	r0, [r0, #0]
 800890e:	f380 8808 	msr	MSP, r0
 8008912:	f04f 0000 	mov.w	r0, #0
 8008916:	f380 8814 	msr	CONTROL, r0
 800891a:	b662      	cpsie	i
 800891c:	b661      	cpsie	f
 800891e:	f3bf 8f4f 	dsb	sy
 8008922:	f3bf 8f6f 	isb	sy
 8008926:	df00      	svc	0
 8008928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800892a:	bf00      	nop
 800892c:	e000ed08 	.word	0xe000ed08

08008930 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b086      	sub	sp, #24
 8008934:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008936:	4b46      	ldr	r3, [pc, #280]	; (8008a50 <xPortStartScheduler+0x120>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a46      	ldr	r2, [pc, #280]	; (8008a54 <xPortStartScheduler+0x124>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d10a      	bne.n	8008956 <xPortStartScheduler+0x26>
	__asm volatile
 8008940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008944:	f383 8811 	msr	BASEPRI, r3
 8008948:	f3bf 8f6f 	isb	sy
 800894c:	f3bf 8f4f 	dsb	sy
 8008950:	613b      	str	r3, [r7, #16]
}
 8008952:	bf00      	nop
 8008954:	e7fe      	b.n	8008954 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008956:	4b3e      	ldr	r3, [pc, #248]	; (8008a50 <xPortStartScheduler+0x120>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a3f      	ldr	r2, [pc, #252]	; (8008a58 <xPortStartScheduler+0x128>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d10a      	bne.n	8008976 <xPortStartScheduler+0x46>
	__asm volatile
 8008960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008964:	f383 8811 	msr	BASEPRI, r3
 8008968:	f3bf 8f6f 	isb	sy
 800896c:	f3bf 8f4f 	dsb	sy
 8008970:	60fb      	str	r3, [r7, #12]
}
 8008972:	bf00      	nop
 8008974:	e7fe      	b.n	8008974 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008976:	4b39      	ldr	r3, [pc, #228]	; (8008a5c <xPortStartScheduler+0x12c>)
 8008978:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	b2db      	uxtb	r3, r3
 8008980:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	22ff      	movs	r2, #255	; 0xff
 8008986:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	b2db      	uxtb	r3, r3
 800898e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008990:	78fb      	ldrb	r3, [r7, #3]
 8008992:	b2db      	uxtb	r3, r3
 8008994:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008998:	b2da      	uxtb	r2, r3
 800899a:	4b31      	ldr	r3, [pc, #196]	; (8008a60 <xPortStartScheduler+0x130>)
 800899c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800899e:	4b31      	ldr	r3, [pc, #196]	; (8008a64 <xPortStartScheduler+0x134>)
 80089a0:	2207      	movs	r2, #7
 80089a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80089a4:	e009      	b.n	80089ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80089a6:	4b2f      	ldr	r3, [pc, #188]	; (8008a64 <xPortStartScheduler+0x134>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	3b01      	subs	r3, #1
 80089ac:	4a2d      	ldr	r2, [pc, #180]	; (8008a64 <xPortStartScheduler+0x134>)
 80089ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80089b0:	78fb      	ldrb	r3, [r7, #3]
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	005b      	lsls	r3, r3, #1
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80089ba:	78fb      	ldrb	r3, [r7, #3]
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089c2:	2b80      	cmp	r3, #128	; 0x80
 80089c4:	d0ef      	beq.n	80089a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80089c6:	4b27      	ldr	r3, [pc, #156]	; (8008a64 <xPortStartScheduler+0x134>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f1c3 0307 	rsb	r3, r3, #7
 80089ce:	2b04      	cmp	r3, #4
 80089d0:	d00a      	beq.n	80089e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80089d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d6:	f383 8811 	msr	BASEPRI, r3
 80089da:	f3bf 8f6f 	isb	sy
 80089de:	f3bf 8f4f 	dsb	sy
 80089e2:	60bb      	str	r3, [r7, #8]
}
 80089e4:	bf00      	nop
 80089e6:	e7fe      	b.n	80089e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80089e8:	4b1e      	ldr	r3, [pc, #120]	; (8008a64 <xPortStartScheduler+0x134>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	021b      	lsls	r3, r3, #8
 80089ee:	4a1d      	ldr	r2, [pc, #116]	; (8008a64 <xPortStartScheduler+0x134>)
 80089f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80089f2:	4b1c      	ldr	r3, [pc, #112]	; (8008a64 <xPortStartScheduler+0x134>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80089fa:	4a1a      	ldr	r2, [pc, #104]	; (8008a64 <xPortStartScheduler+0x134>)
 80089fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	b2da      	uxtb	r2, r3
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008a06:	4b18      	ldr	r3, [pc, #96]	; (8008a68 <xPortStartScheduler+0x138>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a17      	ldr	r2, [pc, #92]	; (8008a68 <xPortStartScheduler+0x138>)
 8008a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008a10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008a12:	4b15      	ldr	r3, [pc, #84]	; (8008a68 <xPortStartScheduler+0x138>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a14      	ldr	r2, [pc, #80]	; (8008a68 <xPortStartScheduler+0x138>)
 8008a18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008a1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008a1e:	f000 f8dd 	bl	8008bdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008a22:	4b12      	ldr	r3, [pc, #72]	; (8008a6c <xPortStartScheduler+0x13c>)
 8008a24:	2200      	movs	r2, #0
 8008a26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008a28:	f000 f8fc 	bl	8008c24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008a2c:	4b10      	ldr	r3, [pc, #64]	; (8008a70 <xPortStartScheduler+0x140>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a0f      	ldr	r2, [pc, #60]	; (8008a70 <xPortStartScheduler+0x140>)
 8008a32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008a36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008a38:	f7ff ff66 	bl	8008908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008a3c:	f7ff f846 	bl	8007acc <vTaskSwitchContext>
	prvTaskExitError();
 8008a40:	f7ff ff1c 	bl	800887c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3718      	adds	r7, #24
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	e000ed00 	.word	0xe000ed00
 8008a54:	410fc271 	.word	0x410fc271
 8008a58:	410fc270 	.word	0x410fc270
 8008a5c:	e000e400 	.word	0xe000e400
 8008a60:	20001150 	.word	0x20001150
 8008a64:	20001154 	.word	0x20001154
 8008a68:	e000ed20 	.word	0xe000ed20
 8008a6c:	2000000c 	.word	0x2000000c
 8008a70:	e000ef34 	.word	0xe000ef34

08008a74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
	__asm volatile
 8008a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7e:	f383 8811 	msr	BASEPRI, r3
 8008a82:	f3bf 8f6f 	isb	sy
 8008a86:	f3bf 8f4f 	dsb	sy
 8008a8a:	607b      	str	r3, [r7, #4]
}
 8008a8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008a8e:	4b0f      	ldr	r3, [pc, #60]	; (8008acc <vPortEnterCritical+0x58>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	3301      	adds	r3, #1
 8008a94:	4a0d      	ldr	r2, [pc, #52]	; (8008acc <vPortEnterCritical+0x58>)
 8008a96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008a98:	4b0c      	ldr	r3, [pc, #48]	; (8008acc <vPortEnterCritical+0x58>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d10f      	bne.n	8008ac0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008aa0:	4b0b      	ldr	r3, [pc, #44]	; (8008ad0 <vPortEnterCritical+0x5c>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00a      	beq.n	8008ac0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aae:	f383 8811 	msr	BASEPRI, r3
 8008ab2:	f3bf 8f6f 	isb	sy
 8008ab6:	f3bf 8f4f 	dsb	sy
 8008aba:	603b      	str	r3, [r7, #0]
}
 8008abc:	bf00      	nop
 8008abe:	e7fe      	b.n	8008abe <vPortEnterCritical+0x4a>
	}
}
 8008ac0:	bf00      	nop
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr
 8008acc:	2000000c 	.word	0x2000000c
 8008ad0:	e000ed04 	.word	0xe000ed04

08008ad4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008ada:	4b12      	ldr	r3, [pc, #72]	; (8008b24 <vPortExitCritical+0x50>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d10a      	bne.n	8008af8 <vPortExitCritical+0x24>
	__asm volatile
 8008ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae6:	f383 8811 	msr	BASEPRI, r3
 8008aea:	f3bf 8f6f 	isb	sy
 8008aee:	f3bf 8f4f 	dsb	sy
 8008af2:	607b      	str	r3, [r7, #4]
}
 8008af4:	bf00      	nop
 8008af6:	e7fe      	b.n	8008af6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008af8:	4b0a      	ldr	r3, [pc, #40]	; (8008b24 <vPortExitCritical+0x50>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	3b01      	subs	r3, #1
 8008afe:	4a09      	ldr	r2, [pc, #36]	; (8008b24 <vPortExitCritical+0x50>)
 8008b00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008b02:	4b08      	ldr	r3, [pc, #32]	; (8008b24 <vPortExitCritical+0x50>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d105      	bne.n	8008b16 <vPortExitCritical+0x42>
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	f383 8811 	msr	BASEPRI, r3
}
 8008b14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008b16:	bf00      	nop
 8008b18:	370c      	adds	r7, #12
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr
 8008b22:	bf00      	nop
 8008b24:	2000000c 	.word	0x2000000c
	...

08008b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008b30:	f3ef 8009 	mrs	r0, PSP
 8008b34:	f3bf 8f6f 	isb	sy
 8008b38:	4b15      	ldr	r3, [pc, #84]	; (8008b90 <pxCurrentTCBConst>)
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	f01e 0f10 	tst.w	lr, #16
 8008b40:	bf08      	it	eq
 8008b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b4a:	6010      	str	r0, [r2, #0]
 8008b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008b50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008b54:	f380 8811 	msr	BASEPRI, r0
 8008b58:	f3bf 8f4f 	dsb	sy
 8008b5c:	f3bf 8f6f 	isb	sy
 8008b60:	f7fe ffb4 	bl	8007acc <vTaskSwitchContext>
 8008b64:	f04f 0000 	mov.w	r0, #0
 8008b68:	f380 8811 	msr	BASEPRI, r0
 8008b6c:	bc09      	pop	{r0, r3}
 8008b6e:	6819      	ldr	r1, [r3, #0]
 8008b70:	6808      	ldr	r0, [r1, #0]
 8008b72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b76:	f01e 0f10 	tst.w	lr, #16
 8008b7a:	bf08      	it	eq
 8008b7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008b80:	f380 8809 	msr	PSP, r0
 8008b84:	f3bf 8f6f 	isb	sy
 8008b88:	4770      	bx	lr
 8008b8a:	bf00      	nop
 8008b8c:	f3af 8000 	nop.w

08008b90 <pxCurrentTCBConst>:
 8008b90:	20000b24 	.word	0x20000b24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008b94:	bf00      	nop
 8008b96:	bf00      	nop

08008b98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba2:	f383 8811 	msr	BASEPRI, r3
 8008ba6:	f3bf 8f6f 	isb	sy
 8008baa:	f3bf 8f4f 	dsb	sy
 8008bae:	607b      	str	r3, [r7, #4]
}
 8008bb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008bb2:	f7fe fed1 	bl	8007958 <xTaskIncrementTick>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d003      	beq.n	8008bc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008bbc:	4b06      	ldr	r3, [pc, #24]	; (8008bd8 <xPortSysTickHandler+0x40>)
 8008bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bc2:	601a      	str	r2, [r3, #0]
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	f383 8811 	msr	BASEPRI, r3
}
 8008bce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008bd0:	bf00      	nop
 8008bd2:	3708      	adds	r7, #8
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	e000ed04 	.word	0xe000ed04

08008bdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008bdc:	b480      	push	{r7}
 8008bde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008be0:	4b0b      	ldr	r3, [pc, #44]	; (8008c10 <vPortSetupTimerInterrupt+0x34>)
 8008be2:	2200      	movs	r2, #0
 8008be4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008be6:	4b0b      	ldr	r3, [pc, #44]	; (8008c14 <vPortSetupTimerInterrupt+0x38>)
 8008be8:	2200      	movs	r2, #0
 8008bea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008bec:	4b0a      	ldr	r3, [pc, #40]	; (8008c18 <vPortSetupTimerInterrupt+0x3c>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a0a      	ldr	r2, [pc, #40]	; (8008c1c <vPortSetupTimerInterrupt+0x40>)
 8008bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8008bf6:	099b      	lsrs	r3, r3, #6
 8008bf8:	4a09      	ldr	r2, [pc, #36]	; (8008c20 <vPortSetupTimerInterrupt+0x44>)
 8008bfa:	3b01      	subs	r3, #1
 8008bfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008bfe:	4b04      	ldr	r3, [pc, #16]	; (8008c10 <vPortSetupTimerInterrupt+0x34>)
 8008c00:	2207      	movs	r2, #7
 8008c02:	601a      	str	r2, [r3, #0]
}
 8008c04:	bf00      	nop
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr
 8008c0e:	bf00      	nop
 8008c10:	e000e010 	.word	0xe000e010
 8008c14:	e000e018 	.word	0xe000e018
 8008c18:	20000000 	.word	0x20000000
 8008c1c:	10624dd3 	.word	0x10624dd3
 8008c20:	e000e014 	.word	0xe000e014

08008c24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008c24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008c34 <vPortEnableVFP+0x10>
 8008c28:	6801      	ldr	r1, [r0, #0]
 8008c2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008c2e:	6001      	str	r1, [r0, #0]
 8008c30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008c32:	bf00      	nop
 8008c34:	e000ed88 	.word	0xe000ed88

08008c38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008c3e:	f3ef 8305 	mrs	r3, IPSR
 8008c42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2b0f      	cmp	r3, #15
 8008c48:	d914      	bls.n	8008c74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008c4a:	4a17      	ldr	r2, [pc, #92]	; (8008ca8 <vPortValidateInterruptPriority+0x70>)
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	4413      	add	r3, r2
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008c54:	4b15      	ldr	r3, [pc, #84]	; (8008cac <vPortValidateInterruptPriority+0x74>)
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	7afa      	ldrb	r2, [r7, #11]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d20a      	bcs.n	8008c74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c62:	f383 8811 	msr	BASEPRI, r3
 8008c66:	f3bf 8f6f 	isb	sy
 8008c6a:	f3bf 8f4f 	dsb	sy
 8008c6e:	607b      	str	r3, [r7, #4]
}
 8008c70:	bf00      	nop
 8008c72:	e7fe      	b.n	8008c72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008c74:	4b0e      	ldr	r3, [pc, #56]	; (8008cb0 <vPortValidateInterruptPriority+0x78>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008c7c:	4b0d      	ldr	r3, [pc, #52]	; (8008cb4 <vPortValidateInterruptPriority+0x7c>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d90a      	bls.n	8008c9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c88:	f383 8811 	msr	BASEPRI, r3
 8008c8c:	f3bf 8f6f 	isb	sy
 8008c90:	f3bf 8f4f 	dsb	sy
 8008c94:	603b      	str	r3, [r7, #0]
}
 8008c96:	bf00      	nop
 8008c98:	e7fe      	b.n	8008c98 <vPortValidateInterruptPriority+0x60>
	}
 8008c9a:	bf00      	nop
 8008c9c:	3714      	adds	r7, #20
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr
 8008ca6:	bf00      	nop
 8008ca8:	e000e3f0 	.word	0xe000e3f0
 8008cac:	20001150 	.word	0x20001150
 8008cb0:	e000ed0c 	.word	0xe000ed0c
 8008cb4:	20001154 	.word	0x20001154

08008cb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b08a      	sub	sp, #40	; 0x28
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008cc4:	f7fe fd8c 	bl	80077e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008cc8:	4b5b      	ldr	r3, [pc, #364]	; (8008e38 <pvPortMalloc+0x180>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d101      	bne.n	8008cd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008cd0:	f000 f920 	bl	8008f14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008cd4:	4b59      	ldr	r3, [pc, #356]	; (8008e3c <pvPortMalloc+0x184>)
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4013      	ands	r3, r2
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	f040 8093 	bne.w	8008e08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d01d      	beq.n	8008d24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008ce8:	2208      	movs	r2, #8
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4413      	add	r3, r2
 8008cee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f003 0307 	and.w	r3, r3, #7
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d014      	beq.n	8008d24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f023 0307 	bic.w	r3, r3, #7
 8008d00:	3308      	adds	r3, #8
 8008d02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f003 0307 	and.w	r3, r3, #7
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d00a      	beq.n	8008d24 <pvPortMalloc+0x6c>
	__asm volatile
 8008d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d12:	f383 8811 	msr	BASEPRI, r3
 8008d16:	f3bf 8f6f 	isb	sy
 8008d1a:	f3bf 8f4f 	dsb	sy
 8008d1e:	617b      	str	r3, [r7, #20]
}
 8008d20:	bf00      	nop
 8008d22:	e7fe      	b.n	8008d22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d06e      	beq.n	8008e08 <pvPortMalloc+0x150>
 8008d2a:	4b45      	ldr	r3, [pc, #276]	; (8008e40 <pvPortMalloc+0x188>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d869      	bhi.n	8008e08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008d34:	4b43      	ldr	r3, [pc, #268]	; (8008e44 <pvPortMalloc+0x18c>)
 8008d36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008d38:	4b42      	ldr	r3, [pc, #264]	; (8008e44 <pvPortMalloc+0x18c>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d3e:	e004      	b.n	8008d4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d903      	bls.n	8008d5c <pvPortMalloc+0xa4>
 8008d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d1f1      	bne.n	8008d40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008d5c:	4b36      	ldr	r3, [pc, #216]	; (8008e38 <pvPortMalloc+0x180>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d050      	beq.n	8008e08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d66:	6a3b      	ldr	r3, [r7, #32]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	2208      	movs	r2, #8
 8008d6c:	4413      	add	r3, r2
 8008d6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	6a3b      	ldr	r3, [r7, #32]
 8008d76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7a:	685a      	ldr	r2, [r3, #4]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	1ad2      	subs	r2, r2, r3
 8008d80:	2308      	movs	r3, #8
 8008d82:	005b      	lsls	r3, r3, #1
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d91f      	bls.n	8008dc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d90:	69bb      	ldr	r3, [r7, #24]
 8008d92:	f003 0307 	and.w	r3, r3, #7
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00a      	beq.n	8008db0 <pvPortMalloc+0xf8>
	__asm volatile
 8008d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9e:	f383 8811 	msr	BASEPRI, r3
 8008da2:	f3bf 8f6f 	isb	sy
 8008da6:	f3bf 8f4f 	dsb	sy
 8008daa:	613b      	str	r3, [r7, #16]
}
 8008dac:	bf00      	nop
 8008dae:	e7fe      	b.n	8008dae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db2:	685a      	ldr	r2, [r3, #4]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	1ad2      	subs	r2, r2, r3
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008dc2:	69b8      	ldr	r0, [r7, #24]
 8008dc4:	f000 f908 	bl	8008fd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008dc8:	4b1d      	ldr	r3, [pc, #116]	; (8008e40 <pvPortMalloc+0x188>)
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	1ad3      	subs	r3, r2, r3
 8008dd2:	4a1b      	ldr	r2, [pc, #108]	; (8008e40 <pvPortMalloc+0x188>)
 8008dd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008dd6:	4b1a      	ldr	r3, [pc, #104]	; (8008e40 <pvPortMalloc+0x188>)
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	4b1b      	ldr	r3, [pc, #108]	; (8008e48 <pvPortMalloc+0x190>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d203      	bcs.n	8008dea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008de2:	4b17      	ldr	r3, [pc, #92]	; (8008e40 <pvPortMalloc+0x188>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a18      	ldr	r2, [pc, #96]	; (8008e48 <pvPortMalloc+0x190>)
 8008de8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dec:	685a      	ldr	r2, [r3, #4]
 8008dee:	4b13      	ldr	r3, [pc, #76]	; (8008e3c <pvPortMalloc+0x184>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	431a      	orrs	r2, r3
 8008df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008dfe:	4b13      	ldr	r3, [pc, #76]	; (8008e4c <pvPortMalloc+0x194>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	3301      	adds	r3, #1
 8008e04:	4a11      	ldr	r2, [pc, #68]	; (8008e4c <pvPortMalloc+0x194>)
 8008e06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e08:	f7fe fcf8 	bl	80077fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e0c:	69fb      	ldr	r3, [r7, #28]
 8008e0e:	f003 0307 	and.w	r3, r3, #7
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d00a      	beq.n	8008e2c <pvPortMalloc+0x174>
	__asm volatile
 8008e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e1a:	f383 8811 	msr	BASEPRI, r3
 8008e1e:	f3bf 8f6f 	isb	sy
 8008e22:	f3bf 8f4f 	dsb	sy
 8008e26:	60fb      	str	r3, [r7, #12]
}
 8008e28:	bf00      	nop
 8008e2a:	e7fe      	b.n	8008e2a <pvPortMalloc+0x172>
	return pvReturn;
 8008e2c:	69fb      	ldr	r3, [r7, #28]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3728      	adds	r7, #40	; 0x28
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	20003870 	.word	0x20003870
 8008e3c:	20003884 	.word	0x20003884
 8008e40:	20003874 	.word	0x20003874
 8008e44:	20003868 	.word	0x20003868
 8008e48:	20003878 	.word	0x20003878
 8008e4c:	2000387c 	.word	0x2000387c

08008e50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b086      	sub	sp, #24
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d04d      	beq.n	8008efe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008e62:	2308      	movs	r3, #8
 8008e64:	425b      	negs	r3, r3
 8008e66:	697a      	ldr	r2, [r7, #20]
 8008e68:	4413      	add	r3, r2
 8008e6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	685a      	ldr	r2, [r3, #4]
 8008e74:	4b24      	ldr	r3, [pc, #144]	; (8008f08 <vPortFree+0xb8>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4013      	ands	r3, r2
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d10a      	bne.n	8008e94 <vPortFree+0x44>
	__asm volatile
 8008e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e82:	f383 8811 	msr	BASEPRI, r3
 8008e86:	f3bf 8f6f 	isb	sy
 8008e8a:	f3bf 8f4f 	dsb	sy
 8008e8e:	60fb      	str	r3, [r7, #12]
}
 8008e90:	bf00      	nop
 8008e92:	e7fe      	b.n	8008e92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d00a      	beq.n	8008eb2 <vPortFree+0x62>
	__asm volatile
 8008e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea0:	f383 8811 	msr	BASEPRI, r3
 8008ea4:	f3bf 8f6f 	isb	sy
 8008ea8:	f3bf 8f4f 	dsb	sy
 8008eac:	60bb      	str	r3, [r7, #8]
}
 8008eae:	bf00      	nop
 8008eb0:	e7fe      	b.n	8008eb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	685a      	ldr	r2, [r3, #4]
 8008eb6:	4b14      	ldr	r3, [pc, #80]	; (8008f08 <vPortFree+0xb8>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4013      	ands	r3, r2
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d01e      	beq.n	8008efe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d11a      	bne.n	8008efe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	685a      	ldr	r2, [r3, #4]
 8008ecc:	4b0e      	ldr	r3, [pc, #56]	; (8008f08 <vPortFree+0xb8>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	43db      	mvns	r3, r3
 8008ed2:	401a      	ands	r2, r3
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ed8:	f7fe fc82 	bl	80077e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	685a      	ldr	r2, [r3, #4]
 8008ee0:	4b0a      	ldr	r3, [pc, #40]	; (8008f0c <vPortFree+0xbc>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4413      	add	r3, r2
 8008ee6:	4a09      	ldr	r2, [pc, #36]	; (8008f0c <vPortFree+0xbc>)
 8008ee8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008eea:	6938      	ldr	r0, [r7, #16]
 8008eec:	f000 f874 	bl	8008fd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008ef0:	4b07      	ldr	r3, [pc, #28]	; (8008f10 <vPortFree+0xc0>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	4a06      	ldr	r2, [pc, #24]	; (8008f10 <vPortFree+0xc0>)
 8008ef8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008efa:	f7fe fc7f 	bl	80077fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008efe:	bf00      	nop
 8008f00:	3718      	adds	r7, #24
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop
 8008f08:	20003884 	.word	0x20003884
 8008f0c:	20003874 	.word	0x20003874
 8008f10:	20003880 	.word	0x20003880

08008f14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f14:	b480      	push	{r7}
 8008f16:	b085      	sub	sp, #20
 8008f18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f1a:	f242 7310 	movw	r3, #10000	; 0x2710
 8008f1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008f20:	4b27      	ldr	r3, [pc, #156]	; (8008fc0 <prvHeapInit+0xac>)
 8008f22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f003 0307 	and.w	r3, r3, #7
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d00c      	beq.n	8008f48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	3307      	adds	r3, #7
 8008f32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f023 0307 	bic.w	r3, r3, #7
 8008f3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f3c:	68ba      	ldr	r2, [r7, #8]
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	4a1f      	ldr	r2, [pc, #124]	; (8008fc0 <prvHeapInit+0xac>)
 8008f44:	4413      	add	r3, r2
 8008f46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008f4c:	4a1d      	ldr	r2, [pc, #116]	; (8008fc4 <prvHeapInit+0xb0>)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008f52:	4b1c      	ldr	r3, [pc, #112]	; (8008fc4 <prvHeapInit+0xb0>)
 8008f54:	2200      	movs	r2, #0
 8008f56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	68ba      	ldr	r2, [r7, #8]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008f60:	2208      	movs	r2, #8
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	1a9b      	subs	r3, r3, r2
 8008f66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f023 0307 	bic.w	r3, r3, #7
 8008f6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	4a15      	ldr	r2, [pc, #84]	; (8008fc8 <prvHeapInit+0xb4>)
 8008f74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008f76:	4b14      	ldr	r3, [pc, #80]	; (8008fc8 <prvHeapInit+0xb4>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008f7e:	4b12      	ldr	r3, [pc, #72]	; (8008fc8 <prvHeapInit+0xb4>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	2200      	movs	r2, #0
 8008f84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	68fa      	ldr	r2, [r7, #12]
 8008f8e:	1ad2      	subs	r2, r2, r3
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008f94:	4b0c      	ldr	r3, [pc, #48]	; (8008fc8 <prvHeapInit+0xb4>)
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	4a0a      	ldr	r2, [pc, #40]	; (8008fcc <prvHeapInit+0xb8>)
 8008fa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	4a09      	ldr	r2, [pc, #36]	; (8008fd0 <prvHeapInit+0xbc>)
 8008faa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008fac:	4b09      	ldr	r3, [pc, #36]	; (8008fd4 <prvHeapInit+0xc0>)
 8008fae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008fb2:	601a      	str	r2, [r3, #0]
}
 8008fb4:	bf00      	nop
 8008fb6:	3714      	adds	r7, #20
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr
 8008fc0:	20001158 	.word	0x20001158
 8008fc4:	20003868 	.word	0x20003868
 8008fc8:	20003870 	.word	0x20003870
 8008fcc:	20003878 	.word	0x20003878
 8008fd0:	20003874 	.word	0x20003874
 8008fd4:	20003884 	.word	0x20003884

08008fd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008fe0:	4b28      	ldr	r3, [pc, #160]	; (8009084 <prvInsertBlockIntoFreeList+0xac>)
 8008fe2:	60fb      	str	r3, [r7, #12]
 8008fe4:	e002      	b.n	8008fec <prvInsertBlockIntoFreeList+0x14>
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	60fb      	str	r3, [r7, #12]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d8f7      	bhi.n	8008fe6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	68ba      	ldr	r2, [r7, #8]
 8009000:	4413      	add	r3, r2
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	429a      	cmp	r2, r3
 8009006:	d108      	bne.n	800901a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	685a      	ldr	r2, [r3, #4]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	441a      	add	r2, r3
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	68ba      	ldr	r2, [r7, #8]
 8009024:	441a      	add	r2, r3
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	429a      	cmp	r2, r3
 800902c:	d118      	bne.n	8009060 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	4b15      	ldr	r3, [pc, #84]	; (8009088 <prvInsertBlockIntoFreeList+0xb0>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	429a      	cmp	r2, r3
 8009038:	d00d      	beq.n	8009056 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	685a      	ldr	r2, [r3, #4]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	441a      	add	r2, r3
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	681a      	ldr	r2, [r3, #0]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	601a      	str	r2, [r3, #0]
 8009054:	e008      	b.n	8009068 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009056:	4b0c      	ldr	r3, [pc, #48]	; (8009088 <prvInsertBlockIntoFreeList+0xb0>)
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	601a      	str	r2, [r3, #0]
 800905e:	e003      	b.n	8009068 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009068:	68fa      	ldr	r2, [r7, #12]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	429a      	cmp	r2, r3
 800906e:	d002      	beq.n	8009076 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009076:	bf00      	nop
 8009078:	3714      	adds	r7, #20
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr
 8009082:	bf00      	nop
 8009084:	20003868 	.word	0x20003868
 8009088:	20003870 	.word	0x20003870

0800908c <__cvt>:
 800908c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009090:	ec55 4b10 	vmov	r4, r5, d0
 8009094:	2d00      	cmp	r5, #0
 8009096:	460e      	mov	r6, r1
 8009098:	4619      	mov	r1, r3
 800909a:	462b      	mov	r3, r5
 800909c:	bfbb      	ittet	lt
 800909e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80090a2:	461d      	movlt	r5, r3
 80090a4:	2300      	movge	r3, #0
 80090a6:	232d      	movlt	r3, #45	; 0x2d
 80090a8:	700b      	strb	r3, [r1, #0]
 80090aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80090b0:	4691      	mov	r9, r2
 80090b2:	f023 0820 	bic.w	r8, r3, #32
 80090b6:	bfbc      	itt	lt
 80090b8:	4622      	movlt	r2, r4
 80090ba:	4614      	movlt	r4, r2
 80090bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80090c0:	d005      	beq.n	80090ce <__cvt+0x42>
 80090c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80090c6:	d100      	bne.n	80090ca <__cvt+0x3e>
 80090c8:	3601      	adds	r6, #1
 80090ca:	2102      	movs	r1, #2
 80090cc:	e000      	b.n	80090d0 <__cvt+0x44>
 80090ce:	2103      	movs	r1, #3
 80090d0:	ab03      	add	r3, sp, #12
 80090d2:	9301      	str	r3, [sp, #4]
 80090d4:	ab02      	add	r3, sp, #8
 80090d6:	9300      	str	r3, [sp, #0]
 80090d8:	ec45 4b10 	vmov	d0, r4, r5
 80090dc:	4653      	mov	r3, sl
 80090de:	4632      	mov	r2, r6
 80090e0:	f000 fed2 	bl	8009e88 <_dtoa_r>
 80090e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80090e8:	4607      	mov	r7, r0
 80090ea:	d102      	bne.n	80090f2 <__cvt+0x66>
 80090ec:	f019 0f01 	tst.w	r9, #1
 80090f0:	d022      	beq.n	8009138 <__cvt+0xac>
 80090f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80090f6:	eb07 0906 	add.w	r9, r7, r6
 80090fa:	d110      	bne.n	800911e <__cvt+0x92>
 80090fc:	783b      	ldrb	r3, [r7, #0]
 80090fe:	2b30      	cmp	r3, #48	; 0x30
 8009100:	d10a      	bne.n	8009118 <__cvt+0x8c>
 8009102:	2200      	movs	r2, #0
 8009104:	2300      	movs	r3, #0
 8009106:	4620      	mov	r0, r4
 8009108:	4629      	mov	r1, r5
 800910a:	f7f7 fced 	bl	8000ae8 <__aeabi_dcmpeq>
 800910e:	b918      	cbnz	r0, 8009118 <__cvt+0x8c>
 8009110:	f1c6 0601 	rsb	r6, r6, #1
 8009114:	f8ca 6000 	str.w	r6, [sl]
 8009118:	f8da 3000 	ldr.w	r3, [sl]
 800911c:	4499      	add	r9, r3
 800911e:	2200      	movs	r2, #0
 8009120:	2300      	movs	r3, #0
 8009122:	4620      	mov	r0, r4
 8009124:	4629      	mov	r1, r5
 8009126:	f7f7 fcdf 	bl	8000ae8 <__aeabi_dcmpeq>
 800912a:	b108      	cbz	r0, 8009130 <__cvt+0xa4>
 800912c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009130:	2230      	movs	r2, #48	; 0x30
 8009132:	9b03      	ldr	r3, [sp, #12]
 8009134:	454b      	cmp	r3, r9
 8009136:	d307      	bcc.n	8009148 <__cvt+0xbc>
 8009138:	9b03      	ldr	r3, [sp, #12]
 800913a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800913c:	1bdb      	subs	r3, r3, r7
 800913e:	4638      	mov	r0, r7
 8009140:	6013      	str	r3, [r2, #0]
 8009142:	b004      	add	sp, #16
 8009144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009148:	1c59      	adds	r1, r3, #1
 800914a:	9103      	str	r1, [sp, #12]
 800914c:	701a      	strb	r2, [r3, #0]
 800914e:	e7f0      	b.n	8009132 <__cvt+0xa6>

08009150 <__exponent>:
 8009150:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009152:	4603      	mov	r3, r0
 8009154:	2900      	cmp	r1, #0
 8009156:	bfb8      	it	lt
 8009158:	4249      	neglt	r1, r1
 800915a:	f803 2b02 	strb.w	r2, [r3], #2
 800915e:	bfb4      	ite	lt
 8009160:	222d      	movlt	r2, #45	; 0x2d
 8009162:	222b      	movge	r2, #43	; 0x2b
 8009164:	2909      	cmp	r1, #9
 8009166:	7042      	strb	r2, [r0, #1]
 8009168:	dd2a      	ble.n	80091c0 <__exponent+0x70>
 800916a:	f10d 0207 	add.w	r2, sp, #7
 800916e:	4617      	mov	r7, r2
 8009170:	260a      	movs	r6, #10
 8009172:	4694      	mov	ip, r2
 8009174:	fb91 f5f6 	sdiv	r5, r1, r6
 8009178:	fb06 1415 	mls	r4, r6, r5, r1
 800917c:	3430      	adds	r4, #48	; 0x30
 800917e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009182:	460c      	mov	r4, r1
 8009184:	2c63      	cmp	r4, #99	; 0x63
 8009186:	f102 32ff 	add.w	r2, r2, #4294967295
 800918a:	4629      	mov	r1, r5
 800918c:	dcf1      	bgt.n	8009172 <__exponent+0x22>
 800918e:	3130      	adds	r1, #48	; 0x30
 8009190:	f1ac 0402 	sub.w	r4, ip, #2
 8009194:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009198:	1c41      	adds	r1, r0, #1
 800919a:	4622      	mov	r2, r4
 800919c:	42ba      	cmp	r2, r7
 800919e:	d30a      	bcc.n	80091b6 <__exponent+0x66>
 80091a0:	f10d 0209 	add.w	r2, sp, #9
 80091a4:	eba2 020c 	sub.w	r2, r2, ip
 80091a8:	42bc      	cmp	r4, r7
 80091aa:	bf88      	it	hi
 80091ac:	2200      	movhi	r2, #0
 80091ae:	4413      	add	r3, r2
 80091b0:	1a18      	subs	r0, r3, r0
 80091b2:	b003      	add	sp, #12
 80091b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091b6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80091ba:	f801 5f01 	strb.w	r5, [r1, #1]!
 80091be:	e7ed      	b.n	800919c <__exponent+0x4c>
 80091c0:	2330      	movs	r3, #48	; 0x30
 80091c2:	3130      	adds	r1, #48	; 0x30
 80091c4:	7083      	strb	r3, [r0, #2]
 80091c6:	70c1      	strb	r1, [r0, #3]
 80091c8:	1d03      	adds	r3, r0, #4
 80091ca:	e7f1      	b.n	80091b0 <__exponent+0x60>

080091cc <_printf_float>:
 80091cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d0:	ed2d 8b02 	vpush	{d8}
 80091d4:	b08d      	sub	sp, #52	; 0x34
 80091d6:	460c      	mov	r4, r1
 80091d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80091dc:	4616      	mov	r6, r2
 80091de:	461f      	mov	r7, r3
 80091e0:	4605      	mov	r5, r0
 80091e2:	f000 fceb 	bl	8009bbc <_localeconv_r>
 80091e6:	f8d0 a000 	ldr.w	sl, [r0]
 80091ea:	4650      	mov	r0, sl
 80091ec:	f7f7 f850 	bl	8000290 <strlen>
 80091f0:	2300      	movs	r3, #0
 80091f2:	930a      	str	r3, [sp, #40]	; 0x28
 80091f4:	6823      	ldr	r3, [r4, #0]
 80091f6:	9305      	str	r3, [sp, #20]
 80091f8:	f8d8 3000 	ldr.w	r3, [r8]
 80091fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009200:	3307      	adds	r3, #7
 8009202:	f023 0307 	bic.w	r3, r3, #7
 8009206:	f103 0208 	add.w	r2, r3, #8
 800920a:	f8c8 2000 	str.w	r2, [r8]
 800920e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009212:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009216:	9307      	str	r3, [sp, #28]
 8009218:	f8cd 8018 	str.w	r8, [sp, #24]
 800921c:	ee08 0a10 	vmov	s16, r0
 8009220:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009224:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009228:	4b9e      	ldr	r3, [pc, #632]	; (80094a4 <_printf_float+0x2d8>)
 800922a:	f04f 32ff 	mov.w	r2, #4294967295
 800922e:	f7f7 fc8d 	bl	8000b4c <__aeabi_dcmpun>
 8009232:	bb88      	cbnz	r0, 8009298 <_printf_float+0xcc>
 8009234:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009238:	4b9a      	ldr	r3, [pc, #616]	; (80094a4 <_printf_float+0x2d8>)
 800923a:	f04f 32ff 	mov.w	r2, #4294967295
 800923e:	f7f7 fc67 	bl	8000b10 <__aeabi_dcmple>
 8009242:	bb48      	cbnz	r0, 8009298 <_printf_float+0xcc>
 8009244:	2200      	movs	r2, #0
 8009246:	2300      	movs	r3, #0
 8009248:	4640      	mov	r0, r8
 800924a:	4649      	mov	r1, r9
 800924c:	f7f7 fc56 	bl	8000afc <__aeabi_dcmplt>
 8009250:	b110      	cbz	r0, 8009258 <_printf_float+0x8c>
 8009252:	232d      	movs	r3, #45	; 0x2d
 8009254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009258:	4a93      	ldr	r2, [pc, #588]	; (80094a8 <_printf_float+0x2dc>)
 800925a:	4b94      	ldr	r3, [pc, #592]	; (80094ac <_printf_float+0x2e0>)
 800925c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009260:	bf94      	ite	ls
 8009262:	4690      	movls	r8, r2
 8009264:	4698      	movhi	r8, r3
 8009266:	2303      	movs	r3, #3
 8009268:	6123      	str	r3, [r4, #16]
 800926a:	9b05      	ldr	r3, [sp, #20]
 800926c:	f023 0304 	bic.w	r3, r3, #4
 8009270:	6023      	str	r3, [r4, #0]
 8009272:	f04f 0900 	mov.w	r9, #0
 8009276:	9700      	str	r7, [sp, #0]
 8009278:	4633      	mov	r3, r6
 800927a:	aa0b      	add	r2, sp, #44	; 0x2c
 800927c:	4621      	mov	r1, r4
 800927e:	4628      	mov	r0, r5
 8009280:	f000 f9da 	bl	8009638 <_printf_common>
 8009284:	3001      	adds	r0, #1
 8009286:	f040 8090 	bne.w	80093aa <_printf_float+0x1de>
 800928a:	f04f 30ff 	mov.w	r0, #4294967295
 800928e:	b00d      	add	sp, #52	; 0x34
 8009290:	ecbd 8b02 	vpop	{d8}
 8009294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009298:	4642      	mov	r2, r8
 800929a:	464b      	mov	r3, r9
 800929c:	4640      	mov	r0, r8
 800929e:	4649      	mov	r1, r9
 80092a0:	f7f7 fc54 	bl	8000b4c <__aeabi_dcmpun>
 80092a4:	b140      	cbz	r0, 80092b8 <_printf_float+0xec>
 80092a6:	464b      	mov	r3, r9
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	bfbc      	itt	lt
 80092ac:	232d      	movlt	r3, #45	; 0x2d
 80092ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80092b2:	4a7f      	ldr	r2, [pc, #508]	; (80094b0 <_printf_float+0x2e4>)
 80092b4:	4b7f      	ldr	r3, [pc, #508]	; (80094b4 <_printf_float+0x2e8>)
 80092b6:	e7d1      	b.n	800925c <_printf_float+0x90>
 80092b8:	6863      	ldr	r3, [r4, #4]
 80092ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80092be:	9206      	str	r2, [sp, #24]
 80092c0:	1c5a      	adds	r2, r3, #1
 80092c2:	d13f      	bne.n	8009344 <_printf_float+0x178>
 80092c4:	2306      	movs	r3, #6
 80092c6:	6063      	str	r3, [r4, #4]
 80092c8:	9b05      	ldr	r3, [sp, #20]
 80092ca:	6861      	ldr	r1, [r4, #4]
 80092cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80092d0:	2300      	movs	r3, #0
 80092d2:	9303      	str	r3, [sp, #12]
 80092d4:	ab0a      	add	r3, sp, #40	; 0x28
 80092d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80092da:	ab09      	add	r3, sp, #36	; 0x24
 80092dc:	ec49 8b10 	vmov	d0, r8, r9
 80092e0:	9300      	str	r3, [sp, #0]
 80092e2:	6022      	str	r2, [r4, #0]
 80092e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80092e8:	4628      	mov	r0, r5
 80092ea:	f7ff fecf 	bl	800908c <__cvt>
 80092ee:	9b06      	ldr	r3, [sp, #24]
 80092f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80092f2:	2b47      	cmp	r3, #71	; 0x47
 80092f4:	4680      	mov	r8, r0
 80092f6:	d108      	bne.n	800930a <_printf_float+0x13e>
 80092f8:	1cc8      	adds	r0, r1, #3
 80092fa:	db02      	blt.n	8009302 <_printf_float+0x136>
 80092fc:	6863      	ldr	r3, [r4, #4]
 80092fe:	4299      	cmp	r1, r3
 8009300:	dd41      	ble.n	8009386 <_printf_float+0x1ba>
 8009302:	f1ab 0302 	sub.w	r3, fp, #2
 8009306:	fa5f fb83 	uxtb.w	fp, r3
 800930a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800930e:	d820      	bhi.n	8009352 <_printf_float+0x186>
 8009310:	3901      	subs	r1, #1
 8009312:	465a      	mov	r2, fp
 8009314:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009318:	9109      	str	r1, [sp, #36]	; 0x24
 800931a:	f7ff ff19 	bl	8009150 <__exponent>
 800931e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009320:	1813      	adds	r3, r2, r0
 8009322:	2a01      	cmp	r2, #1
 8009324:	4681      	mov	r9, r0
 8009326:	6123      	str	r3, [r4, #16]
 8009328:	dc02      	bgt.n	8009330 <_printf_float+0x164>
 800932a:	6822      	ldr	r2, [r4, #0]
 800932c:	07d2      	lsls	r2, r2, #31
 800932e:	d501      	bpl.n	8009334 <_printf_float+0x168>
 8009330:	3301      	adds	r3, #1
 8009332:	6123      	str	r3, [r4, #16]
 8009334:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009338:	2b00      	cmp	r3, #0
 800933a:	d09c      	beq.n	8009276 <_printf_float+0xaa>
 800933c:	232d      	movs	r3, #45	; 0x2d
 800933e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009342:	e798      	b.n	8009276 <_printf_float+0xaa>
 8009344:	9a06      	ldr	r2, [sp, #24]
 8009346:	2a47      	cmp	r2, #71	; 0x47
 8009348:	d1be      	bne.n	80092c8 <_printf_float+0xfc>
 800934a:	2b00      	cmp	r3, #0
 800934c:	d1bc      	bne.n	80092c8 <_printf_float+0xfc>
 800934e:	2301      	movs	r3, #1
 8009350:	e7b9      	b.n	80092c6 <_printf_float+0xfa>
 8009352:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009356:	d118      	bne.n	800938a <_printf_float+0x1be>
 8009358:	2900      	cmp	r1, #0
 800935a:	6863      	ldr	r3, [r4, #4]
 800935c:	dd0b      	ble.n	8009376 <_printf_float+0x1aa>
 800935e:	6121      	str	r1, [r4, #16]
 8009360:	b913      	cbnz	r3, 8009368 <_printf_float+0x19c>
 8009362:	6822      	ldr	r2, [r4, #0]
 8009364:	07d0      	lsls	r0, r2, #31
 8009366:	d502      	bpl.n	800936e <_printf_float+0x1a2>
 8009368:	3301      	adds	r3, #1
 800936a:	440b      	add	r3, r1
 800936c:	6123      	str	r3, [r4, #16]
 800936e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009370:	f04f 0900 	mov.w	r9, #0
 8009374:	e7de      	b.n	8009334 <_printf_float+0x168>
 8009376:	b913      	cbnz	r3, 800937e <_printf_float+0x1b2>
 8009378:	6822      	ldr	r2, [r4, #0]
 800937a:	07d2      	lsls	r2, r2, #31
 800937c:	d501      	bpl.n	8009382 <_printf_float+0x1b6>
 800937e:	3302      	adds	r3, #2
 8009380:	e7f4      	b.n	800936c <_printf_float+0x1a0>
 8009382:	2301      	movs	r3, #1
 8009384:	e7f2      	b.n	800936c <_printf_float+0x1a0>
 8009386:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800938a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800938c:	4299      	cmp	r1, r3
 800938e:	db05      	blt.n	800939c <_printf_float+0x1d0>
 8009390:	6823      	ldr	r3, [r4, #0]
 8009392:	6121      	str	r1, [r4, #16]
 8009394:	07d8      	lsls	r0, r3, #31
 8009396:	d5ea      	bpl.n	800936e <_printf_float+0x1a2>
 8009398:	1c4b      	adds	r3, r1, #1
 800939a:	e7e7      	b.n	800936c <_printf_float+0x1a0>
 800939c:	2900      	cmp	r1, #0
 800939e:	bfd4      	ite	le
 80093a0:	f1c1 0202 	rsble	r2, r1, #2
 80093a4:	2201      	movgt	r2, #1
 80093a6:	4413      	add	r3, r2
 80093a8:	e7e0      	b.n	800936c <_printf_float+0x1a0>
 80093aa:	6823      	ldr	r3, [r4, #0]
 80093ac:	055a      	lsls	r2, r3, #21
 80093ae:	d407      	bmi.n	80093c0 <_printf_float+0x1f4>
 80093b0:	6923      	ldr	r3, [r4, #16]
 80093b2:	4642      	mov	r2, r8
 80093b4:	4631      	mov	r1, r6
 80093b6:	4628      	mov	r0, r5
 80093b8:	47b8      	blx	r7
 80093ba:	3001      	adds	r0, #1
 80093bc:	d12c      	bne.n	8009418 <_printf_float+0x24c>
 80093be:	e764      	b.n	800928a <_printf_float+0xbe>
 80093c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80093c4:	f240 80e0 	bls.w	8009588 <_printf_float+0x3bc>
 80093c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80093cc:	2200      	movs	r2, #0
 80093ce:	2300      	movs	r3, #0
 80093d0:	f7f7 fb8a 	bl	8000ae8 <__aeabi_dcmpeq>
 80093d4:	2800      	cmp	r0, #0
 80093d6:	d034      	beq.n	8009442 <_printf_float+0x276>
 80093d8:	4a37      	ldr	r2, [pc, #220]	; (80094b8 <_printf_float+0x2ec>)
 80093da:	2301      	movs	r3, #1
 80093dc:	4631      	mov	r1, r6
 80093de:	4628      	mov	r0, r5
 80093e0:	47b8      	blx	r7
 80093e2:	3001      	adds	r0, #1
 80093e4:	f43f af51 	beq.w	800928a <_printf_float+0xbe>
 80093e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093ec:	429a      	cmp	r2, r3
 80093ee:	db02      	blt.n	80093f6 <_printf_float+0x22a>
 80093f0:	6823      	ldr	r3, [r4, #0]
 80093f2:	07d8      	lsls	r0, r3, #31
 80093f4:	d510      	bpl.n	8009418 <_printf_float+0x24c>
 80093f6:	ee18 3a10 	vmov	r3, s16
 80093fa:	4652      	mov	r2, sl
 80093fc:	4631      	mov	r1, r6
 80093fe:	4628      	mov	r0, r5
 8009400:	47b8      	blx	r7
 8009402:	3001      	adds	r0, #1
 8009404:	f43f af41 	beq.w	800928a <_printf_float+0xbe>
 8009408:	f04f 0800 	mov.w	r8, #0
 800940c:	f104 091a 	add.w	r9, r4, #26
 8009410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009412:	3b01      	subs	r3, #1
 8009414:	4543      	cmp	r3, r8
 8009416:	dc09      	bgt.n	800942c <_printf_float+0x260>
 8009418:	6823      	ldr	r3, [r4, #0]
 800941a:	079b      	lsls	r3, r3, #30
 800941c:	f100 8107 	bmi.w	800962e <_printf_float+0x462>
 8009420:	68e0      	ldr	r0, [r4, #12]
 8009422:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009424:	4298      	cmp	r0, r3
 8009426:	bfb8      	it	lt
 8009428:	4618      	movlt	r0, r3
 800942a:	e730      	b.n	800928e <_printf_float+0xc2>
 800942c:	2301      	movs	r3, #1
 800942e:	464a      	mov	r2, r9
 8009430:	4631      	mov	r1, r6
 8009432:	4628      	mov	r0, r5
 8009434:	47b8      	blx	r7
 8009436:	3001      	adds	r0, #1
 8009438:	f43f af27 	beq.w	800928a <_printf_float+0xbe>
 800943c:	f108 0801 	add.w	r8, r8, #1
 8009440:	e7e6      	b.n	8009410 <_printf_float+0x244>
 8009442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009444:	2b00      	cmp	r3, #0
 8009446:	dc39      	bgt.n	80094bc <_printf_float+0x2f0>
 8009448:	4a1b      	ldr	r2, [pc, #108]	; (80094b8 <_printf_float+0x2ec>)
 800944a:	2301      	movs	r3, #1
 800944c:	4631      	mov	r1, r6
 800944e:	4628      	mov	r0, r5
 8009450:	47b8      	blx	r7
 8009452:	3001      	adds	r0, #1
 8009454:	f43f af19 	beq.w	800928a <_printf_float+0xbe>
 8009458:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800945c:	4313      	orrs	r3, r2
 800945e:	d102      	bne.n	8009466 <_printf_float+0x29a>
 8009460:	6823      	ldr	r3, [r4, #0]
 8009462:	07d9      	lsls	r1, r3, #31
 8009464:	d5d8      	bpl.n	8009418 <_printf_float+0x24c>
 8009466:	ee18 3a10 	vmov	r3, s16
 800946a:	4652      	mov	r2, sl
 800946c:	4631      	mov	r1, r6
 800946e:	4628      	mov	r0, r5
 8009470:	47b8      	blx	r7
 8009472:	3001      	adds	r0, #1
 8009474:	f43f af09 	beq.w	800928a <_printf_float+0xbe>
 8009478:	f04f 0900 	mov.w	r9, #0
 800947c:	f104 0a1a 	add.w	sl, r4, #26
 8009480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009482:	425b      	negs	r3, r3
 8009484:	454b      	cmp	r3, r9
 8009486:	dc01      	bgt.n	800948c <_printf_float+0x2c0>
 8009488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800948a:	e792      	b.n	80093b2 <_printf_float+0x1e6>
 800948c:	2301      	movs	r3, #1
 800948e:	4652      	mov	r2, sl
 8009490:	4631      	mov	r1, r6
 8009492:	4628      	mov	r0, r5
 8009494:	47b8      	blx	r7
 8009496:	3001      	adds	r0, #1
 8009498:	f43f aef7 	beq.w	800928a <_printf_float+0xbe>
 800949c:	f109 0901 	add.w	r9, r9, #1
 80094a0:	e7ee      	b.n	8009480 <_printf_float+0x2b4>
 80094a2:	bf00      	nop
 80094a4:	7fefffff 	.word	0x7fefffff
 80094a8:	0800bd20 	.word	0x0800bd20
 80094ac:	0800bd24 	.word	0x0800bd24
 80094b0:	0800bd28 	.word	0x0800bd28
 80094b4:	0800bd2c 	.word	0x0800bd2c
 80094b8:	0800bd30 	.word	0x0800bd30
 80094bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80094c0:	429a      	cmp	r2, r3
 80094c2:	bfa8      	it	ge
 80094c4:	461a      	movge	r2, r3
 80094c6:	2a00      	cmp	r2, #0
 80094c8:	4691      	mov	r9, r2
 80094ca:	dc37      	bgt.n	800953c <_printf_float+0x370>
 80094cc:	f04f 0b00 	mov.w	fp, #0
 80094d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80094d4:	f104 021a 	add.w	r2, r4, #26
 80094d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80094da:	9305      	str	r3, [sp, #20]
 80094dc:	eba3 0309 	sub.w	r3, r3, r9
 80094e0:	455b      	cmp	r3, fp
 80094e2:	dc33      	bgt.n	800954c <_printf_float+0x380>
 80094e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094e8:	429a      	cmp	r2, r3
 80094ea:	db3b      	blt.n	8009564 <_printf_float+0x398>
 80094ec:	6823      	ldr	r3, [r4, #0]
 80094ee:	07da      	lsls	r2, r3, #31
 80094f0:	d438      	bmi.n	8009564 <_printf_float+0x398>
 80094f2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80094f6:	eba2 0903 	sub.w	r9, r2, r3
 80094fa:	9b05      	ldr	r3, [sp, #20]
 80094fc:	1ad2      	subs	r2, r2, r3
 80094fe:	4591      	cmp	r9, r2
 8009500:	bfa8      	it	ge
 8009502:	4691      	movge	r9, r2
 8009504:	f1b9 0f00 	cmp.w	r9, #0
 8009508:	dc35      	bgt.n	8009576 <_printf_float+0x3aa>
 800950a:	f04f 0800 	mov.w	r8, #0
 800950e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009512:	f104 0a1a 	add.w	sl, r4, #26
 8009516:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800951a:	1a9b      	subs	r3, r3, r2
 800951c:	eba3 0309 	sub.w	r3, r3, r9
 8009520:	4543      	cmp	r3, r8
 8009522:	f77f af79 	ble.w	8009418 <_printf_float+0x24c>
 8009526:	2301      	movs	r3, #1
 8009528:	4652      	mov	r2, sl
 800952a:	4631      	mov	r1, r6
 800952c:	4628      	mov	r0, r5
 800952e:	47b8      	blx	r7
 8009530:	3001      	adds	r0, #1
 8009532:	f43f aeaa 	beq.w	800928a <_printf_float+0xbe>
 8009536:	f108 0801 	add.w	r8, r8, #1
 800953a:	e7ec      	b.n	8009516 <_printf_float+0x34a>
 800953c:	4613      	mov	r3, r2
 800953e:	4631      	mov	r1, r6
 8009540:	4642      	mov	r2, r8
 8009542:	4628      	mov	r0, r5
 8009544:	47b8      	blx	r7
 8009546:	3001      	adds	r0, #1
 8009548:	d1c0      	bne.n	80094cc <_printf_float+0x300>
 800954a:	e69e      	b.n	800928a <_printf_float+0xbe>
 800954c:	2301      	movs	r3, #1
 800954e:	4631      	mov	r1, r6
 8009550:	4628      	mov	r0, r5
 8009552:	9205      	str	r2, [sp, #20]
 8009554:	47b8      	blx	r7
 8009556:	3001      	adds	r0, #1
 8009558:	f43f ae97 	beq.w	800928a <_printf_float+0xbe>
 800955c:	9a05      	ldr	r2, [sp, #20]
 800955e:	f10b 0b01 	add.w	fp, fp, #1
 8009562:	e7b9      	b.n	80094d8 <_printf_float+0x30c>
 8009564:	ee18 3a10 	vmov	r3, s16
 8009568:	4652      	mov	r2, sl
 800956a:	4631      	mov	r1, r6
 800956c:	4628      	mov	r0, r5
 800956e:	47b8      	blx	r7
 8009570:	3001      	adds	r0, #1
 8009572:	d1be      	bne.n	80094f2 <_printf_float+0x326>
 8009574:	e689      	b.n	800928a <_printf_float+0xbe>
 8009576:	9a05      	ldr	r2, [sp, #20]
 8009578:	464b      	mov	r3, r9
 800957a:	4442      	add	r2, r8
 800957c:	4631      	mov	r1, r6
 800957e:	4628      	mov	r0, r5
 8009580:	47b8      	blx	r7
 8009582:	3001      	adds	r0, #1
 8009584:	d1c1      	bne.n	800950a <_printf_float+0x33e>
 8009586:	e680      	b.n	800928a <_printf_float+0xbe>
 8009588:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800958a:	2a01      	cmp	r2, #1
 800958c:	dc01      	bgt.n	8009592 <_printf_float+0x3c6>
 800958e:	07db      	lsls	r3, r3, #31
 8009590:	d53a      	bpl.n	8009608 <_printf_float+0x43c>
 8009592:	2301      	movs	r3, #1
 8009594:	4642      	mov	r2, r8
 8009596:	4631      	mov	r1, r6
 8009598:	4628      	mov	r0, r5
 800959a:	47b8      	blx	r7
 800959c:	3001      	adds	r0, #1
 800959e:	f43f ae74 	beq.w	800928a <_printf_float+0xbe>
 80095a2:	ee18 3a10 	vmov	r3, s16
 80095a6:	4652      	mov	r2, sl
 80095a8:	4631      	mov	r1, r6
 80095aa:	4628      	mov	r0, r5
 80095ac:	47b8      	blx	r7
 80095ae:	3001      	adds	r0, #1
 80095b0:	f43f ae6b 	beq.w	800928a <_printf_float+0xbe>
 80095b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80095b8:	2200      	movs	r2, #0
 80095ba:	2300      	movs	r3, #0
 80095bc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80095c0:	f7f7 fa92 	bl	8000ae8 <__aeabi_dcmpeq>
 80095c4:	b9d8      	cbnz	r0, 80095fe <_printf_float+0x432>
 80095c6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80095ca:	f108 0201 	add.w	r2, r8, #1
 80095ce:	4631      	mov	r1, r6
 80095d0:	4628      	mov	r0, r5
 80095d2:	47b8      	blx	r7
 80095d4:	3001      	adds	r0, #1
 80095d6:	d10e      	bne.n	80095f6 <_printf_float+0x42a>
 80095d8:	e657      	b.n	800928a <_printf_float+0xbe>
 80095da:	2301      	movs	r3, #1
 80095dc:	4652      	mov	r2, sl
 80095de:	4631      	mov	r1, r6
 80095e0:	4628      	mov	r0, r5
 80095e2:	47b8      	blx	r7
 80095e4:	3001      	adds	r0, #1
 80095e6:	f43f ae50 	beq.w	800928a <_printf_float+0xbe>
 80095ea:	f108 0801 	add.w	r8, r8, #1
 80095ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095f0:	3b01      	subs	r3, #1
 80095f2:	4543      	cmp	r3, r8
 80095f4:	dcf1      	bgt.n	80095da <_printf_float+0x40e>
 80095f6:	464b      	mov	r3, r9
 80095f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80095fc:	e6da      	b.n	80093b4 <_printf_float+0x1e8>
 80095fe:	f04f 0800 	mov.w	r8, #0
 8009602:	f104 0a1a 	add.w	sl, r4, #26
 8009606:	e7f2      	b.n	80095ee <_printf_float+0x422>
 8009608:	2301      	movs	r3, #1
 800960a:	4642      	mov	r2, r8
 800960c:	e7df      	b.n	80095ce <_printf_float+0x402>
 800960e:	2301      	movs	r3, #1
 8009610:	464a      	mov	r2, r9
 8009612:	4631      	mov	r1, r6
 8009614:	4628      	mov	r0, r5
 8009616:	47b8      	blx	r7
 8009618:	3001      	adds	r0, #1
 800961a:	f43f ae36 	beq.w	800928a <_printf_float+0xbe>
 800961e:	f108 0801 	add.w	r8, r8, #1
 8009622:	68e3      	ldr	r3, [r4, #12]
 8009624:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009626:	1a5b      	subs	r3, r3, r1
 8009628:	4543      	cmp	r3, r8
 800962a:	dcf0      	bgt.n	800960e <_printf_float+0x442>
 800962c:	e6f8      	b.n	8009420 <_printf_float+0x254>
 800962e:	f04f 0800 	mov.w	r8, #0
 8009632:	f104 0919 	add.w	r9, r4, #25
 8009636:	e7f4      	b.n	8009622 <_printf_float+0x456>

08009638 <_printf_common>:
 8009638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800963c:	4616      	mov	r6, r2
 800963e:	4699      	mov	r9, r3
 8009640:	688a      	ldr	r2, [r1, #8]
 8009642:	690b      	ldr	r3, [r1, #16]
 8009644:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009648:	4293      	cmp	r3, r2
 800964a:	bfb8      	it	lt
 800964c:	4613      	movlt	r3, r2
 800964e:	6033      	str	r3, [r6, #0]
 8009650:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009654:	4607      	mov	r7, r0
 8009656:	460c      	mov	r4, r1
 8009658:	b10a      	cbz	r2, 800965e <_printf_common+0x26>
 800965a:	3301      	adds	r3, #1
 800965c:	6033      	str	r3, [r6, #0]
 800965e:	6823      	ldr	r3, [r4, #0]
 8009660:	0699      	lsls	r1, r3, #26
 8009662:	bf42      	ittt	mi
 8009664:	6833      	ldrmi	r3, [r6, #0]
 8009666:	3302      	addmi	r3, #2
 8009668:	6033      	strmi	r3, [r6, #0]
 800966a:	6825      	ldr	r5, [r4, #0]
 800966c:	f015 0506 	ands.w	r5, r5, #6
 8009670:	d106      	bne.n	8009680 <_printf_common+0x48>
 8009672:	f104 0a19 	add.w	sl, r4, #25
 8009676:	68e3      	ldr	r3, [r4, #12]
 8009678:	6832      	ldr	r2, [r6, #0]
 800967a:	1a9b      	subs	r3, r3, r2
 800967c:	42ab      	cmp	r3, r5
 800967e:	dc26      	bgt.n	80096ce <_printf_common+0x96>
 8009680:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009684:	1e13      	subs	r3, r2, #0
 8009686:	6822      	ldr	r2, [r4, #0]
 8009688:	bf18      	it	ne
 800968a:	2301      	movne	r3, #1
 800968c:	0692      	lsls	r2, r2, #26
 800968e:	d42b      	bmi.n	80096e8 <_printf_common+0xb0>
 8009690:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009694:	4649      	mov	r1, r9
 8009696:	4638      	mov	r0, r7
 8009698:	47c0      	blx	r8
 800969a:	3001      	adds	r0, #1
 800969c:	d01e      	beq.n	80096dc <_printf_common+0xa4>
 800969e:	6823      	ldr	r3, [r4, #0]
 80096a0:	6922      	ldr	r2, [r4, #16]
 80096a2:	f003 0306 	and.w	r3, r3, #6
 80096a6:	2b04      	cmp	r3, #4
 80096a8:	bf02      	ittt	eq
 80096aa:	68e5      	ldreq	r5, [r4, #12]
 80096ac:	6833      	ldreq	r3, [r6, #0]
 80096ae:	1aed      	subeq	r5, r5, r3
 80096b0:	68a3      	ldr	r3, [r4, #8]
 80096b2:	bf0c      	ite	eq
 80096b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096b8:	2500      	movne	r5, #0
 80096ba:	4293      	cmp	r3, r2
 80096bc:	bfc4      	itt	gt
 80096be:	1a9b      	subgt	r3, r3, r2
 80096c0:	18ed      	addgt	r5, r5, r3
 80096c2:	2600      	movs	r6, #0
 80096c4:	341a      	adds	r4, #26
 80096c6:	42b5      	cmp	r5, r6
 80096c8:	d11a      	bne.n	8009700 <_printf_common+0xc8>
 80096ca:	2000      	movs	r0, #0
 80096cc:	e008      	b.n	80096e0 <_printf_common+0xa8>
 80096ce:	2301      	movs	r3, #1
 80096d0:	4652      	mov	r2, sl
 80096d2:	4649      	mov	r1, r9
 80096d4:	4638      	mov	r0, r7
 80096d6:	47c0      	blx	r8
 80096d8:	3001      	adds	r0, #1
 80096da:	d103      	bne.n	80096e4 <_printf_common+0xac>
 80096dc:	f04f 30ff 	mov.w	r0, #4294967295
 80096e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096e4:	3501      	adds	r5, #1
 80096e6:	e7c6      	b.n	8009676 <_printf_common+0x3e>
 80096e8:	18e1      	adds	r1, r4, r3
 80096ea:	1c5a      	adds	r2, r3, #1
 80096ec:	2030      	movs	r0, #48	; 0x30
 80096ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80096f2:	4422      	add	r2, r4
 80096f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80096f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80096fc:	3302      	adds	r3, #2
 80096fe:	e7c7      	b.n	8009690 <_printf_common+0x58>
 8009700:	2301      	movs	r3, #1
 8009702:	4622      	mov	r2, r4
 8009704:	4649      	mov	r1, r9
 8009706:	4638      	mov	r0, r7
 8009708:	47c0      	blx	r8
 800970a:	3001      	adds	r0, #1
 800970c:	d0e6      	beq.n	80096dc <_printf_common+0xa4>
 800970e:	3601      	adds	r6, #1
 8009710:	e7d9      	b.n	80096c6 <_printf_common+0x8e>
	...

08009714 <_printf_i>:
 8009714:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009718:	7e0f      	ldrb	r7, [r1, #24]
 800971a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800971c:	2f78      	cmp	r7, #120	; 0x78
 800971e:	4691      	mov	r9, r2
 8009720:	4680      	mov	r8, r0
 8009722:	460c      	mov	r4, r1
 8009724:	469a      	mov	sl, r3
 8009726:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800972a:	d807      	bhi.n	800973c <_printf_i+0x28>
 800972c:	2f62      	cmp	r7, #98	; 0x62
 800972e:	d80a      	bhi.n	8009746 <_printf_i+0x32>
 8009730:	2f00      	cmp	r7, #0
 8009732:	f000 80d4 	beq.w	80098de <_printf_i+0x1ca>
 8009736:	2f58      	cmp	r7, #88	; 0x58
 8009738:	f000 80c0 	beq.w	80098bc <_printf_i+0x1a8>
 800973c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009740:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009744:	e03a      	b.n	80097bc <_printf_i+0xa8>
 8009746:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800974a:	2b15      	cmp	r3, #21
 800974c:	d8f6      	bhi.n	800973c <_printf_i+0x28>
 800974e:	a101      	add	r1, pc, #4	; (adr r1, 8009754 <_printf_i+0x40>)
 8009750:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009754:	080097ad 	.word	0x080097ad
 8009758:	080097c1 	.word	0x080097c1
 800975c:	0800973d 	.word	0x0800973d
 8009760:	0800973d 	.word	0x0800973d
 8009764:	0800973d 	.word	0x0800973d
 8009768:	0800973d 	.word	0x0800973d
 800976c:	080097c1 	.word	0x080097c1
 8009770:	0800973d 	.word	0x0800973d
 8009774:	0800973d 	.word	0x0800973d
 8009778:	0800973d 	.word	0x0800973d
 800977c:	0800973d 	.word	0x0800973d
 8009780:	080098c5 	.word	0x080098c5
 8009784:	080097ed 	.word	0x080097ed
 8009788:	0800987f 	.word	0x0800987f
 800978c:	0800973d 	.word	0x0800973d
 8009790:	0800973d 	.word	0x0800973d
 8009794:	080098e7 	.word	0x080098e7
 8009798:	0800973d 	.word	0x0800973d
 800979c:	080097ed 	.word	0x080097ed
 80097a0:	0800973d 	.word	0x0800973d
 80097a4:	0800973d 	.word	0x0800973d
 80097a8:	08009887 	.word	0x08009887
 80097ac:	682b      	ldr	r3, [r5, #0]
 80097ae:	1d1a      	adds	r2, r3, #4
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	602a      	str	r2, [r5, #0]
 80097b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80097bc:	2301      	movs	r3, #1
 80097be:	e09f      	b.n	8009900 <_printf_i+0x1ec>
 80097c0:	6820      	ldr	r0, [r4, #0]
 80097c2:	682b      	ldr	r3, [r5, #0]
 80097c4:	0607      	lsls	r7, r0, #24
 80097c6:	f103 0104 	add.w	r1, r3, #4
 80097ca:	6029      	str	r1, [r5, #0]
 80097cc:	d501      	bpl.n	80097d2 <_printf_i+0xbe>
 80097ce:	681e      	ldr	r6, [r3, #0]
 80097d0:	e003      	b.n	80097da <_printf_i+0xc6>
 80097d2:	0646      	lsls	r6, r0, #25
 80097d4:	d5fb      	bpl.n	80097ce <_printf_i+0xba>
 80097d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80097da:	2e00      	cmp	r6, #0
 80097dc:	da03      	bge.n	80097e6 <_printf_i+0xd2>
 80097de:	232d      	movs	r3, #45	; 0x2d
 80097e0:	4276      	negs	r6, r6
 80097e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097e6:	485a      	ldr	r0, [pc, #360]	; (8009950 <_printf_i+0x23c>)
 80097e8:	230a      	movs	r3, #10
 80097ea:	e012      	b.n	8009812 <_printf_i+0xfe>
 80097ec:	682b      	ldr	r3, [r5, #0]
 80097ee:	6820      	ldr	r0, [r4, #0]
 80097f0:	1d19      	adds	r1, r3, #4
 80097f2:	6029      	str	r1, [r5, #0]
 80097f4:	0605      	lsls	r5, r0, #24
 80097f6:	d501      	bpl.n	80097fc <_printf_i+0xe8>
 80097f8:	681e      	ldr	r6, [r3, #0]
 80097fa:	e002      	b.n	8009802 <_printf_i+0xee>
 80097fc:	0641      	lsls	r1, r0, #25
 80097fe:	d5fb      	bpl.n	80097f8 <_printf_i+0xe4>
 8009800:	881e      	ldrh	r6, [r3, #0]
 8009802:	4853      	ldr	r0, [pc, #332]	; (8009950 <_printf_i+0x23c>)
 8009804:	2f6f      	cmp	r7, #111	; 0x6f
 8009806:	bf0c      	ite	eq
 8009808:	2308      	moveq	r3, #8
 800980a:	230a      	movne	r3, #10
 800980c:	2100      	movs	r1, #0
 800980e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009812:	6865      	ldr	r5, [r4, #4]
 8009814:	60a5      	str	r5, [r4, #8]
 8009816:	2d00      	cmp	r5, #0
 8009818:	bfa2      	ittt	ge
 800981a:	6821      	ldrge	r1, [r4, #0]
 800981c:	f021 0104 	bicge.w	r1, r1, #4
 8009820:	6021      	strge	r1, [r4, #0]
 8009822:	b90e      	cbnz	r6, 8009828 <_printf_i+0x114>
 8009824:	2d00      	cmp	r5, #0
 8009826:	d04b      	beq.n	80098c0 <_printf_i+0x1ac>
 8009828:	4615      	mov	r5, r2
 800982a:	fbb6 f1f3 	udiv	r1, r6, r3
 800982e:	fb03 6711 	mls	r7, r3, r1, r6
 8009832:	5dc7      	ldrb	r7, [r0, r7]
 8009834:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009838:	4637      	mov	r7, r6
 800983a:	42bb      	cmp	r3, r7
 800983c:	460e      	mov	r6, r1
 800983e:	d9f4      	bls.n	800982a <_printf_i+0x116>
 8009840:	2b08      	cmp	r3, #8
 8009842:	d10b      	bne.n	800985c <_printf_i+0x148>
 8009844:	6823      	ldr	r3, [r4, #0]
 8009846:	07de      	lsls	r6, r3, #31
 8009848:	d508      	bpl.n	800985c <_printf_i+0x148>
 800984a:	6923      	ldr	r3, [r4, #16]
 800984c:	6861      	ldr	r1, [r4, #4]
 800984e:	4299      	cmp	r1, r3
 8009850:	bfde      	ittt	le
 8009852:	2330      	movle	r3, #48	; 0x30
 8009854:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009858:	f105 35ff 	addle.w	r5, r5, #4294967295
 800985c:	1b52      	subs	r2, r2, r5
 800985e:	6122      	str	r2, [r4, #16]
 8009860:	f8cd a000 	str.w	sl, [sp]
 8009864:	464b      	mov	r3, r9
 8009866:	aa03      	add	r2, sp, #12
 8009868:	4621      	mov	r1, r4
 800986a:	4640      	mov	r0, r8
 800986c:	f7ff fee4 	bl	8009638 <_printf_common>
 8009870:	3001      	adds	r0, #1
 8009872:	d14a      	bne.n	800990a <_printf_i+0x1f6>
 8009874:	f04f 30ff 	mov.w	r0, #4294967295
 8009878:	b004      	add	sp, #16
 800987a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800987e:	6823      	ldr	r3, [r4, #0]
 8009880:	f043 0320 	orr.w	r3, r3, #32
 8009884:	6023      	str	r3, [r4, #0]
 8009886:	4833      	ldr	r0, [pc, #204]	; (8009954 <_printf_i+0x240>)
 8009888:	2778      	movs	r7, #120	; 0x78
 800988a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800988e:	6823      	ldr	r3, [r4, #0]
 8009890:	6829      	ldr	r1, [r5, #0]
 8009892:	061f      	lsls	r7, r3, #24
 8009894:	f851 6b04 	ldr.w	r6, [r1], #4
 8009898:	d402      	bmi.n	80098a0 <_printf_i+0x18c>
 800989a:	065f      	lsls	r7, r3, #25
 800989c:	bf48      	it	mi
 800989e:	b2b6      	uxthmi	r6, r6
 80098a0:	07df      	lsls	r7, r3, #31
 80098a2:	bf48      	it	mi
 80098a4:	f043 0320 	orrmi.w	r3, r3, #32
 80098a8:	6029      	str	r1, [r5, #0]
 80098aa:	bf48      	it	mi
 80098ac:	6023      	strmi	r3, [r4, #0]
 80098ae:	b91e      	cbnz	r6, 80098b8 <_printf_i+0x1a4>
 80098b0:	6823      	ldr	r3, [r4, #0]
 80098b2:	f023 0320 	bic.w	r3, r3, #32
 80098b6:	6023      	str	r3, [r4, #0]
 80098b8:	2310      	movs	r3, #16
 80098ba:	e7a7      	b.n	800980c <_printf_i+0xf8>
 80098bc:	4824      	ldr	r0, [pc, #144]	; (8009950 <_printf_i+0x23c>)
 80098be:	e7e4      	b.n	800988a <_printf_i+0x176>
 80098c0:	4615      	mov	r5, r2
 80098c2:	e7bd      	b.n	8009840 <_printf_i+0x12c>
 80098c4:	682b      	ldr	r3, [r5, #0]
 80098c6:	6826      	ldr	r6, [r4, #0]
 80098c8:	6961      	ldr	r1, [r4, #20]
 80098ca:	1d18      	adds	r0, r3, #4
 80098cc:	6028      	str	r0, [r5, #0]
 80098ce:	0635      	lsls	r5, r6, #24
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	d501      	bpl.n	80098d8 <_printf_i+0x1c4>
 80098d4:	6019      	str	r1, [r3, #0]
 80098d6:	e002      	b.n	80098de <_printf_i+0x1ca>
 80098d8:	0670      	lsls	r0, r6, #25
 80098da:	d5fb      	bpl.n	80098d4 <_printf_i+0x1c0>
 80098dc:	8019      	strh	r1, [r3, #0]
 80098de:	2300      	movs	r3, #0
 80098e0:	6123      	str	r3, [r4, #16]
 80098e2:	4615      	mov	r5, r2
 80098e4:	e7bc      	b.n	8009860 <_printf_i+0x14c>
 80098e6:	682b      	ldr	r3, [r5, #0]
 80098e8:	1d1a      	adds	r2, r3, #4
 80098ea:	602a      	str	r2, [r5, #0]
 80098ec:	681d      	ldr	r5, [r3, #0]
 80098ee:	6862      	ldr	r2, [r4, #4]
 80098f0:	2100      	movs	r1, #0
 80098f2:	4628      	mov	r0, r5
 80098f4:	f7f6 fc7c 	bl	80001f0 <memchr>
 80098f8:	b108      	cbz	r0, 80098fe <_printf_i+0x1ea>
 80098fa:	1b40      	subs	r0, r0, r5
 80098fc:	6060      	str	r0, [r4, #4]
 80098fe:	6863      	ldr	r3, [r4, #4]
 8009900:	6123      	str	r3, [r4, #16]
 8009902:	2300      	movs	r3, #0
 8009904:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009908:	e7aa      	b.n	8009860 <_printf_i+0x14c>
 800990a:	6923      	ldr	r3, [r4, #16]
 800990c:	462a      	mov	r2, r5
 800990e:	4649      	mov	r1, r9
 8009910:	4640      	mov	r0, r8
 8009912:	47d0      	blx	sl
 8009914:	3001      	adds	r0, #1
 8009916:	d0ad      	beq.n	8009874 <_printf_i+0x160>
 8009918:	6823      	ldr	r3, [r4, #0]
 800991a:	079b      	lsls	r3, r3, #30
 800991c:	d413      	bmi.n	8009946 <_printf_i+0x232>
 800991e:	68e0      	ldr	r0, [r4, #12]
 8009920:	9b03      	ldr	r3, [sp, #12]
 8009922:	4298      	cmp	r0, r3
 8009924:	bfb8      	it	lt
 8009926:	4618      	movlt	r0, r3
 8009928:	e7a6      	b.n	8009878 <_printf_i+0x164>
 800992a:	2301      	movs	r3, #1
 800992c:	4632      	mov	r2, r6
 800992e:	4649      	mov	r1, r9
 8009930:	4640      	mov	r0, r8
 8009932:	47d0      	blx	sl
 8009934:	3001      	adds	r0, #1
 8009936:	d09d      	beq.n	8009874 <_printf_i+0x160>
 8009938:	3501      	adds	r5, #1
 800993a:	68e3      	ldr	r3, [r4, #12]
 800993c:	9903      	ldr	r1, [sp, #12]
 800993e:	1a5b      	subs	r3, r3, r1
 8009940:	42ab      	cmp	r3, r5
 8009942:	dcf2      	bgt.n	800992a <_printf_i+0x216>
 8009944:	e7eb      	b.n	800991e <_printf_i+0x20a>
 8009946:	2500      	movs	r5, #0
 8009948:	f104 0619 	add.w	r6, r4, #25
 800994c:	e7f5      	b.n	800993a <_printf_i+0x226>
 800994e:	bf00      	nop
 8009950:	0800bd32 	.word	0x0800bd32
 8009954:	0800bd43 	.word	0x0800bd43

08009958 <std>:
 8009958:	2300      	movs	r3, #0
 800995a:	b510      	push	{r4, lr}
 800995c:	4604      	mov	r4, r0
 800995e:	e9c0 3300 	strd	r3, r3, [r0]
 8009962:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009966:	6083      	str	r3, [r0, #8]
 8009968:	8181      	strh	r1, [r0, #12]
 800996a:	6643      	str	r3, [r0, #100]	; 0x64
 800996c:	81c2      	strh	r2, [r0, #14]
 800996e:	6183      	str	r3, [r0, #24]
 8009970:	4619      	mov	r1, r3
 8009972:	2208      	movs	r2, #8
 8009974:	305c      	adds	r0, #92	; 0x5c
 8009976:	f000 f906 	bl	8009b86 <memset>
 800997a:	4b0d      	ldr	r3, [pc, #52]	; (80099b0 <std+0x58>)
 800997c:	6263      	str	r3, [r4, #36]	; 0x24
 800997e:	4b0d      	ldr	r3, [pc, #52]	; (80099b4 <std+0x5c>)
 8009980:	62a3      	str	r3, [r4, #40]	; 0x28
 8009982:	4b0d      	ldr	r3, [pc, #52]	; (80099b8 <std+0x60>)
 8009984:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009986:	4b0d      	ldr	r3, [pc, #52]	; (80099bc <std+0x64>)
 8009988:	6323      	str	r3, [r4, #48]	; 0x30
 800998a:	4b0d      	ldr	r3, [pc, #52]	; (80099c0 <std+0x68>)
 800998c:	6224      	str	r4, [r4, #32]
 800998e:	429c      	cmp	r4, r3
 8009990:	d006      	beq.n	80099a0 <std+0x48>
 8009992:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009996:	4294      	cmp	r4, r2
 8009998:	d002      	beq.n	80099a0 <std+0x48>
 800999a:	33d0      	adds	r3, #208	; 0xd0
 800999c:	429c      	cmp	r4, r3
 800999e:	d105      	bne.n	80099ac <std+0x54>
 80099a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80099a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099a8:	f000 b9d2 	b.w	8009d50 <__retarget_lock_init_recursive>
 80099ac:	bd10      	pop	{r4, pc}
 80099ae:	bf00      	nop
 80099b0:	08009b01 	.word	0x08009b01
 80099b4:	08009b23 	.word	0x08009b23
 80099b8:	08009b5b 	.word	0x08009b5b
 80099bc:	08009b7f 	.word	0x08009b7f
 80099c0:	20003888 	.word	0x20003888

080099c4 <stdio_exit_handler>:
 80099c4:	4a02      	ldr	r2, [pc, #8]	; (80099d0 <stdio_exit_handler+0xc>)
 80099c6:	4903      	ldr	r1, [pc, #12]	; (80099d4 <stdio_exit_handler+0x10>)
 80099c8:	4803      	ldr	r0, [pc, #12]	; (80099d8 <stdio_exit_handler+0x14>)
 80099ca:	f000 b869 	b.w	8009aa0 <_fwalk_sglue>
 80099ce:	bf00      	nop
 80099d0:	20000010 	.word	0x20000010
 80099d4:	0800b6f9 	.word	0x0800b6f9
 80099d8:	2000001c 	.word	0x2000001c

080099dc <cleanup_stdio>:
 80099dc:	6841      	ldr	r1, [r0, #4]
 80099de:	4b0c      	ldr	r3, [pc, #48]	; (8009a10 <cleanup_stdio+0x34>)
 80099e0:	4299      	cmp	r1, r3
 80099e2:	b510      	push	{r4, lr}
 80099e4:	4604      	mov	r4, r0
 80099e6:	d001      	beq.n	80099ec <cleanup_stdio+0x10>
 80099e8:	f001 fe86 	bl	800b6f8 <_fflush_r>
 80099ec:	68a1      	ldr	r1, [r4, #8]
 80099ee:	4b09      	ldr	r3, [pc, #36]	; (8009a14 <cleanup_stdio+0x38>)
 80099f0:	4299      	cmp	r1, r3
 80099f2:	d002      	beq.n	80099fa <cleanup_stdio+0x1e>
 80099f4:	4620      	mov	r0, r4
 80099f6:	f001 fe7f 	bl	800b6f8 <_fflush_r>
 80099fa:	68e1      	ldr	r1, [r4, #12]
 80099fc:	4b06      	ldr	r3, [pc, #24]	; (8009a18 <cleanup_stdio+0x3c>)
 80099fe:	4299      	cmp	r1, r3
 8009a00:	d004      	beq.n	8009a0c <cleanup_stdio+0x30>
 8009a02:	4620      	mov	r0, r4
 8009a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a08:	f001 be76 	b.w	800b6f8 <_fflush_r>
 8009a0c:	bd10      	pop	{r4, pc}
 8009a0e:	bf00      	nop
 8009a10:	20003888 	.word	0x20003888
 8009a14:	200038f0 	.word	0x200038f0
 8009a18:	20003958 	.word	0x20003958

08009a1c <global_stdio_init.part.0>:
 8009a1c:	b510      	push	{r4, lr}
 8009a1e:	4b0b      	ldr	r3, [pc, #44]	; (8009a4c <global_stdio_init.part.0+0x30>)
 8009a20:	4c0b      	ldr	r4, [pc, #44]	; (8009a50 <global_stdio_init.part.0+0x34>)
 8009a22:	4a0c      	ldr	r2, [pc, #48]	; (8009a54 <global_stdio_init.part.0+0x38>)
 8009a24:	601a      	str	r2, [r3, #0]
 8009a26:	4620      	mov	r0, r4
 8009a28:	2200      	movs	r2, #0
 8009a2a:	2104      	movs	r1, #4
 8009a2c:	f7ff ff94 	bl	8009958 <std>
 8009a30:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009a34:	2201      	movs	r2, #1
 8009a36:	2109      	movs	r1, #9
 8009a38:	f7ff ff8e 	bl	8009958 <std>
 8009a3c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009a40:	2202      	movs	r2, #2
 8009a42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a46:	2112      	movs	r1, #18
 8009a48:	f7ff bf86 	b.w	8009958 <std>
 8009a4c:	200039c0 	.word	0x200039c0
 8009a50:	20003888 	.word	0x20003888
 8009a54:	080099c5 	.word	0x080099c5

08009a58 <__sfp_lock_acquire>:
 8009a58:	4801      	ldr	r0, [pc, #4]	; (8009a60 <__sfp_lock_acquire+0x8>)
 8009a5a:	f000 b97a 	b.w	8009d52 <__retarget_lock_acquire_recursive>
 8009a5e:	bf00      	nop
 8009a60:	200039c9 	.word	0x200039c9

08009a64 <__sfp_lock_release>:
 8009a64:	4801      	ldr	r0, [pc, #4]	; (8009a6c <__sfp_lock_release+0x8>)
 8009a66:	f000 b975 	b.w	8009d54 <__retarget_lock_release_recursive>
 8009a6a:	bf00      	nop
 8009a6c:	200039c9 	.word	0x200039c9

08009a70 <__sinit>:
 8009a70:	b510      	push	{r4, lr}
 8009a72:	4604      	mov	r4, r0
 8009a74:	f7ff fff0 	bl	8009a58 <__sfp_lock_acquire>
 8009a78:	6a23      	ldr	r3, [r4, #32]
 8009a7a:	b11b      	cbz	r3, 8009a84 <__sinit+0x14>
 8009a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a80:	f7ff bff0 	b.w	8009a64 <__sfp_lock_release>
 8009a84:	4b04      	ldr	r3, [pc, #16]	; (8009a98 <__sinit+0x28>)
 8009a86:	6223      	str	r3, [r4, #32]
 8009a88:	4b04      	ldr	r3, [pc, #16]	; (8009a9c <__sinit+0x2c>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d1f5      	bne.n	8009a7c <__sinit+0xc>
 8009a90:	f7ff ffc4 	bl	8009a1c <global_stdio_init.part.0>
 8009a94:	e7f2      	b.n	8009a7c <__sinit+0xc>
 8009a96:	bf00      	nop
 8009a98:	080099dd 	.word	0x080099dd
 8009a9c:	200039c0 	.word	0x200039c0

08009aa0 <_fwalk_sglue>:
 8009aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009aa4:	4607      	mov	r7, r0
 8009aa6:	4688      	mov	r8, r1
 8009aa8:	4614      	mov	r4, r2
 8009aaa:	2600      	movs	r6, #0
 8009aac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ab0:	f1b9 0901 	subs.w	r9, r9, #1
 8009ab4:	d505      	bpl.n	8009ac2 <_fwalk_sglue+0x22>
 8009ab6:	6824      	ldr	r4, [r4, #0]
 8009ab8:	2c00      	cmp	r4, #0
 8009aba:	d1f7      	bne.n	8009aac <_fwalk_sglue+0xc>
 8009abc:	4630      	mov	r0, r6
 8009abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ac2:	89ab      	ldrh	r3, [r5, #12]
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d907      	bls.n	8009ad8 <_fwalk_sglue+0x38>
 8009ac8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009acc:	3301      	adds	r3, #1
 8009ace:	d003      	beq.n	8009ad8 <_fwalk_sglue+0x38>
 8009ad0:	4629      	mov	r1, r5
 8009ad2:	4638      	mov	r0, r7
 8009ad4:	47c0      	blx	r8
 8009ad6:	4306      	orrs	r6, r0
 8009ad8:	3568      	adds	r5, #104	; 0x68
 8009ada:	e7e9      	b.n	8009ab0 <_fwalk_sglue+0x10>

08009adc <iprintf>:
 8009adc:	b40f      	push	{r0, r1, r2, r3}
 8009ade:	b507      	push	{r0, r1, r2, lr}
 8009ae0:	4906      	ldr	r1, [pc, #24]	; (8009afc <iprintf+0x20>)
 8009ae2:	ab04      	add	r3, sp, #16
 8009ae4:	6808      	ldr	r0, [r1, #0]
 8009ae6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009aea:	6881      	ldr	r1, [r0, #8]
 8009aec:	9301      	str	r3, [sp, #4]
 8009aee:	f001 fc63 	bl	800b3b8 <_vfiprintf_r>
 8009af2:	b003      	add	sp, #12
 8009af4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009af8:	b004      	add	sp, #16
 8009afa:	4770      	bx	lr
 8009afc:	20000068 	.word	0x20000068

08009b00 <__sread>:
 8009b00:	b510      	push	{r4, lr}
 8009b02:	460c      	mov	r4, r1
 8009b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b08:	f000 f8d4 	bl	8009cb4 <_read_r>
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	bfab      	itete	ge
 8009b10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b12:	89a3      	ldrhlt	r3, [r4, #12]
 8009b14:	181b      	addge	r3, r3, r0
 8009b16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b1a:	bfac      	ite	ge
 8009b1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b1e:	81a3      	strhlt	r3, [r4, #12]
 8009b20:	bd10      	pop	{r4, pc}

08009b22 <__swrite>:
 8009b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b26:	461f      	mov	r7, r3
 8009b28:	898b      	ldrh	r3, [r1, #12]
 8009b2a:	05db      	lsls	r3, r3, #23
 8009b2c:	4605      	mov	r5, r0
 8009b2e:	460c      	mov	r4, r1
 8009b30:	4616      	mov	r6, r2
 8009b32:	d505      	bpl.n	8009b40 <__swrite+0x1e>
 8009b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b38:	2302      	movs	r3, #2
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f000 f8a8 	bl	8009c90 <_lseek_r>
 8009b40:	89a3      	ldrh	r3, [r4, #12]
 8009b42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b4a:	81a3      	strh	r3, [r4, #12]
 8009b4c:	4632      	mov	r2, r6
 8009b4e:	463b      	mov	r3, r7
 8009b50:	4628      	mov	r0, r5
 8009b52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b56:	f000 b8bf 	b.w	8009cd8 <_write_r>

08009b5a <__sseek>:
 8009b5a:	b510      	push	{r4, lr}
 8009b5c:	460c      	mov	r4, r1
 8009b5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b62:	f000 f895 	bl	8009c90 <_lseek_r>
 8009b66:	1c43      	adds	r3, r0, #1
 8009b68:	89a3      	ldrh	r3, [r4, #12]
 8009b6a:	bf15      	itete	ne
 8009b6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b76:	81a3      	strheq	r3, [r4, #12]
 8009b78:	bf18      	it	ne
 8009b7a:	81a3      	strhne	r3, [r4, #12]
 8009b7c:	bd10      	pop	{r4, pc}

08009b7e <__sclose>:
 8009b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b82:	f000 b81f 	b.w	8009bc4 <_close_r>

08009b86 <memset>:
 8009b86:	4402      	add	r2, r0
 8009b88:	4603      	mov	r3, r0
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d100      	bne.n	8009b90 <memset+0xa>
 8009b8e:	4770      	bx	lr
 8009b90:	f803 1b01 	strb.w	r1, [r3], #1
 8009b94:	e7f9      	b.n	8009b8a <memset+0x4>

08009b96 <strncpy>:
 8009b96:	b510      	push	{r4, lr}
 8009b98:	3901      	subs	r1, #1
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	b132      	cbz	r2, 8009bac <strncpy+0x16>
 8009b9e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009ba2:	f803 4b01 	strb.w	r4, [r3], #1
 8009ba6:	3a01      	subs	r2, #1
 8009ba8:	2c00      	cmp	r4, #0
 8009baa:	d1f7      	bne.n	8009b9c <strncpy+0x6>
 8009bac:	441a      	add	r2, r3
 8009bae:	2100      	movs	r1, #0
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d100      	bne.n	8009bb6 <strncpy+0x20>
 8009bb4:	bd10      	pop	{r4, pc}
 8009bb6:	f803 1b01 	strb.w	r1, [r3], #1
 8009bba:	e7f9      	b.n	8009bb0 <strncpy+0x1a>

08009bbc <_localeconv_r>:
 8009bbc:	4800      	ldr	r0, [pc, #0]	; (8009bc0 <_localeconv_r+0x4>)
 8009bbe:	4770      	bx	lr
 8009bc0:	2000015c 	.word	0x2000015c

08009bc4 <_close_r>:
 8009bc4:	b538      	push	{r3, r4, r5, lr}
 8009bc6:	4d06      	ldr	r5, [pc, #24]	; (8009be0 <_close_r+0x1c>)
 8009bc8:	2300      	movs	r3, #0
 8009bca:	4604      	mov	r4, r0
 8009bcc:	4608      	mov	r0, r1
 8009bce:	602b      	str	r3, [r5, #0]
 8009bd0:	f7f7 fd41 	bl	8001656 <_close>
 8009bd4:	1c43      	adds	r3, r0, #1
 8009bd6:	d102      	bne.n	8009bde <_close_r+0x1a>
 8009bd8:	682b      	ldr	r3, [r5, #0]
 8009bda:	b103      	cbz	r3, 8009bde <_close_r+0x1a>
 8009bdc:	6023      	str	r3, [r4, #0]
 8009bde:	bd38      	pop	{r3, r4, r5, pc}
 8009be0:	200039c4 	.word	0x200039c4

08009be4 <_reclaim_reent>:
 8009be4:	4b29      	ldr	r3, [pc, #164]	; (8009c8c <_reclaim_reent+0xa8>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4283      	cmp	r3, r0
 8009bea:	b570      	push	{r4, r5, r6, lr}
 8009bec:	4604      	mov	r4, r0
 8009bee:	d04b      	beq.n	8009c88 <_reclaim_reent+0xa4>
 8009bf0:	69c3      	ldr	r3, [r0, #28]
 8009bf2:	b143      	cbz	r3, 8009c06 <_reclaim_reent+0x22>
 8009bf4:	68db      	ldr	r3, [r3, #12]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d144      	bne.n	8009c84 <_reclaim_reent+0xa0>
 8009bfa:	69e3      	ldr	r3, [r4, #28]
 8009bfc:	6819      	ldr	r1, [r3, #0]
 8009bfe:	b111      	cbz	r1, 8009c06 <_reclaim_reent+0x22>
 8009c00:	4620      	mov	r0, r4
 8009c02:	f000 ff33 	bl	800aa6c <_free_r>
 8009c06:	6961      	ldr	r1, [r4, #20]
 8009c08:	b111      	cbz	r1, 8009c10 <_reclaim_reent+0x2c>
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	f000 ff2e 	bl	800aa6c <_free_r>
 8009c10:	69e1      	ldr	r1, [r4, #28]
 8009c12:	b111      	cbz	r1, 8009c1a <_reclaim_reent+0x36>
 8009c14:	4620      	mov	r0, r4
 8009c16:	f000 ff29 	bl	800aa6c <_free_r>
 8009c1a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009c1c:	b111      	cbz	r1, 8009c24 <_reclaim_reent+0x40>
 8009c1e:	4620      	mov	r0, r4
 8009c20:	f000 ff24 	bl	800aa6c <_free_r>
 8009c24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c26:	b111      	cbz	r1, 8009c2e <_reclaim_reent+0x4a>
 8009c28:	4620      	mov	r0, r4
 8009c2a:	f000 ff1f 	bl	800aa6c <_free_r>
 8009c2e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009c30:	b111      	cbz	r1, 8009c38 <_reclaim_reent+0x54>
 8009c32:	4620      	mov	r0, r4
 8009c34:	f000 ff1a 	bl	800aa6c <_free_r>
 8009c38:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009c3a:	b111      	cbz	r1, 8009c42 <_reclaim_reent+0x5e>
 8009c3c:	4620      	mov	r0, r4
 8009c3e:	f000 ff15 	bl	800aa6c <_free_r>
 8009c42:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009c44:	b111      	cbz	r1, 8009c4c <_reclaim_reent+0x68>
 8009c46:	4620      	mov	r0, r4
 8009c48:	f000 ff10 	bl	800aa6c <_free_r>
 8009c4c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009c4e:	b111      	cbz	r1, 8009c56 <_reclaim_reent+0x72>
 8009c50:	4620      	mov	r0, r4
 8009c52:	f000 ff0b 	bl	800aa6c <_free_r>
 8009c56:	6a23      	ldr	r3, [r4, #32]
 8009c58:	b1b3      	cbz	r3, 8009c88 <_reclaim_reent+0xa4>
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009c60:	4718      	bx	r3
 8009c62:	5949      	ldr	r1, [r1, r5]
 8009c64:	b941      	cbnz	r1, 8009c78 <_reclaim_reent+0x94>
 8009c66:	3504      	adds	r5, #4
 8009c68:	69e3      	ldr	r3, [r4, #28]
 8009c6a:	2d80      	cmp	r5, #128	; 0x80
 8009c6c:	68d9      	ldr	r1, [r3, #12]
 8009c6e:	d1f8      	bne.n	8009c62 <_reclaim_reent+0x7e>
 8009c70:	4620      	mov	r0, r4
 8009c72:	f000 fefb 	bl	800aa6c <_free_r>
 8009c76:	e7c0      	b.n	8009bfa <_reclaim_reent+0x16>
 8009c78:	680e      	ldr	r6, [r1, #0]
 8009c7a:	4620      	mov	r0, r4
 8009c7c:	f000 fef6 	bl	800aa6c <_free_r>
 8009c80:	4631      	mov	r1, r6
 8009c82:	e7ef      	b.n	8009c64 <_reclaim_reent+0x80>
 8009c84:	2500      	movs	r5, #0
 8009c86:	e7ef      	b.n	8009c68 <_reclaim_reent+0x84>
 8009c88:	bd70      	pop	{r4, r5, r6, pc}
 8009c8a:	bf00      	nop
 8009c8c:	20000068 	.word	0x20000068

08009c90 <_lseek_r>:
 8009c90:	b538      	push	{r3, r4, r5, lr}
 8009c92:	4d07      	ldr	r5, [pc, #28]	; (8009cb0 <_lseek_r+0x20>)
 8009c94:	4604      	mov	r4, r0
 8009c96:	4608      	mov	r0, r1
 8009c98:	4611      	mov	r1, r2
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	602a      	str	r2, [r5, #0]
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	f7f7 fd00 	bl	80016a4 <_lseek>
 8009ca4:	1c43      	adds	r3, r0, #1
 8009ca6:	d102      	bne.n	8009cae <_lseek_r+0x1e>
 8009ca8:	682b      	ldr	r3, [r5, #0]
 8009caa:	b103      	cbz	r3, 8009cae <_lseek_r+0x1e>
 8009cac:	6023      	str	r3, [r4, #0]
 8009cae:	bd38      	pop	{r3, r4, r5, pc}
 8009cb0:	200039c4 	.word	0x200039c4

08009cb4 <_read_r>:
 8009cb4:	b538      	push	{r3, r4, r5, lr}
 8009cb6:	4d07      	ldr	r5, [pc, #28]	; (8009cd4 <_read_r+0x20>)
 8009cb8:	4604      	mov	r4, r0
 8009cba:	4608      	mov	r0, r1
 8009cbc:	4611      	mov	r1, r2
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	602a      	str	r2, [r5, #0]
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	f7f7 fc8e 	bl	80015e4 <_read>
 8009cc8:	1c43      	adds	r3, r0, #1
 8009cca:	d102      	bne.n	8009cd2 <_read_r+0x1e>
 8009ccc:	682b      	ldr	r3, [r5, #0]
 8009cce:	b103      	cbz	r3, 8009cd2 <_read_r+0x1e>
 8009cd0:	6023      	str	r3, [r4, #0]
 8009cd2:	bd38      	pop	{r3, r4, r5, pc}
 8009cd4:	200039c4 	.word	0x200039c4

08009cd8 <_write_r>:
 8009cd8:	b538      	push	{r3, r4, r5, lr}
 8009cda:	4d07      	ldr	r5, [pc, #28]	; (8009cf8 <_write_r+0x20>)
 8009cdc:	4604      	mov	r4, r0
 8009cde:	4608      	mov	r0, r1
 8009ce0:	4611      	mov	r1, r2
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	602a      	str	r2, [r5, #0]
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	f7f7 fc99 	bl	800161e <_write>
 8009cec:	1c43      	adds	r3, r0, #1
 8009cee:	d102      	bne.n	8009cf6 <_write_r+0x1e>
 8009cf0:	682b      	ldr	r3, [r5, #0]
 8009cf2:	b103      	cbz	r3, 8009cf6 <_write_r+0x1e>
 8009cf4:	6023      	str	r3, [r4, #0]
 8009cf6:	bd38      	pop	{r3, r4, r5, pc}
 8009cf8:	200039c4 	.word	0x200039c4

08009cfc <__errno>:
 8009cfc:	4b01      	ldr	r3, [pc, #4]	; (8009d04 <__errno+0x8>)
 8009cfe:	6818      	ldr	r0, [r3, #0]
 8009d00:	4770      	bx	lr
 8009d02:	bf00      	nop
 8009d04:	20000068 	.word	0x20000068

08009d08 <__libc_init_array>:
 8009d08:	b570      	push	{r4, r5, r6, lr}
 8009d0a:	4d0d      	ldr	r5, [pc, #52]	; (8009d40 <__libc_init_array+0x38>)
 8009d0c:	4c0d      	ldr	r4, [pc, #52]	; (8009d44 <__libc_init_array+0x3c>)
 8009d0e:	1b64      	subs	r4, r4, r5
 8009d10:	10a4      	asrs	r4, r4, #2
 8009d12:	2600      	movs	r6, #0
 8009d14:	42a6      	cmp	r6, r4
 8009d16:	d109      	bne.n	8009d2c <__libc_init_array+0x24>
 8009d18:	4d0b      	ldr	r5, [pc, #44]	; (8009d48 <__libc_init_array+0x40>)
 8009d1a:	4c0c      	ldr	r4, [pc, #48]	; (8009d4c <__libc_init_array+0x44>)
 8009d1c:	f001 fef0 	bl	800bb00 <_init>
 8009d20:	1b64      	subs	r4, r4, r5
 8009d22:	10a4      	asrs	r4, r4, #2
 8009d24:	2600      	movs	r6, #0
 8009d26:	42a6      	cmp	r6, r4
 8009d28:	d105      	bne.n	8009d36 <__libc_init_array+0x2e>
 8009d2a:	bd70      	pop	{r4, r5, r6, pc}
 8009d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d30:	4798      	blx	r3
 8009d32:	3601      	adds	r6, #1
 8009d34:	e7ee      	b.n	8009d14 <__libc_init_array+0xc>
 8009d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d3a:	4798      	blx	r3
 8009d3c:	3601      	adds	r6, #1
 8009d3e:	e7f2      	b.n	8009d26 <__libc_init_array+0x1e>
 8009d40:	0800c09c 	.word	0x0800c09c
 8009d44:	0800c09c 	.word	0x0800c09c
 8009d48:	0800c09c 	.word	0x0800c09c
 8009d4c:	0800c0a0 	.word	0x0800c0a0

08009d50 <__retarget_lock_init_recursive>:
 8009d50:	4770      	bx	lr

08009d52 <__retarget_lock_acquire_recursive>:
 8009d52:	4770      	bx	lr

08009d54 <__retarget_lock_release_recursive>:
 8009d54:	4770      	bx	lr

08009d56 <memcpy>:
 8009d56:	440a      	add	r2, r1
 8009d58:	4291      	cmp	r1, r2
 8009d5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d5e:	d100      	bne.n	8009d62 <memcpy+0xc>
 8009d60:	4770      	bx	lr
 8009d62:	b510      	push	{r4, lr}
 8009d64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d6c:	4291      	cmp	r1, r2
 8009d6e:	d1f9      	bne.n	8009d64 <memcpy+0xe>
 8009d70:	bd10      	pop	{r4, pc}

08009d72 <quorem>:
 8009d72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d76:	6903      	ldr	r3, [r0, #16]
 8009d78:	690c      	ldr	r4, [r1, #16]
 8009d7a:	42a3      	cmp	r3, r4
 8009d7c:	4607      	mov	r7, r0
 8009d7e:	db7e      	blt.n	8009e7e <quorem+0x10c>
 8009d80:	3c01      	subs	r4, #1
 8009d82:	f101 0814 	add.w	r8, r1, #20
 8009d86:	f100 0514 	add.w	r5, r0, #20
 8009d8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d8e:	9301      	str	r3, [sp, #4]
 8009d90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009d94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d98:	3301      	adds	r3, #1
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009da0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009da4:	fbb2 f6f3 	udiv	r6, r2, r3
 8009da8:	d331      	bcc.n	8009e0e <quorem+0x9c>
 8009daa:	f04f 0e00 	mov.w	lr, #0
 8009dae:	4640      	mov	r0, r8
 8009db0:	46ac      	mov	ip, r5
 8009db2:	46f2      	mov	sl, lr
 8009db4:	f850 2b04 	ldr.w	r2, [r0], #4
 8009db8:	b293      	uxth	r3, r2
 8009dba:	fb06 e303 	mla	r3, r6, r3, lr
 8009dbe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009dc2:	0c1a      	lsrs	r2, r3, #16
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	ebaa 0303 	sub.w	r3, sl, r3
 8009dca:	f8dc a000 	ldr.w	sl, [ip]
 8009dce:	fa13 f38a 	uxtah	r3, r3, sl
 8009dd2:	fb06 220e 	mla	r2, r6, lr, r2
 8009dd6:	9300      	str	r3, [sp, #0]
 8009dd8:	9b00      	ldr	r3, [sp, #0]
 8009dda:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009dde:	b292      	uxth	r2, r2
 8009de0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009de4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009de8:	f8bd 3000 	ldrh.w	r3, [sp]
 8009dec:	4581      	cmp	r9, r0
 8009dee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009df2:	f84c 3b04 	str.w	r3, [ip], #4
 8009df6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009dfa:	d2db      	bcs.n	8009db4 <quorem+0x42>
 8009dfc:	f855 300b 	ldr.w	r3, [r5, fp]
 8009e00:	b92b      	cbnz	r3, 8009e0e <quorem+0x9c>
 8009e02:	9b01      	ldr	r3, [sp, #4]
 8009e04:	3b04      	subs	r3, #4
 8009e06:	429d      	cmp	r5, r3
 8009e08:	461a      	mov	r2, r3
 8009e0a:	d32c      	bcc.n	8009e66 <quorem+0xf4>
 8009e0c:	613c      	str	r4, [r7, #16]
 8009e0e:	4638      	mov	r0, r7
 8009e10:	f001 f9a8 	bl	800b164 <__mcmp>
 8009e14:	2800      	cmp	r0, #0
 8009e16:	db22      	blt.n	8009e5e <quorem+0xec>
 8009e18:	3601      	adds	r6, #1
 8009e1a:	4629      	mov	r1, r5
 8009e1c:	2000      	movs	r0, #0
 8009e1e:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e22:	f8d1 c000 	ldr.w	ip, [r1]
 8009e26:	b293      	uxth	r3, r2
 8009e28:	1ac3      	subs	r3, r0, r3
 8009e2a:	0c12      	lsrs	r2, r2, #16
 8009e2c:	fa13 f38c 	uxtah	r3, r3, ip
 8009e30:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009e34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e3e:	45c1      	cmp	r9, r8
 8009e40:	f841 3b04 	str.w	r3, [r1], #4
 8009e44:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009e48:	d2e9      	bcs.n	8009e1e <quorem+0xac>
 8009e4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e52:	b922      	cbnz	r2, 8009e5e <quorem+0xec>
 8009e54:	3b04      	subs	r3, #4
 8009e56:	429d      	cmp	r5, r3
 8009e58:	461a      	mov	r2, r3
 8009e5a:	d30a      	bcc.n	8009e72 <quorem+0x100>
 8009e5c:	613c      	str	r4, [r7, #16]
 8009e5e:	4630      	mov	r0, r6
 8009e60:	b003      	add	sp, #12
 8009e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e66:	6812      	ldr	r2, [r2, #0]
 8009e68:	3b04      	subs	r3, #4
 8009e6a:	2a00      	cmp	r2, #0
 8009e6c:	d1ce      	bne.n	8009e0c <quorem+0x9a>
 8009e6e:	3c01      	subs	r4, #1
 8009e70:	e7c9      	b.n	8009e06 <quorem+0x94>
 8009e72:	6812      	ldr	r2, [r2, #0]
 8009e74:	3b04      	subs	r3, #4
 8009e76:	2a00      	cmp	r2, #0
 8009e78:	d1f0      	bne.n	8009e5c <quorem+0xea>
 8009e7a:	3c01      	subs	r4, #1
 8009e7c:	e7eb      	b.n	8009e56 <quorem+0xe4>
 8009e7e:	2000      	movs	r0, #0
 8009e80:	e7ee      	b.n	8009e60 <quorem+0xee>
 8009e82:	0000      	movs	r0, r0
 8009e84:	0000      	movs	r0, r0
	...

08009e88 <_dtoa_r>:
 8009e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e8c:	ed2d 8b04 	vpush	{d8-d9}
 8009e90:	69c5      	ldr	r5, [r0, #28]
 8009e92:	b093      	sub	sp, #76	; 0x4c
 8009e94:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009e98:	ec57 6b10 	vmov	r6, r7, d0
 8009e9c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009ea0:	9107      	str	r1, [sp, #28]
 8009ea2:	4604      	mov	r4, r0
 8009ea4:	920a      	str	r2, [sp, #40]	; 0x28
 8009ea6:	930d      	str	r3, [sp, #52]	; 0x34
 8009ea8:	b975      	cbnz	r5, 8009ec8 <_dtoa_r+0x40>
 8009eaa:	2010      	movs	r0, #16
 8009eac:	f000 fe2a 	bl	800ab04 <malloc>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	61e0      	str	r0, [r4, #28]
 8009eb4:	b920      	cbnz	r0, 8009ec0 <_dtoa_r+0x38>
 8009eb6:	4bae      	ldr	r3, [pc, #696]	; (800a170 <_dtoa_r+0x2e8>)
 8009eb8:	21ef      	movs	r1, #239	; 0xef
 8009eba:	48ae      	ldr	r0, [pc, #696]	; (800a174 <_dtoa_r+0x2ec>)
 8009ebc:	f001 fcea 	bl	800b894 <__assert_func>
 8009ec0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009ec4:	6005      	str	r5, [r0, #0]
 8009ec6:	60c5      	str	r5, [r0, #12]
 8009ec8:	69e3      	ldr	r3, [r4, #28]
 8009eca:	6819      	ldr	r1, [r3, #0]
 8009ecc:	b151      	cbz	r1, 8009ee4 <_dtoa_r+0x5c>
 8009ece:	685a      	ldr	r2, [r3, #4]
 8009ed0:	604a      	str	r2, [r1, #4]
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	4093      	lsls	r3, r2
 8009ed6:	608b      	str	r3, [r1, #8]
 8009ed8:	4620      	mov	r0, r4
 8009eda:	f000 ff07 	bl	800acec <_Bfree>
 8009ede:	69e3      	ldr	r3, [r4, #28]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	601a      	str	r2, [r3, #0]
 8009ee4:	1e3b      	subs	r3, r7, #0
 8009ee6:	bfbb      	ittet	lt
 8009ee8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009eec:	9303      	strlt	r3, [sp, #12]
 8009eee:	2300      	movge	r3, #0
 8009ef0:	2201      	movlt	r2, #1
 8009ef2:	bfac      	ite	ge
 8009ef4:	f8c8 3000 	strge.w	r3, [r8]
 8009ef8:	f8c8 2000 	strlt.w	r2, [r8]
 8009efc:	4b9e      	ldr	r3, [pc, #632]	; (800a178 <_dtoa_r+0x2f0>)
 8009efe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009f02:	ea33 0308 	bics.w	r3, r3, r8
 8009f06:	d11b      	bne.n	8009f40 <_dtoa_r+0xb8>
 8009f08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f0a:	f242 730f 	movw	r3, #9999	; 0x270f
 8009f0e:	6013      	str	r3, [r2, #0]
 8009f10:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009f14:	4333      	orrs	r3, r6
 8009f16:	f000 8593 	beq.w	800aa40 <_dtoa_r+0xbb8>
 8009f1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f1c:	b963      	cbnz	r3, 8009f38 <_dtoa_r+0xb0>
 8009f1e:	4b97      	ldr	r3, [pc, #604]	; (800a17c <_dtoa_r+0x2f4>)
 8009f20:	e027      	b.n	8009f72 <_dtoa_r+0xea>
 8009f22:	4b97      	ldr	r3, [pc, #604]	; (800a180 <_dtoa_r+0x2f8>)
 8009f24:	9300      	str	r3, [sp, #0]
 8009f26:	3308      	adds	r3, #8
 8009f28:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f2a:	6013      	str	r3, [r2, #0]
 8009f2c:	9800      	ldr	r0, [sp, #0]
 8009f2e:	b013      	add	sp, #76	; 0x4c
 8009f30:	ecbd 8b04 	vpop	{d8-d9}
 8009f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f38:	4b90      	ldr	r3, [pc, #576]	; (800a17c <_dtoa_r+0x2f4>)
 8009f3a:	9300      	str	r3, [sp, #0]
 8009f3c:	3303      	adds	r3, #3
 8009f3e:	e7f3      	b.n	8009f28 <_dtoa_r+0xa0>
 8009f40:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f44:	2200      	movs	r2, #0
 8009f46:	ec51 0b17 	vmov	r0, r1, d7
 8009f4a:	eeb0 8a47 	vmov.f32	s16, s14
 8009f4e:	eef0 8a67 	vmov.f32	s17, s15
 8009f52:	2300      	movs	r3, #0
 8009f54:	f7f6 fdc8 	bl	8000ae8 <__aeabi_dcmpeq>
 8009f58:	4681      	mov	r9, r0
 8009f5a:	b160      	cbz	r0, 8009f76 <_dtoa_r+0xee>
 8009f5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f5e:	2301      	movs	r3, #1
 8009f60:	6013      	str	r3, [r2, #0]
 8009f62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	f000 8568 	beq.w	800aa3a <_dtoa_r+0xbb2>
 8009f6a:	4b86      	ldr	r3, [pc, #536]	; (800a184 <_dtoa_r+0x2fc>)
 8009f6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f6e:	6013      	str	r3, [r2, #0]
 8009f70:	3b01      	subs	r3, #1
 8009f72:	9300      	str	r3, [sp, #0]
 8009f74:	e7da      	b.n	8009f2c <_dtoa_r+0xa4>
 8009f76:	aa10      	add	r2, sp, #64	; 0x40
 8009f78:	a911      	add	r1, sp, #68	; 0x44
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	eeb0 0a48 	vmov.f32	s0, s16
 8009f80:	eef0 0a68 	vmov.f32	s1, s17
 8009f84:	f001 f994 	bl	800b2b0 <__d2b>
 8009f88:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009f8c:	4682      	mov	sl, r0
 8009f8e:	2d00      	cmp	r5, #0
 8009f90:	d07f      	beq.n	800a092 <_dtoa_r+0x20a>
 8009f92:	ee18 3a90 	vmov	r3, s17
 8009f96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f9a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009f9e:	ec51 0b18 	vmov	r0, r1, d8
 8009fa2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009fa6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009faa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009fae:	4619      	mov	r1, r3
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	4b75      	ldr	r3, [pc, #468]	; (800a188 <_dtoa_r+0x300>)
 8009fb4:	f7f6 f978 	bl	80002a8 <__aeabi_dsub>
 8009fb8:	a367      	add	r3, pc, #412	; (adr r3, 800a158 <_dtoa_r+0x2d0>)
 8009fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fbe:	f7f6 fb2b 	bl	8000618 <__aeabi_dmul>
 8009fc2:	a367      	add	r3, pc, #412	; (adr r3, 800a160 <_dtoa_r+0x2d8>)
 8009fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc8:	f7f6 f970 	bl	80002ac <__adddf3>
 8009fcc:	4606      	mov	r6, r0
 8009fce:	4628      	mov	r0, r5
 8009fd0:	460f      	mov	r7, r1
 8009fd2:	f7f6 fab7 	bl	8000544 <__aeabi_i2d>
 8009fd6:	a364      	add	r3, pc, #400	; (adr r3, 800a168 <_dtoa_r+0x2e0>)
 8009fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fdc:	f7f6 fb1c 	bl	8000618 <__aeabi_dmul>
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	460b      	mov	r3, r1
 8009fe4:	4630      	mov	r0, r6
 8009fe6:	4639      	mov	r1, r7
 8009fe8:	f7f6 f960 	bl	80002ac <__adddf3>
 8009fec:	4606      	mov	r6, r0
 8009fee:	460f      	mov	r7, r1
 8009ff0:	f7f6 fdc2 	bl	8000b78 <__aeabi_d2iz>
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	4683      	mov	fp, r0
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	4630      	mov	r0, r6
 8009ffc:	4639      	mov	r1, r7
 8009ffe:	f7f6 fd7d 	bl	8000afc <__aeabi_dcmplt>
 800a002:	b148      	cbz	r0, 800a018 <_dtoa_r+0x190>
 800a004:	4658      	mov	r0, fp
 800a006:	f7f6 fa9d 	bl	8000544 <__aeabi_i2d>
 800a00a:	4632      	mov	r2, r6
 800a00c:	463b      	mov	r3, r7
 800a00e:	f7f6 fd6b 	bl	8000ae8 <__aeabi_dcmpeq>
 800a012:	b908      	cbnz	r0, 800a018 <_dtoa_r+0x190>
 800a014:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a018:	f1bb 0f16 	cmp.w	fp, #22
 800a01c:	d857      	bhi.n	800a0ce <_dtoa_r+0x246>
 800a01e:	4b5b      	ldr	r3, [pc, #364]	; (800a18c <_dtoa_r+0x304>)
 800a020:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a028:	ec51 0b18 	vmov	r0, r1, d8
 800a02c:	f7f6 fd66 	bl	8000afc <__aeabi_dcmplt>
 800a030:	2800      	cmp	r0, #0
 800a032:	d04e      	beq.n	800a0d2 <_dtoa_r+0x24a>
 800a034:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a038:	2300      	movs	r3, #0
 800a03a:	930c      	str	r3, [sp, #48]	; 0x30
 800a03c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a03e:	1b5b      	subs	r3, r3, r5
 800a040:	1e5a      	subs	r2, r3, #1
 800a042:	bf45      	ittet	mi
 800a044:	f1c3 0301 	rsbmi	r3, r3, #1
 800a048:	9305      	strmi	r3, [sp, #20]
 800a04a:	2300      	movpl	r3, #0
 800a04c:	2300      	movmi	r3, #0
 800a04e:	9206      	str	r2, [sp, #24]
 800a050:	bf54      	ite	pl
 800a052:	9305      	strpl	r3, [sp, #20]
 800a054:	9306      	strmi	r3, [sp, #24]
 800a056:	f1bb 0f00 	cmp.w	fp, #0
 800a05a:	db3c      	blt.n	800a0d6 <_dtoa_r+0x24e>
 800a05c:	9b06      	ldr	r3, [sp, #24]
 800a05e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a062:	445b      	add	r3, fp
 800a064:	9306      	str	r3, [sp, #24]
 800a066:	2300      	movs	r3, #0
 800a068:	9308      	str	r3, [sp, #32]
 800a06a:	9b07      	ldr	r3, [sp, #28]
 800a06c:	2b09      	cmp	r3, #9
 800a06e:	d868      	bhi.n	800a142 <_dtoa_r+0x2ba>
 800a070:	2b05      	cmp	r3, #5
 800a072:	bfc4      	itt	gt
 800a074:	3b04      	subgt	r3, #4
 800a076:	9307      	strgt	r3, [sp, #28]
 800a078:	9b07      	ldr	r3, [sp, #28]
 800a07a:	f1a3 0302 	sub.w	r3, r3, #2
 800a07e:	bfcc      	ite	gt
 800a080:	2500      	movgt	r5, #0
 800a082:	2501      	movle	r5, #1
 800a084:	2b03      	cmp	r3, #3
 800a086:	f200 8085 	bhi.w	800a194 <_dtoa_r+0x30c>
 800a08a:	e8df f003 	tbb	[pc, r3]
 800a08e:	3b2e      	.short	0x3b2e
 800a090:	5839      	.short	0x5839
 800a092:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a096:	441d      	add	r5, r3
 800a098:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a09c:	2b20      	cmp	r3, #32
 800a09e:	bfc1      	itttt	gt
 800a0a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a0a4:	fa08 f803 	lslgt.w	r8, r8, r3
 800a0a8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a0ac:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a0b0:	bfd6      	itet	le
 800a0b2:	f1c3 0320 	rsble	r3, r3, #32
 800a0b6:	ea48 0003 	orrgt.w	r0, r8, r3
 800a0ba:	fa06 f003 	lslle.w	r0, r6, r3
 800a0be:	f7f6 fa31 	bl	8000524 <__aeabi_ui2d>
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a0c8:	3d01      	subs	r5, #1
 800a0ca:	920e      	str	r2, [sp, #56]	; 0x38
 800a0cc:	e76f      	b.n	8009fae <_dtoa_r+0x126>
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	e7b3      	b.n	800a03a <_dtoa_r+0x1b2>
 800a0d2:	900c      	str	r0, [sp, #48]	; 0x30
 800a0d4:	e7b2      	b.n	800a03c <_dtoa_r+0x1b4>
 800a0d6:	9b05      	ldr	r3, [sp, #20]
 800a0d8:	eba3 030b 	sub.w	r3, r3, fp
 800a0dc:	9305      	str	r3, [sp, #20]
 800a0de:	f1cb 0300 	rsb	r3, fp, #0
 800a0e2:	9308      	str	r3, [sp, #32]
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0e8:	e7bf      	b.n	800a06a <_dtoa_r+0x1e2>
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	9309      	str	r3, [sp, #36]	; 0x24
 800a0ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	dc52      	bgt.n	800a19a <_dtoa_r+0x312>
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	9301      	str	r3, [sp, #4]
 800a0f8:	9304      	str	r3, [sp, #16]
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	920a      	str	r2, [sp, #40]	; 0x28
 800a0fe:	e00b      	b.n	800a118 <_dtoa_r+0x290>
 800a100:	2301      	movs	r3, #1
 800a102:	e7f3      	b.n	800a0ec <_dtoa_r+0x264>
 800a104:	2300      	movs	r3, #0
 800a106:	9309      	str	r3, [sp, #36]	; 0x24
 800a108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a10a:	445b      	add	r3, fp
 800a10c:	9301      	str	r3, [sp, #4]
 800a10e:	3301      	adds	r3, #1
 800a110:	2b01      	cmp	r3, #1
 800a112:	9304      	str	r3, [sp, #16]
 800a114:	bfb8      	it	lt
 800a116:	2301      	movlt	r3, #1
 800a118:	69e0      	ldr	r0, [r4, #28]
 800a11a:	2100      	movs	r1, #0
 800a11c:	2204      	movs	r2, #4
 800a11e:	f102 0614 	add.w	r6, r2, #20
 800a122:	429e      	cmp	r6, r3
 800a124:	d93d      	bls.n	800a1a2 <_dtoa_r+0x31a>
 800a126:	6041      	str	r1, [r0, #4]
 800a128:	4620      	mov	r0, r4
 800a12a:	f000 fd9f 	bl	800ac6c <_Balloc>
 800a12e:	9000      	str	r0, [sp, #0]
 800a130:	2800      	cmp	r0, #0
 800a132:	d139      	bne.n	800a1a8 <_dtoa_r+0x320>
 800a134:	4b16      	ldr	r3, [pc, #88]	; (800a190 <_dtoa_r+0x308>)
 800a136:	4602      	mov	r2, r0
 800a138:	f240 11af 	movw	r1, #431	; 0x1af
 800a13c:	e6bd      	b.n	8009eba <_dtoa_r+0x32>
 800a13e:	2301      	movs	r3, #1
 800a140:	e7e1      	b.n	800a106 <_dtoa_r+0x27e>
 800a142:	2501      	movs	r5, #1
 800a144:	2300      	movs	r3, #0
 800a146:	9307      	str	r3, [sp, #28]
 800a148:	9509      	str	r5, [sp, #36]	; 0x24
 800a14a:	f04f 33ff 	mov.w	r3, #4294967295
 800a14e:	9301      	str	r3, [sp, #4]
 800a150:	9304      	str	r3, [sp, #16]
 800a152:	2200      	movs	r2, #0
 800a154:	2312      	movs	r3, #18
 800a156:	e7d1      	b.n	800a0fc <_dtoa_r+0x274>
 800a158:	636f4361 	.word	0x636f4361
 800a15c:	3fd287a7 	.word	0x3fd287a7
 800a160:	8b60c8b3 	.word	0x8b60c8b3
 800a164:	3fc68a28 	.word	0x3fc68a28
 800a168:	509f79fb 	.word	0x509f79fb
 800a16c:	3fd34413 	.word	0x3fd34413
 800a170:	0800bd61 	.word	0x0800bd61
 800a174:	0800bd78 	.word	0x0800bd78
 800a178:	7ff00000 	.word	0x7ff00000
 800a17c:	0800bd5d 	.word	0x0800bd5d
 800a180:	0800bd54 	.word	0x0800bd54
 800a184:	0800bd31 	.word	0x0800bd31
 800a188:	3ff80000 	.word	0x3ff80000
 800a18c:	0800be68 	.word	0x0800be68
 800a190:	0800bdd0 	.word	0x0800bdd0
 800a194:	2301      	movs	r3, #1
 800a196:	9309      	str	r3, [sp, #36]	; 0x24
 800a198:	e7d7      	b.n	800a14a <_dtoa_r+0x2c2>
 800a19a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a19c:	9301      	str	r3, [sp, #4]
 800a19e:	9304      	str	r3, [sp, #16]
 800a1a0:	e7ba      	b.n	800a118 <_dtoa_r+0x290>
 800a1a2:	3101      	adds	r1, #1
 800a1a4:	0052      	lsls	r2, r2, #1
 800a1a6:	e7ba      	b.n	800a11e <_dtoa_r+0x296>
 800a1a8:	69e3      	ldr	r3, [r4, #28]
 800a1aa:	9a00      	ldr	r2, [sp, #0]
 800a1ac:	601a      	str	r2, [r3, #0]
 800a1ae:	9b04      	ldr	r3, [sp, #16]
 800a1b0:	2b0e      	cmp	r3, #14
 800a1b2:	f200 80a8 	bhi.w	800a306 <_dtoa_r+0x47e>
 800a1b6:	2d00      	cmp	r5, #0
 800a1b8:	f000 80a5 	beq.w	800a306 <_dtoa_r+0x47e>
 800a1bc:	f1bb 0f00 	cmp.w	fp, #0
 800a1c0:	dd38      	ble.n	800a234 <_dtoa_r+0x3ac>
 800a1c2:	4bc0      	ldr	r3, [pc, #768]	; (800a4c4 <_dtoa_r+0x63c>)
 800a1c4:	f00b 020f 	and.w	r2, fp, #15
 800a1c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1cc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a1d0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a1d4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a1d8:	d019      	beq.n	800a20e <_dtoa_r+0x386>
 800a1da:	4bbb      	ldr	r3, [pc, #748]	; (800a4c8 <_dtoa_r+0x640>)
 800a1dc:	ec51 0b18 	vmov	r0, r1, d8
 800a1e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a1e4:	f7f6 fb42 	bl	800086c <__aeabi_ddiv>
 800a1e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1ec:	f008 080f 	and.w	r8, r8, #15
 800a1f0:	2503      	movs	r5, #3
 800a1f2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a4c8 <_dtoa_r+0x640>
 800a1f6:	f1b8 0f00 	cmp.w	r8, #0
 800a1fa:	d10a      	bne.n	800a212 <_dtoa_r+0x38a>
 800a1fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a200:	4632      	mov	r2, r6
 800a202:	463b      	mov	r3, r7
 800a204:	f7f6 fb32 	bl	800086c <__aeabi_ddiv>
 800a208:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a20c:	e02b      	b.n	800a266 <_dtoa_r+0x3de>
 800a20e:	2502      	movs	r5, #2
 800a210:	e7ef      	b.n	800a1f2 <_dtoa_r+0x36a>
 800a212:	f018 0f01 	tst.w	r8, #1
 800a216:	d008      	beq.n	800a22a <_dtoa_r+0x3a2>
 800a218:	4630      	mov	r0, r6
 800a21a:	4639      	mov	r1, r7
 800a21c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a220:	f7f6 f9fa 	bl	8000618 <__aeabi_dmul>
 800a224:	3501      	adds	r5, #1
 800a226:	4606      	mov	r6, r0
 800a228:	460f      	mov	r7, r1
 800a22a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a22e:	f109 0908 	add.w	r9, r9, #8
 800a232:	e7e0      	b.n	800a1f6 <_dtoa_r+0x36e>
 800a234:	f000 809f 	beq.w	800a376 <_dtoa_r+0x4ee>
 800a238:	f1cb 0600 	rsb	r6, fp, #0
 800a23c:	4ba1      	ldr	r3, [pc, #644]	; (800a4c4 <_dtoa_r+0x63c>)
 800a23e:	4fa2      	ldr	r7, [pc, #648]	; (800a4c8 <_dtoa_r+0x640>)
 800a240:	f006 020f 	and.w	r2, r6, #15
 800a244:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24c:	ec51 0b18 	vmov	r0, r1, d8
 800a250:	f7f6 f9e2 	bl	8000618 <__aeabi_dmul>
 800a254:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a258:	1136      	asrs	r6, r6, #4
 800a25a:	2300      	movs	r3, #0
 800a25c:	2502      	movs	r5, #2
 800a25e:	2e00      	cmp	r6, #0
 800a260:	d17e      	bne.n	800a360 <_dtoa_r+0x4d8>
 800a262:	2b00      	cmp	r3, #0
 800a264:	d1d0      	bne.n	800a208 <_dtoa_r+0x380>
 800a266:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a268:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	f000 8084 	beq.w	800a37a <_dtoa_r+0x4f2>
 800a272:	4b96      	ldr	r3, [pc, #600]	; (800a4cc <_dtoa_r+0x644>)
 800a274:	2200      	movs	r2, #0
 800a276:	4640      	mov	r0, r8
 800a278:	4649      	mov	r1, r9
 800a27a:	f7f6 fc3f 	bl	8000afc <__aeabi_dcmplt>
 800a27e:	2800      	cmp	r0, #0
 800a280:	d07b      	beq.n	800a37a <_dtoa_r+0x4f2>
 800a282:	9b04      	ldr	r3, [sp, #16]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d078      	beq.n	800a37a <_dtoa_r+0x4f2>
 800a288:	9b01      	ldr	r3, [sp, #4]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	dd39      	ble.n	800a302 <_dtoa_r+0x47a>
 800a28e:	4b90      	ldr	r3, [pc, #576]	; (800a4d0 <_dtoa_r+0x648>)
 800a290:	2200      	movs	r2, #0
 800a292:	4640      	mov	r0, r8
 800a294:	4649      	mov	r1, r9
 800a296:	f7f6 f9bf 	bl	8000618 <__aeabi_dmul>
 800a29a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a29e:	9e01      	ldr	r6, [sp, #4]
 800a2a0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a2a4:	3501      	adds	r5, #1
 800a2a6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	f7f6 f94a 	bl	8000544 <__aeabi_i2d>
 800a2b0:	4642      	mov	r2, r8
 800a2b2:	464b      	mov	r3, r9
 800a2b4:	f7f6 f9b0 	bl	8000618 <__aeabi_dmul>
 800a2b8:	4b86      	ldr	r3, [pc, #536]	; (800a4d4 <_dtoa_r+0x64c>)
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	f7f5 fff6 	bl	80002ac <__adddf3>
 800a2c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a2c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2c8:	9303      	str	r3, [sp, #12]
 800a2ca:	2e00      	cmp	r6, #0
 800a2cc:	d158      	bne.n	800a380 <_dtoa_r+0x4f8>
 800a2ce:	4b82      	ldr	r3, [pc, #520]	; (800a4d8 <_dtoa_r+0x650>)
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	4640      	mov	r0, r8
 800a2d4:	4649      	mov	r1, r9
 800a2d6:	f7f5 ffe7 	bl	80002a8 <__aeabi_dsub>
 800a2da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2de:	4680      	mov	r8, r0
 800a2e0:	4689      	mov	r9, r1
 800a2e2:	f7f6 fc29 	bl	8000b38 <__aeabi_dcmpgt>
 800a2e6:	2800      	cmp	r0, #0
 800a2e8:	f040 8296 	bne.w	800a818 <_dtoa_r+0x990>
 800a2ec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a2f0:	4640      	mov	r0, r8
 800a2f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2f6:	4649      	mov	r1, r9
 800a2f8:	f7f6 fc00 	bl	8000afc <__aeabi_dcmplt>
 800a2fc:	2800      	cmp	r0, #0
 800a2fe:	f040 8289 	bne.w	800a814 <_dtoa_r+0x98c>
 800a302:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a306:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a308:	2b00      	cmp	r3, #0
 800a30a:	f2c0 814e 	blt.w	800a5aa <_dtoa_r+0x722>
 800a30e:	f1bb 0f0e 	cmp.w	fp, #14
 800a312:	f300 814a 	bgt.w	800a5aa <_dtoa_r+0x722>
 800a316:	4b6b      	ldr	r3, [pc, #428]	; (800a4c4 <_dtoa_r+0x63c>)
 800a318:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a31c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a322:	2b00      	cmp	r3, #0
 800a324:	f280 80dc 	bge.w	800a4e0 <_dtoa_r+0x658>
 800a328:	9b04      	ldr	r3, [sp, #16]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	f300 80d8 	bgt.w	800a4e0 <_dtoa_r+0x658>
 800a330:	f040 826f 	bne.w	800a812 <_dtoa_r+0x98a>
 800a334:	4b68      	ldr	r3, [pc, #416]	; (800a4d8 <_dtoa_r+0x650>)
 800a336:	2200      	movs	r2, #0
 800a338:	4640      	mov	r0, r8
 800a33a:	4649      	mov	r1, r9
 800a33c:	f7f6 f96c 	bl	8000618 <__aeabi_dmul>
 800a340:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a344:	f7f6 fbee 	bl	8000b24 <__aeabi_dcmpge>
 800a348:	9e04      	ldr	r6, [sp, #16]
 800a34a:	4637      	mov	r7, r6
 800a34c:	2800      	cmp	r0, #0
 800a34e:	f040 8245 	bne.w	800a7dc <_dtoa_r+0x954>
 800a352:	9d00      	ldr	r5, [sp, #0]
 800a354:	2331      	movs	r3, #49	; 0x31
 800a356:	f805 3b01 	strb.w	r3, [r5], #1
 800a35a:	f10b 0b01 	add.w	fp, fp, #1
 800a35e:	e241      	b.n	800a7e4 <_dtoa_r+0x95c>
 800a360:	07f2      	lsls	r2, r6, #31
 800a362:	d505      	bpl.n	800a370 <_dtoa_r+0x4e8>
 800a364:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a368:	f7f6 f956 	bl	8000618 <__aeabi_dmul>
 800a36c:	3501      	adds	r5, #1
 800a36e:	2301      	movs	r3, #1
 800a370:	1076      	asrs	r6, r6, #1
 800a372:	3708      	adds	r7, #8
 800a374:	e773      	b.n	800a25e <_dtoa_r+0x3d6>
 800a376:	2502      	movs	r5, #2
 800a378:	e775      	b.n	800a266 <_dtoa_r+0x3de>
 800a37a:	9e04      	ldr	r6, [sp, #16]
 800a37c:	465f      	mov	r7, fp
 800a37e:	e792      	b.n	800a2a6 <_dtoa_r+0x41e>
 800a380:	9900      	ldr	r1, [sp, #0]
 800a382:	4b50      	ldr	r3, [pc, #320]	; (800a4c4 <_dtoa_r+0x63c>)
 800a384:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a388:	4431      	add	r1, r6
 800a38a:	9102      	str	r1, [sp, #8]
 800a38c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a38e:	eeb0 9a47 	vmov.f32	s18, s14
 800a392:	eef0 9a67 	vmov.f32	s19, s15
 800a396:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a39a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a39e:	2900      	cmp	r1, #0
 800a3a0:	d044      	beq.n	800a42c <_dtoa_r+0x5a4>
 800a3a2:	494e      	ldr	r1, [pc, #312]	; (800a4dc <_dtoa_r+0x654>)
 800a3a4:	2000      	movs	r0, #0
 800a3a6:	f7f6 fa61 	bl	800086c <__aeabi_ddiv>
 800a3aa:	ec53 2b19 	vmov	r2, r3, d9
 800a3ae:	f7f5 ff7b 	bl	80002a8 <__aeabi_dsub>
 800a3b2:	9d00      	ldr	r5, [sp, #0]
 800a3b4:	ec41 0b19 	vmov	d9, r0, r1
 800a3b8:	4649      	mov	r1, r9
 800a3ba:	4640      	mov	r0, r8
 800a3bc:	f7f6 fbdc 	bl	8000b78 <__aeabi_d2iz>
 800a3c0:	4606      	mov	r6, r0
 800a3c2:	f7f6 f8bf 	bl	8000544 <__aeabi_i2d>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	4640      	mov	r0, r8
 800a3cc:	4649      	mov	r1, r9
 800a3ce:	f7f5 ff6b 	bl	80002a8 <__aeabi_dsub>
 800a3d2:	3630      	adds	r6, #48	; 0x30
 800a3d4:	f805 6b01 	strb.w	r6, [r5], #1
 800a3d8:	ec53 2b19 	vmov	r2, r3, d9
 800a3dc:	4680      	mov	r8, r0
 800a3de:	4689      	mov	r9, r1
 800a3e0:	f7f6 fb8c 	bl	8000afc <__aeabi_dcmplt>
 800a3e4:	2800      	cmp	r0, #0
 800a3e6:	d164      	bne.n	800a4b2 <_dtoa_r+0x62a>
 800a3e8:	4642      	mov	r2, r8
 800a3ea:	464b      	mov	r3, r9
 800a3ec:	4937      	ldr	r1, [pc, #220]	; (800a4cc <_dtoa_r+0x644>)
 800a3ee:	2000      	movs	r0, #0
 800a3f0:	f7f5 ff5a 	bl	80002a8 <__aeabi_dsub>
 800a3f4:	ec53 2b19 	vmov	r2, r3, d9
 800a3f8:	f7f6 fb80 	bl	8000afc <__aeabi_dcmplt>
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	f040 80b6 	bne.w	800a56e <_dtoa_r+0x6e6>
 800a402:	9b02      	ldr	r3, [sp, #8]
 800a404:	429d      	cmp	r5, r3
 800a406:	f43f af7c 	beq.w	800a302 <_dtoa_r+0x47a>
 800a40a:	4b31      	ldr	r3, [pc, #196]	; (800a4d0 <_dtoa_r+0x648>)
 800a40c:	ec51 0b19 	vmov	r0, r1, d9
 800a410:	2200      	movs	r2, #0
 800a412:	f7f6 f901 	bl	8000618 <__aeabi_dmul>
 800a416:	4b2e      	ldr	r3, [pc, #184]	; (800a4d0 <_dtoa_r+0x648>)
 800a418:	ec41 0b19 	vmov	d9, r0, r1
 800a41c:	2200      	movs	r2, #0
 800a41e:	4640      	mov	r0, r8
 800a420:	4649      	mov	r1, r9
 800a422:	f7f6 f8f9 	bl	8000618 <__aeabi_dmul>
 800a426:	4680      	mov	r8, r0
 800a428:	4689      	mov	r9, r1
 800a42a:	e7c5      	b.n	800a3b8 <_dtoa_r+0x530>
 800a42c:	ec51 0b17 	vmov	r0, r1, d7
 800a430:	f7f6 f8f2 	bl	8000618 <__aeabi_dmul>
 800a434:	9b02      	ldr	r3, [sp, #8]
 800a436:	9d00      	ldr	r5, [sp, #0]
 800a438:	930f      	str	r3, [sp, #60]	; 0x3c
 800a43a:	ec41 0b19 	vmov	d9, r0, r1
 800a43e:	4649      	mov	r1, r9
 800a440:	4640      	mov	r0, r8
 800a442:	f7f6 fb99 	bl	8000b78 <__aeabi_d2iz>
 800a446:	4606      	mov	r6, r0
 800a448:	f7f6 f87c 	bl	8000544 <__aeabi_i2d>
 800a44c:	3630      	adds	r6, #48	; 0x30
 800a44e:	4602      	mov	r2, r0
 800a450:	460b      	mov	r3, r1
 800a452:	4640      	mov	r0, r8
 800a454:	4649      	mov	r1, r9
 800a456:	f7f5 ff27 	bl	80002a8 <__aeabi_dsub>
 800a45a:	f805 6b01 	strb.w	r6, [r5], #1
 800a45e:	9b02      	ldr	r3, [sp, #8]
 800a460:	429d      	cmp	r5, r3
 800a462:	4680      	mov	r8, r0
 800a464:	4689      	mov	r9, r1
 800a466:	f04f 0200 	mov.w	r2, #0
 800a46a:	d124      	bne.n	800a4b6 <_dtoa_r+0x62e>
 800a46c:	4b1b      	ldr	r3, [pc, #108]	; (800a4dc <_dtoa_r+0x654>)
 800a46e:	ec51 0b19 	vmov	r0, r1, d9
 800a472:	f7f5 ff1b 	bl	80002ac <__adddf3>
 800a476:	4602      	mov	r2, r0
 800a478:	460b      	mov	r3, r1
 800a47a:	4640      	mov	r0, r8
 800a47c:	4649      	mov	r1, r9
 800a47e:	f7f6 fb5b 	bl	8000b38 <__aeabi_dcmpgt>
 800a482:	2800      	cmp	r0, #0
 800a484:	d173      	bne.n	800a56e <_dtoa_r+0x6e6>
 800a486:	ec53 2b19 	vmov	r2, r3, d9
 800a48a:	4914      	ldr	r1, [pc, #80]	; (800a4dc <_dtoa_r+0x654>)
 800a48c:	2000      	movs	r0, #0
 800a48e:	f7f5 ff0b 	bl	80002a8 <__aeabi_dsub>
 800a492:	4602      	mov	r2, r0
 800a494:	460b      	mov	r3, r1
 800a496:	4640      	mov	r0, r8
 800a498:	4649      	mov	r1, r9
 800a49a:	f7f6 fb2f 	bl	8000afc <__aeabi_dcmplt>
 800a49e:	2800      	cmp	r0, #0
 800a4a0:	f43f af2f 	beq.w	800a302 <_dtoa_r+0x47a>
 800a4a4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a4a6:	1e6b      	subs	r3, r5, #1
 800a4a8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a4ae:	2b30      	cmp	r3, #48	; 0x30
 800a4b0:	d0f8      	beq.n	800a4a4 <_dtoa_r+0x61c>
 800a4b2:	46bb      	mov	fp, r7
 800a4b4:	e04a      	b.n	800a54c <_dtoa_r+0x6c4>
 800a4b6:	4b06      	ldr	r3, [pc, #24]	; (800a4d0 <_dtoa_r+0x648>)
 800a4b8:	f7f6 f8ae 	bl	8000618 <__aeabi_dmul>
 800a4bc:	4680      	mov	r8, r0
 800a4be:	4689      	mov	r9, r1
 800a4c0:	e7bd      	b.n	800a43e <_dtoa_r+0x5b6>
 800a4c2:	bf00      	nop
 800a4c4:	0800be68 	.word	0x0800be68
 800a4c8:	0800be40 	.word	0x0800be40
 800a4cc:	3ff00000 	.word	0x3ff00000
 800a4d0:	40240000 	.word	0x40240000
 800a4d4:	401c0000 	.word	0x401c0000
 800a4d8:	40140000 	.word	0x40140000
 800a4dc:	3fe00000 	.word	0x3fe00000
 800a4e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a4e4:	9d00      	ldr	r5, [sp, #0]
 800a4e6:	4642      	mov	r2, r8
 800a4e8:	464b      	mov	r3, r9
 800a4ea:	4630      	mov	r0, r6
 800a4ec:	4639      	mov	r1, r7
 800a4ee:	f7f6 f9bd 	bl	800086c <__aeabi_ddiv>
 800a4f2:	f7f6 fb41 	bl	8000b78 <__aeabi_d2iz>
 800a4f6:	9001      	str	r0, [sp, #4]
 800a4f8:	f7f6 f824 	bl	8000544 <__aeabi_i2d>
 800a4fc:	4642      	mov	r2, r8
 800a4fe:	464b      	mov	r3, r9
 800a500:	f7f6 f88a 	bl	8000618 <__aeabi_dmul>
 800a504:	4602      	mov	r2, r0
 800a506:	460b      	mov	r3, r1
 800a508:	4630      	mov	r0, r6
 800a50a:	4639      	mov	r1, r7
 800a50c:	f7f5 fecc 	bl	80002a8 <__aeabi_dsub>
 800a510:	9e01      	ldr	r6, [sp, #4]
 800a512:	9f04      	ldr	r7, [sp, #16]
 800a514:	3630      	adds	r6, #48	; 0x30
 800a516:	f805 6b01 	strb.w	r6, [r5], #1
 800a51a:	9e00      	ldr	r6, [sp, #0]
 800a51c:	1bae      	subs	r6, r5, r6
 800a51e:	42b7      	cmp	r7, r6
 800a520:	4602      	mov	r2, r0
 800a522:	460b      	mov	r3, r1
 800a524:	d134      	bne.n	800a590 <_dtoa_r+0x708>
 800a526:	f7f5 fec1 	bl	80002ac <__adddf3>
 800a52a:	4642      	mov	r2, r8
 800a52c:	464b      	mov	r3, r9
 800a52e:	4606      	mov	r6, r0
 800a530:	460f      	mov	r7, r1
 800a532:	f7f6 fb01 	bl	8000b38 <__aeabi_dcmpgt>
 800a536:	b9c8      	cbnz	r0, 800a56c <_dtoa_r+0x6e4>
 800a538:	4642      	mov	r2, r8
 800a53a:	464b      	mov	r3, r9
 800a53c:	4630      	mov	r0, r6
 800a53e:	4639      	mov	r1, r7
 800a540:	f7f6 fad2 	bl	8000ae8 <__aeabi_dcmpeq>
 800a544:	b110      	cbz	r0, 800a54c <_dtoa_r+0x6c4>
 800a546:	9b01      	ldr	r3, [sp, #4]
 800a548:	07db      	lsls	r3, r3, #31
 800a54a:	d40f      	bmi.n	800a56c <_dtoa_r+0x6e4>
 800a54c:	4651      	mov	r1, sl
 800a54e:	4620      	mov	r0, r4
 800a550:	f000 fbcc 	bl	800acec <_Bfree>
 800a554:	2300      	movs	r3, #0
 800a556:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a558:	702b      	strb	r3, [r5, #0]
 800a55a:	f10b 0301 	add.w	r3, fp, #1
 800a55e:	6013      	str	r3, [r2, #0]
 800a560:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a562:	2b00      	cmp	r3, #0
 800a564:	f43f ace2 	beq.w	8009f2c <_dtoa_r+0xa4>
 800a568:	601d      	str	r5, [r3, #0]
 800a56a:	e4df      	b.n	8009f2c <_dtoa_r+0xa4>
 800a56c:	465f      	mov	r7, fp
 800a56e:	462b      	mov	r3, r5
 800a570:	461d      	mov	r5, r3
 800a572:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a576:	2a39      	cmp	r2, #57	; 0x39
 800a578:	d106      	bne.n	800a588 <_dtoa_r+0x700>
 800a57a:	9a00      	ldr	r2, [sp, #0]
 800a57c:	429a      	cmp	r2, r3
 800a57e:	d1f7      	bne.n	800a570 <_dtoa_r+0x6e8>
 800a580:	9900      	ldr	r1, [sp, #0]
 800a582:	2230      	movs	r2, #48	; 0x30
 800a584:	3701      	adds	r7, #1
 800a586:	700a      	strb	r2, [r1, #0]
 800a588:	781a      	ldrb	r2, [r3, #0]
 800a58a:	3201      	adds	r2, #1
 800a58c:	701a      	strb	r2, [r3, #0]
 800a58e:	e790      	b.n	800a4b2 <_dtoa_r+0x62a>
 800a590:	4ba3      	ldr	r3, [pc, #652]	; (800a820 <_dtoa_r+0x998>)
 800a592:	2200      	movs	r2, #0
 800a594:	f7f6 f840 	bl	8000618 <__aeabi_dmul>
 800a598:	2200      	movs	r2, #0
 800a59a:	2300      	movs	r3, #0
 800a59c:	4606      	mov	r6, r0
 800a59e:	460f      	mov	r7, r1
 800a5a0:	f7f6 faa2 	bl	8000ae8 <__aeabi_dcmpeq>
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	d09e      	beq.n	800a4e6 <_dtoa_r+0x65e>
 800a5a8:	e7d0      	b.n	800a54c <_dtoa_r+0x6c4>
 800a5aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5ac:	2a00      	cmp	r2, #0
 800a5ae:	f000 80ca 	beq.w	800a746 <_dtoa_r+0x8be>
 800a5b2:	9a07      	ldr	r2, [sp, #28]
 800a5b4:	2a01      	cmp	r2, #1
 800a5b6:	f300 80ad 	bgt.w	800a714 <_dtoa_r+0x88c>
 800a5ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5bc:	2a00      	cmp	r2, #0
 800a5be:	f000 80a5 	beq.w	800a70c <_dtoa_r+0x884>
 800a5c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a5c6:	9e08      	ldr	r6, [sp, #32]
 800a5c8:	9d05      	ldr	r5, [sp, #20]
 800a5ca:	9a05      	ldr	r2, [sp, #20]
 800a5cc:	441a      	add	r2, r3
 800a5ce:	9205      	str	r2, [sp, #20]
 800a5d0:	9a06      	ldr	r2, [sp, #24]
 800a5d2:	2101      	movs	r1, #1
 800a5d4:	441a      	add	r2, r3
 800a5d6:	4620      	mov	r0, r4
 800a5d8:	9206      	str	r2, [sp, #24]
 800a5da:	f000 fc3d 	bl	800ae58 <__i2b>
 800a5de:	4607      	mov	r7, r0
 800a5e0:	b165      	cbz	r5, 800a5fc <_dtoa_r+0x774>
 800a5e2:	9b06      	ldr	r3, [sp, #24]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	dd09      	ble.n	800a5fc <_dtoa_r+0x774>
 800a5e8:	42ab      	cmp	r3, r5
 800a5ea:	9a05      	ldr	r2, [sp, #20]
 800a5ec:	bfa8      	it	ge
 800a5ee:	462b      	movge	r3, r5
 800a5f0:	1ad2      	subs	r2, r2, r3
 800a5f2:	9205      	str	r2, [sp, #20]
 800a5f4:	9a06      	ldr	r2, [sp, #24]
 800a5f6:	1aed      	subs	r5, r5, r3
 800a5f8:	1ad3      	subs	r3, r2, r3
 800a5fa:	9306      	str	r3, [sp, #24]
 800a5fc:	9b08      	ldr	r3, [sp, #32]
 800a5fe:	b1f3      	cbz	r3, 800a63e <_dtoa_r+0x7b6>
 800a600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a602:	2b00      	cmp	r3, #0
 800a604:	f000 80a3 	beq.w	800a74e <_dtoa_r+0x8c6>
 800a608:	2e00      	cmp	r6, #0
 800a60a:	dd10      	ble.n	800a62e <_dtoa_r+0x7a6>
 800a60c:	4639      	mov	r1, r7
 800a60e:	4632      	mov	r2, r6
 800a610:	4620      	mov	r0, r4
 800a612:	f000 fce1 	bl	800afd8 <__pow5mult>
 800a616:	4652      	mov	r2, sl
 800a618:	4601      	mov	r1, r0
 800a61a:	4607      	mov	r7, r0
 800a61c:	4620      	mov	r0, r4
 800a61e:	f000 fc31 	bl	800ae84 <__multiply>
 800a622:	4651      	mov	r1, sl
 800a624:	4680      	mov	r8, r0
 800a626:	4620      	mov	r0, r4
 800a628:	f000 fb60 	bl	800acec <_Bfree>
 800a62c:	46c2      	mov	sl, r8
 800a62e:	9b08      	ldr	r3, [sp, #32]
 800a630:	1b9a      	subs	r2, r3, r6
 800a632:	d004      	beq.n	800a63e <_dtoa_r+0x7b6>
 800a634:	4651      	mov	r1, sl
 800a636:	4620      	mov	r0, r4
 800a638:	f000 fcce 	bl	800afd8 <__pow5mult>
 800a63c:	4682      	mov	sl, r0
 800a63e:	2101      	movs	r1, #1
 800a640:	4620      	mov	r0, r4
 800a642:	f000 fc09 	bl	800ae58 <__i2b>
 800a646:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a648:	2b00      	cmp	r3, #0
 800a64a:	4606      	mov	r6, r0
 800a64c:	f340 8081 	ble.w	800a752 <_dtoa_r+0x8ca>
 800a650:	461a      	mov	r2, r3
 800a652:	4601      	mov	r1, r0
 800a654:	4620      	mov	r0, r4
 800a656:	f000 fcbf 	bl	800afd8 <__pow5mult>
 800a65a:	9b07      	ldr	r3, [sp, #28]
 800a65c:	2b01      	cmp	r3, #1
 800a65e:	4606      	mov	r6, r0
 800a660:	dd7a      	ble.n	800a758 <_dtoa_r+0x8d0>
 800a662:	f04f 0800 	mov.w	r8, #0
 800a666:	6933      	ldr	r3, [r6, #16]
 800a668:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a66c:	6918      	ldr	r0, [r3, #16]
 800a66e:	f000 fba5 	bl	800adbc <__hi0bits>
 800a672:	f1c0 0020 	rsb	r0, r0, #32
 800a676:	9b06      	ldr	r3, [sp, #24]
 800a678:	4418      	add	r0, r3
 800a67a:	f010 001f 	ands.w	r0, r0, #31
 800a67e:	f000 8094 	beq.w	800a7aa <_dtoa_r+0x922>
 800a682:	f1c0 0320 	rsb	r3, r0, #32
 800a686:	2b04      	cmp	r3, #4
 800a688:	f340 8085 	ble.w	800a796 <_dtoa_r+0x90e>
 800a68c:	9b05      	ldr	r3, [sp, #20]
 800a68e:	f1c0 001c 	rsb	r0, r0, #28
 800a692:	4403      	add	r3, r0
 800a694:	9305      	str	r3, [sp, #20]
 800a696:	9b06      	ldr	r3, [sp, #24]
 800a698:	4403      	add	r3, r0
 800a69a:	4405      	add	r5, r0
 800a69c:	9306      	str	r3, [sp, #24]
 800a69e:	9b05      	ldr	r3, [sp, #20]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	dd05      	ble.n	800a6b0 <_dtoa_r+0x828>
 800a6a4:	4651      	mov	r1, sl
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	4620      	mov	r0, r4
 800a6aa:	f000 fcef 	bl	800b08c <__lshift>
 800a6ae:	4682      	mov	sl, r0
 800a6b0:	9b06      	ldr	r3, [sp, #24]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	dd05      	ble.n	800a6c2 <_dtoa_r+0x83a>
 800a6b6:	4631      	mov	r1, r6
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	4620      	mov	r0, r4
 800a6bc:	f000 fce6 	bl	800b08c <__lshift>
 800a6c0:	4606      	mov	r6, r0
 800a6c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d072      	beq.n	800a7ae <_dtoa_r+0x926>
 800a6c8:	4631      	mov	r1, r6
 800a6ca:	4650      	mov	r0, sl
 800a6cc:	f000 fd4a 	bl	800b164 <__mcmp>
 800a6d0:	2800      	cmp	r0, #0
 800a6d2:	da6c      	bge.n	800a7ae <_dtoa_r+0x926>
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	4651      	mov	r1, sl
 800a6d8:	220a      	movs	r2, #10
 800a6da:	4620      	mov	r0, r4
 800a6dc:	f000 fb28 	bl	800ad30 <__multadd>
 800a6e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a6e6:	4682      	mov	sl, r0
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	f000 81b0 	beq.w	800aa4e <_dtoa_r+0xbc6>
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	4639      	mov	r1, r7
 800a6f2:	220a      	movs	r2, #10
 800a6f4:	4620      	mov	r0, r4
 800a6f6:	f000 fb1b 	bl	800ad30 <__multadd>
 800a6fa:	9b01      	ldr	r3, [sp, #4]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	4607      	mov	r7, r0
 800a700:	f300 8096 	bgt.w	800a830 <_dtoa_r+0x9a8>
 800a704:	9b07      	ldr	r3, [sp, #28]
 800a706:	2b02      	cmp	r3, #2
 800a708:	dc59      	bgt.n	800a7be <_dtoa_r+0x936>
 800a70a:	e091      	b.n	800a830 <_dtoa_r+0x9a8>
 800a70c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a70e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a712:	e758      	b.n	800a5c6 <_dtoa_r+0x73e>
 800a714:	9b04      	ldr	r3, [sp, #16]
 800a716:	1e5e      	subs	r6, r3, #1
 800a718:	9b08      	ldr	r3, [sp, #32]
 800a71a:	42b3      	cmp	r3, r6
 800a71c:	bfbf      	itttt	lt
 800a71e:	9b08      	ldrlt	r3, [sp, #32]
 800a720:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a722:	9608      	strlt	r6, [sp, #32]
 800a724:	1af3      	sublt	r3, r6, r3
 800a726:	bfb4      	ite	lt
 800a728:	18d2      	addlt	r2, r2, r3
 800a72a:	1b9e      	subge	r6, r3, r6
 800a72c:	9b04      	ldr	r3, [sp, #16]
 800a72e:	bfbc      	itt	lt
 800a730:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a732:	2600      	movlt	r6, #0
 800a734:	2b00      	cmp	r3, #0
 800a736:	bfb7      	itett	lt
 800a738:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a73c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a740:	1a9d      	sublt	r5, r3, r2
 800a742:	2300      	movlt	r3, #0
 800a744:	e741      	b.n	800a5ca <_dtoa_r+0x742>
 800a746:	9e08      	ldr	r6, [sp, #32]
 800a748:	9d05      	ldr	r5, [sp, #20]
 800a74a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a74c:	e748      	b.n	800a5e0 <_dtoa_r+0x758>
 800a74e:	9a08      	ldr	r2, [sp, #32]
 800a750:	e770      	b.n	800a634 <_dtoa_r+0x7ac>
 800a752:	9b07      	ldr	r3, [sp, #28]
 800a754:	2b01      	cmp	r3, #1
 800a756:	dc19      	bgt.n	800a78c <_dtoa_r+0x904>
 800a758:	9b02      	ldr	r3, [sp, #8]
 800a75a:	b9bb      	cbnz	r3, 800a78c <_dtoa_r+0x904>
 800a75c:	9b03      	ldr	r3, [sp, #12]
 800a75e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a762:	b99b      	cbnz	r3, 800a78c <_dtoa_r+0x904>
 800a764:	9b03      	ldr	r3, [sp, #12]
 800a766:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a76a:	0d1b      	lsrs	r3, r3, #20
 800a76c:	051b      	lsls	r3, r3, #20
 800a76e:	b183      	cbz	r3, 800a792 <_dtoa_r+0x90a>
 800a770:	9b05      	ldr	r3, [sp, #20]
 800a772:	3301      	adds	r3, #1
 800a774:	9305      	str	r3, [sp, #20]
 800a776:	9b06      	ldr	r3, [sp, #24]
 800a778:	3301      	adds	r3, #1
 800a77a:	9306      	str	r3, [sp, #24]
 800a77c:	f04f 0801 	mov.w	r8, #1
 800a780:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a782:	2b00      	cmp	r3, #0
 800a784:	f47f af6f 	bne.w	800a666 <_dtoa_r+0x7de>
 800a788:	2001      	movs	r0, #1
 800a78a:	e774      	b.n	800a676 <_dtoa_r+0x7ee>
 800a78c:	f04f 0800 	mov.w	r8, #0
 800a790:	e7f6      	b.n	800a780 <_dtoa_r+0x8f8>
 800a792:	4698      	mov	r8, r3
 800a794:	e7f4      	b.n	800a780 <_dtoa_r+0x8f8>
 800a796:	d082      	beq.n	800a69e <_dtoa_r+0x816>
 800a798:	9a05      	ldr	r2, [sp, #20]
 800a79a:	331c      	adds	r3, #28
 800a79c:	441a      	add	r2, r3
 800a79e:	9205      	str	r2, [sp, #20]
 800a7a0:	9a06      	ldr	r2, [sp, #24]
 800a7a2:	441a      	add	r2, r3
 800a7a4:	441d      	add	r5, r3
 800a7a6:	9206      	str	r2, [sp, #24]
 800a7a8:	e779      	b.n	800a69e <_dtoa_r+0x816>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	e7f4      	b.n	800a798 <_dtoa_r+0x910>
 800a7ae:	9b04      	ldr	r3, [sp, #16]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	dc37      	bgt.n	800a824 <_dtoa_r+0x99c>
 800a7b4:	9b07      	ldr	r3, [sp, #28]
 800a7b6:	2b02      	cmp	r3, #2
 800a7b8:	dd34      	ble.n	800a824 <_dtoa_r+0x99c>
 800a7ba:	9b04      	ldr	r3, [sp, #16]
 800a7bc:	9301      	str	r3, [sp, #4]
 800a7be:	9b01      	ldr	r3, [sp, #4]
 800a7c0:	b963      	cbnz	r3, 800a7dc <_dtoa_r+0x954>
 800a7c2:	4631      	mov	r1, r6
 800a7c4:	2205      	movs	r2, #5
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	f000 fab2 	bl	800ad30 <__multadd>
 800a7cc:	4601      	mov	r1, r0
 800a7ce:	4606      	mov	r6, r0
 800a7d0:	4650      	mov	r0, sl
 800a7d2:	f000 fcc7 	bl	800b164 <__mcmp>
 800a7d6:	2800      	cmp	r0, #0
 800a7d8:	f73f adbb 	bgt.w	800a352 <_dtoa_r+0x4ca>
 800a7dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7de:	9d00      	ldr	r5, [sp, #0]
 800a7e0:	ea6f 0b03 	mvn.w	fp, r3
 800a7e4:	f04f 0800 	mov.w	r8, #0
 800a7e8:	4631      	mov	r1, r6
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	f000 fa7e 	bl	800acec <_Bfree>
 800a7f0:	2f00      	cmp	r7, #0
 800a7f2:	f43f aeab 	beq.w	800a54c <_dtoa_r+0x6c4>
 800a7f6:	f1b8 0f00 	cmp.w	r8, #0
 800a7fa:	d005      	beq.n	800a808 <_dtoa_r+0x980>
 800a7fc:	45b8      	cmp	r8, r7
 800a7fe:	d003      	beq.n	800a808 <_dtoa_r+0x980>
 800a800:	4641      	mov	r1, r8
 800a802:	4620      	mov	r0, r4
 800a804:	f000 fa72 	bl	800acec <_Bfree>
 800a808:	4639      	mov	r1, r7
 800a80a:	4620      	mov	r0, r4
 800a80c:	f000 fa6e 	bl	800acec <_Bfree>
 800a810:	e69c      	b.n	800a54c <_dtoa_r+0x6c4>
 800a812:	2600      	movs	r6, #0
 800a814:	4637      	mov	r7, r6
 800a816:	e7e1      	b.n	800a7dc <_dtoa_r+0x954>
 800a818:	46bb      	mov	fp, r7
 800a81a:	4637      	mov	r7, r6
 800a81c:	e599      	b.n	800a352 <_dtoa_r+0x4ca>
 800a81e:	bf00      	nop
 800a820:	40240000 	.word	0x40240000
 800a824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a826:	2b00      	cmp	r3, #0
 800a828:	f000 80c8 	beq.w	800a9bc <_dtoa_r+0xb34>
 800a82c:	9b04      	ldr	r3, [sp, #16]
 800a82e:	9301      	str	r3, [sp, #4]
 800a830:	2d00      	cmp	r5, #0
 800a832:	dd05      	ble.n	800a840 <_dtoa_r+0x9b8>
 800a834:	4639      	mov	r1, r7
 800a836:	462a      	mov	r2, r5
 800a838:	4620      	mov	r0, r4
 800a83a:	f000 fc27 	bl	800b08c <__lshift>
 800a83e:	4607      	mov	r7, r0
 800a840:	f1b8 0f00 	cmp.w	r8, #0
 800a844:	d05b      	beq.n	800a8fe <_dtoa_r+0xa76>
 800a846:	6879      	ldr	r1, [r7, #4]
 800a848:	4620      	mov	r0, r4
 800a84a:	f000 fa0f 	bl	800ac6c <_Balloc>
 800a84e:	4605      	mov	r5, r0
 800a850:	b928      	cbnz	r0, 800a85e <_dtoa_r+0x9d6>
 800a852:	4b83      	ldr	r3, [pc, #524]	; (800aa60 <_dtoa_r+0xbd8>)
 800a854:	4602      	mov	r2, r0
 800a856:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a85a:	f7ff bb2e 	b.w	8009eba <_dtoa_r+0x32>
 800a85e:	693a      	ldr	r2, [r7, #16]
 800a860:	3202      	adds	r2, #2
 800a862:	0092      	lsls	r2, r2, #2
 800a864:	f107 010c 	add.w	r1, r7, #12
 800a868:	300c      	adds	r0, #12
 800a86a:	f7ff fa74 	bl	8009d56 <memcpy>
 800a86e:	2201      	movs	r2, #1
 800a870:	4629      	mov	r1, r5
 800a872:	4620      	mov	r0, r4
 800a874:	f000 fc0a 	bl	800b08c <__lshift>
 800a878:	9b00      	ldr	r3, [sp, #0]
 800a87a:	3301      	adds	r3, #1
 800a87c:	9304      	str	r3, [sp, #16]
 800a87e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a882:	4413      	add	r3, r2
 800a884:	9308      	str	r3, [sp, #32]
 800a886:	9b02      	ldr	r3, [sp, #8]
 800a888:	f003 0301 	and.w	r3, r3, #1
 800a88c:	46b8      	mov	r8, r7
 800a88e:	9306      	str	r3, [sp, #24]
 800a890:	4607      	mov	r7, r0
 800a892:	9b04      	ldr	r3, [sp, #16]
 800a894:	4631      	mov	r1, r6
 800a896:	3b01      	subs	r3, #1
 800a898:	4650      	mov	r0, sl
 800a89a:	9301      	str	r3, [sp, #4]
 800a89c:	f7ff fa69 	bl	8009d72 <quorem>
 800a8a0:	4641      	mov	r1, r8
 800a8a2:	9002      	str	r0, [sp, #8]
 800a8a4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a8a8:	4650      	mov	r0, sl
 800a8aa:	f000 fc5b 	bl	800b164 <__mcmp>
 800a8ae:	463a      	mov	r2, r7
 800a8b0:	9005      	str	r0, [sp, #20]
 800a8b2:	4631      	mov	r1, r6
 800a8b4:	4620      	mov	r0, r4
 800a8b6:	f000 fc71 	bl	800b19c <__mdiff>
 800a8ba:	68c2      	ldr	r2, [r0, #12]
 800a8bc:	4605      	mov	r5, r0
 800a8be:	bb02      	cbnz	r2, 800a902 <_dtoa_r+0xa7a>
 800a8c0:	4601      	mov	r1, r0
 800a8c2:	4650      	mov	r0, sl
 800a8c4:	f000 fc4e 	bl	800b164 <__mcmp>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	4629      	mov	r1, r5
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	9209      	str	r2, [sp, #36]	; 0x24
 800a8d0:	f000 fa0c 	bl	800acec <_Bfree>
 800a8d4:	9b07      	ldr	r3, [sp, #28]
 800a8d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8d8:	9d04      	ldr	r5, [sp, #16]
 800a8da:	ea43 0102 	orr.w	r1, r3, r2
 800a8de:	9b06      	ldr	r3, [sp, #24]
 800a8e0:	4319      	orrs	r1, r3
 800a8e2:	d110      	bne.n	800a906 <_dtoa_r+0xa7e>
 800a8e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a8e8:	d029      	beq.n	800a93e <_dtoa_r+0xab6>
 800a8ea:	9b05      	ldr	r3, [sp, #20]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	dd02      	ble.n	800a8f6 <_dtoa_r+0xa6e>
 800a8f0:	9b02      	ldr	r3, [sp, #8]
 800a8f2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a8f6:	9b01      	ldr	r3, [sp, #4]
 800a8f8:	f883 9000 	strb.w	r9, [r3]
 800a8fc:	e774      	b.n	800a7e8 <_dtoa_r+0x960>
 800a8fe:	4638      	mov	r0, r7
 800a900:	e7ba      	b.n	800a878 <_dtoa_r+0x9f0>
 800a902:	2201      	movs	r2, #1
 800a904:	e7e1      	b.n	800a8ca <_dtoa_r+0xa42>
 800a906:	9b05      	ldr	r3, [sp, #20]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	db04      	blt.n	800a916 <_dtoa_r+0xa8e>
 800a90c:	9907      	ldr	r1, [sp, #28]
 800a90e:	430b      	orrs	r3, r1
 800a910:	9906      	ldr	r1, [sp, #24]
 800a912:	430b      	orrs	r3, r1
 800a914:	d120      	bne.n	800a958 <_dtoa_r+0xad0>
 800a916:	2a00      	cmp	r2, #0
 800a918:	dded      	ble.n	800a8f6 <_dtoa_r+0xa6e>
 800a91a:	4651      	mov	r1, sl
 800a91c:	2201      	movs	r2, #1
 800a91e:	4620      	mov	r0, r4
 800a920:	f000 fbb4 	bl	800b08c <__lshift>
 800a924:	4631      	mov	r1, r6
 800a926:	4682      	mov	sl, r0
 800a928:	f000 fc1c 	bl	800b164 <__mcmp>
 800a92c:	2800      	cmp	r0, #0
 800a92e:	dc03      	bgt.n	800a938 <_dtoa_r+0xab0>
 800a930:	d1e1      	bne.n	800a8f6 <_dtoa_r+0xa6e>
 800a932:	f019 0f01 	tst.w	r9, #1
 800a936:	d0de      	beq.n	800a8f6 <_dtoa_r+0xa6e>
 800a938:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a93c:	d1d8      	bne.n	800a8f0 <_dtoa_r+0xa68>
 800a93e:	9a01      	ldr	r2, [sp, #4]
 800a940:	2339      	movs	r3, #57	; 0x39
 800a942:	7013      	strb	r3, [r2, #0]
 800a944:	462b      	mov	r3, r5
 800a946:	461d      	mov	r5, r3
 800a948:	3b01      	subs	r3, #1
 800a94a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a94e:	2a39      	cmp	r2, #57	; 0x39
 800a950:	d06c      	beq.n	800aa2c <_dtoa_r+0xba4>
 800a952:	3201      	adds	r2, #1
 800a954:	701a      	strb	r2, [r3, #0]
 800a956:	e747      	b.n	800a7e8 <_dtoa_r+0x960>
 800a958:	2a00      	cmp	r2, #0
 800a95a:	dd07      	ble.n	800a96c <_dtoa_r+0xae4>
 800a95c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a960:	d0ed      	beq.n	800a93e <_dtoa_r+0xab6>
 800a962:	9a01      	ldr	r2, [sp, #4]
 800a964:	f109 0301 	add.w	r3, r9, #1
 800a968:	7013      	strb	r3, [r2, #0]
 800a96a:	e73d      	b.n	800a7e8 <_dtoa_r+0x960>
 800a96c:	9b04      	ldr	r3, [sp, #16]
 800a96e:	9a08      	ldr	r2, [sp, #32]
 800a970:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a974:	4293      	cmp	r3, r2
 800a976:	d043      	beq.n	800aa00 <_dtoa_r+0xb78>
 800a978:	4651      	mov	r1, sl
 800a97a:	2300      	movs	r3, #0
 800a97c:	220a      	movs	r2, #10
 800a97e:	4620      	mov	r0, r4
 800a980:	f000 f9d6 	bl	800ad30 <__multadd>
 800a984:	45b8      	cmp	r8, r7
 800a986:	4682      	mov	sl, r0
 800a988:	f04f 0300 	mov.w	r3, #0
 800a98c:	f04f 020a 	mov.w	r2, #10
 800a990:	4641      	mov	r1, r8
 800a992:	4620      	mov	r0, r4
 800a994:	d107      	bne.n	800a9a6 <_dtoa_r+0xb1e>
 800a996:	f000 f9cb 	bl	800ad30 <__multadd>
 800a99a:	4680      	mov	r8, r0
 800a99c:	4607      	mov	r7, r0
 800a99e:	9b04      	ldr	r3, [sp, #16]
 800a9a0:	3301      	adds	r3, #1
 800a9a2:	9304      	str	r3, [sp, #16]
 800a9a4:	e775      	b.n	800a892 <_dtoa_r+0xa0a>
 800a9a6:	f000 f9c3 	bl	800ad30 <__multadd>
 800a9aa:	4639      	mov	r1, r7
 800a9ac:	4680      	mov	r8, r0
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	220a      	movs	r2, #10
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	f000 f9bc 	bl	800ad30 <__multadd>
 800a9b8:	4607      	mov	r7, r0
 800a9ba:	e7f0      	b.n	800a99e <_dtoa_r+0xb16>
 800a9bc:	9b04      	ldr	r3, [sp, #16]
 800a9be:	9301      	str	r3, [sp, #4]
 800a9c0:	9d00      	ldr	r5, [sp, #0]
 800a9c2:	4631      	mov	r1, r6
 800a9c4:	4650      	mov	r0, sl
 800a9c6:	f7ff f9d4 	bl	8009d72 <quorem>
 800a9ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a9ce:	9b00      	ldr	r3, [sp, #0]
 800a9d0:	f805 9b01 	strb.w	r9, [r5], #1
 800a9d4:	1aea      	subs	r2, r5, r3
 800a9d6:	9b01      	ldr	r3, [sp, #4]
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	dd07      	ble.n	800a9ec <_dtoa_r+0xb64>
 800a9dc:	4651      	mov	r1, sl
 800a9de:	2300      	movs	r3, #0
 800a9e0:	220a      	movs	r2, #10
 800a9e2:	4620      	mov	r0, r4
 800a9e4:	f000 f9a4 	bl	800ad30 <__multadd>
 800a9e8:	4682      	mov	sl, r0
 800a9ea:	e7ea      	b.n	800a9c2 <_dtoa_r+0xb3a>
 800a9ec:	9b01      	ldr	r3, [sp, #4]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	bfc8      	it	gt
 800a9f2:	461d      	movgt	r5, r3
 800a9f4:	9b00      	ldr	r3, [sp, #0]
 800a9f6:	bfd8      	it	le
 800a9f8:	2501      	movle	r5, #1
 800a9fa:	441d      	add	r5, r3
 800a9fc:	f04f 0800 	mov.w	r8, #0
 800aa00:	4651      	mov	r1, sl
 800aa02:	2201      	movs	r2, #1
 800aa04:	4620      	mov	r0, r4
 800aa06:	f000 fb41 	bl	800b08c <__lshift>
 800aa0a:	4631      	mov	r1, r6
 800aa0c:	4682      	mov	sl, r0
 800aa0e:	f000 fba9 	bl	800b164 <__mcmp>
 800aa12:	2800      	cmp	r0, #0
 800aa14:	dc96      	bgt.n	800a944 <_dtoa_r+0xabc>
 800aa16:	d102      	bne.n	800aa1e <_dtoa_r+0xb96>
 800aa18:	f019 0f01 	tst.w	r9, #1
 800aa1c:	d192      	bne.n	800a944 <_dtoa_r+0xabc>
 800aa1e:	462b      	mov	r3, r5
 800aa20:	461d      	mov	r5, r3
 800aa22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa26:	2a30      	cmp	r2, #48	; 0x30
 800aa28:	d0fa      	beq.n	800aa20 <_dtoa_r+0xb98>
 800aa2a:	e6dd      	b.n	800a7e8 <_dtoa_r+0x960>
 800aa2c:	9a00      	ldr	r2, [sp, #0]
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d189      	bne.n	800a946 <_dtoa_r+0xabe>
 800aa32:	f10b 0b01 	add.w	fp, fp, #1
 800aa36:	2331      	movs	r3, #49	; 0x31
 800aa38:	e796      	b.n	800a968 <_dtoa_r+0xae0>
 800aa3a:	4b0a      	ldr	r3, [pc, #40]	; (800aa64 <_dtoa_r+0xbdc>)
 800aa3c:	f7ff ba99 	b.w	8009f72 <_dtoa_r+0xea>
 800aa40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	f47f aa6d 	bne.w	8009f22 <_dtoa_r+0x9a>
 800aa48:	4b07      	ldr	r3, [pc, #28]	; (800aa68 <_dtoa_r+0xbe0>)
 800aa4a:	f7ff ba92 	b.w	8009f72 <_dtoa_r+0xea>
 800aa4e:	9b01      	ldr	r3, [sp, #4]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	dcb5      	bgt.n	800a9c0 <_dtoa_r+0xb38>
 800aa54:	9b07      	ldr	r3, [sp, #28]
 800aa56:	2b02      	cmp	r3, #2
 800aa58:	f73f aeb1 	bgt.w	800a7be <_dtoa_r+0x936>
 800aa5c:	e7b0      	b.n	800a9c0 <_dtoa_r+0xb38>
 800aa5e:	bf00      	nop
 800aa60:	0800bdd0 	.word	0x0800bdd0
 800aa64:	0800bd30 	.word	0x0800bd30
 800aa68:	0800bd54 	.word	0x0800bd54

0800aa6c <_free_r>:
 800aa6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa6e:	2900      	cmp	r1, #0
 800aa70:	d044      	beq.n	800aafc <_free_r+0x90>
 800aa72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa76:	9001      	str	r0, [sp, #4]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	f1a1 0404 	sub.w	r4, r1, #4
 800aa7e:	bfb8      	it	lt
 800aa80:	18e4      	addlt	r4, r4, r3
 800aa82:	f000 f8e7 	bl	800ac54 <__malloc_lock>
 800aa86:	4a1e      	ldr	r2, [pc, #120]	; (800ab00 <_free_r+0x94>)
 800aa88:	9801      	ldr	r0, [sp, #4]
 800aa8a:	6813      	ldr	r3, [r2, #0]
 800aa8c:	b933      	cbnz	r3, 800aa9c <_free_r+0x30>
 800aa8e:	6063      	str	r3, [r4, #4]
 800aa90:	6014      	str	r4, [r2, #0]
 800aa92:	b003      	add	sp, #12
 800aa94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa98:	f000 b8e2 	b.w	800ac60 <__malloc_unlock>
 800aa9c:	42a3      	cmp	r3, r4
 800aa9e:	d908      	bls.n	800aab2 <_free_r+0x46>
 800aaa0:	6825      	ldr	r5, [r4, #0]
 800aaa2:	1961      	adds	r1, r4, r5
 800aaa4:	428b      	cmp	r3, r1
 800aaa6:	bf01      	itttt	eq
 800aaa8:	6819      	ldreq	r1, [r3, #0]
 800aaaa:	685b      	ldreq	r3, [r3, #4]
 800aaac:	1949      	addeq	r1, r1, r5
 800aaae:	6021      	streq	r1, [r4, #0]
 800aab0:	e7ed      	b.n	800aa8e <_free_r+0x22>
 800aab2:	461a      	mov	r2, r3
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	b10b      	cbz	r3, 800aabc <_free_r+0x50>
 800aab8:	42a3      	cmp	r3, r4
 800aaba:	d9fa      	bls.n	800aab2 <_free_r+0x46>
 800aabc:	6811      	ldr	r1, [r2, #0]
 800aabe:	1855      	adds	r5, r2, r1
 800aac0:	42a5      	cmp	r5, r4
 800aac2:	d10b      	bne.n	800aadc <_free_r+0x70>
 800aac4:	6824      	ldr	r4, [r4, #0]
 800aac6:	4421      	add	r1, r4
 800aac8:	1854      	adds	r4, r2, r1
 800aaca:	42a3      	cmp	r3, r4
 800aacc:	6011      	str	r1, [r2, #0]
 800aace:	d1e0      	bne.n	800aa92 <_free_r+0x26>
 800aad0:	681c      	ldr	r4, [r3, #0]
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	6053      	str	r3, [r2, #4]
 800aad6:	440c      	add	r4, r1
 800aad8:	6014      	str	r4, [r2, #0]
 800aada:	e7da      	b.n	800aa92 <_free_r+0x26>
 800aadc:	d902      	bls.n	800aae4 <_free_r+0x78>
 800aade:	230c      	movs	r3, #12
 800aae0:	6003      	str	r3, [r0, #0]
 800aae2:	e7d6      	b.n	800aa92 <_free_r+0x26>
 800aae4:	6825      	ldr	r5, [r4, #0]
 800aae6:	1961      	adds	r1, r4, r5
 800aae8:	428b      	cmp	r3, r1
 800aaea:	bf04      	itt	eq
 800aaec:	6819      	ldreq	r1, [r3, #0]
 800aaee:	685b      	ldreq	r3, [r3, #4]
 800aaf0:	6063      	str	r3, [r4, #4]
 800aaf2:	bf04      	itt	eq
 800aaf4:	1949      	addeq	r1, r1, r5
 800aaf6:	6021      	streq	r1, [r4, #0]
 800aaf8:	6054      	str	r4, [r2, #4]
 800aafa:	e7ca      	b.n	800aa92 <_free_r+0x26>
 800aafc:	b003      	add	sp, #12
 800aafe:	bd30      	pop	{r4, r5, pc}
 800ab00:	200039cc 	.word	0x200039cc

0800ab04 <malloc>:
 800ab04:	4b02      	ldr	r3, [pc, #8]	; (800ab10 <malloc+0xc>)
 800ab06:	4601      	mov	r1, r0
 800ab08:	6818      	ldr	r0, [r3, #0]
 800ab0a:	f000 b823 	b.w	800ab54 <_malloc_r>
 800ab0e:	bf00      	nop
 800ab10:	20000068 	.word	0x20000068

0800ab14 <sbrk_aligned>:
 800ab14:	b570      	push	{r4, r5, r6, lr}
 800ab16:	4e0e      	ldr	r6, [pc, #56]	; (800ab50 <sbrk_aligned+0x3c>)
 800ab18:	460c      	mov	r4, r1
 800ab1a:	6831      	ldr	r1, [r6, #0]
 800ab1c:	4605      	mov	r5, r0
 800ab1e:	b911      	cbnz	r1, 800ab26 <sbrk_aligned+0x12>
 800ab20:	f000 fea8 	bl	800b874 <_sbrk_r>
 800ab24:	6030      	str	r0, [r6, #0]
 800ab26:	4621      	mov	r1, r4
 800ab28:	4628      	mov	r0, r5
 800ab2a:	f000 fea3 	bl	800b874 <_sbrk_r>
 800ab2e:	1c43      	adds	r3, r0, #1
 800ab30:	d00a      	beq.n	800ab48 <sbrk_aligned+0x34>
 800ab32:	1cc4      	adds	r4, r0, #3
 800ab34:	f024 0403 	bic.w	r4, r4, #3
 800ab38:	42a0      	cmp	r0, r4
 800ab3a:	d007      	beq.n	800ab4c <sbrk_aligned+0x38>
 800ab3c:	1a21      	subs	r1, r4, r0
 800ab3e:	4628      	mov	r0, r5
 800ab40:	f000 fe98 	bl	800b874 <_sbrk_r>
 800ab44:	3001      	adds	r0, #1
 800ab46:	d101      	bne.n	800ab4c <sbrk_aligned+0x38>
 800ab48:	f04f 34ff 	mov.w	r4, #4294967295
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	bd70      	pop	{r4, r5, r6, pc}
 800ab50:	200039d0 	.word	0x200039d0

0800ab54 <_malloc_r>:
 800ab54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab58:	1ccd      	adds	r5, r1, #3
 800ab5a:	f025 0503 	bic.w	r5, r5, #3
 800ab5e:	3508      	adds	r5, #8
 800ab60:	2d0c      	cmp	r5, #12
 800ab62:	bf38      	it	cc
 800ab64:	250c      	movcc	r5, #12
 800ab66:	2d00      	cmp	r5, #0
 800ab68:	4607      	mov	r7, r0
 800ab6a:	db01      	blt.n	800ab70 <_malloc_r+0x1c>
 800ab6c:	42a9      	cmp	r1, r5
 800ab6e:	d905      	bls.n	800ab7c <_malloc_r+0x28>
 800ab70:	230c      	movs	r3, #12
 800ab72:	603b      	str	r3, [r7, #0]
 800ab74:	2600      	movs	r6, #0
 800ab76:	4630      	mov	r0, r6
 800ab78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ac50 <_malloc_r+0xfc>
 800ab80:	f000 f868 	bl	800ac54 <__malloc_lock>
 800ab84:	f8d8 3000 	ldr.w	r3, [r8]
 800ab88:	461c      	mov	r4, r3
 800ab8a:	bb5c      	cbnz	r4, 800abe4 <_malloc_r+0x90>
 800ab8c:	4629      	mov	r1, r5
 800ab8e:	4638      	mov	r0, r7
 800ab90:	f7ff ffc0 	bl	800ab14 <sbrk_aligned>
 800ab94:	1c43      	adds	r3, r0, #1
 800ab96:	4604      	mov	r4, r0
 800ab98:	d155      	bne.n	800ac46 <_malloc_r+0xf2>
 800ab9a:	f8d8 4000 	ldr.w	r4, [r8]
 800ab9e:	4626      	mov	r6, r4
 800aba0:	2e00      	cmp	r6, #0
 800aba2:	d145      	bne.n	800ac30 <_malloc_r+0xdc>
 800aba4:	2c00      	cmp	r4, #0
 800aba6:	d048      	beq.n	800ac3a <_malloc_r+0xe6>
 800aba8:	6823      	ldr	r3, [r4, #0]
 800abaa:	4631      	mov	r1, r6
 800abac:	4638      	mov	r0, r7
 800abae:	eb04 0903 	add.w	r9, r4, r3
 800abb2:	f000 fe5f 	bl	800b874 <_sbrk_r>
 800abb6:	4581      	cmp	r9, r0
 800abb8:	d13f      	bne.n	800ac3a <_malloc_r+0xe6>
 800abba:	6821      	ldr	r1, [r4, #0]
 800abbc:	1a6d      	subs	r5, r5, r1
 800abbe:	4629      	mov	r1, r5
 800abc0:	4638      	mov	r0, r7
 800abc2:	f7ff ffa7 	bl	800ab14 <sbrk_aligned>
 800abc6:	3001      	adds	r0, #1
 800abc8:	d037      	beq.n	800ac3a <_malloc_r+0xe6>
 800abca:	6823      	ldr	r3, [r4, #0]
 800abcc:	442b      	add	r3, r5
 800abce:	6023      	str	r3, [r4, #0]
 800abd0:	f8d8 3000 	ldr.w	r3, [r8]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d038      	beq.n	800ac4a <_malloc_r+0xf6>
 800abd8:	685a      	ldr	r2, [r3, #4]
 800abda:	42a2      	cmp	r2, r4
 800abdc:	d12b      	bne.n	800ac36 <_malloc_r+0xe2>
 800abde:	2200      	movs	r2, #0
 800abe0:	605a      	str	r2, [r3, #4]
 800abe2:	e00f      	b.n	800ac04 <_malloc_r+0xb0>
 800abe4:	6822      	ldr	r2, [r4, #0]
 800abe6:	1b52      	subs	r2, r2, r5
 800abe8:	d41f      	bmi.n	800ac2a <_malloc_r+0xd6>
 800abea:	2a0b      	cmp	r2, #11
 800abec:	d917      	bls.n	800ac1e <_malloc_r+0xca>
 800abee:	1961      	adds	r1, r4, r5
 800abf0:	42a3      	cmp	r3, r4
 800abf2:	6025      	str	r5, [r4, #0]
 800abf4:	bf18      	it	ne
 800abf6:	6059      	strne	r1, [r3, #4]
 800abf8:	6863      	ldr	r3, [r4, #4]
 800abfa:	bf08      	it	eq
 800abfc:	f8c8 1000 	streq.w	r1, [r8]
 800ac00:	5162      	str	r2, [r4, r5]
 800ac02:	604b      	str	r3, [r1, #4]
 800ac04:	4638      	mov	r0, r7
 800ac06:	f104 060b 	add.w	r6, r4, #11
 800ac0a:	f000 f829 	bl	800ac60 <__malloc_unlock>
 800ac0e:	f026 0607 	bic.w	r6, r6, #7
 800ac12:	1d23      	adds	r3, r4, #4
 800ac14:	1af2      	subs	r2, r6, r3
 800ac16:	d0ae      	beq.n	800ab76 <_malloc_r+0x22>
 800ac18:	1b9b      	subs	r3, r3, r6
 800ac1a:	50a3      	str	r3, [r4, r2]
 800ac1c:	e7ab      	b.n	800ab76 <_malloc_r+0x22>
 800ac1e:	42a3      	cmp	r3, r4
 800ac20:	6862      	ldr	r2, [r4, #4]
 800ac22:	d1dd      	bne.n	800abe0 <_malloc_r+0x8c>
 800ac24:	f8c8 2000 	str.w	r2, [r8]
 800ac28:	e7ec      	b.n	800ac04 <_malloc_r+0xb0>
 800ac2a:	4623      	mov	r3, r4
 800ac2c:	6864      	ldr	r4, [r4, #4]
 800ac2e:	e7ac      	b.n	800ab8a <_malloc_r+0x36>
 800ac30:	4634      	mov	r4, r6
 800ac32:	6876      	ldr	r6, [r6, #4]
 800ac34:	e7b4      	b.n	800aba0 <_malloc_r+0x4c>
 800ac36:	4613      	mov	r3, r2
 800ac38:	e7cc      	b.n	800abd4 <_malloc_r+0x80>
 800ac3a:	230c      	movs	r3, #12
 800ac3c:	603b      	str	r3, [r7, #0]
 800ac3e:	4638      	mov	r0, r7
 800ac40:	f000 f80e 	bl	800ac60 <__malloc_unlock>
 800ac44:	e797      	b.n	800ab76 <_malloc_r+0x22>
 800ac46:	6025      	str	r5, [r4, #0]
 800ac48:	e7dc      	b.n	800ac04 <_malloc_r+0xb0>
 800ac4a:	605b      	str	r3, [r3, #4]
 800ac4c:	deff      	udf	#255	; 0xff
 800ac4e:	bf00      	nop
 800ac50:	200039cc 	.word	0x200039cc

0800ac54 <__malloc_lock>:
 800ac54:	4801      	ldr	r0, [pc, #4]	; (800ac5c <__malloc_lock+0x8>)
 800ac56:	f7ff b87c 	b.w	8009d52 <__retarget_lock_acquire_recursive>
 800ac5a:	bf00      	nop
 800ac5c:	200039c8 	.word	0x200039c8

0800ac60 <__malloc_unlock>:
 800ac60:	4801      	ldr	r0, [pc, #4]	; (800ac68 <__malloc_unlock+0x8>)
 800ac62:	f7ff b877 	b.w	8009d54 <__retarget_lock_release_recursive>
 800ac66:	bf00      	nop
 800ac68:	200039c8 	.word	0x200039c8

0800ac6c <_Balloc>:
 800ac6c:	b570      	push	{r4, r5, r6, lr}
 800ac6e:	69c6      	ldr	r6, [r0, #28]
 800ac70:	4604      	mov	r4, r0
 800ac72:	460d      	mov	r5, r1
 800ac74:	b976      	cbnz	r6, 800ac94 <_Balloc+0x28>
 800ac76:	2010      	movs	r0, #16
 800ac78:	f7ff ff44 	bl	800ab04 <malloc>
 800ac7c:	4602      	mov	r2, r0
 800ac7e:	61e0      	str	r0, [r4, #28]
 800ac80:	b920      	cbnz	r0, 800ac8c <_Balloc+0x20>
 800ac82:	4b18      	ldr	r3, [pc, #96]	; (800ace4 <_Balloc+0x78>)
 800ac84:	4818      	ldr	r0, [pc, #96]	; (800ace8 <_Balloc+0x7c>)
 800ac86:	216b      	movs	r1, #107	; 0x6b
 800ac88:	f000 fe04 	bl	800b894 <__assert_func>
 800ac8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac90:	6006      	str	r6, [r0, #0]
 800ac92:	60c6      	str	r6, [r0, #12]
 800ac94:	69e6      	ldr	r6, [r4, #28]
 800ac96:	68f3      	ldr	r3, [r6, #12]
 800ac98:	b183      	cbz	r3, 800acbc <_Balloc+0x50>
 800ac9a:	69e3      	ldr	r3, [r4, #28]
 800ac9c:	68db      	ldr	r3, [r3, #12]
 800ac9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aca2:	b9b8      	cbnz	r0, 800acd4 <_Balloc+0x68>
 800aca4:	2101      	movs	r1, #1
 800aca6:	fa01 f605 	lsl.w	r6, r1, r5
 800acaa:	1d72      	adds	r2, r6, #5
 800acac:	0092      	lsls	r2, r2, #2
 800acae:	4620      	mov	r0, r4
 800acb0:	f000 fe0e 	bl	800b8d0 <_calloc_r>
 800acb4:	b160      	cbz	r0, 800acd0 <_Balloc+0x64>
 800acb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800acba:	e00e      	b.n	800acda <_Balloc+0x6e>
 800acbc:	2221      	movs	r2, #33	; 0x21
 800acbe:	2104      	movs	r1, #4
 800acc0:	4620      	mov	r0, r4
 800acc2:	f000 fe05 	bl	800b8d0 <_calloc_r>
 800acc6:	69e3      	ldr	r3, [r4, #28]
 800acc8:	60f0      	str	r0, [r6, #12]
 800acca:	68db      	ldr	r3, [r3, #12]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d1e4      	bne.n	800ac9a <_Balloc+0x2e>
 800acd0:	2000      	movs	r0, #0
 800acd2:	bd70      	pop	{r4, r5, r6, pc}
 800acd4:	6802      	ldr	r2, [r0, #0]
 800acd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800acda:	2300      	movs	r3, #0
 800acdc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ace0:	e7f7      	b.n	800acd2 <_Balloc+0x66>
 800ace2:	bf00      	nop
 800ace4:	0800bd61 	.word	0x0800bd61
 800ace8:	0800bde1 	.word	0x0800bde1

0800acec <_Bfree>:
 800acec:	b570      	push	{r4, r5, r6, lr}
 800acee:	69c6      	ldr	r6, [r0, #28]
 800acf0:	4605      	mov	r5, r0
 800acf2:	460c      	mov	r4, r1
 800acf4:	b976      	cbnz	r6, 800ad14 <_Bfree+0x28>
 800acf6:	2010      	movs	r0, #16
 800acf8:	f7ff ff04 	bl	800ab04 <malloc>
 800acfc:	4602      	mov	r2, r0
 800acfe:	61e8      	str	r0, [r5, #28]
 800ad00:	b920      	cbnz	r0, 800ad0c <_Bfree+0x20>
 800ad02:	4b09      	ldr	r3, [pc, #36]	; (800ad28 <_Bfree+0x3c>)
 800ad04:	4809      	ldr	r0, [pc, #36]	; (800ad2c <_Bfree+0x40>)
 800ad06:	218f      	movs	r1, #143	; 0x8f
 800ad08:	f000 fdc4 	bl	800b894 <__assert_func>
 800ad0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad10:	6006      	str	r6, [r0, #0]
 800ad12:	60c6      	str	r6, [r0, #12]
 800ad14:	b13c      	cbz	r4, 800ad26 <_Bfree+0x3a>
 800ad16:	69eb      	ldr	r3, [r5, #28]
 800ad18:	6862      	ldr	r2, [r4, #4]
 800ad1a:	68db      	ldr	r3, [r3, #12]
 800ad1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad20:	6021      	str	r1, [r4, #0]
 800ad22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ad26:	bd70      	pop	{r4, r5, r6, pc}
 800ad28:	0800bd61 	.word	0x0800bd61
 800ad2c:	0800bde1 	.word	0x0800bde1

0800ad30 <__multadd>:
 800ad30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad34:	690d      	ldr	r5, [r1, #16]
 800ad36:	4607      	mov	r7, r0
 800ad38:	460c      	mov	r4, r1
 800ad3a:	461e      	mov	r6, r3
 800ad3c:	f101 0c14 	add.w	ip, r1, #20
 800ad40:	2000      	movs	r0, #0
 800ad42:	f8dc 3000 	ldr.w	r3, [ip]
 800ad46:	b299      	uxth	r1, r3
 800ad48:	fb02 6101 	mla	r1, r2, r1, r6
 800ad4c:	0c1e      	lsrs	r6, r3, #16
 800ad4e:	0c0b      	lsrs	r3, r1, #16
 800ad50:	fb02 3306 	mla	r3, r2, r6, r3
 800ad54:	b289      	uxth	r1, r1
 800ad56:	3001      	adds	r0, #1
 800ad58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ad5c:	4285      	cmp	r5, r0
 800ad5e:	f84c 1b04 	str.w	r1, [ip], #4
 800ad62:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ad66:	dcec      	bgt.n	800ad42 <__multadd+0x12>
 800ad68:	b30e      	cbz	r6, 800adae <__multadd+0x7e>
 800ad6a:	68a3      	ldr	r3, [r4, #8]
 800ad6c:	42ab      	cmp	r3, r5
 800ad6e:	dc19      	bgt.n	800ada4 <__multadd+0x74>
 800ad70:	6861      	ldr	r1, [r4, #4]
 800ad72:	4638      	mov	r0, r7
 800ad74:	3101      	adds	r1, #1
 800ad76:	f7ff ff79 	bl	800ac6c <_Balloc>
 800ad7a:	4680      	mov	r8, r0
 800ad7c:	b928      	cbnz	r0, 800ad8a <__multadd+0x5a>
 800ad7e:	4602      	mov	r2, r0
 800ad80:	4b0c      	ldr	r3, [pc, #48]	; (800adb4 <__multadd+0x84>)
 800ad82:	480d      	ldr	r0, [pc, #52]	; (800adb8 <__multadd+0x88>)
 800ad84:	21ba      	movs	r1, #186	; 0xba
 800ad86:	f000 fd85 	bl	800b894 <__assert_func>
 800ad8a:	6922      	ldr	r2, [r4, #16]
 800ad8c:	3202      	adds	r2, #2
 800ad8e:	f104 010c 	add.w	r1, r4, #12
 800ad92:	0092      	lsls	r2, r2, #2
 800ad94:	300c      	adds	r0, #12
 800ad96:	f7fe ffde 	bl	8009d56 <memcpy>
 800ad9a:	4621      	mov	r1, r4
 800ad9c:	4638      	mov	r0, r7
 800ad9e:	f7ff ffa5 	bl	800acec <_Bfree>
 800ada2:	4644      	mov	r4, r8
 800ada4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ada8:	3501      	adds	r5, #1
 800adaa:	615e      	str	r6, [r3, #20]
 800adac:	6125      	str	r5, [r4, #16]
 800adae:	4620      	mov	r0, r4
 800adb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adb4:	0800bdd0 	.word	0x0800bdd0
 800adb8:	0800bde1 	.word	0x0800bde1

0800adbc <__hi0bits>:
 800adbc:	0c03      	lsrs	r3, r0, #16
 800adbe:	041b      	lsls	r3, r3, #16
 800adc0:	b9d3      	cbnz	r3, 800adf8 <__hi0bits+0x3c>
 800adc2:	0400      	lsls	r0, r0, #16
 800adc4:	2310      	movs	r3, #16
 800adc6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800adca:	bf04      	itt	eq
 800adcc:	0200      	lsleq	r0, r0, #8
 800adce:	3308      	addeq	r3, #8
 800add0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800add4:	bf04      	itt	eq
 800add6:	0100      	lsleq	r0, r0, #4
 800add8:	3304      	addeq	r3, #4
 800adda:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800adde:	bf04      	itt	eq
 800ade0:	0080      	lsleq	r0, r0, #2
 800ade2:	3302      	addeq	r3, #2
 800ade4:	2800      	cmp	r0, #0
 800ade6:	db05      	blt.n	800adf4 <__hi0bits+0x38>
 800ade8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800adec:	f103 0301 	add.w	r3, r3, #1
 800adf0:	bf08      	it	eq
 800adf2:	2320      	moveq	r3, #32
 800adf4:	4618      	mov	r0, r3
 800adf6:	4770      	bx	lr
 800adf8:	2300      	movs	r3, #0
 800adfa:	e7e4      	b.n	800adc6 <__hi0bits+0xa>

0800adfc <__lo0bits>:
 800adfc:	6803      	ldr	r3, [r0, #0]
 800adfe:	f013 0207 	ands.w	r2, r3, #7
 800ae02:	d00c      	beq.n	800ae1e <__lo0bits+0x22>
 800ae04:	07d9      	lsls	r1, r3, #31
 800ae06:	d422      	bmi.n	800ae4e <__lo0bits+0x52>
 800ae08:	079a      	lsls	r2, r3, #30
 800ae0a:	bf49      	itett	mi
 800ae0c:	085b      	lsrmi	r3, r3, #1
 800ae0e:	089b      	lsrpl	r3, r3, #2
 800ae10:	6003      	strmi	r3, [r0, #0]
 800ae12:	2201      	movmi	r2, #1
 800ae14:	bf5c      	itt	pl
 800ae16:	6003      	strpl	r3, [r0, #0]
 800ae18:	2202      	movpl	r2, #2
 800ae1a:	4610      	mov	r0, r2
 800ae1c:	4770      	bx	lr
 800ae1e:	b299      	uxth	r1, r3
 800ae20:	b909      	cbnz	r1, 800ae26 <__lo0bits+0x2a>
 800ae22:	0c1b      	lsrs	r3, r3, #16
 800ae24:	2210      	movs	r2, #16
 800ae26:	b2d9      	uxtb	r1, r3
 800ae28:	b909      	cbnz	r1, 800ae2e <__lo0bits+0x32>
 800ae2a:	3208      	adds	r2, #8
 800ae2c:	0a1b      	lsrs	r3, r3, #8
 800ae2e:	0719      	lsls	r1, r3, #28
 800ae30:	bf04      	itt	eq
 800ae32:	091b      	lsreq	r3, r3, #4
 800ae34:	3204      	addeq	r2, #4
 800ae36:	0799      	lsls	r1, r3, #30
 800ae38:	bf04      	itt	eq
 800ae3a:	089b      	lsreq	r3, r3, #2
 800ae3c:	3202      	addeq	r2, #2
 800ae3e:	07d9      	lsls	r1, r3, #31
 800ae40:	d403      	bmi.n	800ae4a <__lo0bits+0x4e>
 800ae42:	085b      	lsrs	r3, r3, #1
 800ae44:	f102 0201 	add.w	r2, r2, #1
 800ae48:	d003      	beq.n	800ae52 <__lo0bits+0x56>
 800ae4a:	6003      	str	r3, [r0, #0]
 800ae4c:	e7e5      	b.n	800ae1a <__lo0bits+0x1e>
 800ae4e:	2200      	movs	r2, #0
 800ae50:	e7e3      	b.n	800ae1a <__lo0bits+0x1e>
 800ae52:	2220      	movs	r2, #32
 800ae54:	e7e1      	b.n	800ae1a <__lo0bits+0x1e>
	...

0800ae58 <__i2b>:
 800ae58:	b510      	push	{r4, lr}
 800ae5a:	460c      	mov	r4, r1
 800ae5c:	2101      	movs	r1, #1
 800ae5e:	f7ff ff05 	bl	800ac6c <_Balloc>
 800ae62:	4602      	mov	r2, r0
 800ae64:	b928      	cbnz	r0, 800ae72 <__i2b+0x1a>
 800ae66:	4b05      	ldr	r3, [pc, #20]	; (800ae7c <__i2b+0x24>)
 800ae68:	4805      	ldr	r0, [pc, #20]	; (800ae80 <__i2b+0x28>)
 800ae6a:	f240 1145 	movw	r1, #325	; 0x145
 800ae6e:	f000 fd11 	bl	800b894 <__assert_func>
 800ae72:	2301      	movs	r3, #1
 800ae74:	6144      	str	r4, [r0, #20]
 800ae76:	6103      	str	r3, [r0, #16]
 800ae78:	bd10      	pop	{r4, pc}
 800ae7a:	bf00      	nop
 800ae7c:	0800bdd0 	.word	0x0800bdd0
 800ae80:	0800bde1 	.word	0x0800bde1

0800ae84 <__multiply>:
 800ae84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae88:	4691      	mov	r9, r2
 800ae8a:	690a      	ldr	r2, [r1, #16]
 800ae8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ae90:	429a      	cmp	r2, r3
 800ae92:	bfb8      	it	lt
 800ae94:	460b      	movlt	r3, r1
 800ae96:	460c      	mov	r4, r1
 800ae98:	bfbc      	itt	lt
 800ae9a:	464c      	movlt	r4, r9
 800ae9c:	4699      	movlt	r9, r3
 800ae9e:	6927      	ldr	r7, [r4, #16]
 800aea0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aea4:	68a3      	ldr	r3, [r4, #8]
 800aea6:	6861      	ldr	r1, [r4, #4]
 800aea8:	eb07 060a 	add.w	r6, r7, sl
 800aeac:	42b3      	cmp	r3, r6
 800aeae:	b085      	sub	sp, #20
 800aeb0:	bfb8      	it	lt
 800aeb2:	3101      	addlt	r1, #1
 800aeb4:	f7ff feda 	bl	800ac6c <_Balloc>
 800aeb8:	b930      	cbnz	r0, 800aec8 <__multiply+0x44>
 800aeba:	4602      	mov	r2, r0
 800aebc:	4b44      	ldr	r3, [pc, #272]	; (800afd0 <__multiply+0x14c>)
 800aebe:	4845      	ldr	r0, [pc, #276]	; (800afd4 <__multiply+0x150>)
 800aec0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800aec4:	f000 fce6 	bl	800b894 <__assert_func>
 800aec8:	f100 0514 	add.w	r5, r0, #20
 800aecc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aed0:	462b      	mov	r3, r5
 800aed2:	2200      	movs	r2, #0
 800aed4:	4543      	cmp	r3, r8
 800aed6:	d321      	bcc.n	800af1c <__multiply+0x98>
 800aed8:	f104 0314 	add.w	r3, r4, #20
 800aedc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aee0:	f109 0314 	add.w	r3, r9, #20
 800aee4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aee8:	9202      	str	r2, [sp, #8]
 800aeea:	1b3a      	subs	r2, r7, r4
 800aeec:	3a15      	subs	r2, #21
 800aeee:	f022 0203 	bic.w	r2, r2, #3
 800aef2:	3204      	adds	r2, #4
 800aef4:	f104 0115 	add.w	r1, r4, #21
 800aef8:	428f      	cmp	r7, r1
 800aefa:	bf38      	it	cc
 800aefc:	2204      	movcc	r2, #4
 800aefe:	9201      	str	r2, [sp, #4]
 800af00:	9a02      	ldr	r2, [sp, #8]
 800af02:	9303      	str	r3, [sp, #12]
 800af04:	429a      	cmp	r2, r3
 800af06:	d80c      	bhi.n	800af22 <__multiply+0x9e>
 800af08:	2e00      	cmp	r6, #0
 800af0a:	dd03      	ble.n	800af14 <__multiply+0x90>
 800af0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800af10:	2b00      	cmp	r3, #0
 800af12:	d05b      	beq.n	800afcc <__multiply+0x148>
 800af14:	6106      	str	r6, [r0, #16]
 800af16:	b005      	add	sp, #20
 800af18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af1c:	f843 2b04 	str.w	r2, [r3], #4
 800af20:	e7d8      	b.n	800aed4 <__multiply+0x50>
 800af22:	f8b3 a000 	ldrh.w	sl, [r3]
 800af26:	f1ba 0f00 	cmp.w	sl, #0
 800af2a:	d024      	beq.n	800af76 <__multiply+0xf2>
 800af2c:	f104 0e14 	add.w	lr, r4, #20
 800af30:	46a9      	mov	r9, r5
 800af32:	f04f 0c00 	mov.w	ip, #0
 800af36:	f85e 2b04 	ldr.w	r2, [lr], #4
 800af3a:	f8d9 1000 	ldr.w	r1, [r9]
 800af3e:	fa1f fb82 	uxth.w	fp, r2
 800af42:	b289      	uxth	r1, r1
 800af44:	fb0a 110b 	mla	r1, sl, fp, r1
 800af48:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800af4c:	f8d9 2000 	ldr.w	r2, [r9]
 800af50:	4461      	add	r1, ip
 800af52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800af56:	fb0a c20b 	mla	r2, sl, fp, ip
 800af5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800af5e:	b289      	uxth	r1, r1
 800af60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800af64:	4577      	cmp	r7, lr
 800af66:	f849 1b04 	str.w	r1, [r9], #4
 800af6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800af6e:	d8e2      	bhi.n	800af36 <__multiply+0xb2>
 800af70:	9a01      	ldr	r2, [sp, #4]
 800af72:	f845 c002 	str.w	ip, [r5, r2]
 800af76:	9a03      	ldr	r2, [sp, #12]
 800af78:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800af7c:	3304      	adds	r3, #4
 800af7e:	f1b9 0f00 	cmp.w	r9, #0
 800af82:	d021      	beq.n	800afc8 <__multiply+0x144>
 800af84:	6829      	ldr	r1, [r5, #0]
 800af86:	f104 0c14 	add.w	ip, r4, #20
 800af8a:	46ae      	mov	lr, r5
 800af8c:	f04f 0a00 	mov.w	sl, #0
 800af90:	f8bc b000 	ldrh.w	fp, [ip]
 800af94:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800af98:	fb09 220b 	mla	r2, r9, fp, r2
 800af9c:	4452      	add	r2, sl
 800af9e:	b289      	uxth	r1, r1
 800afa0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800afa4:	f84e 1b04 	str.w	r1, [lr], #4
 800afa8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800afac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800afb0:	f8be 1000 	ldrh.w	r1, [lr]
 800afb4:	fb09 110a 	mla	r1, r9, sl, r1
 800afb8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800afbc:	4567      	cmp	r7, ip
 800afbe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800afc2:	d8e5      	bhi.n	800af90 <__multiply+0x10c>
 800afc4:	9a01      	ldr	r2, [sp, #4]
 800afc6:	50a9      	str	r1, [r5, r2]
 800afc8:	3504      	adds	r5, #4
 800afca:	e799      	b.n	800af00 <__multiply+0x7c>
 800afcc:	3e01      	subs	r6, #1
 800afce:	e79b      	b.n	800af08 <__multiply+0x84>
 800afd0:	0800bdd0 	.word	0x0800bdd0
 800afd4:	0800bde1 	.word	0x0800bde1

0800afd8 <__pow5mult>:
 800afd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afdc:	4615      	mov	r5, r2
 800afde:	f012 0203 	ands.w	r2, r2, #3
 800afe2:	4606      	mov	r6, r0
 800afe4:	460f      	mov	r7, r1
 800afe6:	d007      	beq.n	800aff8 <__pow5mult+0x20>
 800afe8:	4c25      	ldr	r4, [pc, #148]	; (800b080 <__pow5mult+0xa8>)
 800afea:	3a01      	subs	r2, #1
 800afec:	2300      	movs	r3, #0
 800afee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aff2:	f7ff fe9d 	bl	800ad30 <__multadd>
 800aff6:	4607      	mov	r7, r0
 800aff8:	10ad      	asrs	r5, r5, #2
 800affa:	d03d      	beq.n	800b078 <__pow5mult+0xa0>
 800affc:	69f4      	ldr	r4, [r6, #28]
 800affe:	b97c      	cbnz	r4, 800b020 <__pow5mult+0x48>
 800b000:	2010      	movs	r0, #16
 800b002:	f7ff fd7f 	bl	800ab04 <malloc>
 800b006:	4602      	mov	r2, r0
 800b008:	61f0      	str	r0, [r6, #28]
 800b00a:	b928      	cbnz	r0, 800b018 <__pow5mult+0x40>
 800b00c:	4b1d      	ldr	r3, [pc, #116]	; (800b084 <__pow5mult+0xac>)
 800b00e:	481e      	ldr	r0, [pc, #120]	; (800b088 <__pow5mult+0xb0>)
 800b010:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b014:	f000 fc3e 	bl	800b894 <__assert_func>
 800b018:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b01c:	6004      	str	r4, [r0, #0]
 800b01e:	60c4      	str	r4, [r0, #12]
 800b020:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b024:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b028:	b94c      	cbnz	r4, 800b03e <__pow5mult+0x66>
 800b02a:	f240 2171 	movw	r1, #625	; 0x271
 800b02e:	4630      	mov	r0, r6
 800b030:	f7ff ff12 	bl	800ae58 <__i2b>
 800b034:	2300      	movs	r3, #0
 800b036:	f8c8 0008 	str.w	r0, [r8, #8]
 800b03a:	4604      	mov	r4, r0
 800b03c:	6003      	str	r3, [r0, #0]
 800b03e:	f04f 0900 	mov.w	r9, #0
 800b042:	07eb      	lsls	r3, r5, #31
 800b044:	d50a      	bpl.n	800b05c <__pow5mult+0x84>
 800b046:	4639      	mov	r1, r7
 800b048:	4622      	mov	r2, r4
 800b04a:	4630      	mov	r0, r6
 800b04c:	f7ff ff1a 	bl	800ae84 <__multiply>
 800b050:	4639      	mov	r1, r7
 800b052:	4680      	mov	r8, r0
 800b054:	4630      	mov	r0, r6
 800b056:	f7ff fe49 	bl	800acec <_Bfree>
 800b05a:	4647      	mov	r7, r8
 800b05c:	106d      	asrs	r5, r5, #1
 800b05e:	d00b      	beq.n	800b078 <__pow5mult+0xa0>
 800b060:	6820      	ldr	r0, [r4, #0]
 800b062:	b938      	cbnz	r0, 800b074 <__pow5mult+0x9c>
 800b064:	4622      	mov	r2, r4
 800b066:	4621      	mov	r1, r4
 800b068:	4630      	mov	r0, r6
 800b06a:	f7ff ff0b 	bl	800ae84 <__multiply>
 800b06e:	6020      	str	r0, [r4, #0]
 800b070:	f8c0 9000 	str.w	r9, [r0]
 800b074:	4604      	mov	r4, r0
 800b076:	e7e4      	b.n	800b042 <__pow5mult+0x6a>
 800b078:	4638      	mov	r0, r7
 800b07a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b07e:	bf00      	nop
 800b080:	0800bf30 	.word	0x0800bf30
 800b084:	0800bd61 	.word	0x0800bd61
 800b088:	0800bde1 	.word	0x0800bde1

0800b08c <__lshift>:
 800b08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b090:	460c      	mov	r4, r1
 800b092:	6849      	ldr	r1, [r1, #4]
 800b094:	6923      	ldr	r3, [r4, #16]
 800b096:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b09a:	68a3      	ldr	r3, [r4, #8]
 800b09c:	4607      	mov	r7, r0
 800b09e:	4691      	mov	r9, r2
 800b0a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b0a4:	f108 0601 	add.w	r6, r8, #1
 800b0a8:	42b3      	cmp	r3, r6
 800b0aa:	db0b      	blt.n	800b0c4 <__lshift+0x38>
 800b0ac:	4638      	mov	r0, r7
 800b0ae:	f7ff fddd 	bl	800ac6c <_Balloc>
 800b0b2:	4605      	mov	r5, r0
 800b0b4:	b948      	cbnz	r0, 800b0ca <__lshift+0x3e>
 800b0b6:	4602      	mov	r2, r0
 800b0b8:	4b28      	ldr	r3, [pc, #160]	; (800b15c <__lshift+0xd0>)
 800b0ba:	4829      	ldr	r0, [pc, #164]	; (800b160 <__lshift+0xd4>)
 800b0bc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b0c0:	f000 fbe8 	bl	800b894 <__assert_func>
 800b0c4:	3101      	adds	r1, #1
 800b0c6:	005b      	lsls	r3, r3, #1
 800b0c8:	e7ee      	b.n	800b0a8 <__lshift+0x1c>
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	f100 0114 	add.w	r1, r0, #20
 800b0d0:	f100 0210 	add.w	r2, r0, #16
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	4553      	cmp	r3, sl
 800b0d8:	db33      	blt.n	800b142 <__lshift+0xb6>
 800b0da:	6920      	ldr	r0, [r4, #16]
 800b0dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b0e0:	f104 0314 	add.w	r3, r4, #20
 800b0e4:	f019 091f 	ands.w	r9, r9, #31
 800b0e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b0ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b0f0:	d02b      	beq.n	800b14a <__lshift+0xbe>
 800b0f2:	f1c9 0e20 	rsb	lr, r9, #32
 800b0f6:	468a      	mov	sl, r1
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	6818      	ldr	r0, [r3, #0]
 800b0fc:	fa00 f009 	lsl.w	r0, r0, r9
 800b100:	4310      	orrs	r0, r2
 800b102:	f84a 0b04 	str.w	r0, [sl], #4
 800b106:	f853 2b04 	ldr.w	r2, [r3], #4
 800b10a:	459c      	cmp	ip, r3
 800b10c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b110:	d8f3      	bhi.n	800b0fa <__lshift+0x6e>
 800b112:	ebac 0304 	sub.w	r3, ip, r4
 800b116:	3b15      	subs	r3, #21
 800b118:	f023 0303 	bic.w	r3, r3, #3
 800b11c:	3304      	adds	r3, #4
 800b11e:	f104 0015 	add.w	r0, r4, #21
 800b122:	4584      	cmp	ip, r0
 800b124:	bf38      	it	cc
 800b126:	2304      	movcc	r3, #4
 800b128:	50ca      	str	r2, [r1, r3]
 800b12a:	b10a      	cbz	r2, 800b130 <__lshift+0xa4>
 800b12c:	f108 0602 	add.w	r6, r8, #2
 800b130:	3e01      	subs	r6, #1
 800b132:	4638      	mov	r0, r7
 800b134:	612e      	str	r6, [r5, #16]
 800b136:	4621      	mov	r1, r4
 800b138:	f7ff fdd8 	bl	800acec <_Bfree>
 800b13c:	4628      	mov	r0, r5
 800b13e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b142:	f842 0f04 	str.w	r0, [r2, #4]!
 800b146:	3301      	adds	r3, #1
 800b148:	e7c5      	b.n	800b0d6 <__lshift+0x4a>
 800b14a:	3904      	subs	r1, #4
 800b14c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b150:	f841 2f04 	str.w	r2, [r1, #4]!
 800b154:	459c      	cmp	ip, r3
 800b156:	d8f9      	bhi.n	800b14c <__lshift+0xc0>
 800b158:	e7ea      	b.n	800b130 <__lshift+0xa4>
 800b15a:	bf00      	nop
 800b15c:	0800bdd0 	.word	0x0800bdd0
 800b160:	0800bde1 	.word	0x0800bde1

0800b164 <__mcmp>:
 800b164:	b530      	push	{r4, r5, lr}
 800b166:	6902      	ldr	r2, [r0, #16]
 800b168:	690c      	ldr	r4, [r1, #16]
 800b16a:	1b12      	subs	r2, r2, r4
 800b16c:	d10e      	bne.n	800b18c <__mcmp+0x28>
 800b16e:	f100 0314 	add.w	r3, r0, #20
 800b172:	3114      	adds	r1, #20
 800b174:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b178:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b17c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b180:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b184:	42a5      	cmp	r5, r4
 800b186:	d003      	beq.n	800b190 <__mcmp+0x2c>
 800b188:	d305      	bcc.n	800b196 <__mcmp+0x32>
 800b18a:	2201      	movs	r2, #1
 800b18c:	4610      	mov	r0, r2
 800b18e:	bd30      	pop	{r4, r5, pc}
 800b190:	4283      	cmp	r3, r0
 800b192:	d3f3      	bcc.n	800b17c <__mcmp+0x18>
 800b194:	e7fa      	b.n	800b18c <__mcmp+0x28>
 800b196:	f04f 32ff 	mov.w	r2, #4294967295
 800b19a:	e7f7      	b.n	800b18c <__mcmp+0x28>

0800b19c <__mdiff>:
 800b19c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a0:	460c      	mov	r4, r1
 800b1a2:	4606      	mov	r6, r0
 800b1a4:	4611      	mov	r1, r2
 800b1a6:	4620      	mov	r0, r4
 800b1a8:	4690      	mov	r8, r2
 800b1aa:	f7ff ffdb 	bl	800b164 <__mcmp>
 800b1ae:	1e05      	subs	r5, r0, #0
 800b1b0:	d110      	bne.n	800b1d4 <__mdiff+0x38>
 800b1b2:	4629      	mov	r1, r5
 800b1b4:	4630      	mov	r0, r6
 800b1b6:	f7ff fd59 	bl	800ac6c <_Balloc>
 800b1ba:	b930      	cbnz	r0, 800b1ca <__mdiff+0x2e>
 800b1bc:	4b3a      	ldr	r3, [pc, #232]	; (800b2a8 <__mdiff+0x10c>)
 800b1be:	4602      	mov	r2, r0
 800b1c0:	f240 2137 	movw	r1, #567	; 0x237
 800b1c4:	4839      	ldr	r0, [pc, #228]	; (800b2ac <__mdiff+0x110>)
 800b1c6:	f000 fb65 	bl	800b894 <__assert_func>
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b1d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1d4:	bfa4      	itt	ge
 800b1d6:	4643      	movge	r3, r8
 800b1d8:	46a0      	movge	r8, r4
 800b1da:	4630      	mov	r0, r6
 800b1dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b1e0:	bfa6      	itte	ge
 800b1e2:	461c      	movge	r4, r3
 800b1e4:	2500      	movge	r5, #0
 800b1e6:	2501      	movlt	r5, #1
 800b1e8:	f7ff fd40 	bl	800ac6c <_Balloc>
 800b1ec:	b920      	cbnz	r0, 800b1f8 <__mdiff+0x5c>
 800b1ee:	4b2e      	ldr	r3, [pc, #184]	; (800b2a8 <__mdiff+0x10c>)
 800b1f0:	4602      	mov	r2, r0
 800b1f2:	f240 2145 	movw	r1, #581	; 0x245
 800b1f6:	e7e5      	b.n	800b1c4 <__mdiff+0x28>
 800b1f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b1fc:	6926      	ldr	r6, [r4, #16]
 800b1fe:	60c5      	str	r5, [r0, #12]
 800b200:	f104 0914 	add.w	r9, r4, #20
 800b204:	f108 0514 	add.w	r5, r8, #20
 800b208:	f100 0e14 	add.w	lr, r0, #20
 800b20c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b210:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b214:	f108 0210 	add.w	r2, r8, #16
 800b218:	46f2      	mov	sl, lr
 800b21a:	2100      	movs	r1, #0
 800b21c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b220:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b224:	fa11 f88b 	uxtah	r8, r1, fp
 800b228:	b299      	uxth	r1, r3
 800b22a:	0c1b      	lsrs	r3, r3, #16
 800b22c:	eba8 0801 	sub.w	r8, r8, r1
 800b230:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b234:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b238:	fa1f f888 	uxth.w	r8, r8
 800b23c:	1419      	asrs	r1, r3, #16
 800b23e:	454e      	cmp	r6, r9
 800b240:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b244:	f84a 3b04 	str.w	r3, [sl], #4
 800b248:	d8e8      	bhi.n	800b21c <__mdiff+0x80>
 800b24a:	1b33      	subs	r3, r6, r4
 800b24c:	3b15      	subs	r3, #21
 800b24e:	f023 0303 	bic.w	r3, r3, #3
 800b252:	3304      	adds	r3, #4
 800b254:	3415      	adds	r4, #21
 800b256:	42a6      	cmp	r6, r4
 800b258:	bf38      	it	cc
 800b25a:	2304      	movcc	r3, #4
 800b25c:	441d      	add	r5, r3
 800b25e:	4473      	add	r3, lr
 800b260:	469e      	mov	lr, r3
 800b262:	462e      	mov	r6, r5
 800b264:	4566      	cmp	r6, ip
 800b266:	d30e      	bcc.n	800b286 <__mdiff+0xea>
 800b268:	f10c 0203 	add.w	r2, ip, #3
 800b26c:	1b52      	subs	r2, r2, r5
 800b26e:	f022 0203 	bic.w	r2, r2, #3
 800b272:	3d03      	subs	r5, #3
 800b274:	45ac      	cmp	ip, r5
 800b276:	bf38      	it	cc
 800b278:	2200      	movcc	r2, #0
 800b27a:	4413      	add	r3, r2
 800b27c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b280:	b17a      	cbz	r2, 800b2a2 <__mdiff+0x106>
 800b282:	6107      	str	r7, [r0, #16]
 800b284:	e7a4      	b.n	800b1d0 <__mdiff+0x34>
 800b286:	f856 8b04 	ldr.w	r8, [r6], #4
 800b28a:	fa11 f288 	uxtah	r2, r1, r8
 800b28e:	1414      	asrs	r4, r2, #16
 800b290:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b294:	b292      	uxth	r2, r2
 800b296:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b29a:	f84e 2b04 	str.w	r2, [lr], #4
 800b29e:	1421      	asrs	r1, r4, #16
 800b2a0:	e7e0      	b.n	800b264 <__mdiff+0xc8>
 800b2a2:	3f01      	subs	r7, #1
 800b2a4:	e7ea      	b.n	800b27c <__mdiff+0xe0>
 800b2a6:	bf00      	nop
 800b2a8:	0800bdd0 	.word	0x0800bdd0
 800b2ac:	0800bde1 	.word	0x0800bde1

0800b2b0 <__d2b>:
 800b2b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b2b4:	460f      	mov	r7, r1
 800b2b6:	2101      	movs	r1, #1
 800b2b8:	ec59 8b10 	vmov	r8, r9, d0
 800b2bc:	4616      	mov	r6, r2
 800b2be:	f7ff fcd5 	bl	800ac6c <_Balloc>
 800b2c2:	4604      	mov	r4, r0
 800b2c4:	b930      	cbnz	r0, 800b2d4 <__d2b+0x24>
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	4b24      	ldr	r3, [pc, #144]	; (800b35c <__d2b+0xac>)
 800b2ca:	4825      	ldr	r0, [pc, #148]	; (800b360 <__d2b+0xb0>)
 800b2cc:	f240 310f 	movw	r1, #783	; 0x30f
 800b2d0:	f000 fae0 	bl	800b894 <__assert_func>
 800b2d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b2d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b2dc:	bb2d      	cbnz	r5, 800b32a <__d2b+0x7a>
 800b2de:	9301      	str	r3, [sp, #4]
 800b2e0:	f1b8 0300 	subs.w	r3, r8, #0
 800b2e4:	d026      	beq.n	800b334 <__d2b+0x84>
 800b2e6:	4668      	mov	r0, sp
 800b2e8:	9300      	str	r3, [sp, #0]
 800b2ea:	f7ff fd87 	bl	800adfc <__lo0bits>
 800b2ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b2f2:	b1e8      	cbz	r0, 800b330 <__d2b+0x80>
 800b2f4:	f1c0 0320 	rsb	r3, r0, #32
 800b2f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b2fc:	430b      	orrs	r3, r1
 800b2fe:	40c2      	lsrs	r2, r0
 800b300:	6163      	str	r3, [r4, #20]
 800b302:	9201      	str	r2, [sp, #4]
 800b304:	9b01      	ldr	r3, [sp, #4]
 800b306:	61a3      	str	r3, [r4, #24]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	bf14      	ite	ne
 800b30c:	2202      	movne	r2, #2
 800b30e:	2201      	moveq	r2, #1
 800b310:	6122      	str	r2, [r4, #16]
 800b312:	b1bd      	cbz	r5, 800b344 <__d2b+0x94>
 800b314:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b318:	4405      	add	r5, r0
 800b31a:	603d      	str	r5, [r7, #0]
 800b31c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b320:	6030      	str	r0, [r6, #0]
 800b322:	4620      	mov	r0, r4
 800b324:	b003      	add	sp, #12
 800b326:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b32a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b32e:	e7d6      	b.n	800b2de <__d2b+0x2e>
 800b330:	6161      	str	r1, [r4, #20]
 800b332:	e7e7      	b.n	800b304 <__d2b+0x54>
 800b334:	a801      	add	r0, sp, #4
 800b336:	f7ff fd61 	bl	800adfc <__lo0bits>
 800b33a:	9b01      	ldr	r3, [sp, #4]
 800b33c:	6163      	str	r3, [r4, #20]
 800b33e:	3020      	adds	r0, #32
 800b340:	2201      	movs	r2, #1
 800b342:	e7e5      	b.n	800b310 <__d2b+0x60>
 800b344:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b348:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b34c:	6038      	str	r0, [r7, #0]
 800b34e:	6918      	ldr	r0, [r3, #16]
 800b350:	f7ff fd34 	bl	800adbc <__hi0bits>
 800b354:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b358:	e7e2      	b.n	800b320 <__d2b+0x70>
 800b35a:	bf00      	nop
 800b35c:	0800bdd0 	.word	0x0800bdd0
 800b360:	0800bde1 	.word	0x0800bde1

0800b364 <__sfputc_r>:
 800b364:	6893      	ldr	r3, [r2, #8]
 800b366:	3b01      	subs	r3, #1
 800b368:	2b00      	cmp	r3, #0
 800b36a:	b410      	push	{r4}
 800b36c:	6093      	str	r3, [r2, #8]
 800b36e:	da08      	bge.n	800b382 <__sfputc_r+0x1e>
 800b370:	6994      	ldr	r4, [r2, #24]
 800b372:	42a3      	cmp	r3, r4
 800b374:	db01      	blt.n	800b37a <__sfputc_r+0x16>
 800b376:	290a      	cmp	r1, #10
 800b378:	d103      	bne.n	800b382 <__sfputc_r+0x1e>
 800b37a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b37e:	f000 b9e3 	b.w	800b748 <__swbuf_r>
 800b382:	6813      	ldr	r3, [r2, #0]
 800b384:	1c58      	adds	r0, r3, #1
 800b386:	6010      	str	r0, [r2, #0]
 800b388:	7019      	strb	r1, [r3, #0]
 800b38a:	4608      	mov	r0, r1
 800b38c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b390:	4770      	bx	lr

0800b392 <__sfputs_r>:
 800b392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b394:	4606      	mov	r6, r0
 800b396:	460f      	mov	r7, r1
 800b398:	4614      	mov	r4, r2
 800b39a:	18d5      	adds	r5, r2, r3
 800b39c:	42ac      	cmp	r4, r5
 800b39e:	d101      	bne.n	800b3a4 <__sfputs_r+0x12>
 800b3a0:	2000      	movs	r0, #0
 800b3a2:	e007      	b.n	800b3b4 <__sfputs_r+0x22>
 800b3a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3a8:	463a      	mov	r2, r7
 800b3aa:	4630      	mov	r0, r6
 800b3ac:	f7ff ffda 	bl	800b364 <__sfputc_r>
 800b3b0:	1c43      	adds	r3, r0, #1
 800b3b2:	d1f3      	bne.n	800b39c <__sfputs_r+0xa>
 800b3b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b3b8 <_vfiprintf_r>:
 800b3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3bc:	460d      	mov	r5, r1
 800b3be:	b09d      	sub	sp, #116	; 0x74
 800b3c0:	4614      	mov	r4, r2
 800b3c2:	4698      	mov	r8, r3
 800b3c4:	4606      	mov	r6, r0
 800b3c6:	b118      	cbz	r0, 800b3d0 <_vfiprintf_r+0x18>
 800b3c8:	6a03      	ldr	r3, [r0, #32]
 800b3ca:	b90b      	cbnz	r3, 800b3d0 <_vfiprintf_r+0x18>
 800b3cc:	f7fe fb50 	bl	8009a70 <__sinit>
 800b3d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3d2:	07d9      	lsls	r1, r3, #31
 800b3d4:	d405      	bmi.n	800b3e2 <_vfiprintf_r+0x2a>
 800b3d6:	89ab      	ldrh	r3, [r5, #12]
 800b3d8:	059a      	lsls	r2, r3, #22
 800b3da:	d402      	bmi.n	800b3e2 <_vfiprintf_r+0x2a>
 800b3dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3de:	f7fe fcb8 	bl	8009d52 <__retarget_lock_acquire_recursive>
 800b3e2:	89ab      	ldrh	r3, [r5, #12]
 800b3e4:	071b      	lsls	r3, r3, #28
 800b3e6:	d501      	bpl.n	800b3ec <_vfiprintf_r+0x34>
 800b3e8:	692b      	ldr	r3, [r5, #16]
 800b3ea:	b99b      	cbnz	r3, 800b414 <_vfiprintf_r+0x5c>
 800b3ec:	4629      	mov	r1, r5
 800b3ee:	4630      	mov	r0, r6
 800b3f0:	f000 f9e8 	bl	800b7c4 <__swsetup_r>
 800b3f4:	b170      	cbz	r0, 800b414 <_vfiprintf_r+0x5c>
 800b3f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3f8:	07dc      	lsls	r4, r3, #31
 800b3fa:	d504      	bpl.n	800b406 <_vfiprintf_r+0x4e>
 800b3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b400:	b01d      	add	sp, #116	; 0x74
 800b402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b406:	89ab      	ldrh	r3, [r5, #12]
 800b408:	0598      	lsls	r0, r3, #22
 800b40a:	d4f7      	bmi.n	800b3fc <_vfiprintf_r+0x44>
 800b40c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b40e:	f7fe fca1 	bl	8009d54 <__retarget_lock_release_recursive>
 800b412:	e7f3      	b.n	800b3fc <_vfiprintf_r+0x44>
 800b414:	2300      	movs	r3, #0
 800b416:	9309      	str	r3, [sp, #36]	; 0x24
 800b418:	2320      	movs	r3, #32
 800b41a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b41e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b422:	2330      	movs	r3, #48	; 0x30
 800b424:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b5d8 <_vfiprintf_r+0x220>
 800b428:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b42c:	f04f 0901 	mov.w	r9, #1
 800b430:	4623      	mov	r3, r4
 800b432:	469a      	mov	sl, r3
 800b434:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b438:	b10a      	cbz	r2, 800b43e <_vfiprintf_r+0x86>
 800b43a:	2a25      	cmp	r2, #37	; 0x25
 800b43c:	d1f9      	bne.n	800b432 <_vfiprintf_r+0x7a>
 800b43e:	ebba 0b04 	subs.w	fp, sl, r4
 800b442:	d00b      	beq.n	800b45c <_vfiprintf_r+0xa4>
 800b444:	465b      	mov	r3, fp
 800b446:	4622      	mov	r2, r4
 800b448:	4629      	mov	r1, r5
 800b44a:	4630      	mov	r0, r6
 800b44c:	f7ff ffa1 	bl	800b392 <__sfputs_r>
 800b450:	3001      	adds	r0, #1
 800b452:	f000 80a9 	beq.w	800b5a8 <_vfiprintf_r+0x1f0>
 800b456:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b458:	445a      	add	r2, fp
 800b45a:	9209      	str	r2, [sp, #36]	; 0x24
 800b45c:	f89a 3000 	ldrb.w	r3, [sl]
 800b460:	2b00      	cmp	r3, #0
 800b462:	f000 80a1 	beq.w	800b5a8 <_vfiprintf_r+0x1f0>
 800b466:	2300      	movs	r3, #0
 800b468:	f04f 32ff 	mov.w	r2, #4294967295
 800b46c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b470:	f10a 0a01 	add.w	sl, sl, #1
 800b474:	9304      	str	r3, [sp, #16]
 800b476:	9307      	str	r3, [sp, #28]
 800b478:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b47c:	931a      	str	r3, [sp, #104]	; 0x68
 800b47e:	4654      	mov	r4, sl
 800b480:	2205      	movs	r2, #5
 800b482:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b486:	4854      	ldr	r0, [pc, #336]	; (800b5d8 <_vfiprintf_r+0x220>)
 800b488:	f7f4 feb2 	bl	80001f0 <memchr>
 800b48c:	9a04      	ldr	r2, [sp, #16]
 800b48e:	b9d8      	cbnz	r0, 800b4c8 <_vfiprintf_r+0x110>
 800b490:	06d1      	lsls	r1, r2, #27
 800b492:	bf44      	itt	mi
 800b494:	2320      	movmi	r3, #32
 800b496:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b49a:	0713      	lsls	r3, r2, #28
 800b49c:	bf44      	itt	mi
 800b49e:	232b      	movmi	r3, #43	; 0x2b
 800b4a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4a4:	f89a 3000 	ldrb.w	r3, [sl]
 800b4a8:	2b2a      	cmp	r3, #42	; 0x2a
 800b4aa:	d015      	beq.n	800b4d8 <_vfiprintf_r+0x120>
 800b4ac:	9a07      	ldr	r2, [sp, #28]
 800b4ae:	4654      	mov	r4, sl
 800b4b0:	2000      	movs	r0, #0
 800b4b2:	f04f 0c0a 	mov.w	ip, #10
 800b4b6:	4621      	mov	r1, r4
 800b4b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4bc:	3b30      	subs	r3, #48	; 0x30
 800b4be:	2b09      	cmp	r3, #9
 800b4c0:	d94d      	bls.n	800b55e <_vfiprintf_r+0x1a6>
 800b4c2:	b1b0      	cbz	r0, 800b4f2 <_vfiprintf_r+0x13a>
 800b4c4:	9207      	str	r2, [sp, #28]
 800b4c6:	e014      	b.n	800b4f2 <_vfiprintf_r+0x13a>
 800b4c8:	eba0 0308 	sub.w	r3, r0, r8
 800b4cc:	fa09 f303 	lsl.w	r3, r9, r3
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	9304      	str	r3, [sp, #16]
 800b4d4:	46a2      	mov	sl, r4
 800b4d6:	e7d2      	b.n	800b47e <_vfiprintf_r+0xc6>
 800b4d8:	9b03      	ldr	r3, [sp, #12]
 800b4da:	1d19      	adds	r1, r3, #4
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	9103      	str	r1, [sp, #12]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	bfbb      	ittet	lt
 800b4e4:	425b      	neglt	r3, r3
 800b4e6:	f042 0202 	orrlt.w	r2, r2, #2
 800b4ea:	9307      	strge	r3, [sp, #28]
 800b4ec:	9307      	strlt	r3, [sp, #28]
 800b4ee:	bfb8      	it	lt
 800b4f0:	9204      	strlt	r2, [sp, #16]
 800b4f2:	7823      	ldrb	r3, [r4, #0]
 800b4f4:	2b2e      	cmp	r3, #46	; 0x2e
 800b4f6:	d10c      	bne.n	800b512 <_vfiprintf_r+0x15a>
 800b4f8:	7863      	ldrb	r3, [r4, #1]
 800b4fa:	2b2a      	cmp	r3, #42	; 0x2a
 800b4fc:	d134      	bne.n	800b568 <_vfiprintf_r+0x1b0>
 800b4fe:	9b03      	ldr	r3, [sp, #12]
 800b500:	1d1a      	adds	r2, r3, #4
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	9203      	str	r2, [sp, #12]
 800b506:	2b00      	cmp	r3, #0
 800b508:	bfb8      	it	lt
 800b50a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b50e:	3402      	adds	r4, #2
 800b510:	9305      	str	r3, [sp, #20]
 800b512:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b5e8 <_vfiprintf_r+0x230>
 800b516:	7821      	ldrb	r1, [r4, #0]
 800b518:	2203      	movs	r2, #3
 800b51a:	4650      	mov	r0, sl
 800b51c:	f7f4 fe68 	bl	80001f0 <memchr>
 800b520:	b138      	cbz	r0, 800b532 <_vfiprintf_r+0x17a>
 800b522:	9b04      	ldr	r3, [sp, #16]
 800b524:	eba0 000a 	sub.w	r0, r0, sl
 800b528:	2240      	movs	r2, #64	; 0x40
 800b52a:	4082      	lsls	r2, r0
 800b52c:	4313      	orrs	r3, r2
 800b52e:	3401      	adds	r4, #1
 800b530:	9304      	str	r3, [sp, #16]
 800b532:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b536:	4829      	ldr	r0, [pc, #164]	; (800b5dc <_vfiprintf_r+0x224>)
 800b538:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b53c:	2206      	movs	r2, #6
 800b53e:	f7f4 fe57 	bl	80001f0 <memchr>
 800b542:	2800      	cmp	r0, #0
 800b544:	d03f      	beq.n	800b5c6 <_vfiprintf_r+0x20e>
 800b546:	4b26      	ldr	r3, [pc, #152]	; (800b5e0 <_vfiprintf_r+0x228>)
 800b548:	bb1b      	cbnz	r3, 800b592 <_vfiprintf_r+0x1da>
 800b54a:	9b03      	ldr	r3, [sp, #12]
 800b54c:	3307      	adds	r3, #7
 800b54e:	f023 0307 	bic.w	r3, r3, #7
 800b552:	3308      	adds	r3, #8
 800b554:	9303      	str	r3, [sp, #12]
 800b556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b558:	443b      	add	r3, r7
 800b55a:	9309      	str	r3, [sp, #36]	; 0x24
 800b55c:	e768      	b.n	800b430 <_vfiprintf_r+0x78>
 800b55e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b562:	460c      	mov	r4, r1
 800b564:	2001      	movs	r0, #1
 800b566:	e7a6      	b.n	800b4b6 <_vfiprintf_r+0xfe>
 800b568:	2300      	movs	r3, #0
 800b56a:	3401      	adds	r4, #1
 800b56c:	9305      	str	r3, [sp, #20]
 800b56e:	4619      	mov	r1, r3
 800b570:	f04f 0c0a 	mov.w	ip, #10
 800b574:	4620      	mov	r0, r4
 800b576:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b57a:	3a30      	subs	r2, #48	; 0x30
 800b57c:	2a09      	cmp	r2, #9
 800b57e:	d903      	bls.n	800b588 <_vfiprintf_r+0x1d0>
 800b580:	2b00      	cmp	r3, #0
 800b582:	d0c6      	beq.n	800b512 <_vfiprintf_r+0x15a>
 800b584:	9105      	str	r1, [sp, #20]
 800b586:	e7c4      	b.n	800b512 <_vfiprintf_r+0x15a>
 800b588:	fb0c 2101 	mla	r1, ip, r1, r2
 800b58c:	4604      	mov	r4, r0
 800b58e:	2301      	movs	r3, #1
 800b590:	e7f0      	b.n	800b574 <_vfiprintf_r+0x1bc>
 800b592:	ab03      	add	r3, sp, #12
 800b594:	9300      	str	r3, [sp, #0]
 800b596:	462a      	mov	r2, r5
 800b598:	4b12      	ldr	r3, [pc, #72]	; (800b5e4 <_vfiprintf_r+0x22c>)
 800b59a:	a904      	add	r1, sp, #16
 800b59c:	4630      	mov	r0, r6
 800b59e:	f7fd fe15 	bl	80091cc <_printf_float>
 800b5a2:	4607      	mov	r7, r0
 800b5a4:	1c78      	adds	r0, r7, #1
 800b5a6:	d1d6      	bne.n	800b556 <_vfiprintf_r+0x19e>
 800b5a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5aa:	07d9      	lsls	r1, r3, #31
 800b5ac:	d405      	bmi.n	800b5ba <_vfiprintf_r+0x202>
 800b5ae:	89ab      	ldrh	r3, [r5, #12]
 800b5b0:	059a      	lsls	r2, r3, #22
 800b5b2:	d402      	bmi.n	800b5ba <_vfiprintf_r+0x202>
 800b5b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5b6:	f7fe fbcd 	bl	8009d54 <__retarget_lock_release_recursive>
 800b5ba:	89ab      	ldrh	r3, [r5, #12]
 800b5bc:	065b      	lsls	r3, r3, #25
 800b5be:	f53f af1d 	bmi.w	800b3fc <_vfiprintf_r+0x44>
 800b5c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5c4:	e71c      	b.n	800b400 <_vfiprintf_r+0x48>
 800b5c6:	ab03      	add	r3, sp, #12
 800b5c8:	9300      	str	r3, [sp, #0]
 800b5ca:	462a      	mov	r2, r5
 800b5cc:	4b05      	ldr	r3, [pc, #20]	; (800b5e4 <_vfiprintf_r+0x22c>)
 800b5ce:	a904      	add	r1, sp, #16
 800b5d0:	4630      	mov	r0, r6
 800b5d2:	f7fe f89f 	bl	8009714 <_printf_i>
 800b5d6:	e7e4      	b.n	800b5a2 <_vfiprintf_r+0x1ea>
 800b5d8:	0800bf3c 	.word	0x0800bf3c
 800b5dc:	0800bf46 	.word	0x0800bf46
 800b5e0:	080091cd 	.word	0x080091cd
 800b5e4:	0800b393 	.word	0x0800b393
 800b5e8:	0800bf42 	.word	0x0800bf42

0800b5ec <__sflush_r>:
 800b5ec:	898a      	ldrh	r2, [r1, #12]
 800b5ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5f2:	4605      	mov	r5, r0
 800b5f4:	0710      	lsls	r0, r2, #28
 800b5f6:	460c      	mov	r4, r1
 800b5f8:	d458      	bmi.n	800b6ac <__sflush_r+0xc0>
 800b5fa:	684b      	ldr	r3, [r1, #4]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	dc05      	bgt.n	800b60c <__sflush_r+0x20>
 800b600:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b602:	2b00      	cmp	r3, #0
 800b604:	dc02      	bgt.n	800b60c <__sflush_r+0x20>
 800b606:	2000      	movs	r0, #0
 800b608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b60c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b60e:	2e00      	cmp	r6, #0
 800b610:	d0f9      	beq.n	800b606 <__sflush_r+0x1a>
 800b612:	2300      	movs	r3, #0
 800b614:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b618:	682f      	ldr	r7, [r5, #0]
 800b61a:	6a21      	ldr	r1, [r4, #32]
 800b61c:	602b      	str	r3, [r5, #0]
 800b61e:	d032      	beq.n	800b686 <__sflush_r+0x9a>
 800b620:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b622:	89a3      	ldrh	r3, [r4, #12]
 800b624:	075a      	lsls	r2, r3, #29
 800b626:	d505      	bpl.n	800b634 <__sflush_r+0x48>
 800b628:	6863      	ldr	r3, [r4, #4]
 800b62a:	1ac0      	subs	r0, r0, r3
 800b62c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b62e:	b10b      	cbz	r3, 800b634 <__sflush_r+0x48>
 800b630:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b632:	1ac0      	subs	r0, r0, r3
 800b634:	2300      	movs	r3, #0
 800b636:	4602      	mov	r2, r0
 800b638:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b63a:	6a21      	ldr	r1, [r4, #32]
 800b63c:	4628      	mov	r0, r5
 800b63e:	47b0      	blx	r6
 800b640:	1c43      	adds	r3, r0, #1
 800b642:	89a3      	ldrh	r3, [r4, #12]
 800b644:	d106      	bne.n	800b654 <__sflush_r+0x68>
 800b646:	6829      	ldr	r1, [r5, #0]
 800b648:	291d      	cmp	r1, #29
 800b64a:	d82b      	bhi.n	800b6a4 <__sflush_r+0xb8>
 800b64c:	4a29      	ldr	r2, [pc, #164]	; (800b6f4 <__sflush_r+0x108>)
 800b64e:	410a      	asrs	r2, r1
 800b650:	07d6      	lsls	r6, r2, #31
 800b652:	d427      	bmi.n	800b6a4 <__sflush_r+0xb8>
 800b654:	2200      	movs	r2, #0
 800b656:	6062      	str	r2, [r4, #4]
 800b658:	04d9      	lsls	r1, r3, #19
 800b65a:	6922      	ldr	r2, [r4, #16]
 800b65c:	6022      	str	r2, [r4, #0]
 800b65e:	d504      	bpl.n	800b66a <__sflush_r+0x7e>
 800b660:	1c42      	adds	r2, r0, #1
 800b662:	d101      	bne.n	800b668 <__sflush_r+0x7c>
 800b664:	682b      	ldr	r3, [r5, #0]
 800b666:	b903      	cbnz	r3, 800b66a <__sflush_r+0x7e>
 800b668:	6560      	str	r0, [r4, #84]	; 0x54
 800b66a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b66c:	602f      	str	r7, [r5, #0]
 800b66e:	2900      	cmp	r1, #0
 800b670:	d0c9      	beq.n	800b606 <__sflush_r+0x1a>
 800b672:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b676:	4299      	cmp	r1, r3
 800b678:	d002      	beq.n	800b680 <__sflush_r+0x94>
 800b67a:	4628      	mov	r0, r5
 800b67c:	f7ff f9f6 	bl	800aa6c <_free_r>
 800b680:	2000      	movs	r0, #0
 800b682:	6360      	str	r0, [r4, #52]	; 0x34
 800b684:	e7c0      	b.n	800b608 <__sflush_r+0x1c>
 800b686:	2301      	movs	r3, #1
 800b688:	4628      	mov	r0, r5
 800b68a:	47b0      	blx	r6
 800b68c:	1c41      	adds	r1, r0, #1
 800b68e:	d1c8      	bne.n	800b622 <__sflush_r+0x36>
 800b690:	682b      	ldr	r3, [r5, #0]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d0c5      	beq.n	800b622 <__sflush_r+0x36>
 800b696:	2b1d      	cmp	r3, #29
 800b698:	d001      	beq.n	800b69e <__sflush_r+0xb2>
 800b69a:	2b16      	cmp	r3, #22
 800b69c:	d101      	bne.n	800b6a2 <__sflush_r+0xb6>
 800b69e:	602f      	str	r7, [r5, #0]
 800b6a0:	e7b1      	b.n	800b606 <__sflush_r+0x1a>
 800b6a2:	89a3      	ldrh	r3, [r4, #12]
 800b6a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6a8:	81a3      	strh	r3, [r4, #12]
 800b6aa:	e7ad      	b.n	800b608 <__sflush_r+0x1c>
 800b6ac:	690f      	ldr	r7, [r1, #16]
 800b6ae:	2f00      	cmp	r7, #0
 800b6b0:	d0a9      	beq.n	800b606 <__sflush_r+0x1a>
 800b6b2:	0793      	lsls	r3, r2, #30
 800b6b4:	680e      	ldr	r6, [r1, #0]
 800b6b6:	bf08      	it	eq
 800b6b8:	694b      	ldreq	r3, [r1, #20]
 800b6ba:	600f      	str	r7, [r1, #0]
 800b6bc:	bf18      	it	ne
 800b6be:	2300      	movne	r3, #0
 800b6c0:	eba6 0807 	sub.w	r8, r6, r7
 800b6c4:	608b      	str	r3, [r1, #8]
 800b6c6:	f1b8 0f00 	cmp.w	r8, #0
 800b6ca:	dd9c      	ble.n	800b606 <__sflush_r+0x1a>
 800b6cc:	6a21      	ldr	r1, [r4, #32]
 800b6ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b6d0:	4643      	mov	r3, r8
 800b6d2:	463a      	mov	r2, r7
 800b6d4:	4628      	mov	r0, r5
 800b6d6:	47b0      	blx	r6
 800b6d8:	2800      	cmp	r0, #0
 800b6da:	dc06      	bgt.n	800b6ea <__sflush_r+0xfe>
 800b6dc:	89a3      	ldrh	r3, [r4, #12]
 800b6de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6e2:	81a3      	strh	r3, [r4, #12]
 800b6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6e8:	e78e      	b.n	800b608 <__sflush_r+0x1c>
 800b6ea:	4407      	add	r7, r0
 800b6ec:	eba8 0800 	sub.w	r8, r8, r0
 800b6f0:	e7e9      	b.n	800b6c6 <__sflush_r+0xda>
 800b6f2:	bf00      	nop
 800b6f4:	dfbffffe 	.word	0xdfbffffe

0800b6f8 <_fflush_r>:
 800b6f8:	b538      	push	{r3, r4, r5, lr}
 800b6fa:	690b      	ldr	r3, [r1, #16]
 800b6fc:	4605      	mov	r5, r0
 800b6fe:	460c      	mov	r4, r1
 800b700:	b913      	cbnz	r3, 800b708 <_fflush_r+0x10>
 800b702:	2500      	movs	r5, #0
 800b704:	4628      	mov	r0, r5
 800b706:	bd38      	pop	{r3, r4, r5, pc}
 800b708:	b118      	cbz	r0, 800b712 <_fflush_r+0x1a>
 800b70a:	6a03      	ldr	r3, [r0, #32]
 800b70c:	b90b      	cbnz	r3, 800b712 <_fflush_r+0x1a>
 800b70e:	f7fe f9af 	bl	8009a70 <__sinit>
 800b712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d0f3      	beq.n	800b702 <_fflush_r+0xa>
 800b71a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b71c:	07d0      	lsls	r0, r2, #31
 800b71e:	d404      	bmi.n	800b72a <_fflush_r+0x32>
 800b720:	0599      	lsls	r1, r3, #22
 800b722:	d402      	bmi.n	800b72a <_fflush_r+0x32>
 800b724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b726:	f7fe fb14 	bl	8009d52 <__retarget_lock_acquire_recursive>
 800b72a:	4628      	mov	r0, r5
 800b72c:	4621      	mov	r1, r4
 800b72e:	f7ff ff5d 	bl	800b5ec <__sflush_r>
 800b732:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b734:	07da      	lsls	r2, r3, #31
 800b736:	4605      	mov	r5, r0
 800b738:	d4e4      	bmi.n	800b704 <_fflush_r+0xc>
 800b73a:	89a3      	ldrh	r3, [r4, #12]
 800b73c:	059b      	lsls	r3, r3, #22
 800b73e:	d4e1      	bmi.n	800b704 <_fflush_r+0xc>
 800b740:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b742:	f7fe fb07 	bl	8009d54 <__retarget_lock_release_recursive>
 800b746:	e7dd      	b.n	800b704 <_fflush_r+0xc>

0800b748 <__swbuf_r>:
 800b748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b74a:	460e      	mov	r6, r1
 800b74c:	4614      	mov	r4, r2
 800b74e:	4605      	mov	r5, r0
 800b750:	b118      	cbz	r0, 800b75a <__swbuf_r+0x12>
 800b752:	6a03      	ldr	r3, [r0, #32]
 800b754:	b90b      	cbnz	r3, 800b75a <__swbuf_r+0x12>
 800b756:	f7fe f98b 	bl	8009a70 <__sinit>
 800b75a:	69a3      	ldr	r3, [r4, #24]
 800b75c:	60a3      	str	r3, [r4, #8]
 800b75e:	89a3      	ldrh	r3, [r4, #12]
 800b760:	071a      	lsls	r2, r3, #28
 800b762:	d525      	bpl.n	800b7b0 <__swbuf_r+0x68>
 800b764:	6923      	ldr	r3, [r4, #16]
 800b766:	b31b      	cbz	r3, 800b7b0 <__swbuf_r+0x68>
 800b768:	6823      	ldr	r3, [r4, #0]
 800b76a:	6922      	ldr	r2, [r4, #16]
 800b76c:	1a98      	subs	r0, r3, r2
 800b76e:	6963      	ldr	r3, [r4, #20]
 800b770:	b2f6      	uxtb	r6, r6
 800b772:	4283      	cmp	r3, r0
 800b774:	4637      	mov	r7, r6
 800b776:	dc04      	bgt.n	800b782 <__swbuf_r+0x3a>
 800b778:	4621      	mov	r1, r4
 800b77a:	4628      	mov	r0, r5
 800b77c:	f7ff ffbc 	bl	800b6f8 <_fflush_r>
 800b780:	b9e0      	cbnz	r0, 800b7bc <__swbuf_r+0x74>
 800b782:	68a3      	ldr	r3, [r4, #8]
 800b784:	3b01      	subs	r3, #1
 800b786:	60a3      	str	r3, [r4, #8]
 800b788:	6823      	ldr	r3, [r4, #0]
 800b78a:	1c5a      	adds	r2, r3, #1
 800b78c:	6022      	str	r2, [r4, #0]
 800b78e:	701e      	strb	r6, [r3, #0]
 800b790:	6962      	ldr	r2, [r4, #20]
 800b792:	1c43      	adds	r3, r0, #1
 800b794:	429a      	cmp	r2, r3
 800b796:	d004      	beq.n	800b7a2 <__swbuf_r+0x5a>
 800b798:	89a3      	ldrh	r3, [r4, #12]
 800b79a:	07db      	lsls	r3, r3, #31
 800b79c:	d506      	bpl.n	800b7ac <__swbuf_r+0x64>
 800b79e:	2e0a      	cmp	r6, #10
 800b7a0:	d104      	bne.n	800b7ac <__swbuf_r+0x64>
 800b7a2:	4621      	mov	r1, r4
 800b7a4:	4628      	mov	r0, r5
 800b7a6:	f7ff ffa7 	bl	800b6f8 <_fflush_r>
 800b7aa:	b938      	cbnz	r0, 800b7bc <__swbuf_r+0x74>
 800b7ac:	4638      	mov	r0, r7
 800b7ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7b0:	4621      	mov	r1, r4
 800b7b2:	4628      	mov	r0, r5
 800b7b4:	f000 f806 	bl	800b7c4 <__swsetup_r>
 800b7b8:	2800      	cmp	r0, #0
 800b7ba:	d0d5      	beq.n	800b768 <__swbuf_r+0x20>
 800b7bc:	f04f 37ff 	mov.w	r7, #4294967295
 800b7c0:	e7f4      	b.n	800b7ac <__swbuf_r+0x64>
	...

0800b7c4 <__swsetup_r>:
 800b7c4:	b538      	push	{r3, r4, r5, lr}
 800b7c6:	4b2a      	ldr	r3, [pc, #168]	; (800b870 <__swsetup_r+0xac>)
 800b7c8:	4605      	mov	r5, r0
 800b7ca:	6818      	ldr	r0, [r3, #0]
 800b7cc:	460c      	mov	r4, r1
 800b7ce:	b118      	cbz	r0, 800b7d8 <__swsetup_r+0x14>
 800b7d0:	6a03      	ldr	r3, [r0, #32]
 800b7d2:	b90b      	cbnz	r3, 800b7d8 <__swsetup_r+0x14>
 800b7d4:	f7fe f94c 	bl	8009a70 <__sinit>
 800b7d8:	89a3      	ldrh	r3, [r4, #12]
 800b7da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7de:	0718      	lsls	r0, r3, #28
 800b7e0:	d422      	bmi.n	800b828 <__swsetup_r+0x64>
 800b7e2:	06d9      	lsls	r1, r3, #27
 800b7e4:	d407      	bmi.n	800b7f6 <__swsetup_r+0x32>
 800b7e6:	2309      	movs	r3, #9
 800b7e8:	602b      	str	r3, [r5, #0]
 800b7ea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b7ee:	81a3      	strh	r3, [r4, #12]
 800b7f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7f4:	e034      	b.n	800b860 <__swsetup_r+0x9c>
 800b7f6:	0758      	lsls	r0, r3, #29
 800b7f8:	d512      	bpl.n	800b820 <__swsetup_r+0x5c>
 800b7fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7fc:	b141      	cbz	r1, 800b810 <__swsetup_r+0x4c>
 800b7fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b802:	4299      	cmp	r1, r3
 800b804:	d002      	beq.n	800b80c <__swsetup_r+0x48>
 800b806:	4628      	mov	r0, r5
 800b808:	f7ff f930 	bl	800aa6c <_free_r>
 800b80c:	2300      	movs	r3, #0
 800b80e:	6363      	str	r3, [r4, #52]	; 0x34
 800b810:	89a3      	ldrh	r3, [r4, #12]
 800b812:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b816:	81a3      	strh	r3, [r4, #12]
 800b818:	2300      	movs	r3, #0
 800b81a:	6063      	str	r3, [r4, #4]
 800b81c:	6923      	ldr	r3, [r4, #16]
 800b81e:	6023      	str	r3, [r4, #0]
 800b820:	89a3      	ldrh	r3, [r4, #12]
 800b822:	f043 0308 	orr.w	r3, r3, #8
 800b826:	81a3      	strh	r3, [r4, #12]
 800b828:	6923      	ldr	r3, [r4, #16]
 800b82a:	b94b      	cbnz	r3, 800b840 <__swsetup_r+0x7c>
 800b82c:	89a3      	ldrh	r3, [r4, #12]
 800b82e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b832:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b836:	d003      	beq.n	800b840 <__swsetup_r+0x7c>
 800b838:	4621      	mov	r1, r4
 800b83a:	4628      	mov	r0, r5
 800b83c:	f000 f8b6 	bl	800b9ac <__smakebuf_r>
 800b840:	89a0      	ldrh	r0, [r4, #12]
 800b842:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b846:	f010 0301 	ands.w	r3, r0, #1
 800b84a:	d00a      	beq.n	800b862 <__swsetup_r+0x9e>
 800b84c:	2300      	movs	r3, #0
 800b84e:	60a3      	str	r3, [r4, #8]
 800b850:	6963      	ldr	r3, [r4, #20]
 800b852:	425b      	negs	r3, r3
 800b854:	61a3      	str	r3, [r4, #24]
 800b856:	6923      	ldr	r3, [r4, #16]
 800b858:	b943      	cbnz	r3, 800b86c <__swsetup_r+0xa8>
 800b85a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b85e:	d1c4      	bne.n	800b7ea <__swsetup_r+0x26>
 800b860:	bd38      	pop	{r3, r4, r5, pc}
 800b862:	0781      	lsls	r1, r0, #30
 800b864:	bf58      	it	pl
 800b866:	6963      	ldrpl	r3, [r4, #20]
 800b868:	60a3      	str	r3, [r4, #8]
 800b86a:	e7f4      	b.n	800b856 <__swsetup_r+0x92>
 800b86c:	2000      	movs	r0, #0
 800b86e:	e7f7      	b.n	800b860 <__swsetup_r+0x9c>
 800b870:	20000068 	.word	0x20000068

0800b874 <_sbrk_r>:
 800b874:	b538      	push	{r3, r4, r5, lr}
 800b876:	4d06      	ldr	r5, [pc, #24]	; (800b890 <_sbrk_r+0x1c>)
 800b878:	2300      	movs	r3, #0
 800b87a:	4604      	mov	r4, r0
 800b87c:	4608      	mov	r0, r1
 800b87e:	602b      	str	r3, [r5, #0]
 800b880:	f7f5 ff1e 	bl	80016c0 <_sbrk>
 800b884:	1c43      	adds	r3, r0, #1
 800b886:	d102      	bne.n	800b88e <_sbrk_r+0x1a>
 800b888:	682b      	ldr	r3, [r5, #0]
 800b88a:	b103      	cbz	r3, 800b88e <_sbrk_r+0x1a>
 800b88c:	6023      	str	r3, [r4, #0]
 800b88e:	bd38      	pop	{r3, r4, r5, pc}
 800b890:	200039c4 	.word	0x200039c4

0800b894 <__assert_func>:
 800b894:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b896:	4614      	mov	r4, r2
 800b898:	461a      	mov	r2, r3
 800b89a:	4b09      	ldr	r3, [pc, #36]	; (800b8c0 <__assert_func+0x2c>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	4605      	mov	r5, r0
 800b8a0:	68d8      	ldr	r0, [r3, #12]
 800b8a2:	b14c      	cbz	r4, 800b8b8 <__assert_func+0x24>
 800b8a4:	4b07      	ldr	r3, [pc, #28]	; (800b8c4 <__assert_func+0x30>)
 800b8a6:	9100      	str	r1, [sp, #0]
 800b8a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b8ac:	4906      	ldr	r1, [pc, #24]	; (800b8c8 <__assert_func+0x34>)
 800b8ae:	462b      	mov	r3, r5
 800b8b0:	f000 f844 	bl	800b93c <fiprintf>
 800b8b4:	f000 f8d8 	bl	800ba68 <abort>
 800b8b8:	4b04      	ldr	r3, [pc, #16]	; (800b8cc <__assert_func+0x38>)
 800b8ba:	461c      	mov	r4, r3
 800b8bc:	e7f3      	b.n	800b8a6 <__assert_func+0x12>
 800b8be:	bf00      	nop
 800b8c0:	20000068 	.word	0x20000068
 800b8c4:	0800bf57 	.word	0x0800bf57
 800b8c8:	0800bf64 	.word	0x0800bf64
 800b8cc:	0800bf92 	.word	0x0800bf92

0800b8d0 <_calloc_r>:
 800b8d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b8d2:	fba1 2402 	umull	r2, r4, r1, r2
 800b8d6:	b94c      	cbnz	r4, 800b8ec <_calloc_r+0x1c>
 800b8d8:	4611      	mov	r1, r2
 800b8da:	9201      	str	r2, [sp, #4]
 800b8dc:	f7ff f93a 	bl	800ab54 <_malloc_r>
 800b8e0:	9a01      	ldr	r2, [sp, #4]
 800b8e2:	4605      	mov	r5, r0
 800b8e4:	b930      	cbnz	r0, 800b8f4 <_calloc_r+0x24>
 800b8e6:	4628      	mov	r0, r5
 800b8e8:	b003      	add	sp, #12
 800b8ea:	bd30      	pop	{r4, r5, pc}
 800b8ec:	220c      	movs	r2, #12
 800b8ee:	6002      	str	r2, [r0, #0]
 800b8f0:	2500      	movs	r5, #0
 800b8f2:	e7f8      	b.n	800b8e6 <_calloc_r+0x16>
 800b8f4:	4621      	mov	r1, r4
 800b8f6:	f7fe f946 	bl	8009b86 <memset>
 800b8fa:	e7f4      	b.n	800b8e6 <_calloc_r+0x16>

0800b8fc <__ascii_mbtowc>:
 800b8fc:	b082      	sub	sp, #8
 800b8fe:	b901      	cbnz	r1, 800b902 <__ascii_mbtowc+0x6>
 800b900:	a901      	add	r1, sp, #4
 800b902:	b142      	cbz	r2, 800b916 <__ascii_mbtowc+0x1a>
 800b904:	b14b      	cbz	r3, 800b91a <__ascii_mbtowc+0x1e>
 800b906:	7813      	ldrb	r3, [r2, #0]
 800b908:	600b      	str	r3, [r1, #0]
 800b90a:	7812      	ldrb	r2, [r2, #0]
 800b90c:	1e10      	subs	r0, r2, #0
 800b90e:	bf18      	it	ne
 800b910:	2001      	movne	r0, #1
 800b912:	b002      	add	sp, #8
 800b914:	4770      	bx	lr
 800b916:	4610      	mov	r0, r2
 800b918:	e7fb      	b.n	800b912 <__ascii_mbtowc+0x16>
 800b91a:	f06f 0001 	mvn.w	r0, #1
 800b91e:	e7f8      	b.n	800b912 <__ascii_mbtowc+0x16>

0800b920 <__ascii_wctomb>:
 800b920:	b149      	cbz	r1, 800b936 <__ascii_wctomb+0x16>
 800b922:	2aff      	cmp	r2, #255	; 0xff
 800b924:	bf85      	ittet	hi
 800b926:	238a      	movhi	r3, #138	; 0x8a
 800b928:	6003      	strhi	r3, [r0, #0]
 800b92a:	700a      	strbls	r2, [r1, #0]
 800b92c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b930:	bf98      	it	ls
 800b932:	2001      	movls	r0, #1
 800b934:	4770      	bx	lr
 800b936:	4608      	mov	r0, r1
 800b938:	4770      	bx	lr
	...

0800b93c <fiprintf>:
 800b93c:	b40e      	push	{r1, r2, r3}
 800b93e:	b503      	push	{r0, r1, lr}
 800b940:	4601      	mov	r1, r0
 800b942:	ab03      	add	r3, sp, #12
 800b944:	4805      	ldr	r0, [pc, #20]	; (800b95c <fiprintf+0x20>)
 800b946:	f853 2b04 	ldr.w	r2, [r3], #4
 800b94a:	6800      	ldr	r0, [r0, #0]
 800b94c:	9301      	str	r3, [sp, #4]
 800b94e:	f7ff fd33 	bl	800b3b8 <_vfiprintf_r>
 800b952:	b002      	add	sp, #8
 800b954:	f85d eb04 	ldr.w	lr, [sp], #4
 800b958:	b003      	add	sp, #12
 800b95a:	4770      	bx	lr
 800b95c:	20000068 	.word	0x20000068

0800b960 <__swhatbuf_r>:
 800b960:	b570      	push	{r4, r5, r6, lr}
 800b962:	460c      	mov	r4, r1
 800b964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b968:	2900      	cmp	r1, #0
 800b96a:	b096      	sub	sp, #88	; 0x58
 800b96c:	4615      	mov	r5, r2
 800b96e:	461e      	mov	r6, r3
 800b970:	da0d      	bge.n	800b98e <__swhatbuf_r+0x2e>
 800b972:	89a3      	ldrh	r3, [r4, #12]
 800b974:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b978:	f04f 0100 	mov.w	r1, #0
 800b97c:	bf0c      	ite	eq
 800b97e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b982:	2340      	movne	r3, #64	; 0x40
 800b984:	2000      	movs	r0, #0
 800b986:	6031      	str	r1, [r6, #0]
 800b988:	602b      	str	r3, [r5, #0]
 800b98a:	b016      	add	sp, #88	; 0x58
 800b98c:	bd70      	pop	{r4, r5, r6, pc}
 800b98e:	466a      	mov	r2, sp
 800b990:	f000 f848 	bl	800ba24 <_fstat_r>
 800b994:	2800      	cmp	r0, #0
 800b996:	dbec      	blt.n	800b972 <__swhatbuf_r+0x12>
 800b998:	9901      	ldr	r1, [sp, #4]
 800b99a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b99e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b9a2:	4259      	negs	r1, r3
 800b9a4:	4159      	adcs	r1, r3
 800b9a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9aa:	e7eb      	b.n	800b984 <__swhatbuf_r+0x24>

0800b9ac <__smakebuf_r>:
 800b9ac:	898b      	ldrh	r3, [r1, #12]
 800b9ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b9b0:	079d      	lsls	r5, r3, #30
 800b9b2:	4606      	mov	r6, r0
 800b9b4:	460c      	mov	r4, r1
 800b9b6:	d507      	bpl.n	800b9c8 <__smakebuf_r+0x1c>
 800b9b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b9bc:	6023      	str	r3, [r4, #0]
 800b9be:	6123      	str	r3, [r4, #16]
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	6163      	str	r3, [r4, #20]
 800b9c4:	b002      	add	sp, #8
 800b9c6:	bd70      	pop	{r4, r5, r6, pc}
 800b9c8:	ab01      	add	r3, sp, #4
 800b9ca:	466a      	mov	r2, sp
 800b9cc:	f7ff ffc8 	bl	800b960 <__swhatbuf_r>
 800b9d0:	9900      	ldr	r1, [sp, #0]
 800b9d2:	4605      	mov	r5, r0
 800b9d4:	4630      	mov	r0, r6
 800b9d6:	f7ff f8bd 	bl	800ab54 <_malloc_r>
 800b9da:	b948      	cbnz	r0, 800b9f0 <__smakebuf_r+0x44>
 800b9dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9e0:	059a      	lsls	r2, r3, #22
 800b9e2:	d4ef      	bmi.n	800b9c4 <__smakebuf_r+0x18>
 800b9e4:	f023 0303 	bic.w	r3, r3, #3
 800b9e8:	f043 0302 	orr.w	r3, r3, #2
 800b9ec:	81a3      	strh	r3, [r4, #12]
 800b9ee:	e7e3      	b.n	800b9b8 <__smakebuf_r+0xc>
 800b9f0:	89a3      	ldrh	r3, [r4, #12]
 800b9f2:	6020      	str	r0, [r4, #0]
 800b9f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9f8:	81a3      	strh	r3, [r4, #12]
 800b9fa:	9b00      	ldr	r3, [sp, #0]
 800b9fc:	6163      	str	r3, [r4, #20]
 800b9fe:	9b01      	ldr	r3, [sp, #4]
 800ba00:	6120      	str	r0, [r4, #16]
 800ba02:	b15b      	cbz	r3, 800ba1c <__smakebuf_r+0x70>
 800ba04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba08:	4630      	mov	r0, r6
 800ba0a:	f000 f81d 	bl	800ba48 <_isatty_r>
 800ba0e:	b128      	cbz	r0, 800ba1c <__smakebuf_r+0x70>
 800ba10:	89a3      	ldrh	r3, [r4, #12]
 800ba12:	f023 0303 	bic.w	r3, r3, #3
 800ba16:	f043 0301 	orr.w	r3, r3, #1
 800ba1a:	81a3      	strh	r3, [r4, #12]
 800ba1c:	89a3      	ldrh	r3, [r4, #12]
 800ba1e:	431d      	orrs	r5, r3
 800ba20:	81a5      	strh	r5, [r4, #12]
 800ba22:	e7cf      	b.n	800b9c4 <__smakebuf_r+0x18>

0800ba24 <_fstat_r>:
 800ba24:	b538      	push	{r3, r4, r5, lr}
 800ba26:	4d07      	ldr	r5, [pc, #28]	; (800ba44 <_fstat_r+0x20>)
 800ba28:	2300      	movs	r3, #0
 800ba2a:	4604      	mov	r4, r0
 800ba2c:	4608      	mov	r0, r1
 800ba2e:	4611      	mov	r1, r2
 800ba30:	602b      	str	r3, [r5, #0]
 800ba32:	f7f5 fe1c 	bl	800166e <_fstat>
 800ba36:	1c43      	adds	r3, r0, #1
 800ba38:	d102      	bne.n	800ba40 <_fstat_r+0x1c>
 800ba3a:	682b      	ldr	r3, [r5, #0]
 800ba3c:	b103      	cbz	r3, 800ba40 <_fstat_r+0x1c>
 800ba3e:	6023      	str	r3, [r4, #0]
 800ba40:	bd38      	pop	{r3, r4, r5, pc}
 800ba42:	bf00      	nop
 800ba44:	200039c4 	.word	0x200039c4

0800ba48 <_isatty_r>:
 800ba48:	b538      	push	{r3, r4, r5, lr}
 800ba4a:	4d06      	ldr	r5, [pc, #24]	; (800ba64 <_isatty_r+0x1c>)
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	4604      	mov	r4, r0
 800ba50:	4608      	mov	r0, r1
 800ba52:	602b      	str	r3, [r5, #0]
 800ba54:	f7f5 fe1b 	bl	800168e <_isatty>
 800ba58:	1c43      	adds	r3, r0, #1
 800ba5a:	d102      	bne.n	800ba62 <_isatty_r+0x1a>
 800ba5c:	682b      	ldr	r3, [r5, #0]
 800ba5e:	b103      	cbz	r3, 800ba62 <_isatty_r+0x1a>
 800ba60:	6023      	str	r3, [r4, #0]
 800ba62:	bd38      	pop	{r3, r4, r5, pc}
 800ba64:	200039c4 	.word	0x200039c4

0800ba68 <abort>:
 800ba68:	b508      	push	{r3, lr}
 800ba6a:	2006      	movs	r0, #6
 800ba6c:	f000 f82c 	bl	800bac8 <raise>
 800ba70:	2001      	movs	r0, #1
 800ba72:	f7f5 fdad 	bl	80015d0 <_exit>

0800ba76 <_raise_r>:
 800ba76:	291f      	cmp	r1, #31
 800ba78:	b538      	push	{r3, r4, r5, lr}
 800ba7a:	4604      	mov	r4, r0
 800ba7c:	460d      	mov	r5, r1
 800ba7e:	d904      	bls.n	800ba8a <_raise_r+0x14>
 800ba80:	2316      	movs	r3, #22
 800ba82:	6003      	str	r3, [r0, #0]
 800ba84:	f04f 30ff 	mov.w	r0, #4294967295
 800ba88:	bd38      	pop	{r3, r4, r5, pc}
 800ba8a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ba8c:	b112      	cbz	r2, 800ba94 <_raise_r+0x1e>
 800ba8e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba92:	b94b      	cbnz	r3, 800baa8 <_raise_r+0x32>
 800ba94:	4620      	mov	r0, r4
 800ba96:	f000 f831 	bl	800bafc <_getpid_r>
 800ba9a:	462a      	mov	r2, r5
 800ba9c:	4601      	mov	r1, r0
 800ba9e:	4620      	mov	r0, r4
 800baa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800baa4:	f000 b818 	b.w	800bad8 <_kill_r>
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d00a      	beq.n	800bac2 <_raise_r+0x4c>
 800baac:	1c59      	adds	r1, r3, #1
 800baae:	d103      	bne.n	800bab8 <_raise_r+0x42>
 800bab0:	2316      	movs	r3, #22
 800bab2:	6003      	str	r3, [r0, #0]
 800bab4:	2001      	movs	r0, #1
 800bab6:	e7e7      	b.n	800ba88 <_raise_r+0x12>
 800bab8:	2400      	movs	r4, #0
 800baba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800babe:	4628      	mov	r0, r5
 800bac0:	4798      	blx	r3
 800bac2:	2000      	movs	r0, #0
 800bac4:	e7e0      	b.n	800ba88 <_raise_r+0x12>
	...

0800bac8 <raise>:
 800bac8:	4b02      	ldr	r3, [pc, #8]	; (800bad4 <raise+0xc>)
 800baca:	4601      	mov	r1, r0
 800bacc:	6818      	ldr	r0, [r3, #0]
 800bace:	f7ff bfd2 	b.w	800ba76 <_raise_r>
 800bad2:	bf00      	nop
 800bad4:	20000068 	.word	0x20000068

0800bad8 <_kill_r>:
 800bad8:	b538      	push	{r3, r4, r5, lr}
 800bada:	4d07      	ldr	r5, [pc, #28]	; (800baf8 <_kill_r+0x20>)
 800badc:	2300      	movs	r3, #0
 800bade:	4604      	mov	r4, r0
 800bae0:	4608      	mov	r0, r1
 800bae2:	4611      	mov	r1, r2
 800bae4:	602b      	str	r3, [r5, #0]
 800bae6:	f7f5 fd63 	bl	80015b0 <_kill>
 800baea:	1c43      	adds	r3, r0, #1
 800baec:	d102      	bne.n	800baf4 <_kill_r+0x1c>
 800baee:	682b      	ldr	r3, [r5, #0]
 800baf0:	b103      	cbz	r3, 800baf4 <_kill_r+0x1c>
 800baf2:	6023      	str	r3, [r4, #0]
 800baf4:	bd38      	pop	{r3, r4, r5, pc}
 800baf6:	bf00      	nop
 800baf8:	200039c4 	.word	0x200039c4

0800bafc <_getpid_r>:
 800bafc:	f7f5 bd50 	b.w	80015a0 <_getpid>

0800bb00 <_init>:
 800bb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb02:	bf00      	nop
 800bb04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb06:	bc08      	pop	{r3}
 800bb08:	469e      	mov	lr, r3
 800bb0a:	4770      	bx	lr

0800bb0c <_fini>:
 800bb0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb0e:	bf00      	nop
 800bb10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb12:	bc08      	pop	{r3}
 800bb14:	469e      	mov	lr, r3
 800bb16:	4770      	bx	lr
