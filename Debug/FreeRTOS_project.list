
FreeRTOS_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000604  0800ce18  0800ce18  0001ce18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d41c  0800d41c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d41c  0800d41c  0001d41c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d424  0800d424  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d424  0800d424  0001d424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d428  0800d428  0001d428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800d42c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005f6c  200001d8  0800d604  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006144  0800d604  00026144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e30a  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000421c  00000000  00000000  0003e555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001868  00000000  00000000  00042778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012d0  00000000  00000000  00043fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002aaab  00000000  00000000  000452b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d36d  00000000  00000000  0006fd5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ff12b  00000000  00000000  0008d0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007538  00000000  00000000  0018c1f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0019372c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ce00 	.word	0x0800ce00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800ce00 	.word	0x0800ce00

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b970 	b.w	8000ec0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	460d      	mov	r5, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	460f      	mov	r7, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4694      	mov	ip, r2
 8000c0c:	d965      	bls.n	8000cda <__udivmoddi4+0xe2>
 8000c0e:	fab2 f382 	clz	r3, r2
 8000c12:	b143      	cbz	r3, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c18:	f1c3 0220 	rsb	r2, r3, #32
 8000c1c:	409f      	lsls	r7, r3
 8000c1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c22:	4317      	orrs	r7, r2
 8000c24:	409c      	lsls	r4, r3
 8000c26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c2a:	fa1f f58c 	uxth.w	r5, ip
 8000c2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c32:	0c22      	lsrs	r2, r4, #16
 8000c34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c3c:	fb01 f005 	mul.w	r0, r1, r5
 8000c40:	4290      	cmp	r0, r2
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c4c:	f080 811c 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c50:	4290      	cmp	r0, r2
 8000c52:	f240 8119 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c56:	3902      	subs	r1, #2
 8000c58:	4462      	add	r2, ip
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	b2a4      	uxth	r4, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c6a:	fb00 f505 	mul.w	r5, r0, r5
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x90>
 8000c72:	eb1c 0404 	adds.w	r4, ip, r4
 8000c76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c7a:	f080 8107 	bcs.w	8000e8c <__udivmoddi4+0x294>
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	f240 8104 	bls.w	8000e8c <__udivmoddi4+0x294>
 8000c84:	4464      	add	r4, ip
 8000c86:	3802      	subs	r0, #2
 8000c88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11e      	cbz	r6, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40dc      	lsrs	r4, r3
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0xbc>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80ed 	beq.w	8000e82 <__udivmoddi4+0x28a>
 8000ca8:	2100      	movs	r1, #0
 8000caa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	fab3 f183 	clz	r1, r3
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	d149      	bne.n	8000d50 <__udivmoddi4+0x158>
 8000cbc:	42ab      	cmp	r3, r5
 8000cbe:	d302      	bcc.n	8000cc6 <__udivmoddi4+0xce>
 8000cc0:	4282      	cmp	r2, r0
 8000cc2:	f200 80f8 	bhi.w	8000eb6 <__udivmoddi4+0x2be>
 8000cc6:	1a84      	subs	r4, r0, r2
 8000cc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ccc:	2001      	movs	r0, #1
 8000cce:	4617      	mov	r7, r2
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d0e2      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cd8:	e7df      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cda:	b902      	cbnz	r2, 8000cde <__udivmoddi4+0xe6>
 8000cdc:	deff      	udf	#255	; 0xff
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8090 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000ce8:	1a8a      	subs	r2, r1, r2
 8000cea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cf8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cfc:	0c22      	lsrs	r2, r4, #16
 8000cfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d02:	fb0e f005 	mul.w	r0, lr, r5
 8000d06:	4290      	cmp	r0, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d0e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4290      	cmp	r0, r2
 8000d16:	f200 80cb 	bhi.w	8000eb0 <__udivmoddi4+0x2b8>
 8000d1a:	4645      	mov	r5, r8
 8000d1c:	1a12      	subs	r2, r2, r0
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d24:	fb07 2210 	mls	r2, r7, r0, r2
 8000d28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x14e>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x14c>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	f200 80bb 	bhi.w	8000eba <__udivmoddi4+0x2c2>
 8000d44:	4610      	mov	r0, r2
 8000d46:	eba4 040e 	sub.w	r4, r4, lr
 8000d4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d4e:	e79f      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d50:	f1c1 0720 	rsb	r7, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d62:	fa20 f307 	lsr.w	r3, r0, r7
 8000d66:	40fd      	lsrs	r5, r7
 8000d68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6c:	4323      	orrs	r3, r4
 8000d6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d72:	fa1f fe8c 	uxth.w	lr, ip
 8000d76:	fb09 5518 	mls	r5, r9, r8, r5
 8000d7a:	0c1c      	lsrs	r4, r3, #16
 8000d7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d80:	fb08 f50e 	mul.w	r5, r8, lr
 8000d84:	42a5      	cmp	r5, r4
 8000d86:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d98:	f080 8088 	bcs.w	8000eac <__udivmoddi4+0x2b4>
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	f240 8085 	bls.w	8000eac <__udivmoddi4+0x2b4>
 8000da2:	f1a8 0802 	sub.w	r8, r8, #2
 8000da6:	4464      	add	r4, ip
 8000da8:	1b64      	subs	r4, r4, r5
 8000daa:	b29d      	uxth	r5, r3
 8000dac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db0:	fb09 4413 	mls	r4, r9, r3, r4
 8000db4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000db8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dc8:	d26c      	bcs.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	d96a      	bls.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dd6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dda:	eba4 040e 	sub.w	r4, r4, lr
 8000dde:	42ac      	cmp	r4, r5
 8000de0:	46c8      	mov	r8, r9
 8000de2:	46ae      	mov	lr, r5
 8000de4:	d356      	bcc.n	8000e94 <__udivmoddi4+0x29c>
 8000de6:	d053      	beq.n	8000e90 <__udivmoddi4+0x298>
 8000de8:	b156      	cbz	r6, 8000e00 <__udivmoddi4+0x208>
 8000dea:	ebb0 0208 	subs.w	r2, r0, r8
 8000dee:	eb64 040e 	sbc.w	r4, r4, lr
 8000df2:	fa04 f707 	lsl.w	r7, r4, r7
 8000df6:	40ca      	lsrs	r2, r1
 8000df8:	40cc      	lsrs	r4, r1
 8000dfa:	4317      	orrs	r7, r2
 8000dfc:	e9c6 7400 	strd	r7, r4, [r6]
 8000e00:	4618      	mov	r0, r3
 8000e02:	2100      	movs	r1, #0
 8000e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e08:	f1c3 0120 	rsb	r1, r3, #32
 8000e0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e10:	fa20 f201 	lsr.w	r2, r0, r1
 8000e14:	fa25 f101 	lsr.w	r1, r5, r1
 8000e18:	409d      	lsls	r5, r3
 8000e1a:	432a      	orrs	r2, r5
 8000e1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e28:	fb07 1510 	mls	r5, r7, r0, r1
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e32:	fb00 f50e 	mul.w	r5, r0, lr
 8000e36:	428d      	cmp	r5, r1
 8000e38:	fa04 f403 	lsl.w	r4, r4, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x258>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e46:	d22f      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e48:	428d      	cmp	r5, r1
 8000e4a:	d92d      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1b49      	subs	r1, r1, r5
 8000e52:	b292      	uxth	r2, r2
 8000e54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e58:	fb07 1115 	mls	r1, r7, r5, r1
 8000e5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e60:	fb05 f10e 	mul.w	r1, r5, lr
 8000e64:	4291      	cmp	r1, r2
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x282>
 8000e68:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e70:	d216      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e72:	4291      	cmp	r1, r2
 8000e74:	d914      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e76:	3d02      	subs	r5, #2
 8000e78:	4462      	add	r2, ip
 8000e7a:	1a52      	subs	r2, r2, r1
 8000e7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e80:	e738      	b.n	8000cf4 <__udivmoddi4+0xfc>
 8000e82:	4631      	mov	r1, r6
 8000e84:	4630      	mov	r0, r6
 8000e86:	e708      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000e88:	4639      	mov	r1, r7
 8000e8a:	e6e6      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	e6fb      	b.n	8000c88 <__udivmoddi4+0x90>
 8000e90:	4548      	cmp	r0, r9
 8000e92:	d2a9      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e94:	ebb9 0802 	subs.w	r8, r9, r2
 8000e98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	e7a3      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000ea0:	4645      	mov	r5, r8
 8000ea2:	e7ea      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ea4:	462b      	mov	r3, r5
 8000ea6:	e794      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea8:	4640      	mov	r0, r8
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x258>
 8000eac:	46d0      	mov	r8, sl
 8000eae:	e77b      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eb0:	3d02      	subs	r5, #2
 8000eb2:	4462      	add	r2, ip
 8000eb4:	e732      	b.n	8000d1c <__udivmoddi4+0x124>
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e70a      	b.n	8000cd0 <__udivmoddi4+0xd8>
 8000eba:	4464      	add	r4, ip
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	e742      	b.n	8000d46 <__udivmoddi4+0x14e>

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <Engine>:
#include "engine.h"


void Engine(engine_state state){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]

	switch (state){
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	2b04      	cmp	r3, #4
 8000ed2:	d81c      	bhi.n	8000f0e <Engine+0x4a>
 8000ed4:	a201      	add	r2, pc, #4	; (adr r2, 8000edc <Engine+0x18>)
 8000ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eda:	bf00      	nop
 8000edc:	08000ef1 	.word	0x08000ef1
 8000ee0:	08000efd 	.word	0x08000efd
 8000ee4:	08000ef7 	.word	0x08000ef7
 8000ee8:	08000f03 	.word	0x08000f03
 8000eec:	08000f09 	.word	0x08000f09
		case MOVE_FORWARD:
			EngineMoveForward();
 8000ef0:	f000 f82c 	bl	8000f4c <EngineMoveForward>
			break;
 8000ef4:	e00c      	b.n	8000f10 <Engine+0x4c>
		case TURN_RIGHT:
			EngineTurnRight();
 8000ef6:	f000 f883 	bl	8001000 <EngineTurnRight>
			break;
 8000efa:	e009      	b.n	8000f10 <Engine+0x4c>
		case MOVE_BACKWARD:
			EngineMoveBackward();
 8000efc:	f000 f844 	bl	8000f88 <EngineMoveBackward>
			break;
 8000f00:	e006      	b.n	8000f10 <Engine+0x4c>
		case TURN_LEFT:
			EngineTurnLeft();
 8000f02:	f000 f89b 	bl	800103c <EngineTurnLeft>
			break;
 8000f06:	e003      	b.n	8000f10 <Engine+0x4c>
		case STOP:
			EngineStop();
 8000f08:	f000 f85c 	bl	8000fc4 <EngineStop>
			break;
 8000f0c:	e000      	b.n	8000f10 <Engine+0x4c>
		default:
			break;
 8000f0e:	bf00      	nop
	}
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <EnginesInit>:


void EnginesInit(GPIO_TypeDef* EN1_Port, uint16_t EN1_Pin, GPIO_TypeDef* EN2_Port, uint16_t EN2_Pin){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	607a      	str	r2, [r7, #4]
 8000f22:	461a      	mov	r2, r3
 8000f24:	460b      	mov	r3, r1
 8000f26:	817b      	strh	r3, [r7, #10]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	813b      	strh	r3, [r7, #8]
    HAL_GPIO_WritePin(EN1_Port, EN1_Pin, GPIO_PIN_SET);
 8000f2c:	897b      	ldrh	r3, [r7, #10]
 8000f2e:	2201      	movs	r2, #1
 8000f30:	4619      	mov	r1, r3
 8000f32:	68f8      	ldr	r0, [r7, #12]
 8000f34:	f001 fbcc 	bl	80026d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_Port, EN2_Pin, GPIO_PIN_SET);
 8000f38:	893b      	ldrh	r3, [r7, #8]
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f001 fbc6 	bl	80026d0 <HAL_GPIO_WritePin>
}
 8000f44:	bf00      	nop
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <EngineMoveForward>:

void EngineMoveForward(){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(Engine_IN1_GPIO_Port, Engine_IN1_Pin, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2110      	movs	r1, #16
 8000f54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f58:	f001 fbba 	bl	80026d0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Engine_IN3_GPIO_Port, Engine_IN3_Pin, GPIO_PIN_RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2102      	movs	r1, #2
 8000f60:	4807      	ldr	r0, [pc, #28]	; (8000f80 <EngineMoveForward+0x34>)
 8000f62:	f001 fbb5 	bl	80026d0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Engine_IN2_GPIO_Port, Engine_IN2_Pin, GPIO_PIN_SET);
 8000f66:	2201      	movs	r2, #1
 8000f68:	2101      	movs	r1, #1
 8000f6a:	4806      	ldr	r0, [pc, #24]	; (8000f84 <EngineMoveForward+0x38>)
 8000f6c:	f001 fbb0 	bl	80026d0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Engine_IN4_GPIO_Port, Engine_IN4_Pin, GPIO_PIN_SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	2101      	movs	r1, #1
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <EngineMoveForward+0x34>)
 8000f76:	f001 fbab 	bl	80026d0 <HAL_GPIO_WritePin>
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	48000800 	.word	0x48000800
 8000f84:	48000400 	.word	0x48000400

08000f88 <EngineMoveBackward>:

void EngineMoveBackward(){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Engine_IN1_GPIO_Port, Engine_IN1_Pin, GPIO_PIN_SET);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2110      	movs	r1, #16
 8000f90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f94:	f001 fb9c 	bl	80026d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Engine_IN3_GPIO_Port, Engine_IN3_Pin, GPIO_PIN_SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2102      	movs	r1, #2
 8000f9c:	4807      	ldr	r0, [pc, #28]	; (8000fbc <EngineMoveBackward+0x34>)
 8000f9e:	f001 fb97 	bl	80026d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Engine_IN2_GPIO_Port, Engine_IN2_Pin, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	4806      	ldr	r0, [pc, #24]	; (8000fc0 <EngineMoveBackward+0x38>)
 8000fa8:	f001 fb92 	bl	80026d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Engine_IN4_GPIO_Port, Engine_IN4_Pin, GPIO_PIN_RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2101      	movs	r1, #1
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <EngineMoveBackward+0x34>)
 8000fb2:	f001 fb8d 	bl	80026d0 <HAL_GPIO_WritePin>
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	48000800 	.word	0x48000800
 8000fc0:	48000400 	.word	0x48000400

08000fc4 <EngineStop>:

void EngineStop(){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Engine_IN1_GPIO_Port, Engine_IN1_Pin, GPIO_PIN_SET);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2110      	movs	r1, #16
 8000fcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd0:	f001 fb7e 	bl	80026d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Engine_IN3_GPIO_Port, Engine_IN3_Pin, GPIO_PIN_SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	4807      	ldr	r0, [pc, #28]	; (8000ff8 <EngineStop+0x34>)
 8000fda:	f001 fb79 	bl	80026d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Engine_IN2_GPIO_Port, Engine_IN2_Pin, GPIO_PIN_SET);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	4806      	ldr	r0, [pc, #24]	; (8000ffc <EngineStop+0x38>)
 8000fe4:	f001 fb74 	bl	80026d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Engine_IN4_GPIO_Port, Engine_IN4_Pin, GPIO_PIN_SET);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	2101      	movs	r1, #1
 8000fec:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <EngineStop+0x34>)
 8000fee:	f001 fb6f 	bl	80026d0 <HAL_GPIO_WritePin>
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	48000800 	.word	0x48000800
 8000ffc:	48000400 	.word	0x48000400

08001000 <EngineTurnRight>:

void EngineTurnRight(){
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Engine_IN1_GPIO_Port, Engine_IN1_Pin, GPIO_PIN_SET);
 8001004:	2201      	movs	r2, #1
 8001006:	2110      	movs	r1, #16
 8001008:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800100c:	f001 fb60 	bl	80026d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Engine_IN3_GPIO_Port, Engine_IN3_Pin, GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	2102      	movs	r1, #2
 8001014:	4807      	ldr	r0, [pc, #28]	; (8001034 <EngineTurnRight+0x34>)
 8001016:	f001 fb5b 	bl	80026d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Engine_IN2_GPIO_Port, Engine_IN2_Pin, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	2101      	movs	r1, #1
 800101e:	4806      	ldr	r0, [pc, #24]	; (8001038 <EngineTurnRight+0x38>)
 8001020:	f001 fb56 	bl	80026d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Engine_IN4_GPIO_Port, Engine_IN4_Pin, GPIO_PIN_SET);
 8001024:	2201      	movs	r2, #1
 8001026:	2101      	movs	r1, #1
 8001028:	4802      	ldr	r0, [pc, #8]	; (8001034 <EngineTurnRight+0x34>)
 800102a:	f001 fb51 	bl	80026d0 <HAL_GPIO_WritePin>
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	48000800 	.word	0x48000800
 8001038:	48000400 	.word	0x48000400

0800103c <EngineTurnLeft>:

void EngineTurnLeft(){
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Engine_IN1_GPIO_Port, Engine_IN1_Pin, GPIO_PIN_RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	2110      	movs	r1, #16
 8001044:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001048:	f001 fb42 	bl	80026d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Engine_IN3_GPIO_Port, Engine_IN3_Pin, GPIO_PIN_SET);
 800104c:	2201      	movs	r2, #1
 800104e:	2102      	movs	r1, #2
 8001050:	4807      	ldr	r0, [pc, #28]	; (8001070 <EngineTurnLeft+0x34>)
 8001052:	f001 fb3d 	bl	80026d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Engine_IN2_GPIO_Port, Engine_IN2_Pin, GPIO_PIN_SET);
 8001056:	2201      	movs	r2, #1
 8001058:	2101      	movs	r1, #1
 800105a:	4806      	ldr	r0, [pc, #24]	; (8001074 <EngineTurnLeft+0x38>)
 800105c:	f001 fb38 	bl	80026d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Engine_IN4_GPIO_Port, Engine_IN4_Pin, GPIO_PIN_RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	2101      	movs	r1, #1
 8001064:	4802      	ldr	r0, [pc, #8]	; (8001070 <EngineTurnLeft+0x34>)
 8001066:	f001 fb33 	bl	80026d0 <HAL_GPIO_WritePin>
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	48000800 	.word	0x48000800
 8001074:	48000400 	.word	0x48000400

08001078 <HAL_TIM_IC_CaptureCallback>:
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  if (htim == &htim3)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a0b      	ldr	r2, [pc, #44]	; (80010b0 <HAL_TIM_IC_CaptureCallback+0x38>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d10e      	bne.n	80010a6 <HAL_TIM_IC_CaptureCallback+0x2e>
  {
	osSemaphoreRelease(Semaphore1_IR_InterruptHandle);
 8001088:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <HAL_TIM_IC_CaptureCallback+0x3c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4618      	mov	r0, r3
 800108e:	f005 ff09 	bl	8006ea4 <osSemaphoreRelease>
    switch (HAL_TIM_GetActiveChannel(&htim3))
 8001092:	4807      	ldr	r0, [pc, #28]	; (80010b0 <HAL_TIM_IC_CaptureCallback+0x38>)
 8001094:	f003 ffe6 	bl	8005064 <HAL_TIM_GetActiveChannel>
 8001098:	4603      	mov	r3, r0
 800109a:	2b01      	cmp	r3, #1
 800109c:	d102      	bne.n	80010a4 <HAL_TIM_IC_CaptureCallback+0x2c>
    {
      case HAL_TIM_ACTIVE_CHANNEL_1:
        ir_tim_interrupt();
 800109e:	f000 fad3 	bl	8001648 <ir_tim_interrupt>
        break;
 80010a2:	e000      	b.n	80010a6 <HAL_TIM_IC_CaptureCallback+0x2e>
      default:
        break;
 80010a4:	bf00      	nop
    }
  }
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200002f8 	.word	0x200002f8
 80010b4:	20000214 	.word	0x20000214

080010b8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Semaphore1_IR_Interrupt */
  Semaphore1_IR_InterruptHandle = osSemaphoreNew(1, 1, &Semaphore1_IR_Interrupt_attributes);
 80010bc:	4a28      	ldr	r2, [pc, #160]	; (8001160 <MX_FREERTOS_Init+0xa8>)
 80010be:	2101      	movs	r1, #1
 80010c0:	2001      	movs	r0, #1
 80010c2:	f005 fe14 	bl	8006cee <osSemaphoreNew>
 80010c6:	4603      	mov	r3, r0
 80010c8:	4a26      	ldr	r2, [pc, #152]	; (8001164 <MX_FREERTOS_Init+0xac>)
 80010ca:	6013      	str	r3, [r2, #0]

  /* creation of Semaphore2_IR_Engine */
  Semaphore2_IR_EngineHandle = osSemaphoreNew(1, 1, &Semaphore2_IR_Engine_attributes);
 80010cc:	4a26      	ldr	r2, [pc, #152]	; (8001168 <MX_FREERTOS_Init+0xb0>)
 80010ce:	2101      	movs	r1, #1
 80010d0:	2001      	movs	r0, #1
 80010d2:	f005 fe0c 	bl	8006cee <osSemaphoreNew>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4a24      	ldr	r2, [pc, #144]	; (800116c <MX_FREERTOS_Init+0xb4>)
 80010da:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Queue1_Commands */
  Queue1_CommandsHandle = osMessageQueueNew (10, 20, &Queue1_Commands_attributes);
 80010dc:	4a24      	ldr	r2, [pc, #144]	; (8001170 <MX_FREERTOS_Init+0xb8>)
 80010de:	2114      	movs	r1, #20
 80010e0:	200a      	movs	r0, #10
 80010e2:	f005 ff43 	bl	8006f6c <osMessageQueueNew>
 80010e6:	4603      	mov	r3, r0
 80010e8:	4a22      	ldr	r2, [pc, #136]	; (8001174 <MX_FREERTOS_Init+0xbc>)
 80010ea:	6013      	str	r3, [r2, #0]

  /* creation of Queue02_EngineCommands */
  Queue02_EngineCommandsHandle = osMessageQueueNew (10, 10, &Queue02_EngineCommands_attributes);
 80010ec:	4a22      	ldr	r2, [pc, #136]	; (8001178 <MX_FREERTOS_Init+0xc0>)
 80010ee:	210a      	movs	r1, #10
 80010f0:	200a      	movs	r0, #10
 80010f2:	f005 ff3b 	bl	8006f6c <osMessageQueueNew>
 80010f6:	4603      	mov	r3, r0
 80010f8:	4a20      	ldr	r2, [pc, #128]	; (800117c <MX_FREERTOS_Init+0xc4>)
 80010fa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80010fc:	4a20      	ldr	r2, [pc, #128]	; (8001180 <MX_FREERTOS_Init+0xc8>)
 80010fe:	2100      	movs	r1, #0
 8001100:	4820      	ldr	r0, [pc, #128]	; (8001184 <MX_FREERTOS_Init+0xcc>)
 8001102:	f005 fd47 	bl	8006b94 <osThreadNew>
 8001106:	4603      	mov	r3, r0
 8001108:	4a1f      	ldr	r2, [pc, #124]	; (8001188 <MX_FREERTOS_Init+0xd0>)
 800110a:	6013      	str	r3, [r2, #0]

  /* creation of Task3_CommandDetection */
  Task3_CommandDetectionHandle = osThreadNew(CommandDetection, NULL, &Task3_CommandDetection_attributes);
 800110c:	4a1f      	ldr	r2, [pc, #124]	; (800118c <MX_FREERTOS_Init+0xd4>)
 800110e:	2100      	movs	r1, #0
 8001110:	481f      	ldr	r0, [pc, #124]	; (8001190 <MX_FREERTOS_Init+0xd8>)
 8001112:	f005 fd3f 	bl	8006b94 <osThreadNew>
 8001116:	4603      	mov	r3, r0
 8001118:	4a1e      	ldr	r2, [pc, #120]	; (8001194 <MX_FREERTOS_Init+0xdc>)
 800111a:	6013      	str	r3, [r2, #0]

  /* creation of Task4_UltrasoundSensor */
  Task4_UltrasoundSensorHandle = osThreadNew(UltrasoundSensor, NULL, &Task4_UltrasoundSensor_attributes);
 800111c:	4a1e      	ldr	r2, [pc, #120]	; (8001198 <MX_FREERTOS_Init+0xe0>)
 800111e:	2100      	movs	r1, #0
 8001120:	481e      	ldr	r0, [pc, #120]	; (800119c <MX_FREERTOS_Init+0xe4>)
 8001122:	f005 fd37 	bl	8006b94 <osThreadNew>
 8001126:	4603      	mov	r3, r0
 8001128:	4a1d      	ldr	r2, [pc, #116]	; (80011a0 <MX_FREERTOS_Init+0xe8>)
 800112a:	6013      	str	r3, [r2, #0]

  /* creation of Task2_UsartReceiving */
  Task2_UsartReceivingHandle = osThreadNew(UsartReceiving, NULL, &Task2_UsartReceiving_attributes);
 800112c:	4a1d      	ldr	r2, [pc, #116]	; (80011a4 <MX_FREERTOS_Init+0xec>)
 800112e:	2100      	movs	r1, #0
 8001130:	481d      	ldr	r0, [pc, #116]	; (80011a8 <MX_FREERTOS_Init+0xf0>)
 8001132:	f005 fd2f 	bl	8006b94 <osThreadNew>
 8001136:	4603      	mov	r3, r0
 8001138:	4a1c      	ldr	r2, [pc, #112]	; (80011ac <MX_FREERTOS_Init+0xf4>)
 800113a:	6013      	str	r3, [r2, #0]

  /* creation of Task10_IR_CommandsDetection */
  Task10_IR_CommandsDetectionHandle = osThreadNew(IR_CommandsDetection, NULL, &Task10_IR_CommandsDetection_attributes);
 800113c:	4a1c      	ldr	r2, [pc, #112]	; (80011b0 <MX_FREERTOS_Init+0xf8>)
 800113e:	2100      	movs	r1, #0
 8001140:	481c      	ldr	r0, [pc, #112]	; (80011b4 <MX_FREERTOS_Init+0xfc>)
 8001142:	f005 fd27 	bl	8006b94 <osThreadNew>
 8001146:	4603      	mov	r3, r0
 8001148:	4a1b      	ldr	r2, [pc, #108]	; (80011b8 <MX_FREERTOS_Init+0x100>)
 800114a:	6013      	str	r3, [r2, #0]

  /* creation of Task11_EngineTask */
  Task11_EngineTaskHandle = osThreadNew(EngineTask, NULL, &Task11_EngineTask_attributes);
 800114c:	4a1b      	ldr	r2, [pc, #108]	; (80011bc <MX_FREERTOS_Init+0x104>)
 800114e:	2100      	movs	r1, #0
 8001150:	481b      	ldr	r0, [pc, #108]	; (80011c0 <MX_FREERTOS_Init+0x108>)
 8001152:	f005 fd1f 	bl	8006b94 <osThreadNew>
 8001156:	4603      	mov	r3, r0
 8001158:	4a1a      	ldr	r2, [pc, #104]	; (80011c4 <MX_FREERTOS_Init+0x10c>)
 800115a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	0800d044 	.word	0x0800d044
 8001164:	20000214 	.word	0x20000214
 8001168:	0800d054 	.word	0x0800d054
 800116c:	20000218 	.word	0x20000218
 8001170:	0800d014 	.word	0x0800d014
 8001174:	2000020c 	.word	0x2000020c
 8001178:	0800d02c 	.word	0x0800d02c
 800117c:	20000210 	.word	0x20000210
 8001180:	0800cf3c 	.word	0x0800cf3c
 8001184:	080011c9 	.word	0x080011c9
 8001188:	200001f4 	.word	0x200001f4
 800118c:	0800cf60 	.word	0x0800cf60
 8001190:	080011d9 	.word	0x080011d9
 8001194:	200001f8 	.word	0x200001f8
 8001198:	0800cf84 	.word	0x0800cf84
 800119c:	08001259 	.word	0x08001259
 80011a0:	200001fc 	.word	0x200001fc
 80011a4:	0800cfa8 	.word	0x0800cfa8
 80011a8:	080012c5 	.word	0x080012c5
 80011ac:	20000200 	.word	0x20000200
 80011b0:	0800cfcc 	.word	0x0800cfcc
 80011b4:	08001371 	.word	0x08001371
 80011b8:	20000204 	.word	0x20000204
 80011bc:	0800cff0 	.word	0x0800cff0
 80011c0:	080014a9 	.word	0x080014a9
 80011c4:	20000208 	.word	0x20000208

080011c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011d0:	2001      	movs	r0, #1
 80011d2:	f005 fd71 	bl	8006cb8 <osDelay>
 80011d6:	e7fb      	b.n	80011d0 <StartDefaultTask+0x8>

080011d8 <CommandDetection>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CommandDetection */
void CommandDetection(void *argument)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CommandDetection */
	char ReceivedValue[MAX_LENGTH_OF_LINE_RECEIVED_BY_USART + 1];
	  /* Infinite loop */
	  for(;;){
		 osMessageQueueGet(Queue1_CommandsHandle, ReceivedValue, 0, osWaitForever);
 80011e0:	4b19      	ldr	r3, [pc, #100]	; (8001248 <CommandDetection+0x70>)
 80011e2:	6818      	ldr	r0, [r3, #0]
 80011e4:	f107 0108 	add.w	r1, r7, #8
 80011e8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ec:	2200      	movs	r2, #0
 80011ee:	f005 ff91 	bl	8007114 <osMessageQueueGet>
		  //ReceivedValue = osMessageGet(Queue1_CommandsHandle, osWaitForever)
		  if (strcmp(ReceivedValue, "on") == 0){
 80011f2:	f107 0308 	add.w	r3, r7, #8
 80011f6:	4915      	ldr	r1, [pc, #84]	; (800124c <CommandDetection+0x74>)
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7fe ffe9 	bl	80001d0 <strcmp>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d106      	bne.n	8001212 <CommandDetection+0x3a>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001204:	2201      	movs	r2, #1
 8001206:	2120      	movs	r1, #32
 8001208:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120c:	f001 fa60 	bl	80026d0 <HAL_GPIO_WritePin>
 8001210:	e015      	b.n	800123e <CommandDetection+0x66>
		  }else if (strcmp(ReceivedValue, "off") == 0) {
 8001212:	f107 0308 	add.w	r3, r7, #8
 8001216:	490e      	ldr	r1, [pc, #56]	; (8001250 <CommandDetection+0x78>)
 8001218:	4618      	mov	r0, r3
 800121a:	f7fe ffd9 	bl	80001d0 <strcmp>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d106      	bne.n	8001232 <CommandDetection+0x5a>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001224:	2200      	movs	r2, #0
 8001226:	2120      	movs	r1, #32
 8001228:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122c:	f001 fa50 	bl	80026d0 <HAL_GPIO_WritePin>
 8001230:	e005      	b.n	800123e <CommandDetection+0x66>
		  }else {
			  printf("Nieznane polecenie: %s\n", ReceivedValue);
 8001232:	f107 0308 	add.w	r3, r7, #8
 8001236:	4619      	mov	r1, r3
 8001238:	4806      	ldr	r0, [pc, #24]	; (8001254 <CommandDetection+0x7c>)
 800123a:	f009 fdcf 	bl	800addc <iprintf>
		  }

		  osDelay(1);
 800123e:	2001      	movs	r0, #1
 8001240:	f005 fd3a 	bl	8006cb8 <osDelay>
		 osMessageQueueGet(Queue1_CommandsHandle, ReceivedValue, 0, osWaitForever);
 8001244:	e7cc      	b.n	80011e0 <CommandDetection+0x8>
 8001246:	bf00      	nop
 8001248:	2000020c 	.word	0x2000020c
 800124c:	0800cef4 	.word	0x0800cef4
 8001250:	0800cef8 	.word	0x0800cef8
 8001254:	0800cefc 	.word	0x0800cefc

08001258 <UltrasoundSensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UltrasoundSensor */
void UltrasoundSensor(void *argument)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UltrasoundSensor */
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8001260:	2100      	movs	r1, #0
 8001262:	4816      	ldr	r0, [pc, #88]	; (80012bc <UltrasoundSensor+0x64>)
 8001264:	f003 f898 	bl	8004398 <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8001268:	2104      	movs	r1, #4
 800126a:	4814      	ldr	r0, [pc, #80]	; (80012bc <UltrasoundSensor+0x64>)
 800126c:	f003 f894 	bl	8004398 <HAL_TIM_IC_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001270:	2108      	movs	r1, #8
 8001272:	4812      	ldr	r0, [pc, #72]	; (80012bc <UltrasoundSensor+0x64>)
 8001274:	f002 ff28 	bl	80040c8 <HAL_TIM_PWM_Start>
	osDelay(1000);
 8001278:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800127c:	f005 fd1c 	bl	8006cb8 <osDelay>
  /* Infinite loop */
  for(;;)
  {

	uint32_t start = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8001280:	2100      	movs	r1, #0
 8001282:	480e      	ldr	r0, [pc, #56]	; (80012bc <UltrasoundSensor+0x64>)
 8001284:	f003 fe8c 	bl	8004fa0 <HAL_TIM_ReadCapturedValue>
 8001288:	6178      	str	r0, [r7, #20]
	uint32_t stop = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 800128a:	2104      	movs	r1, #4
 800128c:	480b      	ldr	r0, [pc, #44]	; (80012bc <UltrasoundSensor+0x64>)
 800128e:	f003 fe87 	bl	8004fa0 <HAL_TIM_ReadCapturedValue>
 8001292:	6138      	str	r0, [r7, #16]
	uint32_t distance = (stop - start) / 58.0f;
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	ee07 3a90 	vmov	s15, r3
 800129e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012a2:	eddf 6a07 	vldr	s13, [pc, #28]	; 80012c0 <UltrasoundSensor+0x68>
 80012a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012ae:	ee17 3a90 	vmov	r3, s15
 80012b2:	60fb      	str	r3, [r7, #12]
	if(distance < 15){

	}

	osDelay(100);
 80012b4:	2064      	movs	r0, #100	; 0x64
 80012b6:	f005 fcff 	bl	8006cb8 <osDelay>
  {
 80012ba:	e7e1      	b.n	8001280 <UltrasoundSensor+0x28>
 80012bc:	200002ac 	.word	0x200002ac
 80012c0:	42680000 	.word	0x42680000

080012c4 <UsartReceiving>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UsartReceiving */
void UsartReceiving(void *argument)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	  static char receivedLine[MAX_LENGTH_OF_LINE_RECEIVED_BY_USART + 1]; // +1 for null terminator

	  /* Infinite loop */
	  for(;;)
	  {
		  if (HAL_UART_Receive(&huart2, &value, 1, 0) == HAL_OK){
 80012cc:	2300      	movs	r3, #0
 80012ce:	2201      	movs	r2, #1
 80012d0:	4921      	ldr	r1, [pc, #132]	; (8001358 <UsartReceiving+0x94>)
 80012d2:	4822      	ldr	r0, [pc, #136]	; (800135c <UsartReceiving+0x98>)
 80012d4:	f004 fe38 	bl	8005f48 <HAL_UART_Receive>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d137      	bne.n	800134e <UsartReceiving+0x8a>
		  		if (value == '\r' || value == '\n') {
 80012de:	4b1e      	ldr	r3, [pc, #120]	; (8001358 <UsartReceiving+0x94>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b0d      	cmp	r3, #13
 80012e4:	d003      	beq.n	80012ee <UsartReceiving+0x2a>
 80012e6:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <UsartReceiving+0x94>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b0a      	cmp	r3, #10
 80012ec:	d11f      	bne.n	800132e <UsartReceiving+0x6a>
		  			// end of line character received
		  			if (line_length > 0){
 80012ee:	4b1c      	ldr	r3, [pc, #112]	; (8001360 <UsartReceiving+0x9c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d02b      	beq.n	800134e <UsartReceiving+0x8a>
		  				// if the buffer is not empty, we add the \0 character at the end of the line
		  				line_buffer[line_length] = '\0';
 80012f6:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <UsartReceiving+0x9c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a1a      	ldr	r2, [pc, #104]	; (8001364 <UsartReceiving+0xa0>)
 80012fc:	2100      	movs	r1, #0
 80012fe:	54d1      	strb	r1, [r2, r3]
		  				// passing the buffer to CommendDetection Task by queue
		  			    strncpy(receivedLine, line_buffer, line_length);
 8001300:	4b17      	ldr	r3, [pc, #92]	; (8001360 <UsartReceiving+0x9c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	4917      	ldr	r1, [pc, #92]	; (8001364 <UsartReceiving+0xa0>)
 8001308:	4817      	ldr	r0, [pc, #92]	; (8001368 <UsartReceiving+0xa4>)
 800130a:	f009 fdc4 	bl	800ae96 <strncpy>
		  			    receivedLine[line_length] = '\0'; // Ensure null termination
 800130e:	4b14      	ldr	r3, [pc, #80]	; (8001360 <UsartReceiving+0x9c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a15      	ldr	r2, [pc, #84]	; (8001368 <UsartReceiving+0xa4>)
 8001314:	2100      	movs	r1, #0
 8001316:	54d1      	strb	r1, [r2, r3]
		  				osMessageQueuePut(Queue1_CommandsHandle, receivedLine, 0, 200);
 8001318:	4b14      	ldr	r3, [pc, #80]	; (800136c <UsartReceiving+0xa8>)
 800131a:	6818      	ldr	r0, [r3, #0]
 800131c:	23c8      	movs	r3, #200	; 0xc8
 800131e:	2200      	movs	r2, #0
 8001320:	4911      	ldr	r1, [pc, #68]	; (8001368 <UsartReceiving+0xa4>)
 8001322:	f005 fe97 	bl	8007054 <osMessageQueuePut>
		  				int y = osMessageQueueGetMsgSize(Queue1_CommandsHandle

		  				**************************/

		  				// starting data collection again
		  				line_length = 0;
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <UsartReceiving+0x9c>)
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
		  			if (line_length > 0){
 800132c:	e00f      	b.n	800134e <UsartReceiving+0x8a>
		  			}
		  		}
		  		else {
		  			if (line_length >= MAX_LENGTH_OF_LINE_RECEIVED_BY_USART) {
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <UsartReceiving+0x9c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2b13      	cmp	r3, #19
 8001334:	d902      	bls.n	800133c <UsartReceiving+0x78>
		  				// too much data, we delete what we have collected so far
		  				line_length = 0;
 8001336:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <UsartReceiving+0x9c>)
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
		  			}
		  			// we add the value to the buffer
		  			line_buffer[line_length++] = value;
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <UsartReceiving+0x9c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	1c5a      	adds	r2, r3, #1
 8001342:	4907      	ldr	r1, [pc, #28]	; (8001360 <UsartReceiving+0x9c>)
 8001344:	600a      	str	r2, [r1, #0]
 8001346:	4a04      	ldr	r2, [pc, #16]	; (8001358 <UsartReceiving+0x94>)
 8001348:	7811      	ldrb	r1, [r2, #0]
 800134a:	4a06      	ldr	r2, [pc, #24]	; (8001364 <UsartReceiving+0xa0>)
 800134c:	54d1      	strb	r1, [r2, r3]
		  		}
		  	}

	    osDelay(1);
 800134e:	2001      	movs	r0, #1
 8001350:	f005 fcb2 	bl	8006cb8 <osDelay>
		  if (HAL_UART_Receive(&huart2, &value, 1, 0) == HAL_OK){
 8001354:	e7ba      	b.n	80012cc <UsartReceiving+0x8>
 8001356:	bf00      	nop
 8001358:	2000021c 	.word	0x2000021c
 800135c:	20000344 	.word	0x20000344
 8001360:	20000220 	.word	0x20000220
 8001364:	20000224 	.word	0x20000224
 8001368:	2000023c 	.word	0x2000023c
 800136c:	2000020c 	.word	0x2000020c

08001370 <IR_CommandsDetection>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_IR_CommandsDetection */
void IR_CommandsDetection(void *argument)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IR_CommandsDetection */
  /* Infinite loop */
  for(;;)
  {

	  	if(osSemaphoreGetCount(Semaphore1_IR_InterruptHandle) != 0){
 8001378:	4b47      	ldr	r3, [pc, #284]	; (8001498 <IR_CommandsDetection+0x128>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f005 fdd5 	bl	8006f2c <osSemaphoreGetCount>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 8082 	beq.w	800148e <IR_CommandsDetection+0x11e>

	  		osSemaphoreAcquire(Semaphore1_IR_InterruptHandle, 0);
 800138a:	4b43      	ldr	r3, [pc, #268]	; (8001498 <IR_CommandsDetection+0x128>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2100      	movs	r1, #0
 8001390:	4618      	mov	r0, r3
 8001392:	f005 fd35 	bl	8006e00 <osSemaphoreAcquire>


	  		int value = ir_read();
 8001396:	f000 f9bd 	bl	8001714 <ir_read>
 800139a:	60f8      	str	r0, [r7, #12]
	  		engine_state state = STOP;
 800139c:	2304      	movs	r3, #4
 800139e:	72fb      	strb	r3, [r7, #11]

	  		switch (value) {
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2b19      	cmp	r3, #25
 80013a4:	dc30      	bgt.n	8001408 <IR_CommandsDetection+0x98>
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2b07      	cmp	r3, #7
 80013aa:	db67      	blt.n	800147c <IR_CommandsDetection+0x10c>
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	3b07      	subs	r3, #7
 80013b0:	2b12      	cmp	r3, #18
 80013b2:	d863      	bhi.n	800147c <IR_CommandsDetection+0x10c>
 80013b4:	a201      	add	r2, pc, #4	; (adr r2, 80013bc <IR_CommandsDetection+0x4c>)
 80013b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ba:	bf00      	nop
 80013bc:	08001451 	.word	0x08001451
 80013c0:	0800147d 	.word	0x0800147d
 80013c4:	08001425 	.word	0x08001425
 80013c8:	0800147d 	.word	0x0800147d
 80013cc:	0800147d 	.word	0x0800147d
 80013d0:	0800147d 	.word	0x0800147d
 80013d4:	0800147d 	.word	0x0800147d
 80013d8:	0800147d 	.word	0x0800147d
 80013dc:	0800147d 	.word	0x0800147d
 80013e0:	0800147d 	.word	0x0800147d
 80013e4:	0800147d 	.word	0x0800147d
 80013e8:	0800147d 	.word	0x0800147d
 80013ec:	0800147d 	.word	0x0800147d
 80013f0:	0800147d 	.word	0x0800147d
 80013f4:	08001467 	.word	0x08001467
 80013f8:	0800147d 	.word	0x0800147d
 80013fc:	0800147d 	.word	0x0800147d
 8001400:	0800147d 	.word	0x0800147d
 8001404:	0800143b 	.word	0x0800143b
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2b40      	cmp	r3, #64	; 0x40
 800140c:	d136      	bne.n	800147c <IR_CommandsDetection+0x10c>
	  			  case IR_CODE_PLUS:
	  				  	  state = MOVE_FORWARD;
 800140e:	2300      	movs	r3, #0
 8001410:	72fb      	strb	r3, [r7, #11]
	  				  	  osMessageQueuePut(Queue02_EngineCommandsHandle, &state, 0, 200);
 8001412:	4b22      	ldr	r3, [pc, #136]	; (800149c <IR_CommandsDetection+0x12c>)
 8001414:	6818      	ldr	r0, [r3, #0]
 8001416:	f107 010b 	add.w	r1, r7, #11
 800141a:	23c8      	movs	r3, #200	; 0xc8
 800141c:	2200      	movs	r2, #0
 800141e:	f005 fe19 	bl	8007054 <osMessageQueuePut>
	  			      break;
 8001422:	e02f      	b.n	8001484 <IR_CommandsDetection+0x114>
	  			    case IR_CODE_FORWARD:
	  			    	  state = TURN_RIGHT;
 8001424:	2302      	movs	r3, #2
 8001426:	72fb      	strb	r3, [r7, #11]
	  			    	  osMessageQueuePut(Queue02_EngineCommandsHandle, &state, 0, 200);
 8001428:	4b1c      	ldr	r3, [pc, #112]	; (800149c <IR_CommandsDetection+0x12c>)
 800142a:	6818      	ldr	r0, [r3, #0]
 800142c:	f107 010b 	add.w	r1, r7, #11
 8001430:	23c8      	movs	r3, #200	; 0xc8
 8001432:	2200      	movs	r2, #0
 8001434:	f005 fe0e 	bl	8007054 <osMessageQueuePut>
	  			      break;
 8001438:	e024      	b.n	8001484 <IR_CommandsDetection+0x114>
	  			    case IR_CODE_MINUS:
	  			    	  state = MOVE_BACKWARD;
 800143a:	2301      	movs	r3, #1
 800143c:	72fb      	strb	r3, [r7, #11]
	  			    	  osMessageQueuePut(Queue02_EngineCommandsHandle, &state, 0, 200);
 800143e:	4b17      	ldr	r3, [pc, #92]	; (800149c <IR_CommandsDetection+0x12c>)
 8001440:	6818      	ldr	r0, [r3, #0]
 8001442:	f107 010b 	add.w	r1, r7, #11
 8001446:	23c8      	movs	r3, #200	; 0xc8
 8001448:	2200      	movs	r2, #0
 800144a:	f005 fe03 	bl	8007054 <osMessageQueuePut>
	  			      break;
 800144e:	e019      	b.n	8001484 <IR_CommandsDetection+0x114>
	  			    case IR_CODE_REWIND:
	  			    	  state = TURN_LEFT;
 8001450:	2303      	movs	r3, #3
 8001452:	72fb      	strb	r3, [r7, #11]
	  			    	  osMessageQueuePut(Queue02_EngineCommandsHandle, &state, 0, 200);
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <IR_CommandsDetection+0x12c>)
 8001456:	6818      	ldr	r0, [r3, #0]
 8001458:	f107 010b 	add.w	r1, r7, #11
 800145c:	23c8      	movs	r3, #200	; 0xc8
 800145e:	2200      	movs	r2, #0
 8001460:	f005 fdf8 	bl	8007054 <osMessageQueuePut>
	  			      break;
 8001464:	e00e      	b.n	8001484 <IR_CommandsDetection+0x114>
	  			    case IR_CODE_PLAY:
	  			    	  state = STOP;
 8001466:	2304      	movs	r3, #4
 8001468:	72fb      	strb	r3, [r7, #11]
	  			    	  osMessageQueuePut(Queue02_EngineCommandsHandle, &state, 0, 200);
 800146a:	4b0c      	ldr	r3, [pc, #48]	; (800149c <IR_CommandsDetection+0x12c>)
 800146c:	6818      	ldr	r0, [r3, #0]
 800146e:	f107 010b 	add.w	r1, r7, #11
 8001472:	23c8      	movs	r3, #200	; 0xc8
 8001474:	2200      	movs	r2, #0
 8001476:	f005 fded 	bl	8007054 <osMessageQueuePut>
	  			      break;
 800147a:	e003      	b.n	8001484 <IR_CommandsDetection+0x114>
	  			    default:
	  			    	printf("Inna komenda");
 800147c:	4808      	ldr	r0, [pc, #32]	; (80014a0 <IR_CommandsDetection+0x130>)
 800147e:	f009 fcad 	bl	800addc <iprintf>
	  			    	break;
 8001482:	bf00      	nop

	  			    }
	  		osSemaphoreRelease(Semaphore2_IR_EngineHandle);
 8001484:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <IR_CommandsDetection+0x134>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f005 fd0b 	bl	8006ea4 <osSemaphoreRelease>
	  	}

    osDelay(1);
 800148e:	2001      	movs	r0, #1
 8001490:	f005 fc12 	bl	8006cb8 <osDelay>
	  	if(osSemaphoreGetCount(Semaphore1_IR_InterruptHandle) != 0){
 8001494:	e770      	b.n	8001378 <IR_CommandsDetection+0x8>
 8001496:	bf00      	nop
 8001498:	20000214 	.word	0x20000214
 800149c:	20000210 	.word	0x20000210
 80014a0:	0800cf14 	.word	0x0800cf14
 80014a4:	20000218 	.word	0x20000218

080014a8 <EngineTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_EngineTask */
void EngineTask(void *argument)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EngineTask */
	engine_state IR_ReceivedValue;
  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreGetCount(Semaphore2_IR_EngineHandle) != 0){
 80014b0:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <EngineTask+0x48>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f005 fd39 	bl	8006f2c <osSemaphoreGetCount>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d012      	beq.n	80014e6 <EngineTask+0x3e>
		  osSemaphoreAcquire(Semaphore2_IR_EngineHandle, 0);
 80014c0:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <EngineTask+0x48>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2100      	movs	r1, #0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f005 fc9a 	bl	8006e00 <osSemaphoreAcquire>
		  osMessageQueueGet(Queue02_EngineCommandsHandle, &IR_ReceivedValue, 0, osWaitForever);
 80014cc:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <EngineTask+0x4c>)
 80014ce:	6818      	ldr	r0, [r3, #0]
 80014d0:	f107 010f 	add.w	r1, r7, #15
 80014d4:	f04f 33ff 	mov.w	r3, #4294967295
 80014d8:	2200      	movs	r2, #0
 80014da:	f005 fe1b 	bl	8007114 <osMessageQueueGet>
		  Engine(IR_ReceivedValue);
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fcef 	bl	8000ec4 <Engine>
	  }

    osDelay(1);
 80014e6:	2001      	movs	r0, #1
 80014e8:	f005 fbe6 	bl	8006cb8 <osDelay>
	  if(osSemaphoreGetCount(Semaphore2_IR_EngineHandle) != 0){
 80014ec:	e7e0      	b.n	80014b0 <EngineTask+0x8>
 80014ee:	bf00      	nop
 80014f0:	20000218 	.word	0x20000218
 80014f4:	20000210 	.word	0x20000210

080014f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fe:	f107 030c 	add.w	r3, r7, #12
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
 800150c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800150e:	4b32      	ldr	r3, [pc, #200]	; (80015d8 <MX_GPIO_Init+0xe0>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001512:	4a31      	ldr	r2, [pc, #196]	; (80015d8 <MX_GPIO_Init+0xe0>)
 8001514:	f043 0304 	orr.w	r3, r3, #4
 8001518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151a:	4b2f      	ldr	r3, [pc, #188]	; (80015d8 <MX_GPIO_Init+0xe0>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	f003 0304 	and.w	r3, r3, #4
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	4b2c      	ldr	r3, [pc, #176]	; (80015d8 <MX_GPIO_Init+0xe0>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152a:	4a2b      	ldr	r2, [pc, #172]	; (80015d8 <MX_GPIO_Init+0xe0>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001532:	4b29      	ldr	r3, [pc, #164]	; (80015d8 <MX_GPIO_Init+0xe0>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	4b26      	ldr	r3, [pc, #152]	; (80015d8 <MX_GPIO_Init+0xe0>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001542:	4a25      	ldr	r2, [pc, #148]	; (80015d8 <MX_GPIO_Init+0xe0>)
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800154a:	4b23      	ldr	r3, [pc, #140]	; (80015d8 <MX_GPIO_Init+0xe0>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Engine_IN4_Pin|Engine_IN3_Pin, GPIO_PIN_RESET);
 8001556:	2200      	movs	r2, #0
 8001558:	2103      	movs	r1, #3
 800155a:	4820      	ldr	r0, [pc, #128]	; (80015dc <MX_GPIO_Init+0xe4>)
 800155c:	f001 f8b8 	bl	80026d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Engine_IN1_Pin|LD2_Pin|Enable_A_Pin, GPIO_PIN_RESET);
 8001560:	2200      	movs	r2, #0
 8001562:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8001566:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800156a:	f001 f8b1 	bl	80026d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Engine_IN2_Pin|Enable_B_Pin, GPIO_PIN_RESET);
 800156e:	2200      	movs	r2, #0
 8001570:	2109      	movs	r1, #9
 8001572:	481b      	ldr	r0, [pc, #108]	; (80015e0 <MX_GPIO_Init+0xe8>)
 8001574:	f001 f8ac 	bl	80026d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Engine_IN4_Pin|Engine_IN3_Pin;
 8001578:	2303      	movs	r3, #3
 800157a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157c:	2301      	movs	r3, #1
 800157e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001588:	f107 030c 	add.w	r3, r7, #12
 800158c:	4619      	mov	r1, r3
 800158e:	4813      	ldr	r0, [pc, #76]	; (80015dc <MX_GPIO_Init+0xe4>)
 8001590:	f000 fef4 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Engine_IN1_Pin|LD2_Pin|Enable_A_Pin;
 8001594:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001598:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159a:	2301      	movs	r3, #1
 800159c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a6:	f107 030c 	add.w	r3, r7, #12
 80015aa:	4619      	mov	r1, r3
 80015ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b0:	f000 fee4 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Engine_IN2_Pin|Enable_B_Pin;
 80015b4:	2309      	movs	r3, #9
 80015b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b8:	2301      	movs	r3, #1
 80015ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c4:	f107 030c 	add.w	r3, r7, #12
 80015c8:	4619      	mov	r1, r3
 80015ca:	4805      	ldr	r0, [pc, #20]	; (80015e0 <MX_GPIO_Init+0xe8>)
 80015cc:	f000 fed6 	bl	800237c <HAL_GPIO_Init>

}
 80015d0:	bf00      	nop
 80015d2:	3720      	adds	r7, #32
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40021000 	.word	0x40021000
 80015dc:	48000800 	.word	0x48000800
 80015e0:	48000400 	.word	0x48000400

080015e4 <calc_pulse>:

static volatile uint32_t received_value;
static int received_bits;

static pulse_t calc_pulse(uint32_t time)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	if (time < 250)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2bf9      	cmp	r3, #249	; 0xf9
 80015f0:	d801      	bhi.n	80015f6 <calc_pulse+0x12>
		return PULSE_ERROR;
 80015f2:	2305      	movs	r3, #5
 80015f4:	e021      	b.n	800163a <calc_pulse+0x56>
	else if (time < 1200)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80015fc:	d201      	bcs.n	8001602 <calc_pulse+0x1e>
		return PULSE_SHORT;
 80015fe:	2304      	movs	r3, #4
 8001600:	e01b      	b.n	800163a <calc_pulse+0x56>
	else if (time < 2000)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001608:	d201      	bcs.n	800160e <calc_pulse+0x2a>
		return PULSE_LONG;
 800160a:	2303      	movs	r3, #3
 800160c:	e015      	b.n	800163a <calc_pulse+0x56>
	else if (time < 3000)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001614:	4293      	cmp	r3, r2
 8001616:	d801      	bhi.n	800161c <calc_pulse+0x38>
		return PULSE_2MS;
 8001618:	2302      	movs	r3, #2
 800161a:	e00e      	b.n	800163a <calc_pulse+0x56>
	else if (time < 6000)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f241 726f 	movw	r2, #5999	; 0x176f
 8001622:	4293      	cmp	r3, r2
 8001624:	d801      	bhi.n	800162a <calc_pulse+0x46>
		return PULSE_4MS;
 8001626:	2301      	movs	r3, #1
 8001628:	e007      	b.n	800163a <calc_pulse+0x56>
	else if (time < 12000)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f642 62df 	movw	r2, #11999	; 0x2edf
 8001630:	4293      	cmp	r3, r2
 8001632:	d801      	bhi.n	8001638 <calc_pulse+0x54>
		return PULSE_9MS;
 8001634:	2300      	movs	r3, #0
 8001636:	e000      	b.n	800163a <calc_pulse+0x56>
	else
		return PULSE_ERROR;
 8001638:	2305      	movs	r3, #5
}
 800163a:	4618      	mov	r0, r3
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <ir_tim_interrupt>:

void ir_tim_interrupt(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
	pulse_t pulse;

	if (received_bits >= 32)
 800164e:	4b27      	ldr	r3, [pc, #156]	; (80016ec <ir_tim_interrupt+0xa4>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b1f      	cmp	r3, #31
 8001654:	dc43      	bgt.n	80016de <ir_tim_interrupt+0x96>
		return;

	pulse = calc_pulse(HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1));
 8001656:	2100      	movs	r1, #0
 8001658:	4825      	ldr	r0, [pc, #148]	; (80016f0 <ir_tim_interrupt+0xa8>)
 800165a:	f003 fca1 	bl	8004fa0 <HAL_TIM_ReadCapturedValue>
 800165e:	4603      	mov	r3, r0
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ffbf 	bl	80015e4 <calc_pulse>
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]

	switch (pulse) {
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	3b01      	subs	r3, #1
 800166e:	2b03      	cmp	r3, #3
 8001670:	d831      	bhi.n	80016d6 <ir_tim_interrupt+0x8e>
 8001672:	a201      	add	r2, pc, #4	; (adr r2, 8001678 <ir_tim_interrupt+0x30>)
 8001674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001678:	080016b9 	.word	0x080016b9
 800167c:	080016c7 	.word	0x080016c7
 8001680:	0800169f 	.word	0x0800169f
 8001684:	08001689 	.word	0x08001689
	case PULSE_SHORT:
		received_value = received_value >> 1;
 8001688:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <ir_tim_interrupt+0xac>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	085b      	lsrs	r3, r3, #1
 800168e:	4a19      	ldr	r2, [pc, #100]	; (80016f4 <ir_tim_interrupt+0xac>)
 8001690:	6013      	str	r3, [r2, #0]
		received_bits++;
 8001692:	4b16      	ldr	r3, [pc, #88]	; (80016ec <ir_tim_interrupt+0xa4>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	3301      	adds	r3, #1
 8001698:	4a14      	ldr	r2, [pc, #80]	; (80016ec <ir_tim_interrupt+0xa4>)
 800169a:	6013      	str	r3, [r2, #0]
		break;
 800169c:	e022      	b.n	80016e4 <ir_tim_interrupt+0x9c>
	case PULSE_LONG:
		received_value = (received_value >> 1) | 0x80000000;
 800169e:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <ir_tim_interrupt+0xac>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	085b      	lsrs	r3, r3, #1
 80016a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80016a8:	4a12      	ldr	r2, [pc, #72]	; (80016f4 <ir_tim_interrupt+0xac>)
 80016aa:	6013      	str	r3, [r2, #0]
		received_bits++;
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <ir_tim_interrupt+0xa4>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	3301      	adds	r3, #1
 80016b2:	4a0e      	ldr	r2, [pc, #56]	; (80016ec <ir_tim_interrupt+0xa4>)
 80016b4:	6013      	str	r3, [r2, #0]
		break;
 80016b6:	e015      	b.n	80016e4 <ir_tim_interrupt+0x9c>
	case PULSE_4MS:
		received_value = 0;
 80016b8:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <ir_tim_interrupt+0xac>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
		received_bits = 0;
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <ir_tim_interrupt+0xa4>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
		break;
 80016c4:	e00e      	b.n	80016e4 <ir_tim_interrupt+0x9c>
	case PULSE_2MS:
		if (received_bits == 0)
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <ir_tim_interrupt+0xa4>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d109      	bne.n	80016e2 <ir_tim_interrupt+0x9a>
			received_bits = 32;
 80016ce:	4b07      	ldr	r3, [pc, #28]	; (80016ec <ir_tim_interrupt+0xa4>)
 80016d0:	2220      	movs	r2, #32
 80016d2:	601a      	str	r2, [r3, #0]
		break;
 80016d4:	e005      	b.n	80016e2 <ir_tim_interrupt+0x9a>
	default:
		received_bits = 0;
 80016d6:	4b05      	ldr	r3, [pc, #20]	; (80016ec <ir_tim_interrupt+0xa4>)
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
		break;
 80016dc:	e002      	b.n	80016e4 <ir_tim_interrupt+0x9c>
		return;
 80016de:	bf00      	nop
 80016e0:	e000      	b.n	80016e4 <ir_tim_interrupt+0x9c>
		break;
 80016e2:	bf00      	nop
	}
}
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000258 	.word	0x20000258
 80016f0:	200002f8 	.word	0x200002f8
 80016f4:	20000254 	.word	0x20000254

080016f8 <ir_init>:

void ir_init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start(&htim3);
 80016fc:	4804      	ldr	r0, [pc, #16]	; (8001710 <ir_init+0x18>)
 80016fe:	f002 fba9 	bl	8003e54 <HAL_TIM_Base_Start>
	  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001702:	2100      	movs	r1, #0
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <ir_init+0x18>)
 8001706:	f002 ff43 	bl	8004590 <HAL_TIM_IC_Start_IT>
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200002f8 	.word	0x200002f8

08001714 <ir_read>:

int ir_read(void)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
	if (received_bits != 32)
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <ir_read+0x30>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b20      	cmp	r3, #32
 8001720:	d002      	beq.n	8001728 <ir_read+0x14>
		return -1;
 8001722:	f04f 33ff 	mov.w	r3, #4294967295
 8001726:	e007      	b.n	8001738 <ir_read+0x24>

	uint8_t value = received_value >> 16;
 8001728:	4b07      	ldr	r3, [pc, #28]	; (8001748 <ir_read+0x34>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	0c1b      	lsrs	r3, r3, #16
 800172e:	71fb      	strb	r3, [r7, #7]
	received_bits = 0;
 8001730:	4b04      	ldr	r3, [pc, #16]	; (8001744 <ir_read+0x30>)
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
	return value;
 8001736:	79fb      	ldrb	r3, [r7, #7]
}
 8001738:	4618      	mov	r0, r3
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	20000258 	.word	0x20000258
 8001748:	20000254 	.word	0x20000254

0800174c <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b0a      	cmp	r3, #10
 8001758:	d109      	bne.n	800176e <__io_putchar+0x22>
        uint8_t ch2 = '\r';
 800175a:	230d      	movs	r3, #13
 800175c:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 800175e:	f107 010f 	add.w	r1, r7, #15
 8001762:	f04f 33ff 	mov.w	r3, #4294967295
 8001766:	2201      	movs	r2, #1
 8001768:	4807      	ldr	r0, [pc, #28]	; (8001788 <__io_putchar+0x3c>)
 800176a:	f004 fb63 	bl	8005e34 <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800176e:	1d39      	adds	r1, r7, #4
 8001770:	f04f 33ff 	mov.w	r3, #4294967295
 8001774:	2201      	movs	r2, #1
 8001776:	4804      	ldr	r0, [pc, #16]	; (8001788 <__io_putchar+0x3c>)
 8001778:	f004 fb5c 	bl	8005e34 <HAL_UART_Transmit>
    return 1;
 800177c:	2301      	movs	r3, #1
}
 800177e:	4618      	mov	r0, r3
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000344 	.word	0x20000344

0800178c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001790:	f000 fcd9 	bl	8002146 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001794:	f000 f81c 	bl	80017d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001798:	f7ff feae 	bl	80014f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800179c:	f000 fc1e 	bl	8001fdc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80017a0:	f000 fa2e 	bl	8001c00 <MX_TIM2_Init>
  MX_TIM3_Init();
 80017a4:	f000 fad6 	bl	8001d54 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  EnginesInit(Enable_A_GPIO_Port, Enable_A_Pin, Enable_B_GPIO_Port, Enable_B_Pin);
 80017a8:	2308      	movs	r3, #8
 80017aa:	4a08      	ldr	r2, [pc, #32]	; (80017cc <main+0x40>)
 80017ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b4:	f7ff fbb0 	bl	8000f18 <EnginesInit>

  ir_init();
 80017b8:	f7ff ff9e 	bl	80016f8 <ir_init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80017bc:	f005 f9a0 	bl	8006b00 <osKernelInitialize>
  MX_FREERTOS_Init();
 80017c0:	f7ff fc7a 	bl	80010b8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80017c4:	f005 f9c0 	bl	8006b48 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <main+0x3c>
 80017ca:	bf00      	nop
 80017cc:	48000400 	.word	0x48000400

080017d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b096      	sub	sp, #88	; 0x58
 80017d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017d6:	f107 0314 	add.w	r3, r7, #20
 80017da:	2244      	movs	r2, #68	; 0x44
 80017dc:	2100      	movs	r1, #0
 80017de:	4618      	mov	r0, r3
 80017e0:	f009 fb51 	bl	800ae86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e4:	463b      	mov	r3, r7
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
 80017f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80017f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017f6:	f000 ff91 	bl	800271c <HAL_PWREx_ControlVoltageScaling>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001800:	f000 f84a 	bl	8001898 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001804:	2310      	movs	r3, #16
 8001806:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001808:	2301      	movs	r3, #1
 800180a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001810:	2360      	movs	r3, #96	; 0x60
 8001812:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001814:	2302      	movs	r3, #2
 8001816:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001818:	2301      	movs	r3, #1
 800181a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800181c:	2301      	movs	r3, #1
 800181e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001820:	2328      	movs	r3, #40	; 0x28
 8001822:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001824:	2307      	movs	r3, #7
 8001826:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001828:	2302      	movs	r3, #2
 800182a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800182c:	2302      	movs	r3, #2
 800182e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	4618      	mov	r0, r3
 8001836:	f000 ffc7 	bl	80027c8 <HAL_RCC_OscConfig>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001840:	f000 f82a 	bl	8001898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001844:	230f      	movs	r3, #15
 8001846:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001848:	2303      	movs	r3, #3
 800184a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800184c:	2300      	movs	r3, #0
 800184e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001854:	2300      	movs	r3, #0
 8001856:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001858:	463b      	mov	r3, r7
 800185a:	2104      	movs	r1, #4
 800185c:	4618      	mov	r0, r3
 800185e:	f001 fb8f 	bl	8002f80 <HAL_RCC_ClockConfig>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001868:	f000 f816 	bl	8001898 <Error_Handler>
  }
}
 800186c:	bf00      	nop
 800186e:	3758      	adds	r7, #88	; 0x58
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a04      	ldr	r2, [pc, #16]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d101      	bne.n	800188a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001886:	f000 fc77 	bl	8002178 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40001400 	.word	0x40001400

08001898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800189c:	b672      	cpsid	i
}
 800189e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <Error_Handler+0x8>
	...

080018a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018aa:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <HAL_MspInit+0x4c>)
 80018ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ae:	4a10      	ldr	r2, [pc, #64]	; (80018f0 <HAL_MspInit+0x4c>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6613      	str	r3, [r2, #96]	; 0x60
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <HAL_MspInit+0x4c>)
 80018b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c2:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <HAL_MspInit+0x4c>)
 80018c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c6:	4a0a      	ldr	r2, [pc, #40]	; (80018f0 <HAL_MspInit+0x4c>)
 80018c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018cc:	6593      	str	r3, [r2, #88]	; 0x58
 80018ce:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <HAL_MspInit+0x4c>)
 80018d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d6:	603b      	str	r3, [r7, #0]
 80018d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	210f      	movs	r1, #15
 80018de:	f06f 0001 	mvn.w	r0, #1
 80018e2:	f000 fd21 	bl	8002328 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40021000 	.word	0x40021000

080018f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08e      	sub	sp, #56	; 0x38
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80018fc:	2300      	movs	r3, #0
 80018fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001902:	4b34      	ldr	r3, [pc, #208]	; (80019d4 <HAL_InitTick+0xe0>)
 8001904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001906:	4a33      	ldr	r2, [pc, #204]	; (80019d4 <HAL_InitTick+0xe0>)
 8001908:	f043 0320 	orr.w	r3, r3, #32
 800190c:	6593      	str	r3, [r2, #88]	; 0x58
 800190e:	4b31      	ldr	r3, [pc, #196]	; (80019d4 <HAL_InitTick+0xe0>)
 8001910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001912:	f003 0320 	and.w	r3, r3, #32
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800191a:	f107 0210 	add.w	r2, r7, #16
 800191e:	f107 0314 	add.w	r3, r7, #20
 8001922:	4611      	mov	r1, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f001 fcef 	bl	8003308 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800192a:	6a3b      	ldr	r3, [r7, #32]
 800192c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800192e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001930:	2b00      	cmp	r3, #0
 8001932:	d103      	bne.n	800193c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001934:	f001 fcbc 	bl	80032b0 <HAL_RCC_GetPCLK1Freq>
 8001938:	6378      	str	r0, [r7, #52]	; 0x34
 800193a:	e004      	b.n	8001946 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800193c:	f001 fcb8 	bl	80032b0 <HAL_RCC_GetPCLK1Freq>
 8001940:	4603      	mov	r3, r0
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001948:	4a23      	ldr	r2, [pc, #140]	; (80019d8 <HAL_InitTick+0xe4>)
 800194a:	fba2 2303 	umull	r2, r3, r2, r3
 800194e:	0c9b      	lsrs	r3, r3, #18
 8001950:	3b01      	subs	r3, #1
 8001952:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001954:	4b21      	ldr	r3, [pc, #132]	; (80019dc <HAL_InitTick+0xe8>)
 8001956:	4a22      	ldr	r2, [pc, #136]	; (80019e0 <HAL_InitTick+0xec>)
 8001958:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800195a:	4b20      	ldr	r3, [pc, #128]	; (80019dc <HAL_InitTick+0xe8>)
 800195c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001960:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001962:	4a1e      	ldr	r2, [pc, #120]	; (80019dc <HAL_InitTick+0xe8>)
 8001964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001966:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001968:	4b1c      	ldr	r3, [pc, #112]	; (80019dc <HAL_InitTick+0xe8>)
 800196a:	2200      	movs	r2, #0
 800196c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800196e:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <HAL_InitTick+0xe8>)
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001974:	4b19      	ldr	r3, [pc, #100]	; (80019dc <HAL_InitTick+0xe8>)
 8001976:	2200      	movs	r2, #0
 8001978:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 800197a:	4818      	ldr	r0, [pc, #96]	; (80019dc <HAL_InitTick+0xe8>)
 800197c:	f002 fa12 	bl	8003da4 <HAL_TIM_Base_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001986:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800198a:	2b00      	cmp	r3, #0
 800198c:	d11b      	bne.n	80019c6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 800198e:	4813      	ldr	r0, [pc, #76]	; (80019dc <HAL_InitTick+0xe8>)
 8001990:	f002 fac8 	bl	8003f24 <HAL_TIM_Base_Start_IT>
 8001994:	4603      	mov	r3, r0
 8001996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800199a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d111      	bne.n	80019c6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80019a2:	2037      	movs	r0, #55	; 0x37
 80019a4:	f000 fcdc 	bl	8002360 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b0f      	cmp	r3, #15
 80019ac:	d808      	bhi.n	80019c0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80019ae:	2200      	movs	r2, #0
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	2037      	movs	r0, #55	; 0x37
 80019b4:	f000 fcb8 	bl	8002328 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019b8:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <HAL_InitTick+0xf0>)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e002      	b.n	80019c6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80019c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3738      	adds	r7, #56	; 0x38
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40021000 	.word	0x40021000
 80019d8:	431bde83 	.word	0x431bde83
 80019dc:	2000025c 	.word	0x2000025c
 80019e0:	40001400 	.word	0x40001400
 80019e4:	20000004 	.word	0x20000004

080019e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <NMI_Handler+0x4>

080019ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f2:	e7fe      	b.n	80019f2 <HardFault_Handler+0x4>

080019f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <MemManage_Handler+0x4>

080019fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019fe:	e7fe      	b.n	80019fe <BusFault_Handler+0x4>

08001a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <UsageFault_Handler+0x4>

08001a06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a18:	4802      	ldr	r0, [pc, #8]	; (8001a24 <TIM2_IRQHandler+0x10>)
 8001a1a:	f002 ff03 	bl	8004824 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200002ac 	.word	0x200002ac

08001a28 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a2c:	4802      	ldr	r0, [pc, #8]	; (8001a38 <TIM3_IRQHandler+0x10>)
 8001a2e:	f002 fef9 	bl	8004824 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	200002f8 	.word	0x200002f8

08001a3c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001a40:	4802      	ldr	r0, [pc, #8]	; (8001a4c <TIM7_IRQHandler+0x10>)
 8001a42:	f002 feef 	bl	8004824 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	2000025c 	.word	0x2000025c

08001a50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return 1;
 8001a54:	2301      	movs	r3, #1
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <_kill>:

int _kill(int pid, int sig)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a6a:	f009 fac7 	bl	800affc <__errno>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2216      	movs	r2, #22
 8001a72:	601a      	str	r2, [r3, #0]
  return -1;
 8001a74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <_exit>:

void _exit (int status)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a88:	f04f 31ff 	mov.w	r1, #4294967295
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff ffe7 	bl	8001a60 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a92:	e7fe      	b.n	8001a92 <_exit+0x12>

08001a94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	e00a      	b.n	8001abc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001aa6:	f3af 8000 	nop.w
 8001aaa:	4601      	mov	r1, r0
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	1c5a      	adds	r2, r3, #1
 8001ab0:	60ba      	str	r2, [r7, #8]
 8001ab2:	b2ca      	uxtb	r2, r1
 8001ab4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	dbf0      	blt.n	8001aa6 <_read+0x12>
  }

  return len;
 8001ac4:	687b      	ldr	r3, [r7, #4]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b086      	sub	sp, #24
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	60f8      	str	r0, [r7, #12]
 8001ad6:	60b9      	str	r1, [r7, #8]
 8001ad8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	e009      	b.n	8001af4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	60ba      	str	r2, [r7, #8]
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff fe2f 	bl	800174c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	3301      	adds	r3, #1
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	dbf1      	blt.n	8001ae0 <_write+0x12>
  }
  return len;
 8001afc:	687b      	ldr	r3, [r7, #4]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <_close>:

int _close(int file)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
 8001b26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b2e:	605a      	str	r2, [r3, #4]
  return 0;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <_isatty>:

int _isatty(int file)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b46:	2301      	movs	r3, #1
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
	...

08001b70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b78:	4a14      	ldr	r2, [pc, #80]	; (8001bcc <_sbrk+0x5c>)
 8001b7a:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <_sbrk+0x60>)
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b84:	4b13      	ldr	r3, [pc, #76]	; (8001bd4 <_sbrk+0x64>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d102      	bne.n	8001b92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b8c:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <_sbrk+0x64>)
 8001b8e:	4a12      	ldr	r2, [pc, #72]	; (8001bd8 <_sbrk+0x68>)
 8001b90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b92:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <_sbrk+0x64>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4413      	add	r3, r2
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d207      	bcs.n	8001bb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ba0:	f009 fa2c 	bl	800affc <__errno>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	220c      	movs	r2, #12
 8001ba8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bae:	e009      	b.n	8001bc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <_sbrk+0x64>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bb6:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <_sbrk+0x64>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	4a05      	ldr	r2, [pc, #20]	; (8001bd4 <_sbrk+0x64>)
 8001bc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20018000 	.word	0x20018000
 8001bd0:	00000400 	.word	0x00000400
 8001bd4:	200002a8 	.word	0x200002a8
 8001bd8:	20006148 	.word	0x20006148

08001bdc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001be0:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <SystemInit+0x20>)
 8001be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001be6:	4a05      	ldr	r2, [pc, #20]	; (8001bfc <SystemInit+0x20>)
 8001be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b092      	sub	sp, #72	; 0x48
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c06:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	605a      	str	r2, [r3, #4]
 8001c10:	609a      	str	r2, [r3, #8]
 8001c12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c20:	f107 031c 	add.w	r3, r7, #28
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c2e:	463b      	mov	r3, r7
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
 8001c3c:	615a      	str	r2, [r3, #20]
 8001c3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c40:	4b42      	ldr	r3, [pc, #264]	; (8001d4c <MX_TIM2_Init+0x14c>)
 8001c42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001c48:	4b40      	ldr	r3, [pc, #256]	; (8001d4c <MX_TIM2_Init+0x14c>)
 8001c4a:	224f      	movs	r2, #79	; 0x4f
 8001c4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c4e:	4b3f      	ldr	r3, [pc, #252]	; (8001d4c <MX_TIM2_Init+0x14c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999999;
 8001c54:	4b3d      	ldr	r3, [pc, #244]	; (8001d4c <MX_TIM2_Init+0x14c>)
 8001c56:	4a3e      	ldr	r2, [pc, #248]	; (8001d50 <MX_TIM2_Init+0x150>)
 8001c58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c5a:	4b3c      	ldr	r3, [pc, #240]	; (8001d4c <MX_TIM2_Init+0x14c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c60:	4b3a      	ldr	r3, [pc, #232]	; (8001d4c <MX_TIM2_Init+0x14c>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c66:	4839      	ldr	r0, [pc, #228]	; (8001d4c <MX_TIM2_Init+0x14c>)
 8001c68:	f002 f89c 	bl	8003da4 <HAL_TIM_Base_Init>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001c72:	f7ff fe11 	bl	8001898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c7a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c7c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c80:	4619      	mov	r1, r3
 8001c82:	4832      	ldr	r0, [pc, #200]	; (8001d4c <MX_TIM2_Init+0x14c>)
 8001c84:	f003 f880 	bl	8004d88 <HAL_TIM_ConfigClockSource>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001c8e:	f7ff fe03 	bl	8001898 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001c92:	482e      	ldr	r0, [pc, #184]	; (8001d4c <MX_TIM2_Init+0x14c>)
 8001c94:	f002 fb1e 	bl	80042d4 <HAL_TIM_IC_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001c9e:	f7ff fdfb 	bl	8001898 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ca2:	482a      	ldr	r0, [pc, #168]	; (8001d4c <MX_TIM2_Init+0x14c>)
 8001ca4:	f002 f9ae 	bl	8004004 <HAL_TIM_PWM_Init>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001cae:	f7ff fdf3 	bl	8001898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4822      	ldr	r0, [pc, #136]	; (8001d4c <MX_TIM2_Init+0x14c>)
 8001cc2:	f003 ffc3 	bl	8005c4c <HAL_TIMEx_MasterConfigSynchronization>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8001ccc:	f7ff fde4 	bl	8001898 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ce0:	f107 031c 	add.w	r3, r7, #28
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4818      	ldr	r0, [pc, #96]	; (8001d4c <MX_TIM2_Init+0x14c>)
 8001cea:	f002 fe9d 	bl	8004a28 <HAL_TIM_IC_ConfigChannel>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 8001cf4:	f7ff fdd0 	bl	8001898 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001d00:	f107 031c 	add.w	r3, r7, #28
 8001d04:	2204      	movs	r2, #4
 8001d06:	4619      	mov	r1, r3
 8001d08:	4810      	ldr	r0, [pc, #64]	; (8001d4c <MX_TIM2_Init+0x14c>)
 8001d0a:	f002 fe8d 	bl	8004a28 <HAL_TIM_IC_ConfigChannel>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8001d14:	f7ff fdc0 	bl	8001898 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d18:	2360      	movs	r3, #96	; 0x60
 8001d1a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8001d1c:	230a      	movs	r3, #10
 8001d1e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d20:	2300      	movs	r3, #0
 8001d22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d24:	2300      	movs	r3, #0
 8001d26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d28:	463b      	mov	r3, r7
 8001d2a:	2208      	movs	r2, #8
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4807      	ldr	r0, [pc, #28]	; (8001d4c <MX_TIM2_Init+0x14c>)
 8001d30:	f002 ff16 	bl	8004b60 <HAL_TIM_PWM_ConfigChannel>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_TIM2_Init+0x13e>
  {
    Error_Handler();
 8001d3a:	f7ff fdad 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d3e:	4803      	ldr	r0, [pc, #12]	; (8001d4c <MX_TIM2_Init+0x14c>)
 8001d40:	f000 f916 	bl	8001f70 <HAL_TIM_MspPostInit>

}
 8001d44:	bf00      	nop
 8001d46:	3748      	adds	r7, #72	; 0x48
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	200002ac 	.word	0x200002ac
 8001d50:	000f423f 	.word	0x000f423f

08001d54 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b090      	sub	sp, #64	; 0x40
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001d68:	f107 031c 	add.w	r3, r7, #28
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d78:	f107 0310 	add.w	r3, r7, #16
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d84:	463b      	mov	r3, r7
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	605a      	str	r2, [r3, #4]
 8001d8c:	609a      	str	r2, [r3, #8]
 8001d8e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d90:	4b34      	ldr	r3, [pc, #208]	; (8001e64 <MX_TIM3_Init+0x110>)
 8001d92:	4a35      	ldr	r2, [pc, #212]	; (8001e68 <MX_TIM3_Init+0x114>)
 8001d94:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8001d96:	4b33      	ldr	r3, [pc, #204]	; (8001e64 <MX_TIM3_Init+0x110>)
 8001d98:	224f      	movs	r2, #79	; 0x4f
 8001d9a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d9c:	4b31      	ldr	r3, [pc, #196]	; (8001e64 <MX_TIM3_Init+0x110>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001da2:	4b30      	ldr	r3, [pc, #192]	; (8001e64 <MX_TIM3_Init+0x110>)
 8001da4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001da8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001daa:	4b2e      	ldr	r3, [pc, #184]	; (8001e64 <MX_TIM3_Init+0x110>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db0:	4b2c      	ldr	r3, [pc, #176]	; (8001e64 <MX_TIM3_Init+0x110>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001db6:	482b      	ldr	r0, [pc, #172]	; (8001e64 <MX_TIM3_Init+0x110>)
 8001db8:	f001 fff4 	bl	8003da4 <HAL_TIM_Base_Init>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001dc2:	f7ff fd69 	bl	8001898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dca:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001dcc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4824      	ldr	r0, [pc, #144]	; (8001e64 <MX_TIM3_Init+0x110>)
 8001dd4:	f002 ffd8 	bl	8004d88 <HAL_TIM_ConfigClockSource>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001dde:	f7ff fd5b 	bl	8001898 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001de2:	4820      	ldr	r0, [pc, #128]	; (8001e64 <MX_TIM3_Init+0x110>)
 8001de4:	f002 fa76 	bl	80042d4 <HAL_TIM_IC_Init>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001dee:	f7ff fd53 	bl	8001898 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001df2:	2304      	movs	r3, #4
 8001df4:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8001df6:	2340      	movs	r3, #64	; 0x40
 8001df8:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001e02:	f107 031c 	add.w	r3, r7, #28
 8001e06:	4619      	mov	r1, r3
 8001e08:	4816      	ldr	r0, [pc, #88]	; (8001e64 <MX_TIM3_Init+0x110>)
 8001e0a:	f003 f886 	bl	8004f1a <HAL_TIM_SlaveConfigSynchro>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_TIM3_Init+0xc4>
  {
    Error_Handler();
 8001e14:	f7ff fd40 	bl	8001898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e20:	f107 0310 	add.w	r3, r7, #16
 8001e24:	4619      	mov	r1, r3
 8001e26:	480f      	ldr	r0, [pc, #60]	; (8001e64 <MX_TIM3_Init+0x110>)
 8001e28:	f003 ff10 	bl	8005c4c <HAL_TIMEx_MasterConfigSynchronization>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 8001e32:	f7ff fd31 	bl	8001898 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001e36:	2302      	movs	r3, #2
 8001e38:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001e46:	463b      	mov	r3, r7
 8001e48:	2200      	movs	r2, #0
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4805      	ldr	r0, [pc, #20]	; (8001e64 <MX_TIM3_Init+0x110>)
 8001e4e:	f002 fdeb 	bl	8004a28 <HAL_TIM_IC_ConfigChannel>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 8001e58:	f7ff fd1e 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e5c:	bf00      	nop
 8001e5e:	3740      	adds	r7, #64	; 0x40
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	200002f8 	.word	0x200002f8
 8001e68:	40000400 	.word	0x40000400

08001e6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08c      	sub	sp, #48	; 0x30
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 031c 	add.w	r3, r7, #28
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e8c:	d131      	bne.n	8001ef2 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e8e:	4b35      	ldr	r3, [pc, #212]	; (8001f64 <HAL_TIM_Base_MspInit+0xf8>)
 8001e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e92:	4a34      	ldr	r2, [pc, #208]	; (8001f64 <HAL_TIM_Base_MspInit+0xf8>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	6593      	str	r3, [r2, #88]	; 0x58
 8001e9a:	4b32      	ldr	r3, [pc, #200]	; (8001f64 <HAL_TIM_Base_MspInit+0xf8>)
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	61bb      	str	r3, [r7, #24]
 8001ea4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea6:	4b2f      	ldr	r3, [pc, #188]	; (8001f64 <HAL_TIM_Base_MspInit+0xf8>)
 8001ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eaa:	4a2e      	ldr	r2, [pc, #184]	; (8001f64 <HAL_TIM_Base_MspInit+0xf8>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eb2:	4b2c      	ldr	r3, [pc, #176]	; (8001f64 <HAL_TIM_Base_MspInit+0xf8>)
 8001eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed2:	f107 031c 	add.w	r3, r7, #28
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001edc:	f000 fa4e 	bl	800237c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	2105      	movs	r1, #5
 8001ee4:	201c      	movs	r0, #28
 8001ee6:	f000 fa1f 	bl	8002328 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001eea:	201c      	movs	r0, #28
 8001eec:	f000 fa38 	bl	8002360 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001ef0:	e034      	b.n	8001f5c <HAL_TIM_Base_MspInit+0xf0>
  else if(tim_baseHandle->Instance==TIM3)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a1c      	ldr	r2, [pc, #112]	; (8001f68 <HAL_TIM_Base_MspInit+0xfc>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d12f      	bne.n	8001f5c <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001efc:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <HAL_TIM_Base_MspInit+0xf8>)
 8001efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f00:	4a18      	ldr	r2, [pc, #96]	; (8001f64 <HAL_TIM_Base_MspInit+0xf8>)
 8001f02:	f043 0302 	orr.w	r3, r3, #2
 8001f06:	6593      	str	r3, [r2, #88]	; 0x58
 8001f08:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <HAL_TIM_Base_MspInit+0xf8>)
 8001f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f14:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <HAL_TIM_Base_MspInit+0xf8>)
 8001f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f18:	4a12      	ldr	r2, [pc, #72]	; (8001f64 <HAL_TIM_Base_MspInit+0xf8>)
 8001f1a:	f043 0302 	orr.w	r3, r3, #2
 8001f1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f20:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <HAL_TIM_Base_MspInit+0xf8>)
 8001f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f2c:	2310      	movs	r3, #16
 8001f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f30:	2302      	movs	r3, #2
 8001f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f40:	f107 031c 	add.w	r3, r7, #28
 8001f44:	4619      	mov	r1, r3
 8001f46:	4809      	ldr	r0, [pc, #36]	; (8001f6c <HAL_TIM_Base_MspInit+0x100>)
 8001f48:	f000 fa18 	bl	800237c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2105      	movs	r1, #5
 8001f50:	201d      	movs	r0, #29
 8001f52:	f000 f9e9 	bl	8002328 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f56:	201d      	movs	r0, #29
 8001f58:	f000 fa02 	bl	8002360 <HAL_NVIC_EnableIRQ>
}
 8001f5c:	bf00      	nop
 8001f5e:	3730      	adds	r7, #48	; 0x30
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40000400 	.word	0x40000400
 8001f6c:	48000400 	.word	0x48000400

08001f70 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f78:	f107 030c 	add.w	r3, r7, #12
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f90:	d11c      	bne.n	8001fcc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f92:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <HAL_TIM_MspPostInit+0x64>)
 8001f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f96:	4a0f      	ldr	r2, [pc, #60]	; (8001fd4 <HAL_TIM_MspPostInit+0x64>)
 8001f98:	f043 0302 	orr.w	r3, r3, #2
 8001f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f9e:	4b0d      	ldr	r3, [pc, #52]	; (8001fd4 <HAL_TIM_MspPostInit+0x64>)
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc0:	f107 030c 	add.w	r3, r7, #12
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4804      	ldr	r0, [pc, #16]	; (8001fd8 <HAL_TIM_MspPostInit+0x68>)
 8001fc8:	f000 f9d8 	bl	800237c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001fcc:	bf00      	nop
 8001fce:	3720      	adds	r7, #32
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	48000400 	.word	0x48000400

08001fdc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fe0:	4b14      	ldr	r3, [pc, #80]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8001fe2:	4a15      	ldr	r2, [pc, #84]	; (8002038 <MX_USART2_UART_Init+0x5c>)
 8001fe4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fe6:	4b13      	ldr	r3, [pc, #76]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8001fe8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fee:	4b11      	ldr	r3, [pc, #68]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8002002:	220c      	movs	r2, #12
 8002004:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002006:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8002008:	2200      	movs	r2, #0
 800200a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800200c:	4b09      	ldr	r3, [pc, #36]	; (8002034 <MX_USART2_UART_Init+0x58>)
 800200e:	2200      	movs	r2, #0
 8002010:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002012:	4b08      	ldr	r3, [pc, #32]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8002014:	2200      	movs	r2, #0
 8002016:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002018:	4b06      	ldr	r3, [pc, #24]	; (8002034 <MX_USART2_UART_Init+0x58>)
 800201a:	2200      	movs	r2, #0
 800201c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800201e:	4805      	ldr	r0, [pc, #20]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8002020:	f003 feba 	bl	8005d98 <HAL_UART_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800202a:	f7ff fc35 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000344 	.word	0x20000344
 8002038:	40004400 	.word	0x40004400

0800203c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b0ac      	sub	sp, #176	; 0xb0
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002044:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002054:	f107 0314 	add.w	r3, r7, #20
 8002058:	2288      	movs	r2, #136	; 0x88
 800205a:	2100      	movs	r1, #0
 800205c:	4618      	mov	r0, r3
 800205e:	f008 ff12 	bl	800ae86 <memset>
  if(uartHandle->Instance==USART2)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a21      	ldr	r2, [pc, #132]	; (80020ec <HAL_UART_MspInit+0xb0>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d13b      	bne.n	80020e4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800206c:	2302      	movs	r3, #2
 800206e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002070:	2300      	movs	r3, #0
 8002072:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002074:	f107 0314 	add.w	r3, r7, #20
 8002078:	4618      	mov	r0, r3
 800207a:	f001 f9d7 	bl	800342c <HAL_RCCEx_PeriphCLKConfig>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002084:	f7ff fc08 	bl	8001898 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002088:	4b19      	ldr	r3, [pc, #100]	; (80020f0 <HAL_UART_MspInit+0xb4>)
 800208a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208c:	4a18      	ldr	r2, [pc, #96]	; (80020f0 <HAL_UART_MspInit+0xb4>)
 800208e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002092:	6593      	str	r3, [r2, #88]	; 0x58
 8002094:	4b16      	ldr	r3, [pc, #88]	; (80020f0 <HAL_UART_MspInit+0xb4>)
 8002096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a0:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <HAL_UART_MspInit+0xb4>)
 80020a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a4:	4a12      	ldr	r2, [pc, #72]	; (80020f0 <HAL_UART_MspInit+0xb4>)
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ac:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <HAL_UART_MspInit+0xb4>)
 80020ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020b8:	230c      	movs	r3, #12
 80020ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	2302      	movs	r3, #2
 80020c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ca:	2303      	movs	r3, #3
 80020cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020d0:	2307      	movs	r3, #7
 80020d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020da:	4619      	mov	r1, r3
 80020dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020e0:	f000 f94c 	bl	800237c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80020e4:	bf00      	nop
 80020e6:	37b0      	adds	r7, #176	; 0xb0
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40004400 	.word	0x40004400
 80020f0:	40021000 	.word	0x40021000

080020f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800212c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020f8:	f7ff fd70 	bl	8001bdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020fc:	480c      	ldr	r0, [pc, #48]	; (8002130 <LoopForever+0x6>)
  ldr r1, =_edata
 80020fe:	490d      	ldr	r1, [pc, #52]	; (8002134 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002100:	4a0d      	ldr	r2, [pc, #52]	; (8002138 <LoopForever+0xe>)
  movs r3, #0
 8002102:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002104:	e002      	b.n	800210c <LoopCopyDataInit>

08002106 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002106:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002108:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800210a:	3304      	adds	r3, #4

0800210c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800210c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800210e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002110:	d3f9      	bcc.n	8002106 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002112:	4a0a      	ldr	r2, [pc, #40]	; (800213c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002114:	4c0a      	ldr	r4, [pc, #40]	; (8002140 <LoopForever+0x16>)
  movs r3, #0
 8002116:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002118:	e001      	b.n	800211e <LoopFillZerobss>

0800211a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800211a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800211c:	3204      	adds	r2, #4

0800211e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800211e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002120:	d3fb      	bcc.n	800211a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002122:	f008 ff71 	bl	800b008 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002126:	f7ff fb31 	bl	800178c <main>

0800212a <LoopForever>:

LoopForever:
    b LoopForever
 800212a:	e7fe      	b.n	800212a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800212c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002130:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002134:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002138:	0800d42c 	.word	0x0800d42c
  ldr r2, =_sbss
 800213c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002140:	20006144 	.word	0x20006144

08002144 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002144:	e7fe      	b.n	8002144 <ADC1_2_IRQHandler>

08002146 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800214c:	2300      	movs	r3, #0
 800214e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002150:	2003      	movs	r0, #3
 8002152:	f000 f8de 	bl	8002312 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002156:	200f      	movs	r0, #15
 8002158:	f7ff fbcc 	bl	80018f4 <HAL_InitTick>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d002      	beq.n	8002168 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	71fb      	strb	r3, [r7, #7]
 8002166:	e001      	b.n	800216c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002168:	f7ff fb9c 	bl	80018a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800216c:	79fb      	ldrb	r3, [r7, #7]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800217c:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_IncTick+0x20>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	4b06      	ldr	r3, [pc, #24]	; (800219c <HAL_IncTick+0x24>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4413      	add	r3, r2
 8002188:	4a04      	ldr	r2, [pc, #16]	; (800219c <HAL_IncTick+0x24>)
 800218a:	6013      	str	r3, [r2, #0]
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	20000008 	.word	0x20000008
 800219c:	200003cc 	.word	0x200003cc

080021a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return uwTick;
 80021a4:	4b03      	ldr	r3, [pc, #12]	; (80021b4 <HAL_GetTick+0x14>)
 80021a6:	681b      	ldr	r3, [r3, #0]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	200003cc 	.word	0x200003cc

080021b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c8:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <__NVIC_SetPriorityGrouping+0x44>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021d4:	4013      	ands	r3, r2
 80021d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ea:	4a04      	ldr	r2, [pc, #16]	; (80021fc <__NVIC_SetPriorityGrouping+0x44>)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	60d3      	str	r3, [r2, #12]
}
 80021f0:	bf00      	nop
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002204:	4b04      	ldr	r3, [pc, #16]	; (8002218 <__NVIC_GetPriorityGrouping+0x18>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	0a1b      	lsrs	r3, r3, #8
 800220a:	f003 0307 	and.w	r3, r3, #7
}
 800220e:	4618      	mov	r0, r3
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	2b00      	cmp	r3, #0
 800222c:	db0b      	blt.n	8002246 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	f003 021f 	and.w	r2, r3, #31
 8002234:	4907      	ldr	r1, [pc, #28]	; (8002254 <__NVIC_EnableIRQ+0x38>)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	095b      	lsrs	r3, r3, #5
 800223c:	2001      	movs	r0, #1
 800223e:	fa00 f202 	lsl.w	r2, r0, r2
 8002242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	e000e100 	.word	0xe000e100

08002258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	6039      	str	r1, [r7, #0]
 8002262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002268:	2b00      	cmp	r3, #0
 800226a:	db0a      	blt.n	8002282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	b2da      	uxtb	r2, r3
 8002270:	490c      	ldr	r1, [pc, #48]	; (80022a4 <__NVIC_SetPriority+0x4c>)
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	0112      	lsls	r2, r2, #4
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	440b      	add	r3, r1
 800227c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002280:	e00a      	b.n	8002298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	b2da      	uxtb	r2, r3
 8002286:	4908      	ldr	r1, [pc, #32]	; (80022a8 <__NVIC_SetPriority+0x50>)
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	3b04      	subs	r3, #4
 8002290:	0112      	lsls	r2, r2, #4
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	440b      	add	r3, r1
 8002296:	761a      	strb	r2, [r3, #24]
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000e100 	.word	0xe000e100
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b089      	sub	sp, #36	; 0x24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f1c3 0307 	rsb	r3, r3, #7
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	bf28      	it	cs
 80022ca:	2304      	movcs	r3, #4
 80022cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3304      	adds	r3, #4
 80022d2:	2b06      	cmp	r3, #6
 80022d4:	d902      	bls.n	80022dc <NVIC_EncodePriority+0x30>
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3b03      	subs	r3, #3
 80022da:	e000      	b.n	80022de <NVIC_EncodePriority+0x32>
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e0:	f04f 32ff 	mov.w	r2, #4294967295
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43da      	mvns	r2, r3
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	401a      	ands	r2, r3
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022f4:	f04f 31ff 	mov.w	r1, #4294967295
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	fa01 f303 	lsl.w	r3, r1, r3
 80022fe:	43d9      	mvns	r1, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002304:	4313      	orrs	r3, r2
         );
}
 8002306:	4618      	mov	r0, r3
 8002308:	3724      	adds	r7, #36	; 0x24
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7ff ff4c 	bl	80021b8 <__NVIC_SetPriorityGrouping>
}
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
 8002334:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800233a:	f7ff ff61 	bl	8002200 <__NVIC_GetPriorityGrouping>
 800233e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	68b9      	ldr	r1, [r7, #8]
 8002344:	6978      	ldr	r0, [r7, #20]
 8002346:	f7ff ffb1 	bl	80022ac <NVIC_EncodePriority>
 800234a:	4602      	mov	r2, r0
 800234c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002350:	4611      	mov	r1, r2
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff ff80 	bl	8002258 <__NVIC_SetPriority>
}
 8002358:	bf00      	nop
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff ff54 	bl	800221c <__NVIC_EnableIRQ>
}
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800237c:	b480      	push	{r7}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800238a:	e17f      	b.n	800268c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	2101      	movs	r1, #1
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	fa01 f303 	lsl.w	r3, r1, r3
 8002398:	4013      	ands	r3, r2
 800239a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f000 8171 	beq.w	8002686 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f003 0303 	and.w	r3, r3, #3
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d005      	beq.n	80023bc <HAL_GPIO_Init+0x40>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 0303 	and.w	r3, r3, #3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d130      	bne.n	800241e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	2203      	movs	r2, #3
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	43db      	mvns	r3, r3
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	4013      	ands	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	68da      	ldr	r2, [r3, #12]
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023f2:	2201      	movs	r2, #1
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43db      	mvns	r3, r3
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	4013      	ands	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	091b      	lsrs	r3, r3, #4
 8002408:	f003 0201 	and.w	r2, r3, #1
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	4313      	orrs	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	2b03      	cmp	r3, #3
 8002428:	d118      	bne.n	800245c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002430:	2201      	movs	r2, #1
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4013      	ands	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	08db      	lsrs	r3, r3, #3
 8002446:	f003 0201 	and.w	r2, r3, #1
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	2b03      	cmp	r3, #3
 8002466:	d017      	beq.n	8002498 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	2203      	movs	r2, #3
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	4013      	ands	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 0303 	and.w	r3, r3, #3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d123      	bne.n	80024ec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	08da      	lsrs	r2, r3, #3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3208      	adds	r2, #8
 80024ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	220f      	movs	r2, #15
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4013      	ands	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	691a      	ldr	r2, [r3, #16]
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	4313      	orrs	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	08da      	lsrs	r2, r3, #3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3208      	adds	r2, #8
 80024e6:	6939      	ldr	r1, [r7, #16]
 80024e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	2203      	movs	r2, #3
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	4013      	ands	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 0203 	and.w	r2, r3, #3
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	4313      	orrs	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 80ac 	beq.w	8002686 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800252e:	4b5f      	ldr	r3, [pc, #380]	; (80026ac <HAL_GPIO_Init+0x330>)
 8002530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002532:	4a5e      	ldr	r2, [pc, #376]	; (80026ac <HAL_GPIO_Init+0x330>)
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	6613      	str	r3, [r2, #96]	; 0x60
 800253a:	4b5c      	ldr	r3, [pc, #368]	; (80026ac <HAL_GPIO_Init+0x330>)
 800253c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	60bb      	str	r3, [r7, #8]
 8002544:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002546:	4a5a      	ldr	r2, [pc, #360]	; (80026b0 <HAL_GPIO_Init+0x334>)
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	089b      	lsrs	r3, r3, #2
 800254c:	3302      	adds	r3, #2
 800254e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002552:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	220f      	movs	r2, #15
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43db      	mvns	r3, r3
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	4013      	ands	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002570:	d025      	beq.n	80025be <HAL_GPIO_Init+0x242>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a4f      	ldr	r2, [pc, #316]	; (80026b4 <HAL_GPIO_Init+0x338>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d01f      	beq.n	80025ba <HAL_GPIO_Init+0x23e>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a4e      	ldr	r2, [pc, #312]	; (80026b8 <HAL_GPIO_Init+0x33c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d019      	beq.n	80025b6 <HAL_GPIO_Init+0x23a>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a4d      	ldr	r2, [pc, #308]	; (80026bc <HAL_GPIO_Init+0x340>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d013      	beq.n	80025b2 <HAL_GPIO_Init+0x236>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a4c      	ldr	r2, [pc, #304]	; (80026c0 <HAL_GPIO_Init+0x344>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d00d      	beq.n	80025ae <HAL_GPIO_Init+0x232>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a4b      	ldr	r2, [pc, #300]	; (80026c4 <HAL_GPIO_Init+0x348>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d007      	beq.n	80025aa <HAL_GPIO_Init+0x22e>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a4a      	ldr	r2, [pc, #296]	; (80026c8 <HAL_GPIO_Init+0x34c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d101      	bne.n	80025a6 <HAL_GPIO_Init+0x22a>
 80025a2:	2306      	movs	r3, #6
 80025a4:	e00c      	b.n	80025c0 <HAL_GPIO_Init+0x244>
 80025a6:	2307      	movs	r3, #7
 80025a8:	e00a      	b.n	80025c0 <HAL_GPIO_Init+0x244>
 80025aa:	2305      	movs	r3, #5
 80025ac:	e008      	b.n	80025c0 <HAL_GPIO_Init+0x244>
 80025ae:	2304      	movs	r3, #4
 80025b0:	e006      	b.n	80025c0 <HAL_GPIO_Init+0x244>
 80025b2:	2303      	movs	r3, #3
 80025b4:	e004      	b.n	80025c0 <HAL_GPIO_Init+0x244>
 80025b6:	2302      	movs	r3, #2
 80025b8:	e002      	b.n	80025c0 <HAL_GPIO_Init+0x244>
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <HAL_GPIO_Init+0x244>
 80025be:	2300      	movs	r3, #0
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	f002 0203 	and.w	r2, r2, #3
 80025c6:	0092      	lsls	r2, r2, #2
 80025c8:	4093      	lsls	r3, r2
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025d0:	4937      	ldr	r1, [pc, #220]	; (80026b0 <HAL_GPIO_Init+0x334>)
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	089b      	lsrs	r3, r3, #2
 80025d6:	3302      	adds	r3, #2
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025de:	4b3b      	ldr	r3, [pc, #236]	; (80026cc <HAL_GPIO_Init+0x350>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	43db      	mvns	r3, r3
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	4013      	ands	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	4313      	orrs	r3, r2
 8002600:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002602:	4a32      	ldr	r2, [pc, #200]	; (80026cc <HAL_GPIO_Init+0x350>)
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002608:	4b30      	ldr	r3, [pc, #192]	; (80026cc <HAL_GPIO_Init+0x350>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	43db      	mvns	r3, r3
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	4013      	ands	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	4313      	orrs	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800262c:	4a27      	ldr	r2, [pc, #156]	; (80026cc <HAL_GPIO_Init+0x350>)
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002632:	4b26      	ldr	r3, [pc, #152]	; (80026cc <HAL_GPIO_Init+0x350>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	43db      	mvns	r3, r3
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	4013      	ands	r3, r2
 8002640:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4313      	orrs	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002656:	4a1d      	ldr	r2, [pc, #116]	; (80026cc <HAL_GPIO_Init+0x350>)
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800265c:	4b1b      	ldr	r3, [pc, #108]	; (80026cc <HAL_GPIO_Init+0x350>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	43db      	mvns	r3, r3
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	4013      	ands	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	4313      	orrs	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002680:	4a12      	ldr	r2, [pc, #72]	; (80026cc <HAL_GPIO_Init+0x350>)
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	3301      	adds	r3, #1
 800268a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	fa22 f303 	lsr.w	r3, r2, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	f47f ae78 	bne.w	800238c <HAL_GPIO_Init+0x10>
  }
}
 800269c:	bf00      	nop
 800269e:	bf00      	nop
 80026a0:	371c      	adds	r7, #28
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	40021000 	.word	0x40021000
 80026b0:	40010000 	.word	0x40010000
 80026b4:	48000400 	.word	0x48000400
 80026b8:	48000800 	.word	0x48000800
 80026bc:	48000c00 	.word	0x48000c00
 80026c0:	48001000 	.word	0x48001000
 80026c4:	48001400 	.word	0x48001400
 80026c8:	48001800 	.word	0x48001800
 80026cc:	40010400 	.word	0x40010400

080026d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	807b      	strh	r3, [r7, #2]
 80026dc:	4613      	mov	r3, r2
 80026de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026e0:	787b      	ldrb	r3, [r7, #1]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026e6:	887a      	ldrh	r2, [r7, #2]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026ec:	e002      	b.n	80026f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026ee:	887a      	ldrh	r2, [r7, #2]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002704:	4b04      	ldr	r3, [pc, #16]	; (8002718 <HAL_PWREx_GetVoltageRange+0x18>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800270c:	4618      	mov	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40007000 	.word	0x40007000

0800271c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800272a:	d130      	bne.n	800278e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800272c:	4b23      	ldr	r3, [pc, #140]	; (80027bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002738:	d038      	beq.n	80027ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800273a:	4b20      	ldr	r3, [pc, #128]	; (80027bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002742:	4a1e      	ldr	r2, [pc, #120]	; (80027bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002744:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002748:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800274a:	4b1d      	ldr	r3, [pc, #116]	; (80027c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2232      	movs	r2, #50	; 0x32
 8002750:	fb02 f303 	mul.w	r3, r2, r3
 8002754:	4a1b      	ldr	r2, [pc, #108]	; (80027c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002756:	fba2 2303 	umull	r2, r3, r2, r3
 800275a:	0c9b      	lsrs	r3, r3, #18
 800275c:	3301      	adds	r3, #1
 800275e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002760:	e002      	b.n	8002768 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	3b01      	subs	r3, #1
 8002766:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002768:	4b14      	ldr	r3, [pc, #80]	; (80027bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002774:	d102      	bne.n	800277c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f2      	bne.n	8002762 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800277c:	4b0f      	ldr	r3, [pc, #60]	; (80027bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002788:	d110      	bne.n	80027ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e00f      	b.n	80027ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800278e:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800279a:	d007      	beq.n	80027ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800279c:	4b07      	ldr	r3, [pc, #28]	; (80027bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027a4:	4a05      	ldr	r2, [pc, #20]	; (80027bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	40007000 	.word	0x40007000
 80027c0:	20000000 	.word	0x20000000
 80027c4:	431bde83 	.word	0x431bde83

080027c8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b088      	sub	sp, #32
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e3ca      	b.n	8002f70 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027da:	4b97      	ldr	r3, [pc, #604]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 030c 	and.w	r3, r3, #12
 80027e2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027e4:	4b94      	ldr	r3, [pc, #592]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	f003 0303 	and.w	r3, r3, #3
 80027ec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0310 	and.w	r3, r3, #16
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 80e4 	beq.w	80029c4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d007      	beq.n	8002812 <HAL_RCC_OscConfig+0x4a>
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	2b0c      	cmp	r3, #12
 8002806:	f040 808b 	bne.w	8002920 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	2b01      	cmp	r3, #1
 800280e:	f040 8087 	bne.w	8002920 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002812:	4b89      	ldr	r3, [pc, #548]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d005      	beq.n	800282a <HAL_RCC_OscConfig+0x62>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e3a2      	b.n	8002f70 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1a      	ldr	r2, [r3, #32]
 800282e:	4b82      	ldr	r3, [pc, #520]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d004      	beq.n	8002844 <HAL_RCC_OscConfig+0x7c>
 800283a:	4b7f      	ldr	r3, [pc, #508]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002842:	e005      	b.n	8002850 <HAL_RCC_OscConfig+0x88>
 8002844:	4b7c      	ldr	r3, [pc, #496]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 8002846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800284a:	091b      	lsrs	r3, r3, #4
 800284c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002850:	4293      	cmp	r3, r2
 8002852:	d223      	bcs.n	800289c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	4618      	mov	r0, r3
 800285a:	f000 fd87 	bl	800336c <RCC_SetFlashLatencyFromMSIRange>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e383      	b.n	8002f70 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002868:	4b73      	ldr	r3, [pc, #460]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a72      	ldr	r2, [pc, #456]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 800286e:	f043 0308 	orr.w	r3, r3, #8
 8002872:	6013      	str	r3, [r2, #0]
 8002874:	4b70      	ldr	r3, [pc, #448]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	496d      	ldr	r1, [pc, #436]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 8002882:	4313      	orrs	r3, r2
 8002884:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002886:	4b6c      	ldr	r3, [pc, #432]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	021b      	lsls	r3, r3, #8
 8002894:	4968      	ldr	r1, [pc, #416]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 8002896:	4313      	orrs	r3, r2
 8002898:	604b      	str	r3, [r1, #4]
 800289a:	e025      	b.n	80028e8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800289c:	4b66      	ldr	r3, [pc, #408]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a65      	ldr	r2, [pc, #404]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 80028a2:	f043 0308 	orr.w	r3, r3, #8
 80028a6:	6013      	str	r3, [r2, #0]
 80028a8:	4b63      	ldr	r3, [pc, #396]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	4960      	ldr	r1, [pc, #384]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028ba:	4b5f      	ldr	r3, [pc, #380]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	021b      	lsls	r3, r3, #8
 80028c8:	495b      	ldr	r1, [pc, #364]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d109      	bne.n	80028e8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	4618      	mov	r0, r3
 80028da:	f000 fd47 	bl	800336c <RCC_SetFlashLatencyFromMSIRange>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e343      	b.n	8002f70 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028e8:	f000 fc4a 	bl	8003180 <HAL_RCC_GetSysClockFreq>
 80028ec:	4602      	mov	r2, r0
 80028ee:	4b52      	ldr	r3, [pc, #328]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	091b      	lsrs	r3, r3, #4
 80028f4:	f003 030f 	and.w	r3, r3, #15
 80028f8:	4950      	ldr	r1, [pc, #320]	; (8002a3c <HAL_RCC_OscConfig+0x274>)
 80028fa:	5ccb      	ldrb	r3, [r1, r3]
 80028fc:	f003 031f 	and.w	r3, r3, #31
 8002900:	fa22 f303 	lsr.w	r3, r2, r3
 8002904:	4a4e      	ldr	r2, [pc, #312]	; (8002a40 <HAL_RCC_OscConfig+0x278>)
 8002906:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002908:	4b4e      	ldr	r3, [pc, #312]	; (8002a44 <HAL_RCC_OscConfig+0x27c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f7fe fff1 	bl	80018f4 <HAL_InitTick>
 8002912:	4603      	mov	r3, r0
 8002914:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002916:	7bfb      	ldrb	r3, [r7, #15]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d052      	beq.n	80029c2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800291c:	7bfb      	ldrb	r3, [r7, #15]
 800291e:	e327      	b.n	8002f70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d032      	beq.n	800298e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002928:	4b43      	ldr	r3, [pc, #268]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a42      	ldr	r2, [pc, #264]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002934:	f7ff fc34 	bl	80021a0 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800293c:	f7ff fc30 	bl	80021a0 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e310      	b.n	8002f70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800294e:	4b3a      	ldr	r3, [pc, #232]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0f0      	beq.n	800293c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800295a:	4b37      	ldr	r3, [pc, #220]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a36      	ldr	r2, [pc, #216]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 8002960:	f043 0308 	orr.w	r3, r3, #8
 8002964:	6013      	str	r3, [r2, #0]
 8002966:	4b34      	ldr	r3, [pc, #208]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	4931      	ldr	r1, [pc, #196]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 8002974:	4313      	orrs	r3, r2
 8002976:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002978:	4b2f      	ldr	r3, [pc, #188]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	69db      	ldr	r3, [r3, #28]
 8002984:	021b      	lsls	r3, r3, #8
 8002986:	492c      	ldr	r1, [pc, #176]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 8002988:	4313      	orrs	r3, r2
 800298a:	604b      	str	r3, [r1, #4]
 800298c:	e01a      	b.n	80029c4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800298e:	4b2a      	ldr	r3, [pc, #168]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a29      	ldr	r2, [pc, #164]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 8002994:	f023 0301 	bic.w	r3, r3, #1
 8002998:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800299a:	f7ff fc01 	bl	80021a0 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029a2:	f7ff fbfd 	bl	80021a0 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e2dd      	b.n	8002f70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029b4:	4b20      	ldr	r3, [pc, #128]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1f0      	bne.n	80029a2 <HAL_RCC_OscConfig+0x1da>
 80029c0:	e000      	b.n	80029c4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029c2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d074      	beq.n	8002aba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d005      	beq.n	80029e2 <HAL_RCC_OscConfig+0x21a>
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	2b0c      	cmp	r3, #12
 80029da:	d10e      	bne.n	80029fa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	2b03      	cmp	r3, #3
 80029e0:	d10b      	bne.n	80029fa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e2:	4b15      	ldr	r3, [pc, #84]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d064      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x2f0>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d160      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e2ba      	b.n	8002f70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a02:	d106      	bne.n	8002a12 <HAL_RCC_OscConfig+0x24a>
 8002a04:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a0b      	ldr	r2, [pc, #44]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 8002a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a0e:	6013      	str	r3, [r2, #0]
 8002a10:	e026      	b.n	8002a60 <HAL_RCC_OscConfig+0x298>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a1a:	d115      	bne.n	8002a48 <HAL_RCC_OscConfig+0x280>
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a05      	ldr	r2, [pc, #20]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 8002a22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a26:	6013      	str	r3, [r2, #0]
 8002a28:	4b03      	ldr	r3, [pc, #12]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a02      	ldr	r2, [pc, #8]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 8002a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a32:	6013      	str	r3, [r2, #0]
 8002a34:	e014      	b.n	8002a60 <HAL_RCC_OscConfig+0x298>
 8002a36:	bf00      	nop
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	0800d064 	.word	0x0800d064
 8002a40:	20000000 	.word	0x20000000
 8002a44:	20000004 	.word	0x20000004
 8002a48:	4ba0      	ldr	r3, [pc, #640]	; (8002ccc <HAL_RCC_OscConfig+0x504>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a9f      	ldr	r2, [pc, #636]	; (8002ccc <HAL_RCC_OscConfig+0x504>)
 8002a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a52:	6013      	str	r3, [r2, #0]
 8002a54:	4b9d      	ldr	r3, [pc, #628]	; (8002ccc <HAL_RCC_OscConfig+0x504>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a9c      	ldr	r2, [pc, #624]	; (8002ccc <HAL_RCC_OscConfig+0x504>)
 8002a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d013      	beq.n	8002a90 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a68:	f7ff fb9a 	bl	80021a0 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a70:	f7ff fb96 	bl	80021a0 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b64      	cmp	r3, #100	; 0x64
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e276      	b.n	8002f70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a82:	4b92      	ldr	r3, [pc, #584]	; (8002ccc <HAL_RCC_OscConfig+0x504>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0f0      	beq.n	8002a70 <HAL_RCC_OscConfig+0x2a8>
 8002a8e:	e014      	b.n	8002aba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a90:	f7ff fb86 	bl	80021a0 <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a98:	f7ff fb82 	bl	80021a0 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b64      	cmp	r3, #100	; 0x64
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e262      	b.n	8002f70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002aaa:	4b88      	ldr	r3, [pc, #544]	; (8002ccc <HAL_RCC_OscConfig+0x504>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1f0      	bne.n	8002a98 <HAL_RCC_OscConfig+0x2d0>
 8002ab6:	e000      	b.n	8002aba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d060      	beq.n	8002b88 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	2b04      	cmp	r3, #4
 8002aca:	d005      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x310>
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	2b0c      	cmp	r3, #12
 8002ad0:	d119      	bne.n	8002b06 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d116      	bne.n	8002b06 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ad8:	4b7c      	ldr	r3, [pc, #496]	; (8002ccc <HAL_RCC_OscConfig+0x504>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d005      	beq.n	8002af0 <HAL_RCC_OscConfig+0x328>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e23f      	b.n	8002f70 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af0:	4b76      	ldr	r3, [pc, #472]	; (8002ccc <HAL_RCC_OscConfig+0x504>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	061b      	lsls	r3, r3, #24
 8002afe:	4973      	ldr	r1, [pc, #460]	; (8002ccc <HAL_RCC_OscConfig+0x504>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b04:	e040      	b.n	8002b88 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d023      	beq.n	8002b56 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b0e:	4b6f      	ldr	r3, [pc, #444]	; (8002ccc <HAL_RCC_OscConfig+0x504>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a6e      	ldr	r2, [pc, #440]	; (8002ccc <HAL_RCC_OscConfig+0x504>)
 8002b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1a:	f7ff fb41 	bl	80021a0 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b22:	f7ff fb3d 	bl	80021a0 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e21d      	b.n	8002f70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b34:	4b65      	ldr	r3, [pc, #404]	; (8002ccc <HAL_RCC_OscConfig+0x504>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0f0      	beq.n	8002b22 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b40:	4b62      	ldr	r3, [pc, #392]	; (8002ccc <HAL_RCC_OscConfig+0x504>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	061b      	lsls	r3, r3, #24
 8002b4e:	495f      	ldr	r1, [pc, #380]	; (8002ccc <HAL_RCC_OscConfig+0x504>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	604b      	str	r3, [r1, #4]
 8002b54:	e018      	b.n	8002b88 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b56:	4b5d      	ldr	r3, [pc, #372]	; (8002ccc <HAL_RCC_OscConfig+0x504>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a5c      	ldr	r2, [pc, #368]	; (8002ccc <HAL_RCC_OscConfig+0x504>)
 8002b5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b62:	f7ff fb1d 	bl	80021a0 <HAL_GetTick>
 8002b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b6a:	f7ff fb19 	bl	80021a0 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e1f9      	b.n	8002f70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b7c:	4b53      	ldr	r3, [pc, #332]	; (8002ccc <HAL_RCC_OscConfig+0x504>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1f0      	bne.n	8002b6a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0308 	and.w	r3, r3, #8
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d03c      	beq.n	8002c0e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d01c      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b9c:	4b4b      	ldr	r3, [pc, #300]	; (8002ccc <HAL_RCC_OscConfig+0x504>)
 8002b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ba2:	4a4a      	ldr	r2, [pc, #296]	; (8002ccc <HAL_RCC_OscConfig+0x504>)
 8002ba4:	f043 0301 	orr.w	r3, r3, #1
 8002ba8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bac:	f7ff faf8 	bl	80021a0 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bb4:	f7ff faf4 	bl	80021a0 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e1d4      	b.n	8002f70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bc6:	4b41      	ldr	r3, [pc, #260]	; (8002ccc <HAL_RCC_OscConfig+0x504>)
 8002bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0ef      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x3ec>
 8002bd4:	e01b      	b.n	8002c0e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bd6:	4b3d      	ldr	r3, [pc, #244]	; (8002ccc <HAL_RCC_OscConfig+0x504>)
 8002bd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bdc:	4a3b      	ldr	r2, [pc, #236]	; (8002ccc <HAL_RCC_OscConfig+0x504>)
 8002bde:	f023 0301 	bic.w	r3, r3, #1
 8002be2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be6:	f7ff fadb 	bl	80021a0 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bee:	f7ff fad7 	bl	80021a0 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e1b7      	b.n	8002f70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c00:	4b32      	ldr	r3, [pc, #200]	; (8002ccc <HAL_RCC_OscConfig+0x504>)
 8002c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1ef      	bne.n	8002bee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0304 	and.w	r3, r3, #4
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 80a6 	beq.w	8002d68 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c20:	4b2a      	ldr	r3, [pc, #168]	; (8002ccc <HAL_RCC_OscConfig+0x504>)
 8002c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10d      	bne.n	8002c48 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c2c:	4b27      	ldr	r3, [pc, #156]	; (8002ccc <HAL_RCC_OscConfig+0x504>)
 8002c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c30:	4a26      	ldr	r2, [pc, #152]	; (8002ccc <HAL_RCC_OscConfig+0x504>)
 8002c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c36:	6593      	str	r3, [r2, #88]	; 0x58
 8002c38:	4b24      	ldr	r3, [pc, #144]	; (8002ccc <HAL_RCC_OscConfig+0x504>)
 8002c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c40:	60bb      	str	r3, [r7, #8]
 8002c42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c44:	2301      	movs	r3, #1
 8002c46:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c48:	4b21      	ldr	r3, [pc, #132]	; (8002cd0 <HAL_RCC_OscConfig+0x508>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d118      	bne.n	8002c86 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c54:	4b1e      	ldr	r3, [pc, #120]	; (8002cd0 <HAL_RCC_OscConfig+0x508>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a1d      	ldr	r2, [pc, #116]	; (8002cd0 <HAL_RCC_OscConfig+0x508>)
 8002c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c60:	f7ff fa9e 	bl	80021a0 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c68:	f7ff fa9a 	bl	80021a0 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e17a      	b.n	8002f70 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c7a:	4b15      	ldr	r3, [pc, #84]	; (8002cd0 <HAL_RCC_OscConfig+0x508>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d108      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x4d8>
 8002c8e:	4b0f      	ldr	r3, [pc, #60]	; (8002ccc <HAL_RCC_OscConfig+0x504>)
 8002c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c94:	4a0d      	ldr	r2, [pc, #52]	; (8002ccc <HAL_RCC_OscConfig+0x504>)
 8002c96:	f043 0301 	orr.w	r3, r3, #1
 8002c9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c9e:	e029      	b.n	8002cf4 <HAL_RCC_OscConfig+0x52c>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	2b05      	cmp	r3, #5
 8002ca6:	d115      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x50c>
 8002ca8:	4b08      	ldr	r3, [pc, #32]	; (8002ccc <HAL_RCC_OscConfig+0x504>)
 8002caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cae:	4a07      	ldr	r2, [pc, #28]	; (8002ccc <HAL_RCC_OscConfig+0x504>)
 8002cb0:	f043 0304 	orr.w	r3, r3, #4
 8002cb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cb8:	4b04      	ldr	r3, [pc, #16]	; (8002ccc <HAL_RCC_OscConfig+0x504>)
 8002cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cbe:	4a03      	ldr	r2, [pc, #12]	; (8002ccc <HAL_RCC_OscConfig+0x504>)
 8002cc0:	f043 0301 	orr.w	r3, r3, #1
 8002cc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cc8:	e014      	b.n	8002cf4 <HAL_RCC_OscConfig+0x52c>
 8002cca:	bf00      	nop
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	40007000 	.word	0x40007000
 8002cd4:	4b9c      	ldr	r3, [pc, #624]	; (8002f48 <HAL_RCC_OscConfig+0x780>)
 8002cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cda:	4a9b      	ldr	r2, [pc, #620]	; (8002f48 <HAL_RCC_OscConfig+0x780>)
 8002cdc:	f023 0301 	bic.w	r3, r3, #1
 8002ce0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ce4:	4b98      	ldr	r3, [pc, #608]	; (8002f48 <HAL_RCC_OscConfig+0x780>)
 8002ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cea:	4a97      	ldr	r2, [pc, #604]	; (8002f48 <HAL_RCC_OscConfig+0x780>)
 8002cec:	f023 0304 	bic.w	r3, r3, #4
 8002cf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d016      	beq.n	8002d2a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfc:	f7ff fa50 	bl	80021a0 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d02:	e00a      	b.n	8002d1a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d04:	f7ff fa4c 	bl	80021a0 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e12a      	b.n	8002f70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d1a:	4b8b      	ldr	r3, [pc, #556]	; (8002f48 <HAL_RCC_OscConfig+0x780>)
 8002d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0ed      	beq.n	8002d04 <HAL_RCC_OscConfig+0x53c>
 8002d28:	e015      	b.n	8002d56 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2a:	f7ff fa39 	bl	80021a0 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d30:	e00a      	b.n	8002d48 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d32:	f7ff fa35 	bl	80021a0 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e113      	b.n	8002f70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d48:	4b7f      	ldr	r3, [pc, #508]	; (8002f48 <HAL_RCC_OscConfig+0x780>)
 8002d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1ed      	bne.n	8002d32 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d56:	7ffb      	ldrb	r3, [r7, #31]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d105      	bne.n	8002d68 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d5c:	4b7a      	ldr	r3, [pc, #488]	; (8002f48 <HAL_RCC_OscConfig+0x780>)
 8002d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d60:	4a79      	ldr	r2, [pc, #484]	; (8002f48 <HAL_RCC_OscConfig+0x780>)
 8002d62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d66:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 80fe 	beq.w	8002f6e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	f040 80d0 	bne.w	8002f1c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d7c:	4b72      	ldr	r3, [pc, #456]	; (8002f48 <HAL_RCC_OscConfig+0x780>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f003 0203 	and.w	r2, r3, #3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d130      	bne.n	8002df2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d127      	bne.n	8002df2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d11f      	bne.n	8002df2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002dbc:	2a07      	cmp	r2, #7
 8002dbe:	bf14      	ite	ne
 8002dc0:	2201      	movne	r2, #1
 8002dc2:	2200      	moveq	r2, #0
 8002dc4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d113      	bne.n	8002df2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd4:	085b      	lsrs	r3, r3, #1
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d109      	bne.n	8002df2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	085b      	lsrs	r3, r3, #1
 8002dea:	3b01      	subs	r3, #1
 8002dec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d06e      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	2b0c      	cmp	r3, #12
 8002df6:	d069      	beq.n	8002ecc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002df8:	4b53      	ldr	r3, [pc, #332]	; (8002f48 <HAL_RCC_OscConfig+0x780>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d105      	bne.n	8002e10 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002e04:	4b50      	ldr	r3, [pc, #320]	; (8002f48 <HAL_RCC_OscConfig+0x780>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e0ad      	b.n	8002f70 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e14:	4b4c      	ldr	r3, [pc, #304]	; (8002f48 <HAL_RCC_OscConfig+0x780>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a4b      	ldr	r2, [pc, #300]	; (8002f48 <HAL_RCC_OscConfig+0x780>)
 8002e1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e1e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e20:	f7ff f9be 	bl	80021a0 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e28:	f7ff f9ba 	bl	80021a0 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e09a      	b.n	8002f70 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e3a:	4b43      	ldr	r3, [pc, #268]	; (8002f48 <HAL_RCC_OscConfig+0x780>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f0      	bne.n	8002e28 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e46:	4b40      	ldr	r3, [pc, #256]	; (8002f48 <HAL_RCC_OscConfig+0x780>)
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	4b40      	ldr	r3, [pc, #256]	; (8002f4c <HAL_RCC_OscConfig+0x784>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e56:	3a01      	subs	r2, #1
 8002e58:	0112      	lsls	r2, r2, #4
 8002e5a:	4311      	orrs	r1, r2
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e60:	0212      	lsls	r2, r2, #8
 8002e62:	4311      	orrs	r1, r2
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e68:	0852      	lsrs	r2, r2, #1
 8002e6a:	3a01      	subs	r2, #1
 8002e6c:	0552      	lsls	r2, r2, #21
 8002e6e:	4311      	orrs	r1, r2
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e74:	0852      	lsrs	r2, r2, #1
 8002e76:	3a01      	subs	r2, #1
 8002e78:	0652      	lsls	r2, r2, #25
 8002e7a:	4311      	orrs	r1, r2
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e80:	0912      	lsrs	r2, r2, #4
 8002e82:	0452      	lsls	r2, r2, #17
 8002e84:	430a      	orrs	r2, r1
 8002e86:	4930      	ldr	r1, [pc, #192]	; (8002f48 <HAL_RCC_OscConfig+0x780>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e8c:	4b2e      	ldr	r3, [pc, #184]	; (8002f48 <HAL_RCC_OscConfig+0x780>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a2d      	ldr	r2, [pc, #180]	; (8002f48 <HAL_RCC_OscConfig+0x780>)
 8002e92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e96:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e98:	4b2b      	ldr	r3, [pc, #172]	; (8002f48 <HAL_RCC_OscConfig+0x780>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	4a2a      	ldr	r2, [pc, #168]	; (8002f48 <HAL_RCC_OscConfig+0x780>)
 8002e9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ea2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ea4:	f7ff f97c 	bl	80021a0 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eac:	f7ff f978 	bl	80021a0 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e058      	b.n	8002f70 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ebe:	4b22      	ldr	r3, [pc, #136]	; (8002f48 <HAL_RCC_OscConfig+0x780>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0f0      	beq.n	8002eac <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002eca:	e050      	b.n	8002f6e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e04f      	b.n	8002f70 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ed0:	4b1d      	ldr	r3, [pc, #116]	; (8002f48 <HAL_RCC_OscConfig+0x780>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d148      	bne.n	8002f6e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002edc:	4b1a      	ldr	r3, [pc, #104]	; (8002f48 <HAL_RCC_OscConfig+0x780>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a19      	ldr	r2, [pc, #100]	; (8002f48 <HAL_RCC_OscConfig+0x780>)
 8002ee2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ee6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ee8:	4b17      	ldr	r3, [pc, #92]	; (8002f48 <HAL_RCC_OscConfig+0x780>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	4a16      	ldr	r2, [pc, #88]	; (8002f48 <HAL_RCC_OscConfig+0x780>)
 8002eee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ef2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ef4:	f7ff f954 	bl	80021a0 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002efc:	f7ff f950 	bl	80021a0 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e030      	b.n	8002f70 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f0e:	4b0e      	ldr	r3, [pc, #56]	; (8002f48 <HAL_RCC_OscConfig+0x780>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0f0      	beq.n	8002efc <HAL_RCC_OscConfig+0x734>
 8002f1a:	e028      	b.n	8002f6e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	2b0c      	cmp	r3, #12
 8002f20:	d023      	beq.n	8002f6a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f22:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <HAL_RCC_OscConfig+0x780>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a08      	ldr	r2, [pc, #32]	; (8002f48 <HAL_RCC_OscConfig+0x780>)
 8002f28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2e:	f7ff f937 	bl	80021a0 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f34:	e00c      	b.n	8002f50 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f36:	f7ff f933 	bl	80021a0 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d905      	bls.n	8002f50 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e013      	b.n	8002f70 <HAL_RCC_OscConfig+0x7a8>
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f50:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <HAL_RCC_OscConfig+0x7b0>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1ec      	bne.n	8002f36 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f5c:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <HAL_RCC_OscConfig+0x7b0>)
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	4905      	ldr	r1, [pc, #20]	; (8002f78 <HAL_RCC_OscConfig+0x7b0>)
 8002f62:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <HAL_RCC_OscConfig+0x7b4>)
 8002f64:	4013      	ands	r3, r2
 8002f66:	60cb      	str	r3, [r1, #12]
 8002f68:	e001      	b.n	8002f6e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e000      	b.n	8002f70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3720      	adds	r7, #32
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	feeefffc 	.word	0xfeeefffc

08002f80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0e7      	b.n	8003164 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f94:	4b75      	ldr	r3, [pc, #468]	; (800316c <HAL_RCC_ClockConfig+0x1ec>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d910      	bls.n	8002fc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa2:	4b72      	ldr	r3, [pc, #456]	; (800316c <HAL_RCC_ClockConfig+0x1ec>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f023 0207 	bic.w	r2, r3, #7
 8002faa:	4970      	ldr	r1, [pc, #448]	; (800316c <HAL_RCC_ClockConfig+0x1ec>)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb2:	4b6e      	ldr	r3, [pc, #440]	; (800316c <HAL_RCC_ClockConfig+0x1ec>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d001      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e0cf      	b.n	8003164 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d010      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	4b66      	ldr	r3, [pc, #408]	; (8003170 <HAL_RCC_ClockConfig+0x1f0>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d908      	bls.n	8002ff2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fe0:	4b63      	ldr	r3, [pc, #396]	; (8003170 <HAL_RCC_ClockConfig+0x1f0>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	4960      	ldr	r1, [pc, #384]	; (8003170 <HAL_RCC_ClockConfig+0x1f0>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d04c      	beq.n	8003098 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b03      	cmp	r3, #3
 8003004:	d107      	bne.n	8003016 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003006:	4b5a      	ldr	r3, [pc, #360]	; (8003170 <HAL_RCC_ClockConfig+0x1f0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d121      	bne.n	8003056 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e0a6      	b.n	8003164 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b02      	cmp	r3, #2
 800301c:	d107      	bne.n	800302e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800301e:	4b54      	ldr	r3, [pc, #336]	; (8003170 <HAL_RCC_ClockConfig+0x1f0>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d115      	bne.n	8003056 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e09a      	b.n	8003164 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d107      	bne.n	8003046 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003036:	4b4e      	ldr	r3, [pc, #312]	; (8003170 <HAL_RCC_ClockConfig+0x1f0>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d109      	bne.n	8003056 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e08e      	b.n	8003164 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003046:	4b4a      	ldr	r3, [pc, #296]	; (8003170 <HAL_RCC_ClockConfig+0x1f0>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e086      	b.n	8003164 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003056:	4b46      	ldr	r3, [pc, #280]	; (8003170 <HAL_RCC_ClockConfig+0x1f0>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f023 0203 	bic.w	r2, r3, #3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	4943      	ldr	r1, [pc, #268]	; (8003170 <HAL_RCC_ClockConfig+0x1f0>)
 8003064:	4313      	orrs	r3, r2
 8003066:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003068:	f7ff f89a 	bl	80021a0 <HAL_GetTick>
 800306c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306e:	e00a      	b.n	8003086 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003070:	f7ff f896 	bl	80021a0 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	f241 3288 	movw	r2, #5000	; 0x1388
 800307e:	4293      	cmp	r3, r2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e06e      	b.n	8003164 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003086:	4b3a      	ldr	r3, [pc, #232]	; (8003170 <HAL_RCC_ClockConfig+0x1f0>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 020c 	and.w	r2, r3, #12
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	429a      	cmp	r2, r3
 8003096:	d1eb      	bne.n	8003070 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d010      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	4b31      	ldr	r3, [pc, #196]	; (8003170 <HAL_RCC_ClockConfig+0x1f0>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d208      	bcs.n	80030c6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b4:	4b2e      	ldr	r3, [pc, #184]	; (8003170 <HAL_RCC_ClockConfig+0x1f0>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	492b      	ldr	r1, [pc, #172]	; (8003170 <HAL_RCC_ClockConfig+0x1f0>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030c6:	4b29      	ldr	r3, [pc, #164]	; (800316c <HAL_RCC_ClockConfig+0x1ec>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d210      	bcs.n	80030f6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d4:	4b25      	ldr	r3, [pc, #148]	; (800316c <HAL_RCC_ClockConfig+0x1ec>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f023 0207 	bic.w	r2, r3, #7
 80030dc:	4923      	ldr	r1, [pc, #140]	; (800316c <HAL_RCC_ClockConfig+0x1ec>)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e4:	4b21      	ldr	r3, [pc, #132]	; (800316c <HAL_RCC_ClockConfig+0x1ec>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d001      	beq.n	80030f6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e036      	b.n	8003164 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0304 	and.w	r3, r3, #4
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d008      	beq.n	8003114 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003102:	4b1b      	ldr	r3, [pc, #108]	; (8003170 <HAL_RCC_ClockConfig+0x1f0>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	4918      	ldr	r1, [pc, #96]	; (8003170 <HAL_RCC_ClockConfig+0x1f0>)
 8003110:	4313      	orrs	r3, r2
 8003112:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0308 	and.w	r3, r3, #8
 800311c:	2b00      	cmp	r3, #0
 800311e:	d009      	beq.n	8003134 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003120:	4b13      	ldr	r3, [pc, #76]	; (8003170 <HAL_RCC_ClockConfig+0x1f0>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	4910      	ldr	r1, [pc, #64]	; (8003170 <HAL_RCC_ClockConfig+0x1f0>)
 8003130:	4313      	orrs	r3, r2
 8003132:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003134:	f000 f824 	bl	8003180 <HAL_RCC_GetSysClockFreq>
 8003138:	4602      	mov	r2, r0
 800313a:	4b0d      	ldr	r3, [pc, #52]	; (8003170 <HAL_RCC_ClockConfig+0x1f0>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	091b      	lsrs	r3, r3, #4
 8003140:	f003 030f 	and.w	r3, r3, #15
 8003144:	490b      	ldr	r1, [pc, #44]	; (8003174 <HAL_RCC_ClockConfig+0x1f4>)
 8003146:	5ccb      	ldrb	r3, [r1, r3]
 8003148:	f003 031f 	and.w	r3, r3, #31
 800314c:	fa22 f303 	lsr.w	r3, r2, r3
 8003150:	4a09      	ldr	r2, [pc, #36]	; (8003178 <HAL_RCC_ClockConfig+0x1f8>)
 8003152:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003154:	4b09      	ldr	r3, [pc, #36]	; (800317c <HAL_RCC_ClockConfig+0x1fc>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	f7fe fbcb 	bl	80018f4 <HAL_InitTick>
 800315e:	4603      	mov	r3, r0
 8003160:	72fb      	strb	r3, [r7, #11]

  return status;
 8003162:	7afb      	ldrb	r3, [r7, #11]
}
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40022000 	.word	0x40022000
 8003170:	40021000 	.word	0x40021000
 8003174:	0800d064 	.word	0x0800d064
 8003178:	20000000 	.word	0x20000000
 800317c:	20000004 	.word	0x20000004

08003180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003180:	b480      	push	{r7}
 8003182:	b089      	sub	sp, #36	; 0x24
 8003184:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003186:	2300      	movs	r3, #0
 8003188:	61fb      	str	r3, [r7, #28]
 800318a:	2300      	movs	r3, #0
 800318c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800318e:	4b3e      	ldr	r3, [pc, #248]	; (8003288 <HAL_RCC_GetSysClockFreq+0x108>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 030c 	and.w	r3, r3, #12
 8003196:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003198:	4b3b      	ldr	r3, [pc, #236]	; (8003288 <HAL_RCC_GetSysClockFreq+0x108>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d005      	beq.n	80031b4 <HAL_RCC_GetSysClockFreq+0x34>
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	2b0c      	cmp	r3, #12
 80031ac:	d121      	bne.n	80031f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d11e      	bne.n	80031f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031b4:	4b34      	ldr	r3, [pc, #208]	; (8003288 <HAL_RCC_GetSysClockFreq+0x108>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0308 	and.w	r3, r3, #8
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d107      	bne.n	80031d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031c0:	4b31      	ldr	r3, [pc, #196]	; (8003288 <HAL_RCC_GetSysClockFreq+0x108>)
 80031c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031c6:	0a1b      	lsrs	r3, r3, #8
 80031c8:	f003 030f 	and.w	r3, r3, #15
 80031cc:	61fb      	str	r3, [r7, #28]
 80031ce:	e005      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80031d0:	4b2d      	ldr	r3, [pc, #180]	; (8003288 <HAL_RCC_GetSysClockFreq+0x108>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	091b      	lsrs	r3, r3, #4
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80031dc:	4a2b      	ldr	r2, [pc, #172]	; (800328c <HAL_RCC_GetSysClockFreq+0x10c>)
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10d      	bne.n	8003208 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031f0:	e00a      	b.n	8003208 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	2b04      	cmp	r3, #4
 80031f6:	d102      	bne.n	80031fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031f8:	4b25      	ldr	r3, [pc, #148]	; (8003290 <HAL_RCC_GetSysClockFreq+0x110>)
 80031fa:	61bb      	str	r3, [r7, #24]
 80031fc:	e004      	b.n	8003208 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	2b08      	cmp	r3, #8
 8003202:	d101      	bne.n	8003208 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003204:	4b23      	ldr	r3, [pc, #140]	; (8003294 <HAL_RCC_GetSysClockFreq+0x114>)
 8003206:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	2b0c      	cmp	r3, #12
 800320c:	d134      	bne.n	8003278 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800320e:	4b1e      	ldr	r3, [pc, #120]	; (8003288 <HAL_RCC_GetSysClockFreq+0x108>)
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	2b02      	cmp	r3, #2
 800321c:	d003      	beq.n	8003226 <HAL_RCC_GetSysClockFreq+0xa6>
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	2b03      	cmp	r3, #3
 8003222:	d003      	beq.n	800322c <HAL_RCC_GetSysClockFreq+0xac>
 8003224:	e005      	b.n	8003232 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003226:	4b1a      	ldr	r3, [pc, #104]	; (8003290 <HAL_RCC_GetSysClockFreq+0x110>)
 8003228:	617b      	str	r3, [r7, #20]
      break;
 800322a:	e005      	b.n	8003238 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800322c:	4b19      	ldr	r3, [pc, #100]	; (8003294 <HAL_RCC_GetSysClockFreq+0x114>)
 800322e:	617b      	str	r3, [r7, #20]
      break;
 8003230:	e002      	b.n	8003238 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	617b      	str	r3, [r7, #20]
      break;
 8003236:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003238:	4b13      	ldr	r3, [pc, #76]	; (8003288 <HAL_RCC_GetSysClockFreq+0x108>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	091b      	lsrs	r3, r3, #4
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	3301      	adds	r3, #1
 8003244:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003246:	4b10      	ldr	r3, [pc, #64]	; (8003288 <HAL_RCC_GetSysClockFreq+0x108>)
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	0a1b      	lsrs	r3, r3, #8
 800324c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	fb03 f202 	mul.w	r2, r3, r2
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	fbb2 f3f3 	udiv	r3, r2, r3
 800325c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800325e:	4b0a      	ldr	r3, [pc, #40]	; (8003288 <HAL_RCC_GetSysClockFreq+0x108>)
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	0e5b      	lsrs	r3, r3, #25
 8003264:	f003 0303 	and.w	r3, r3, #3
 8003268:	3301      	adds	r3, #1
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	fbb2 f3f3 	udiv	r3, r2, r3
 8003276:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003278:	69bb      	ldr	r3, [r7, #24]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3724      	adds	r7, #36	; 0x24
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	40021000 	.word	0x40021000
 800328c:	0800d07c 	.word	0x0800d07c
 8003290:	00f42400 	.word	0x00f42400
 8003294:	007a1200 	.word	0x007a1200

08003298 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800329c:	4b03      	ldr	r3, [pc, #12]	; (80032ac <HAL_RCC_GetHCLKFreq+0x14>)
 800329e:	681b      	ldr	r3, [r3, #0]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	20000000 	.word	0x20000000

080032b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80032b4:	f7ff fff0 	bl	8003298 <HAL_RCC_GetHCLKFreq>
 80032b8:	4602      	mov	r2, r0
 80032ba:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	0a1b      	lsrs	r3, r3, #8
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	4904      	ldr	r1, [pc, #16]	; (80032d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032c6:	5ccb      	ldrb	r3, [r1, r3]
 80032c8:	f003 031f 	and.w	r3, r3, #31
 80032cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40021000 	.word	0x40021000
 80032d8:	0800d074 	.word	0x0800d074

080032dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80032e0:	f7ff ffda 	bl	8003298 <HAL_RCC_GetHCLKFreq>
 80032e4:	4602      	mov	r2, r0
 80032e6:	4b06      	ldr	r3, [pc, #24]	; (8003300 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	0adb      	lsrs	r3, r3, #11
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	4904      	ldr	r1, [pc, #16]	; (8003304 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032f2:	5ccb      	ldrb	r3, [r1, r3]
 80032f4:	f003 031f 	and.w	r3, r3, #31
 80032f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40021000 	.word	0x40021000
 8003304:	0800d074 	.word	0x0800d074

08003308 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	220f      	movs	r2, #15
 8003316:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003318:	4b12      	ldr	r3, [pc, #72]	; (8003364 <HAL_RCC_GetClockConfig+0x5c>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 0203 	and.w	r2, r3, #3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003324:	4b0f      	ldr	r3, [pc, #60]	; (8003364 <HAL_RCC_GetClockConfig+0x5c>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003330:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <HAL_RCC_GetClockConfig+0x5c>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800333c:	4b09      	ldr	r3, [pc, #36]	; (8003364 <HAL_RCC_GetClockConfig+0x5c>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	08db      	lsrs	r3, r3, #3
 8003342:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800334a:	4b07      	ldr	r3, [pc, #28]	; (8003368 <HAL_RCC_GetClockConfig+0x60>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0207 	and.w	r2, r3, #7
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	601a      	str	r2, [r3, #0]
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40021000 	.word	0x40021000
 8003368:	40022000 	.word	0x40022000

0800336c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003374:	2300      	movs	r3, #0
 8003376:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003378:	4b2a      	ldr	r3, [pc, #168]	; (8003424 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800337a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d003      	beq.n	800338c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003384:	f7ff f9bc 	bl	8002700 <HAL_PWREx_GetVoltageRange>
 8003388:	6178      	str	r0, [r7, #20]
 800338a:	e014      	b.n	80033b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800338c:	4b25      	ldr	r3, [pc, #148]	; (8003424 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800338e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003390:	4a24      	ldr	r2, [pc, #144]	; (8003424 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003396:	6593      	str	r3, [r2, #88]	; 0x58
 8003398:	4b22      	ldr	r3, [pc, #136]	; (8003424 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800339a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80033a4:	f7ff f9ac 	bl	8002700 <HAL_PWREx_GetVoltageRange>
 80033a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80033aa:	4b1e      	ldr	r3, [pc, #120]	; (8003424 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ae:	4a1d      	ldr	r2, [pc, #116]	; (8003424 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033bc:	d10b      	bne.n	80033d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b80      	cmp	r3, #128	; 0x80
 80033c2:	d919      	bls.n	80033f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2ba0      	cmp	r3, #160	; 0xa0
 80033c8:	d902      	bls.n	80033d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033ca:	2302      	movs	r3, #2
 80033cc:	613b      	str	r3, [r7, #16]
 80033ce:	e013      	b.n	80033f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033d0:	2301      	movs	r3, #1
 80033d2:	613b      	str	r3, [r7, #16]
 80033d4:	e010      	b.n	80033f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b80      	cmp	r3, #128	; 0x80
 80033da:	d902      	bls.n	80033e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80033dc:	2303      	movs	r3, #3
 80033de:	613b      	str	r3, [r7, #16]
 80033e0:	e00a      	b.n	80033f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b80      	cmp	r3, #128	; 0x80
 80033e6:	d102      	bne.n	80033ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033e8:	2302      	movs	r3, #2
 80033ea:	613b      	str	r3, [r7, #16]
 80033ec:	e004      	b.n	80033f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b70      	cmp	r3, #112	; 0x70
 80033f2:	d101      	bne.n	80033f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033f4:	2301      	movs	r3, #1
 80033f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033f8:	4b0b      	ldr	r3, [pc, #44]	; (8003428 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f023 0207 	bic.w	r2, r3, #7
 8003400:	4909      	ldr	r1, [pc, #36]	; (8003428 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003408:	4b07      	ldr	r3, [pc, #28]	; (8003428 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	429a      	cmp	r2, r3
 8003414:	d001      	beq.n	800341a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e000      	b.n	800341c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40021000 	.word	0x40021000
 8003428:	40022000 	.word	0x40022000

0800342c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003434:	2300      	movs	r3, #0
 8003436:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003438:	2300      	movs	r3, #0
 800343a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003444:	2b00      	cmp	r3, #0
 8003446:	d041      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800344c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003450:	d02a      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003452:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003456:	d824      	bhi.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003458:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800345c:	d008      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800345e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003462:	d81e      	bhi.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00a      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003468:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800346c:	d010      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800346e:	e018      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003470:	4b86      	ldr	r3, [pc, #536]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	4a85      	ldr	r2, [pc, #532]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800347a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800347c:	e015      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	3304      	adds	r3, #4
 8003482:	2100      	movs	r1, #0
 8003484:	4618      	mov	r0, r3
 8003486:	f000 fabb 	bl	8003a00 <RCCEx_PLLSAI1_Config>
 800348a:	4603      	mov	r3, r0
 800348c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800348e:	e00c      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3320      	adds	r3, #32
 8003494:	2100      	movs	r1, #0
 8003496:	4618      	mov	r0, r3
 8003498:	f000 fba6 	bl	8003be8 <RCCEx_PLLSAI2_Config>
 800349c:	4603      	mov	r3, r0
 800349e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034a0:	e003      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	74fb      	strb	r3, [r7, #19]
      break;
 80034a6:	e000      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80034a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034aa:	7cfb      	ldrb	r3, [r7, #19]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10b      	bne.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034b0:	4b76      	ldr	r3, [pc, #472]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034be:	4973      	ldr	r1, [pc, #460]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80034c6:	e001      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c8:	7cfb      	ldrb	r3, [r7, #19]
 80034ca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d041      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80034e0:	d02a      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80034e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80034e6:	d824      	bhi.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80034e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034ec:	d008      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80034ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034f2:	d81e      	bhi.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00a      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80034f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034fc:	d010      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80034fe:	e018      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003500:	4b62      	ldr	r3, [pc, #392]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	4a61      	ldr	r2, [pc, #388]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003506:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800350a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800350c:	e015      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	3304      	adds	r3, #4
 8003512:	2100      	movs	r1, #0
 8003514:	4618      	mov	r0, r3
 8003516:	f000 fa73 	bl	8003a00 <RCCEx_PLLSAI1_Config>
 800351a:	4603      	mov	r3, r0
 800351c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800351e:	e00c      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3320      	adds	r3, #32
 8003524:	2100      	movs	r1, #0
 8003526:	4618      	mov	r0, r3
 8003528:	f000 fb5e 	bl	8003be8 <RCCEx_PLLSAI2_Config>
 800352c:	4603      	mov	r3, r0
 800352e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003530:	e003      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	74fb      	strb	r3, [r7, #19]
      break;
 8003536:	e000      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003538:	bf00      	nop
    }

    if(ret == HAL_OK)
 800353a:	7cfb      	ldrb	r3, [r7, #19]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10b      	bne.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003540:	4b52      	ldr	r3, [pc, #328]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003546:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800354e:	494f      	ldr	r1, [pc, #316]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003550:	4313      	orrs	r3, r2
 8003552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003556:	e001      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003558:	7cfb      	ldrb	r3, [r7, #19]
 800355a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 80a0 	beq.w	80036aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800356a:	2300      	movs	r3, #0
 800356c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800356e:	4b47      	ldr	r3, [pc, #284]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800357a:	2301      	movs	r3, #1
 800357c:	e000      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800357e:	2300      	movs	r3, #0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00d      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003584:	4b41      	ldr	r3, [pc, #260]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003588:	4a40      	ldr	r2, [pc, #256]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800358a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800358e:	6593      	str	r3, [r2, #88]	; 0x58
 8003590:	4b3e      	ldr	r3, [pc, #248]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003598:	60bb      	str	r3, [r7, #8]
 800359a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800359c:	2301      	movs	r3, #1
 800359e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035a0:	4b3b      	ldr	r3, [pc, #236]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a3a      	ldr	r2, [pc, #232]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035ac:	f7fe fdf8 	bl	80021a0 <HAL_GetTick>
 80035b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035b2:	e009      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b4:	f7fe fdf4 	bl	80021a0 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d902      	bls.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	74fb      	strb	r3, [r7, #19]
        break;
 80035c6:	e005      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035c8:	4b31      	ldr	r3, [pc, #196]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0ef      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80035d4:	7cfb      	ldrb	r3, [r7, #19]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d15c      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035da:	4b2c      	ldr	r3, [pc, #176]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d01f      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d019      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035f8:	4b24      	ldr	r3, [pc, #144]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003602:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003604:	4b21      	ldr	r3, [pc, #132]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360a:	4a20      	ldr	r2, [pc, #128]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800360c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003610:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003614:	4b1d      	ldr	r3, [pc, #116]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361a:	4a1c      	ldr	r2, [pc, #112]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800361c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003624:	4a19      	ldr	r2, [pc, #100]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d016      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003636:	f7fe fdb3 	bl	80021a0 <HAL_GetTick>
 800363a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800363c:	e00b      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800363e:	f7fe fdaf 	bl	80021a0 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	f241 3288 	movw	r2, #5000	; 0x1388
 800364c:	4293      	cmp	r3, r2
 800364e:	d902      	bls.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	74fb      	strb	r3, [r7, #19]
            break;
 8003654:	e006      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003656:	4b0d      	ldr	r3, [pc, #52]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0ec      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003664:	7cfb      	ldrb	r3, [r7, #19]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10c      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800366a:	4b08      	ldr	r3, [pc, #32]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800366c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003670:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800367a:	4904      	ldr	r1, [pc, #16]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800367c:	4313      	orrs	r3, r2
 800367e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003682:	e009      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003684:	7cfb      	ldrb	r3, [r7, #19]
 8003686:	74bb      	strb	r3, [r7, #18]
 8003688:	e006      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800368a:	bf00      	nop
 800368c:	40021000 	.word	0x40021000
 8003690:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003694:	7cfb      	ldrb	r3, [r7, #19]
 8003696:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003698:	7c7b      	ldrb	r3, [r7, #17]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d105      	bne.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800369e:	4b9e      	ldr	r3, [pc, #632]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a2:	4a9d      	ldr	r2, [pc, #628]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00a      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036b6:	4b98      	ldr	r3, [pc, #608]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036bc:	f023 0203 	bic.w	r2, r3, #3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c4:	4994      	ldr	r1, [pc, #592]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00a      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036d8:	4b8f      	ldr	r3, [pc, #572]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036de:	f023 020c 	bic.w	r2, r3, #12
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e6:	498c      	ldr	r1, [pc, #560]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0304 	and.w	r3, r3, #4
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00a      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036fa:	4b87      	ldr	r3, [pc, #540]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003700:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003708:	4983      	ldr	r1, [pc, #524]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370a:	4313      	orrs	r3, r2
 800370c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0308 	and.w	r3, r3, #8
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00a      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800371c:	4b7e      	ldr	r3, [pc, #504]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800371e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003722:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372a:	497b      	ldr	r1, [pc, #492]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372c:	4313      	orrs	r3, r2
 800372e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0310 	and.w	r3, r3, #16
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800373e:	4b76      	ldr	r3, [pc, #472]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003744:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800374c:	4972      	ldr	r1, [pc, #456]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800374e:	4313      	orrs	r3, r2
 8003750:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0320 	and.w	r3, r3, #32
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00a      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003760:	4b6d      	ldr	r3, [pc, #436]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003766:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800376e:	496a      	ldr	r1, [pc, #424]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003770:	4313      	orrs	r3, r2
 8003772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003782:	4b65      	ldr	r3, [pc, #404]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003788:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003790:	4961      	ldr	r1, [pc, #388]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003792:	4313      	orrs	r3, r2
 8003794:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00a      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037a4:	4b5c      	ldr	r3, [pc, #368]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b2:	4959      	ldr	r1, [pc, #356]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037c6:	4b54      	ldr	r3, [pc, #336]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d4:	4950      	ldr	r1, [pc, #320]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00a      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037e8:	4b4b      	ldr	r3, [pc, #300]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f6:	4948      	ldr	r1, [pc, #288]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800380a:	4b43      	ldr	r3, [pc, #268]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800380c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003810:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003818:	493f      	ldr	r1, [pc, #252]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800381a:	4313      	orrs	r3, r2
 800381c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d028      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800382c:	4b3a      	ldr	r3, [pc, #232]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003832:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800383a:	4937      	ldr	r1, [pc, #220]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800383c:	4313      	orrs	r3, r2
 800383e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003846:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800384a:	d106      	bne.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800384c:	4b32      	ldr	r3, [pc, #200]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	4a31      	ldr	r2, [pc, #196]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003852:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003856:	60d3      	str	r3, [r2, #12]
 8003858:	e011      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800385e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003862:	d10c      	bne.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3304      	adds	r3, #4
 8003868:	2101      	movs	r1, #1
 800386a:	4618      	mov	r0, r3
 800386c:	f000 f8c8 	bl	8003a00 <RCCEx_PLLSAI1_Config>
 8003870:	4603      	mov	r3, r0
 8003872:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003874:	7cfb      	ldrb	r3, [r7, #19]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800387a:	7cfb      	ldrb	r3, [r7, #19]
 800387c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d028      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800388a:	4b23      	ldr	r3, [pc, #140]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800388c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003890:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003898:	491f      	ldr	r1, [pc, #124]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038a8:	d106      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038aa:	4b1b      	ldr	r3, [pc, #108]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	4a1a      	ldr	r2, [pc, #104]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038b4:	60d3      	str	r3, [r2, #12]
 80038b6:	e011      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038c0:	d10c      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	3304      	adds	r3, #4
 80038c6:	2101      	movs	r1, #1
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 f899 	bl	8003a00 <RCCEx_PLLSAI1_Config>
 80038ce:	4603      	mov	r3, r0
 80038d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038d2:	7cfb      	ldrb	r3, [r7, #19]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80038d8:	7cfb      	ldrb	r3, [r7, #19]
 80038da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d02b      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038e8:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038f6:	4908      	ldr	r1, [pc, #32]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003902:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003906:	d109      	bne.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003908:	4b03      	ldr	r3, [pc, #12]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	4a02      	ldr	r2, [pc, #8]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800390e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003912:	60d3      	str	r3, [r2, #12]
 8003914:	e014      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003916:	bf00      	nop
 8003918:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003920:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003924:	d10c      	bne.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	3304      	adds	r3, #4
 800392a:	2101      	movs	r1, #1
 800392c:	4618      	mov	r0, r3
 800392e:	f000 f867 	bl	8003a00 <RCCEx_PLLSAI1_Config>
 8003932:	4603      	mov	r3, r0
 8003934:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003936:	7cfb      	ldrb	r3, [r7, #19]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800393c:	7cfb      	ldrb	r3, [r7, #19]
 800393e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d02f      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800394c:	4b2b      	ldr	r3, [pc, #172]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800394e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003952:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800395a:	4928      	ldr	r1, [pc, #160]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800395c:	4313      	orrs	r3, r2
 800395e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003966:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800396a:	d10d      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3304      	adds	r3, #4
 8003970:	2102      	movs	r1, #2
 8003972:	4618      	mov	r0, r3
 8003974:	f000 f844 	bl	8003a00 <RCCEx_PLLSAI1_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800397c:	7cfb      	ldrb	r3, [r7, #19]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d014      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003982:	7cfb      	ldrb	r3, [r7, #19]
 8003984:	74bb      	strb	r3, [r7, #18]
 8003986:	e011      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800398c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003990:	d10c      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	3320      	adds	r3, #32
 8003996:	2102      	movs	r1, #2
 8003998:	4618      	mov	r0, r3
 800399a:	f000 f925 	bl	8003be8 <RCCEx_PLLSAI2_Config>
 800399e:	4603      	mov	r3, r0
 80039a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039a2:	7cfb      	ldrb	r3, [r7, #19]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80039a8:	7cfb      	ldrb	r3, [r7, #19]
 80039aa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00a      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039b8:	4b10      	ldr	r3, [pc, #64]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039be:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039c6:	490d      	ldr	r1, [pc, #52]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00b      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039da:	4b08      	ldr	r3, [pc, #32]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039ea:	4904      	ldr	r1, [pc, #16]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80039f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3718      	adds	r7, #24
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40021000 	.word	0x40021000

08003a00 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a0e:	4b75      	ldr	r3, [pc, #468]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d018      	beq.n	8003a4c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a1a:	4b72      	ldr	r3, [pc, #456]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f003 0203 	and.w	r2, r3, #3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d10d      	bne.n	8003a46 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
       ||
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d009      	beq.n	8003a46 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a32:	4b6c      	ldr	r3, [pc, #432]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	091b      	lsrs	r3, r3, #4
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	1c5a      	adds	r2, r3, #1
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
       ||
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d047      	beq.n	8003ad6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	73fb      	strb	r3, [r7, #15]
 8003a4a:	e044      	b.n	8003ad6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d018      	beq.n	8003a86 <RCCEx_PLLSAI1_Config+0x86>
 8003a54:	2b03      	cmp	r3, #3
 8003a56:	d825      	bhi.n	8003aa4 <RCCEx_PLLSAI1_Config+0xa4>
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d002      	beq.n	8003a62 <RCCEx_PLLSAI1_Config+0x62>
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d009      	beq.n	8003a74 <RCCEx_PLLSAI1_Config+0x74>
 8003a60:	e020      	b.n	8003aa4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a62:	4b60      	ldr	r3, [pc, #384]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d11d      	bne.n	8003aaa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a72:	e01a      	b.n	8003aaa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a74:	4b5b      	ldr	r3, [pc, #364]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d116      	bne.n	8003aae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a84:	e013      	b.n	8003aae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a86:	4b57      	ldr	r3, [pc, #348]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10f      	bne.n	8003ab2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a92:	4b54      	ldr	r3, [pc, #336]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d109      	bne.n	8003ab2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003aa2:	e006      	b.n	8003ab2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8003aa8:	e004      	b.n	8003ab4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003aaa:	bf00      	nop
 8003aac:	e002      	b.n	8003ab4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003aae:	bf00      	nop
 8003ab0:	e000      	b.n	8003ab4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ab2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10d      	bne.n	8003ad6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003aba:	4b4a      	ldr	r3, [pc, #296]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6819      	ldr	r1, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	3b01      	subs	r3, #1
 8003acc:	011b      	lsls	r3, r3, #4
 8003ace:	430b      	orrs	r3, r1
 8003ad0:	4944      	ldr	r1, [pc, #272]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ad6:	7bfb      	ldrb	r3, [r7, #15]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d17d      	bne.n	8003bd8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003adc:	4b41      	ldr	r3, [pc, #260]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a40      	ldr	r2, [pc, #256]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ae2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ae6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ae8:	f7fe fb5a 	bl	80021a0 <HAL_GetTick>
 8003aec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003aee:	e009      	b.n	8003b04 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003af0:	f7fe fb56 	bl	80021a0 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d902      	bls.n	8003b04 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	73fb      	strb	r3, [r7, #15]
        break;
 8003b02:	e005      	b.n	8003b10 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b04:	4b37      	ldr	r3, [pc, #220]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1ef      	bne.n	8003af0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b10:	7bfb      	ldrb	r3, [r7, #15]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d160      	bne.n	8003bd8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d111      	bne.n	8003b40 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b1c:	4b31      	ldr	r3, [pc, #196]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6892      	ldr	r2, [r2, #8]
 8003b2c:	0211      	lsls	r1, r2, #8
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	68d2      	ldr	r2, [r2, #12]
 8003b32:	0912      	lsrs	r2, r2, #4
 8003b34:	0452      	lsls	r2, r2, #17
 8003b36:	430a      	orrs	r2, r1
 8003b38:	492a      	ldr	r1, [pc, #168]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	610b      	str	r3, [r1, #16]
 8003b3e:	e027      	b.n	8003b90 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d112      	bne.n	8003b6c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b46:	4b27      	ldr	r3, [pc, #156]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003b4e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6892      	ldr	r2, [r2, #8]
 8003b56:	0211      	lsls	r1, r2, #8
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	6912      	ldr	r2, [r2, #16]
 8003b5c:	0852      	lsrs	r2, r2, #1
 8003b5e:	3a01      	subs	r2, #1
 8003b60:	0552      	lsls	r2, r2, #21
 8003b62:	430a      	orrs	r2, r1
 8003b64:	491f      	ldr	r1, [pc, #124]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	610b      	str	r3, [r1, #16]
 8003b6a:	e011      	b.n	8003b90 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b6c:	4b1d      	ldr	r3, [pc, #116]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b74:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6892      	ldr	r2, [r2, #8]
 8003b7c:	0211      	lsls	r1, r2, #8
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6952      	ldr	r2, [r2, #20]
 8003b82:	0852      	lsrs	r2, r2, #1
 8003b84:	3a01      	subs	r2, #1
 8003b86:	0652      	lsls	r2, r2, #25
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	4916      	ldr	r1, [pc, #88]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b90:	4b14      	ldr	r3, [pc, #80]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a13      	ldr	r2, [pc, #76]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b9c:	f7fe fb00 	bl	80021a0 <HAL_GetTick>
 8003ba0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ba2:	e009      	b.n	8003bb8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ba4:	f7fe fafc 	bl	80021a0 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d902      	bls.n	8003bb8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	73fb      	strb	r3, [r7, #15]
          break;
 8003bb6:	e005      	b.n	8003bc4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bb8:	4b0a      	ldr	r3, [pc, #40]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0ef      	beq.n	8003ba4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d106      	bne.n	8003bd8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003bca:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bcc:	691a      	ldr	r2, [r3, #16]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	4904      	ldr	r1, [pc, #16]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	40021000 	.word	0x40021000

08003be8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bf6:	4b6a      	ldr	r3, [pc, #424]	; (8003da0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d018      	beq.n	8003c34 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003c02:	4b67      	ldr	r3, [pc, #412]	; (8003da0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	f003 0203 	and.w	r2, r3, #3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d10d      	bne.n	8003c2e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
       ||
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d009      	beq.n	8003c2e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003c1a:	4b61      	ldr	r3, [pc, #388]	; (8003da0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	091b      	lsrs	r3, r3, #4
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	1c5a      	adds	r2, r3, #1
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
       ||
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d047      	beq.n	8003cbe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	73fb      	strb	r3, [r7, #15]
 8003c32:	e044      	b.n	8003cbe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b03      	cmp	r3, #3
 8003c3a:	d018      	beq.n	8003c6e <RCCEx_PLLSAI2_Config+0x86>
 8003c3c:	2b03      	cmp	r3, #3
 8003c3e:	d825      	bhi.n	8003c8c <RCCEx_PLLSAI2_Config+0xa4>
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d002      	beq.n	8003c4a <RCCEx_PLLSAI2_Config+0x62>
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d009      	beq.n	8003c5c <RCCEx_PLLSAI2_Config+0x74>
 8003c48:	e020      	b.n	8003c8c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c4a:	4b55      	ldr	r3, [pc, #340]	; (8003da0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d11d      	bne.n	8003c92 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c5a:	e01a      	b.n	8003c92 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c5c:	4b50      	ldr	r3, [pc, #320]	; (8003da0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d116      	bne.n	8003c96 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c6c:	e013      	b.n	8003c96 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c6e:	4b4c      	ldr	r3, [pc, #304]	; (8003da0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10f      	bne.n	8003c9a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c7a:	4b49      	ldr	r3, [pc, #292]	; (8003da0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d109      	bne.n	8003c9a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c8a:	e006      	b.n	8003c9a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c90:	e004      	b.n	8003c9c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c92:	bf00      	nop
 8003c94:	e002      	b.n	8003c9c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c96:	bf00      	nop
 8003c98:	e000      	b.n	8003c9c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c9a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10d      	bne.n	8003cbe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ca2:	4b3f      	ldr	r3, [pc, #252]	; (8003da0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6819      	ldr	r1, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	011b      	lsls	r3, r3, #4
 8003cb6:	430b      	orrs	r3, r1
 8003cb8:	4939      	ldr	r1, [pc, #228]	; (8003da0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d167      	bne.n	8003d94 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003cc4:	4b36      	ldr	r3, [pc, #216]	; (8003da0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a35      	ldr	r2, [pc, #212]	; (8003da0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cd0:	f7fe fa66 	bl	80021a0 <HAL_GetTick>
 8003cd4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003cd6:	e009      	b.n	8003cec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003cd8:	f7fe fa62 	bl	80021a0 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d902      	bls.n	8003cec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	73fb      	strb	r3, [r7, #15]
        break;
 8003cea:	e005      	b.n	8003cf8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003cec:	4b2c      	ldr	r3, [pc, #176]	; (8003da0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1ef      	bne.n	8003cd8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d14a      	bne.n	8003d94 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d111      	bne.n	8003d28 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d04:	4b26      	ldr	r3, [pc, #152]	; (8003da0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6892      	ldr	r2, [r2, #8]
 8003d14:	0211      	lsls	r1, r2, #8
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	68d2      	ldr	r2, [r2, #12]
 8003d1a:	0912      	lsrs	r2, r2, #4
 8003d1c:	0452      	lsls	r2, r2, #17
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	491f      	ldr	r1, [pc, #124]	; (8003da0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	614b      	str	r3, [r1, #20]
 8003d26:	e011      	b.n	8003d4c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d28:	4b1d      	ldr	r3, [pc, #116]	; (8003da0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d30:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6892      	ldr	r2, [r2, #8]
 8003d38:	0211      	lsls	r1, r2, #8
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6912      	ldr	r2, [r2, #16]
 8003d3e:	0852      	lsrs	r2, r2, #1
 8003d40:	3a01      	subs	r2, #1
 8003d42:	0652      	lsls	r2, r2, #25
 8003d44:	430a      	orrs	r2, r1
 8003d46:	4916      	ldr	r1, [pc, #88]	; (8003da0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003d4c:	4b14      	ldr	r3, [pc, #80]	; (8003da0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a13      	ldr	r2, [pc, #76]	; (8003da0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d56:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d58:	f7fe fa22 	bl	80021a0 <HAL_GetTick>
 8003d5c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d5e:	e009      	b.n	8003d74 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d60:	f7fe fa1e 	bl	80021a0 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d902      	bls.n	8003d74 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	73fb      	strb	r3, [r7, #15]
          break;
 8003d72:	e005      	b.n	8003d80 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d74:	4b0a      	ldr	r3, [pc, #40]	; (8003da0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d0ef      	beq.n	8003d60 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003d80:	7bfb      	ldrb	r3, [r7, #15]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d106      	bne.n	8003d94 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d86:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d88:	695a      	ldr	r2, [r3, #20]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	4904      	ldr	r1, [pc, #16]	; (8003da0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40021000 	.word	0x40021000

08003da4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e049      	b.n	8003e4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d106      	bne.n	8003dd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7fe f84e 	bl	8001e6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3304      	adds	r3, #4
 8003de0:	4619      	mov	r1, r3
 8003de2:	4610      	mov	r0, r2
 8003de4:	f001 f94a 	bl	800507c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
	...

08003e54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d001      	beq.n	8003e6c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e047      	b.n	8003efc <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a23      	ldr	r2, [pc, #140]	; (8003f08 <HAL_TIM_Base_Start+0xb4>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d01d      	beq.n	8003eba <HAL_TIM_Base_Start+0x66>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e86:	d018      	beq.n	8003eba <HAL_TIM_Base_Start+0x66>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a1f      	ldr	r2, [pc, #124]	; (8003f0c <HAL_TIM_Base_Start+0xb8>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d013      	beq.n	8003eba <HAL_TIM_Base_Start+0x66>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a1e      	ldr	r2, [pc, #120]	; (8003f10 <HAL_TIM_Base_Start+0xbc>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d00e      	beq.n	8003eba <HAL_TIM_Base_Start+0x66>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a1c      	ldr	r2, [pc, #112]	; (8003f14 <HAL_TIM_Base_Start+0xc0>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d009      	beq.n	8003eba <HAL_TIM_Base_Start+0x66>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a1b      	ldr	r2, [pc, #108]	; (8003f18 <HAL_TIM_Base_Start+0xc4>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d004      	beq.n	8003eba <HAL_TIM_Base_Start+0x66>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a19      	ldr	r2, [pc, #100]	; (8003f1c <HAL_TIM_Base_Start+0xc8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d115      	bne.n	8003ee6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	4b17      	ldr	r3, [pc, #92]	; (8003f20 <HAL_TIM_Base_Start+0xcc>)
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2b06      	cmp	r3, #6
 8003eca:	d015      	beq.n	8003ef8 <HAL_TIM_Base_Start+0xa4>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed2:	d011      	beq.n	8003ef8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0201 	orr.w	r2, r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ee4:	e008      	b.n	8003ef8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f042 0201 	orr.w	r2, r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	e000      	b.n	8003efa <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	40012c00 	.word	0x40012c00
 8003f0c:	40000400 	.word	0x40000400
 8003f10:	40000800 	.word	0x40000800
 8003f14:	40000c00 	.word	0x40000c00
 8003f18:	40013400 	.word	0x40013400
 8003f1c:	40014000 	.word	0x40014000
 8003f20:	00010007 	.word	0x00010007

08003f24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d001      	beq.n	8003f3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e04f      	b.n	8003fdc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68da      	ldr	r2, [r3, #12]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f042 0201 	orr.w	r2, r2, #1
 8003f52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a23      	ldr	r2, [pc, #140]	; (8003fe8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d01d      	beq.n	8003f9a <HAL_TIM_Base_Start_IT+0x76>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f66:	d018      	beq.n	8003f9a <HAL_TIM_Base_Start_IT+0x76>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a1f      	ldr	r2, [pc, #124]	; (8003fec <HAL_TIM_Base_Start_IT+0xc8>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d013      	beq.n	8003f9a <HAL_TIM_Base_Start_IT+0x76>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a1e      	ldr	r2, [pc, #120]	; (8003ff0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d00e      	beq.n	8003f9a <HAL_TIM_Base_Start_IT+0x76>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a1c      	ldr	r2, [pc, #112]	; (8003ff4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d009      	beq.n	8003f9a <HAL_TIM_Base_Start_IT+0x76>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a1b      	ldr	r2, [pc, #108]	; (8003ff8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d004      	beq.n	8003f9a <HAL_TIM_Base_Start_IT+0x76>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a19      	ldr	r2, [pc, #100]	; (8003ffc <HAL_TIM_Base_Start_IT+0xd8>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d115      	bne.n	8003fc6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	689a      	ldr	r2, [r3, #8]
 8003fa0:	4b17      	ldr	r3, [pc, #92]	; (8004000 <HAL_TIM_Base_Start_IT+0xdc>)
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2b06      	cmp	r3, #6
 8003faa:	d015      	beq.n	8003fd8 <HAL_TIM_Base_Start_IT+0xb4>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb2:	d011      	beq.n	8003fd8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f042 0201 	orr.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fc4:	e008      	b.n	8003fd8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f042 0201 	orr.w	r2, r2, #1
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	e000      	b.n	8003fda <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fd8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	40012c00 	.word	0x40012c00
 8003fec:	40000400 	.word	0x40000400
 8003ff0:	40000800 	.word	0x40000800
 8003ff4:	40000c00 	.word	0x40000c00
 8003ff8:	40013400 	.word	0x40013400
 8003ffc:	40014000 	.word	0x40014000
 8004000:	00010007 	.word	0x00010007

08004004 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e049      	b.n	80040aa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d106      	bne.n	8004030 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f841 	bl	80040b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2202      	movs	r2, #2
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3304      	adds	r3, #4
 8004040:	4619      	mov	r1, r3
 8004042:	4610      	mov	r0, r2
 8004044:	f001 f81a 	bl	800507c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
	...

080040c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d109      	bne.n	80040ec <HAL_TIM_PWM_Start+0x24>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	bf14      	ite	ne
 80040e4:	2301      	movne	r3, #1
 80040e6:	2300      	moveq	r3, #0
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	e03c      	b.n	8004166 <HAL_TIM_PWM_Start+0x9e>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d109      	bne.n	8004106 <HAL_TIM_PWM_Start+0x3e>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	bf14      	ite	ne
 80040fe:	2301      	movne	r3, #1
 8004100:	2300      	moveq	r3, #0
 8004102:	b2db      	uxtb	r3, r3
 8004104:	e02f      	b.n	8004166 <HAL_TIM_PWM_Start+0x9e>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2b08      	cmp	r3, #8
 800410a:	d109      	bne.n	8004120 <HAL_TIM_PWM_Start+0x58>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b01      	cmp	r3, #1
 8004116:	bf14      	ite	ne
 8004118:	2301      	movne	r3, #1
 800411a:	2300      	moveq	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	e022      	b.n	8004166 <HAL_TIM_PWM_Start+0x9e>
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	2b0c      	cmp	r3, #12
 8004124:	d109      	bne.n	800413a <HAL_TIM_PWM_Start+0x72>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b01      	cmp	r3, #1
 8004130:	bf14      	ite	ne
 8004132:	2301      	movne	r3, #1
 8004134:	2300      	moveq	r3, #0
 8004136:	b2db      	uxtb	r3, r3
 8004138:	e015      	b.n	8004166 <HAL_TIM_PWM_Start+0x9e>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b10      	cmp	r3, #16
 800413e:	d109      	bne.n	8004154 <HAL_TIM_PWM_Start+0x8c>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b01      	cmp	r3, #1
 800414a:	bf14      	ite	ne
 800414c:	2301      	movne	r3, #1
 800414e:	2300      	moveq	r3, #0
 8004150:	b2db      	uxtb	r3, r3
 8004152:	e008      	b.n	8004166 <HAL_TIM_PWM_Start+0x9e>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b01      	cmp	r3, #1
 800415e:	bf14      	ite	ne
 8004160:	2301      	movne	r3, #1
 8004162:	2300      	moveq	r3, #0
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e09c      	b.n	80042a8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d104      	bne.n	800417e <HAL_TIM_PWM_Start+0xb6>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800417c:	e023      	b.n	80041c6 <HAL_TIM_PWM_Start+0xfe>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b04      	cmp	r3, #4
 8004182:	d104      	bne.n	800418e <HAL_TIM_PWM_Start+0xc6>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2202      	movs	r2, #2
 8004188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800418c:	e01b      	b.n	80041c6 <HAL_TIM_PWM_Start+0xfe>
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b08      	cmp	r3, #8
 8004192:	d104      	bne.n	800419e <HAL_TIM_PWM_Start+0xd6>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800419c:	e013      	b.n	80041c6 <HAL_TIM_PWM_Start+0xfe>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b0c      	cmp	r3, #12
 80041a2:	d104      	bne.n	80041ae <HAL_TIM_PWM_Start+0xe6>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2202      	movs	r2, #2
 80041a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041ac:	e00b      	b.n	80041c6 <HAL_TIM_PWM_Start+0xfe>
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b10      	cmp	r3, #16
 80041b2:	d104      	bne.n	80041be <HAL_TIM_PWM_Start+0xf6>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041bc:	e003      	b.n	80041c6 <HAL_TIM_PWM_Start+0xfe>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2202      	movs	r2, #2
 80041c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2201      	movs	r2, #1
 80041cc:	6839      	ldr	r1, [r7, #0]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f001 fd16 	bl	8005c00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a35      	ldr	r2, [pc, #212]	; (80042b0 <HAL_TIM_PWM_Start+0x1e8>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d013      	beq.n	8004206 <HAL_TIM_PWM_Start+0x13e>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a34      	ldr	r2, [pc, #208]	; (80042b4 <HAL_TIM_PWM_Start+0x1ec>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d00e      	beq.n	8004206 <HAL_TIM_PWM_Start+0x13e>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a32      	ldr	r2, [pc, #200]	; (80042b8 <HAL_TIM_PWM_Start+0x1f0>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d009      	beq.n	8004206 <HAL_TIM_PWM_Start+0x13e>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a31      	ldr	r2, [pc, #196]	; (80042bc <HAL_TIM_PWM_Start+0x1f4>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d004      	beq.n	8004206 <HAL_TIM_PWM_Start+0x13e>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a2f      	ldr	r2, [pc, #188]	; (80042c0 <HAL_TIM_PWM_Start+0x1f8>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d101      	bne.n	800420a <HAL_TIM_PWM_Start+0x142>
 8004206:	2301      	movs	r3, #1
 8004208:	e000      	b.n	800420c <HAL_TIM_PWM_Start+0x144>
 800420a:	2300      	movs	r3, #0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d007      	beq.n	8004220 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800421e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a22      	ldr	r2, [pc, #136]	; (80042b0 <HAL_TIM_PWM_Start+0x1e8>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d01d      	beq.n	8004266 <HAL_TIM_PWM_Start+0x19e>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004232:	d018      	beq.n	8004266 <HAL_TIM_PWM_Start+0x19e>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a22      	ldr	r2, [pc, #136]	; (80042c4 <HAL_TIM_PWM_Start+0x1fc>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d013      	beq.n	8004266 <HAL_TIM_PWM_Start+0x19e>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a21      	ldr	r2, [pc, #132]	; (80042c8 <HAL_TIM_PWM_Start+0x200>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d00e      	beq.n	8004266 <HAL_TIM_PWM_Start+0x19e>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a1f      	ldr	r2, [pc, #124]	; (80042cc <HAL_TIM_PWM_Start+0x204>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d009      	beq.n	8004266 <HAL_TIM_PWM_Start+0x19e>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a17      	ldr	r2, [pc, #92]	; (80042b4 <HAL_TIM_PWM_Start+0x1ec>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d004      	beq.n	8004266 <HAL_TIM_PWM_Start+0x19e>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a15      	ldr	r2, [pc, #84]	; (80042b8 <HAL_TIM_PWM_Start+0x1f0>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d115      	bne.n	8004292 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689a      	ldr	r2, [r3, #8]
 800426c:	4b18      	ldr	r3, [pc, #96]	; (80042d0 <HAL_TIM_PWM_Start+0x208>)
 800426e:	4013      	ands	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2b06      	cmp	r3, #6
 8004276:	d015      	beq.n	80042a4 <HAL_TIM_PWM_Start+0x1dc>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800427e:	d011      	beq.n	80042a4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0201 	orr.w	r2, r2, #1
 800428e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004290:	e008      	b.n	80042a4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f042 0201 	orr.w	r2, r2, #1
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	e000      	b.n	80042a6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	40012c00 	.word	0x40012c00
 80042b4:	40013400 	.word	0x40013400
 80042b8:	40014000 	.word	0x40014000
 80042bc:	40014400 	.word	0x40014400
 80042c0:	40014800 	.word	0x40014800
 80042c4:	40000400 	.word	0x40000400
 80042c8:	40000800 	.word	0x40000800
 80042cc:	40000c00 	.word	0x40000c00
 80042d0:	00010007 	.word	0x00010007

080042d4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e049      	b.n	800437a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d106      	bne.n	8004300 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f841 	bl	8004382 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3304      	adds	r3, #4
 8004310:	4619      	mov	r1, r3
 8004312:	4610      	mov	r0, r2
 8004314:	f000 feb2 	bl	800507c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004382:	b480      	push	{r7}
 8004384:	b083      	sub	sp, #12
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800438a:	bf00      	nop
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
	...

08004398 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d104      	bne.n	80043b2 <HAL_TIM_IC_Start+0x1a>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	e023      	b.n	80043fa <HAL_TIM_IC_Start+0x62>
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	2b04      	cmp	r3, #4
 80043b6:	d104      	bne.n	80043c2 <HAL_TIM_IC_Start+0x2a>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	e01b      	b.n	80043fa <HAL_TIM_IC_Start+0x62>
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	2b08      	cmp	r3, #8
 80043c6:	d104      	bne.n	80043d2 <HAL_TIM_IC_Start+0x3a>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	e013      	b.n	80043fa <HAL_TIM_IC_Start+0x62>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b0c      	cmp	r3, #12
 80043d6:	d104      	bne.n	80043e2 <HAL_TIM_IC_Start+0x4a>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	e00b      	b.n	80043fa <HAL_TIM_IC_Start+0x62>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b10      	cmp	r3, #16
 80043e6:	d104      	bne.n	80043f2 <HAL_TIM_IC_Start+0x5a>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	e003      	b.n	80043fa <HAL_TIM_IC_Start+0x62>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d104      	bne.n	800440c <HAL_TIM_IC_Start+0x74>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004408:	b2db      	uxtb	r3, r3
 800440a:	e013      	b.n	8004434 <HAL_TIM_IC_Start+0x9c>
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	2b04      	cmp	r3, #4
 8004410:	d104      	bne.n	800441c <HAL_TIM_IC_Start+0x84>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004418:	b2db      	uxtb	r3, r3
 800441a:	e00b      	b.n	8004434 <HAL_TIM_IC_Start+0x9c>
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	2b08      	cmp	r3, #8
 8004420:	d104      	bne.n	800442c <HAL_TIM_IC_Start+0x94>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004428:	b2db      	uxtb	r3, r3
 800442a:	e003      	b.n	8004434 <HAL_TIM_IC_Start+0x9c>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004432:	b2db      	uxtb	r3, r3
 8004434:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004436:	7bfb      	ldrb	r3, [r7, #15]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d102      	bne.n	8004442 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800443c:	7bbb      	ldrb	r3, [r7, #14]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d001      	beq.n	8004446 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e092      	b.n	800456c <HAL_TIM_IC_Start+0x1d4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d104      	bne.n	8004456 <HAL_TIM_IC_Start+0xbe>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2202      	movs	r2, #2
 8004450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004454:	e023      	b.n	800449e <HAL_TIM_IC_Start+0x106>
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	2b04      	cmp	r3, #4
 800445a:	d104      	bne.n	8004466 <HAL_TIM_IC_Start+0xce>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2202      	movs	r2, #2
 8004460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004464:	e01b      	b.n	800449e <HAL_TIM_IC_Start+0x106>
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b08      	cmp	r3, #8
 800446a:	d104      	bne.n	8004476 <HAL_TIM_IC_Start+0xde>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2202      	movs	r2, #2
 8004470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004474:	e013      	b.n	800449e <HAL_TIM_IC_Start+0x106>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2b0c      	cmp	r3, #12
 800447a:	d104      	bne.n	8004486 <HAL_TIM_IC_Start+0xee>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2202      	movs	r2, #2
 8004480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004484:	e00b      	b.n	800449e <HAL_TIM_IC_Start+0x106>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2b10      	cmp	r3, #16
 800448a:	d104      	bne.n	8004496 <HAL_TIM_IC_Start+0xfe>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004494:	e003      	b.n	800449e <HAL_TIM_IC_Start+0x106>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2202      	movs	r2, #2
 800449a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d104      	bne.n	80044ae <HAL_TIM_IC_Start+0x116>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2202      	movs	r2, #2
 80044a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044ac:	e013      	b.n	80044d6 <HAL_TIM_IC_Start+0x13e>
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	2b04      	cmp	r3, #4
 80044b2:	d104      	bne.n	80044be <HAL_TIM_IC_Start+0x126>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2202      	movs	r2, #2
 80044b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044bc:	e00b      	b.n	80044d6 <HAL_TIM_IC_Start+0x13e>
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d104      	bne.n	80044ce <HAL_TIM_IC_Start+0x136>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2202      	movs	r2, #2
 80044c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80044cc:	e003      	b.n	80044d6 <HAL_TIM_IC_Start+0x13e>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2202      	movs	r2, #2
 80044d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2201      	movs	r2, #1
 80044dc:	6839      	ldr	r1, [r7, #0]
 80044de:	4618      	mov	r0, r3
 80044e0:	f001 fb8e 	bl	8005c00 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a22      	ldr	r2, [pc, #136]	; (8004574 <HAL_TIM_IC_Start+0x1dc>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d01d      	beq.n	800452a <HAL_TIM_IC_Start+0x192>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f6:	d018      	beq.n	800452a <HAL_TIM_IC_Start+0x192>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a1e      	ldr	r2, [pc, #120]	; (8004578 <HAL_TIM_IC_Start+0x1e0>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d013      	beq.n	800452a <HAL_TIM_IC_Start+0x192>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a1d      	ldr	r2, [pc, #116]	; (800457c <HAL_TIM_IC_Start+0x1e4>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d00e      	beq.n	800452a <HAL_TIM_IC_Start+0x192>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a1b      	ldr	r2, [pc, #108]	; (8004580 <HAL_TIM_IC_Start+0x1e8>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d009      	beq.n	800452a <HAL_TIM_IC_Start+0x192>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a1a      	ldr	r2, [pc, #104]	; (8004584 <HAL_TIM_IC_Start+0x1ec>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d004      	beq.n	800452a <HAL_TIM_IC_Start+0x192>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a18      	ldr	r2, [pc, #96]	; (8004588 <HAL_TIM_IC_Start+0x1f0>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d115      	bne.n	8004556 <HAL_TIM_IC_Start+0x1be>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	4b16      	ldr	r3, [pc, #88]	; (800458c <HAL_TIM_IC_Start+0x1f4>)
 8004532:	4013      	ands	r3, r2
 8004534:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	2b06      	cmp	r3, #6
 800453a:	d015      	beq.n	8004568 <HAL_TIM_IC_Start+0x1d0>
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004542:	d011      	beq.n	8004568 <HAL_TIM_IC_Start+0x1d0>
    {
      __HAL_TIM_ENABLE(htim);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004554:	e008      	b.n	8004568 <HAL_TIM_IC_Start+0x1d0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f042 0201 	orr.w	r2, r2, #1
 8004564:	601a      	str	r2, [r3, #0]
 8004566:	e000      	b.n	800456a <HAL_TIM_IC_Start+0x1d2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004568:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40012c00 	.word	0x40012c00
 8004578:	40000400 	.word	0x40000400
 800457c:	40000800 	.word	0x40000800
 8004580:	40000c00 	.word	0x40000c00
 8004584:	40013400 	.word	0x40013400
 8004588:	40014000 	.word	0x40014000
 800458c:	00010007 	.word	0x00010007

08004590 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800459a:	2300      	movs	r3, #0
 800459c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d104      	bne.n	80045ae <HAL_TIM_IC_Start_IT+0x1e>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	e023      	b.n	80045f6 <HAL_TIM_IC_Start_IT+0x66>
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2b04      	cmp	r3, #4
 80045b2:	d104      	bne.n	80045be <HAL_TIM_IC_Start_IT+0x2e>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	e01b      	b.n	80045f6 <HAL_TIM_IC_Start_IT+0x66>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d104      	bne.n	80045ce <HAL_TIM_IC_Start_IT+0x3e>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	e013      	b.n	80045f6 <HAL_TIM_IC_Start_IT+0x66>
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2b0c      	cmp	r3, #12
 80045d2:	d104      	bne.n	80045de <HAL_TIM_IC_Start_IT+0x4e>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	e00b      	b.n	80045f6 <HAL_TIM_IC_Start_IT+0x66>
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b10      	cmp	r3, #16
 80045e2:	d104      	bne.n	80045ee <HAL_TIM_IC_Start_IT+0x5e>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	e003      	b.n	80045f6 <HAL_TIM_IC_Start_IT+0x66>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d104      	bne.n	8004608 <HAL_TIM_IC_Start_IT+0x78>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004604:	b2db      	uxtb	r3, r3
 8004606:	e013      	b.n	8004630 <HAL_TIM_IC_Start_IT+0xa0>
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	2b04      	cmp	r3, #4
 800460c:	d104      	bne.n	8004618 <HAL_TIM_IC_Start_IT+0x88>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004614:	b2db      	uxtb	r3, r3
 8004616:	e00b      	b.n	8004630 <HAL_TIM_IC_Start_IT+0xa0>
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	2b08      	cmp	r3, #8
 800461c:	d104      	bne.n	8004628 <HAL_TIM_IC_Start_IT+0x98>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004624:	b2db      	uxtb	r3, r3
 8004626:	e003      	b.n	8004630 <HAL_TIM_IC_Start_IT+0xa0>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800462e:	b2db      	uxtb	r3, r3
 8004630:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004632:	7bbb      	ldrb	r3, [r7, #14]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d102      	bne.n	800463e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004638:	7b7b      	ldrb	r3, [r7, #13]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d001      	beq.n	8004642 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e0dd      	b.n	80047fe <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d104      	bne.n	8004652 <HAL_TIM_IC_Start_IT+0xc2>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2202      	movs	r2, #2
 800464c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004650:	e023      	b.n	800469a <HAL_TIM_IC_Start_IT+0x10a>
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2b04      	cmp	r3, #4
 8004656:	d104      	bne.n	8004662 <HAL_TIM_IC_Start_IT+0xd2>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2202      	movs	r2, #2
 800465c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004660:	e01b      	b.n	800469a <HAL_TIM_IC_Start_IT+0x10a>
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2b08      	cmp	r3, #8
 8004666:	d104      	bne.n	8004672 <HAL_TIM_IC_Start_IT+0xe2>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004670:	e013      	b.n	800469a <HAL_TIM_IC_Start_IT+0x10a>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b0c      	cmp	r3, #12
 8004676:	d104      	bne.n	8004682 <HAL_TIM_IC_Start_IT+0xf2>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2202      	movs	r2, #2
 800467c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004680:	e00b      	b.n	800469a <HAL_TIM_IC_Start_IT+0x10a>
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b10      	cmp	r3, #16
 8004686:	d104      	bne.n	8004692 <HAL_TIM_IC_Start_IT+0x102>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004690:	e003      	b.n	800469a <HAL_TIM_IC_Start_IT+0x10a>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2202      	movs	r2, #2
 8004696:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d104      	bne.n	80046aa <HAL_TIM_IC_Start_IT+0x11a>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046a8:	e013      	b.n	80046d2 <HAL_TIM_IC_Start_IT+0x142>
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2b04      	cmp	r3, #4
 80046ae:	d104      	bne.n	80046ba <HAL_TIM_IC_Start_IT+0x12a>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046b8:	e00b      	b.n	80046d2 <HAL_TIM_IC_Start_IT+0x142>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b08      	cmp	r3, #8
 80046be:	d104      	bne.n	80046ca <HAL_TIM_IC_Start_IT+0x13a>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046c8:	e003      	b.n	80046d2 <HAL_TIM_IC_Start_IT+0x142>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2202      	movs	r2, #2
 80046ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	2b0c      	cmp	r3, #12
 80046d6:	d841      	bhi.n	800475c <HAL_TIM_IC_Start_IT+0x1cc>
 80046d8:	a201      	add	r2, pc, #4	; (adr r2, 80046e0 <HAL_TIM_IC_Start_IT+0x150>)
 80046da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046de:	bf00      	nop
 80046e0:	08004715 	.word	0x08004715
 80046e4:	0800475d 	.word	0x0800475d
 80046e8:	0800475d 	.word	0x0800475d
 80046ec:	0800475d 	.word	0x0800475d
 80046f0:	08004727 	.word	0x08004727
 80046f4:	0800475d 	.word	0x0800475d
 80046f8:	0800475d 	.word	0x0800475d
 80046fc:	0800475d 	.word	0x0800475d
 8004700:	08004739 	.word	0x08004739
 8004704:	0800475d 	.word	0x0800475d
 8004708:	0800475d 	.word	0x0800475d
 800470c:	0800475d 	.word	0x0800475d
 8004710:	0800474b 	.word	0x0800474b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0202 	orr.w	r2, r2, #2
 8004722:	60da      	str	r2, [r3, #12]
      break;
 8004724:	e01d      	b.n	8004762 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68da      	ldr	r2, [r3, #12]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f042 0204 	orr.w	r2, r2, #4
 8004734:	60da      	str	r2, [r3, #12]
      break;
 8004736:	e014      	b.n	8004762 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f042 0208 	orr.w	r2, r2, #8
 8004746:	60da      	str	r2, [r3, #12]
      break;
 8004748:	e00b      	b.n	8004762 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68da      	ldr	r2, [r3, #12]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f042 0210 	orr.w	r2, r2, #16
 8004758:	60da      	str	r2, [r3, #12]
      break;
 800475a:	e002      	b.n	8004762 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	73fb      	strb	r3, [r7, #15]
      break;
 8004760:	bf00      	nop
  }

  if (status == HAL_OK)
 8004762:	7bfb      	ldrb	r3, [r7, #15]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d149      	bne.n	80047fc <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2201      	movs	r2, #1
 800476e:	6839      	ldr	r1, [r7, #0]
 8004770:	4618      	mov	r0, r3
 8004772:	f001 fa45 	bl	8005c00 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a23      	ldr	r2, [pc, #140]	; (8004808 <HAL_TIM_IC_Start_IT+0x278>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d01d      	beq.n	80047bc <HAL_TIM_IC_Start_IT+0x22c>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004788:	d018      	beq.n	80047bc <HAL_TIM_IC_Start_IT+0x22c>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a1f      	ldr	r2, [pc, #124]	; (800480c <HAL_TIM_IC_Start_IT+0x27c>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d013      	beq.n	80047bc <HAL_TIM_IC_Start_IT+0x22c>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a1d      	ldr	r2, [pc, #116]	; (8004810 <HAL_TIM_IC_Start_IT+0x280>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d00e      	beq.n	80047bc <HAL_TIM_IC_Start_IT+0x22c>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a1c      	ldr	r2, [pc, #112]	; (8004814 <HAL_TIM_IC_Start_IT+0x284>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d009      	beq.n	80047bc <HAL_TIM_IC_Start_IT+0x22c>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a1a      	ldr	r2, [pc, #104]	; (8004818 <HAL_TIM_IC_Start_IT+0x288>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d004      	beq.n	80047bc <HAL_TIM_IC_Start_IT+0x22c>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a19      	ldr	r2, [pc, #100]	; (800481c <HAL_TIM_IC_Start_IT+0x28c>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d115      	bne.n	80047e8 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689a      	ldr	r2, [r3, #8]
 80047c2:	4b17      	ldr	r3, [pc, #92]	; (8004820 <HAL_TIM_IC_Start_IT+0x290>)
 80047c4:	4013      	ands	r3, r2
 80047c6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	2b06      	cmp	r3, #6
 80047cc:	d015      	beq.n	80047fa <HAL_TIM_IC_Start_IT+0x26a>
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047d4:	d011      	beq.n	80047fa <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f042 0201 	orr.w	r2, r2, #1
 80047e4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e6:	e008      	b.n	80047fa <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0201 	orr.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	e000      	b.n	80047fc <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047fa:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	40012c00 	.word	0x40012c00
 800480c:	40000400 	.word	0x40000400
 8004810:	40000800 	.word	0x40000800
 8004814:	40000c00 	.word	0x40000c00
 8004818:	40013400 	.word	0x40013400
 800481c:	40014000 	.word	0x40014000
 8004820:	00010007 	.word	0x00010007

08004824 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d020      	beq.n	8004888 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d01b      	beq.n	8004888 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f06f 0202 	mvn.w	r2, #2
 8004858:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7fc fc02 	bl	8001078 <HAL_TIM_IC_CaptureCallback>
 8004874:	e005      	b.n	8004882 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 fbd6 	bl	8005028 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 fbdd 	bl	800503c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f003 0304 	and.w	r3, r3, #4
 800488e:	2b00      	cmp	r3, #0
 8004890:	d020      	beq.n	80048d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b00      	cmp	r3, #0
 800489a:	d01b      	beq.n	80048d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f06f 0204 	mvn.w	r2, #4
 80048a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2202      	movs	r2, #2
 80048aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7fc fbdc 	bl	8001078 <HAL_TIM_IC_CaptureCallback>
 80048c0:	e005      	b.n	80048ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 fbb0 	bl	8005028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 fbb7 	bl	800503c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d020      	beq.n	8004920 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f003 0308 	and.w	r3, r3, #8
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d01b      	beq.n	8004920 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f06f 0208 	mvn.w	r2, #8
 80048f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2204      	movs	r2, #4
 80048f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	f003 0303 	and.w	r3, r3, #3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7fc fbb6 	bl	8001078 <HAL_TIM_IC_CaptureCallback>
 800490c:	e005      	b.n	800491a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 fb8a 	bl	8005028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 fb91 	bl	800503c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f003 0310 	and.w	r3, r3, #16
 8004926:	2b00      	cmp	r3, #0
 8004928:	d020      	beq.n	800496c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f003 0310 	and.w	r3, r3, #16
 8004930:	2b00      	cmp	r3, #0
 8004932:	d01b      	beq.n	800496c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f06f 0210 	mvn.w	r2, #16
 800493c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2208      	movs	r2, #8
 8004942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7fc fb90 	bl	8001078 <HAL_TIM_IC_CaptureCallback>
 8004958:	e005      	b.n	8004966 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fb64 	bl	8005028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 fb6b 	bl	800503c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00c      	beq.n	8004990 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	2b00      	cmp	r3, #0
 800497e:	d007      	beq.n	8004990 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f06f 0201 	mvn.w	r2, #1
 8004988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7fc ff72 	bl	8001874 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00c      	beq.n	80049b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d007      	beq.n	80049b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f001 f9de 	bl	8005d70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00c      	beq.n	80049d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d007      	beq.n	80049d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f001 f9d6 	bl	8005d84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00c      	beq.n	80049fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d007      	beq.n	80049fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 fb2a 	bl	8005050 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	f003 0320 	and.w	r3, r3, #32
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00c      	beq.n	8004a20 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f003 0320 	and.w	r3, r3, #32
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d007      	beq.n	8004a20 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f06f 0220 	mvn.w	r2, #32
 8004a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f001 f99e 	bl	8005d5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a20:	bf00      	nop
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a34:	2300      	movs	r3, #0
 8004a36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d101      	bne.n	8004a46 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004a42:	2302      	movs	r3, #2
 8004a44:	e088      	b.n	8004b58 <HAL_TIM_IC_ConfigChannel+0x130>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d11b      	bne.n	8004a8c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004a64:	f000 ff0e 	bl	8005884 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699a      	ldr	r2, [r3, #24]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 020c 	bic.w	r2, r2, #12
 8004a76:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6999      	ldr	r1, [r3, #24]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	689a      	ldr	r2, [r3, #8]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	619a      	str	r2, [r3, #24]
 8004a8a:	e060      	b.n	8004b4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d11c      	bne.n	8004acc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004aa2:	f000 ff8c 	bl	80059be <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	699a      	ldr	r2, [r3, #24]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004ab4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	6999      	ldr	r1, [r3, #24]
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	021a      	lsls	r2, r3, #8
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	619a      	str	r2, [r3, #24]
 8004aca:	e040      	b.n	8004b4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b08      	cmp	r3, #8
 8004ad0:	d11b      	bne.n	8004b0a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004ae2:	f000 ffd9 	bl	8005a98 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	69da      	ldr	r2, [r3, #28]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 020c 	bic.w	r2, r2, #12
 8004af4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	69d9      	ldr	r1, [r3, #28]
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	689a      	ldr	r2, [r3, #8]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	61da      	str	r2, [r3, #28]
 8004b08:	e021      	b.n	8004b4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2b0c      	cmp	r3, #12
 8004b0e:	d11c      	bne.n	8004b4a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004b20:	f000 fff6 	bl	8005b10 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	69da      	ldr	r2, [r3, #28]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004b32:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	69d9      	ldr	r1, [r3, #28]
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	021a      	lsls	r2, r3, #8
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	61da      	str	r2, [r3, #28]
 8004b48:	e001      	b.n	8004b4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3718      	adds	r7, #24
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d101      	bne.n	8004b7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	e0ff      	b.n	8004d7e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b14      	cmp	r3, #20
 8004b8a:	f200 80f0 	bhi.w	8004d6e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004b8e:	a201      	add	r2, pc, #4	; (adr r2, 8004b94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b94:	08004be9 	.word	0x08004be9
 8004b98:	08004d6f 	.word	0x08004d6f
 8004b9c:	08004d6f 	.word	0x08004d6f
 8004ba0:	08004d6f 	.word	0x08004d6f
 8004ba4:	08004c29 	.word	0x08004c29
 8004ba8:	08004d6f 	.word	0x08004d6f
 8004bac:	08004d6f 	.word	0x08004d6f
 8004bb0:	08004d6f 	.word	0x08004d6f
 8004bb4:	08004c6b 	.word	0x08004c6b
 8004bb8:	08004d6f 	.word	0x08004d6f
 8004bbc:	08004d6f 	.word	0x08004d6f
 8004bc0:	08004d6f 	.word	0x08004d6f
 8004bc4:	08004cab 	.word	0x08004cab
 8004bc8:	08004d6f 	.word	0x08004d6f
 8004bcc:	08004d6f 	.word	0x08004d6f
 8004bd0:	08004d6f 	.word	0x08004d6f
 8004bd4:	08004ced 	.word	0x08004ced
 8004bd8:	08004d6f 	.word	0x08004d6f
 8004bdc:	08004d6f 	.word	0x08004d6f
 8004be0:	08004d6f 	.word	0x08004d6f
 8004be4:	08004d2d 	.word	0x08004d2d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68b9      	ldr	r1, [r7, #8]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 fade 	bl	80051b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	699a      	ldr	r2, [r3, #24]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0208 	orr.w	r2, r2, #8
 8004c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	699a      	ldr	r2, [r3, #24]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f022 0204 	bic.w	r2, r2, #4
 8004c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6999      	ldr	r1, [r3, #24]
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	691a      	ldr	r2, [r3, #16]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	619a      	str	r2, [r3, #24]
      break;
 8004c26:	e0a5      	b.n	8004d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68b9      	ldr	r1, [r7, #8]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 fb4e 	bl	80052d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	699a      	ldr	r2, [r3, #24]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	699a      	ldr	r2, [r3, #24]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6999      	ldr	r1, [r3, #24]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	021a      	lsls	r2, r3, #8
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	619a      	str	r2, [r3, #24]
      break;
 8004c68:	e084      	b.n	8004d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68b9      	ldr	r1, [r7, #8]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 fbb7 	bl	80053e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	69da      	ldr	r2, [r3, #28]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f042 0208 	orr.w	r2, r2, #8
 8004c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	69da      	ldr	r2, [r3, #28]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 0204 	bic.w	r2, r2, #4
 8004c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	69d9      	ldr	r1, [r3, #28]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	691a      	ldr	r2, [r3, #16]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	61da      	str	r2, [r3, #28]
      break;
 8004ca8:	e064      	b.n	8004d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68b9      	ldr	r1, [r7, #8]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 fc1f 	bl	80054f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	69da      	ldr	r2, [r3, #28]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	69da      	ldr	r2, [r3, #28]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	69d9      	ldr	r1, [r3, #28]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	021a      	lsls	r2, r3, #8
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	61da      	str	r2, [r3, #28]
      break;
 8004cea:	e043      	b.n	8004d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68b9      	ldr	r1, [r7, #8]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 fc68 	bl	80055c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0208 	orr.w	r2, r2, #8
 8004d06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0204 	bic.w	r2, r2, #4
 8004d16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	691a      	ldr	r2, [r3, #16]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d2a:	e023      	b.n	8004d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68b9      	ldr	r1, [r7, #8]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 fcac 	bl	8005690 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	021a      	lsls	r2, r3, #8
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d6c:	e002      	b.n	8004d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	75fb      	strb	r3, [r7, #23]
      break;
 8004d72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop

08004d88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d101      	bne.n	8004da4 <HAL_TIM_ConfigClockSource+0x1c>
 8004da0:	2302      	movs	r3, #2
 8004da2:	e0b6      	b.n	8004f12 <HAL_TIM_ConfigClockSource+0x18a>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004de0:	d03e      	beq.n	8004e60 <HAL_TIM_ConfigClockSource+0xd8>
 8004de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004de6:	f200 8087 	bhi.w	8004ef8 <HAL_TIM_ConfigClockSource+0x170>
 8004dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dee:	f000 8086 	beq.w	8004efe <HAL_TIM_ConfigClockSource+0x176>
 8004df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df6:	d87f      	bhi.n	8004ef8 <HAL_TIM_ConfigClockSource+0x170>
 8004df8:	2b70      	cmp	r3, #112	; 0x70
 8004dfa:	d01a      	beq.n	8004e32 <HAL_TIM_ConfigClockSource+0xaa>
 8004dfc:	2b70      	cmp	r3, #112	; 0x70
 8004dfe:	d87b      	bhi.n	8004ef8 <HAL_TIM_ConfigClockSource+0x170>
 8004e00:	2b60      	cmp	r3, #96	; 0x60
 8004e02:	d050      	beq.n	8004ea6 <HAL_TIM_ConfigClockSource+0x11e>
 8004e04:	2b60      	cmp	r3, #96	; 0x60
 8004e06:	d877      	bhi.n	8004ef8 <HAL_TIM_ConfigClockSource+0x170>
 8004e08:	2b50      	cmp	r3, #80	; 0x50
 8004e0a:	d03c      	beq.n	8004e86 <HAL_TIM_ConfigClockSource+0xfe>
 8004e0c:	2b50      	cmp	r3, #80	; 0x50
 8004e0e:	d873      	bhi.n	8004ef8 <HAL_TIM_ConfigClockSource+0x170>
 8004e10:	2b40      	cmp	r3, #64	; 0x40
 8004e12:	d058      	beq.n	8004ec6 <HAL_TIM_ConfigClockSource+0x13e>
 8004e14:	2b40      	cmp	r3, #64	; 0x40
 8004e16:	d86f      	bhi.n	8004ef8 <HAL_TIM_ConfigClockSource+0x170>
 8004e18:	2b30      	cmp	r3, #48	; 0x30
 8004e1a:	d064      	beq.n	8004ee6 <HAL_TIM_ConfigClockSource+0x15e>
 8004e1c:	2b30      	cmp	r3, #48	; 0x30
 8004e1e:	d86b      	bhi.n	8004ef8 <HAL_TIM_ConfigClockSource+0x170>
 8004e20:	2b20      	cmp	r3, #32
 8004e22:	d060      	beq.n	8004ee6 <HAL_TIM_ConfigClockSource+0x15e>
 8004e24:	2b20      	cmp	r3, #32
 8004e26:	d867      	bhi.n	8004ef8 <HAL_TIM_ConfigClockSource+0x170>
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d05c      	beq.n	8004ee6 <HAL_TIM_ConfigClockSource+0x15e>
 8004e2c:	2b10      	cmp	r3, #16
 8004e2e:	d05a      	beq.n	8004ee6 <HAL_TIM_ConfigClockSource+0x15e>
 8004e30:	e062      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e42:	f000 febd 	bl	8005bc0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	609a      	str	r2, [r3, #8]
      break;
 8004e5e:	e04f      	b.n	8004f00 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e70:	f000 fea6 	bl	8005bc0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689a      	ldr	r2, [r3, #8]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e82:	609a      	str	r2, [r3, #8]
      break;
 8004e84:	e03c      	b.n	8004f00 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e92:	461a      	mov	r2, r3
 8004e94:	f000 fd64 	bl	8005960 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2150      	movs	r1, #80	; 0x50
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 fe73 	bl	8005b8a <TIM_ITRx_SetConfig>
      break;
 8004ea4:	e02c      	b.n	8004f00 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	f000 fdc0 	bl	8005a38 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2160      	movs	r1, #96	; 0x60
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 fe63 	bl	8005b8a <TIM_ITRx_SetConfig>
      break;
 8004ec4:	e01c      	b.n	8004f00 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	f000 fd44 	bl	8005960 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2140      	movs	r1, #64	; 0x40
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 fe53 	bl	8005b8a <TIM_ITRx_SetConfig>
      break;
 8004ee4:	e00c      	b.n	8004f00 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4610      	mov	r0, r2
 8004ef2:	f000 fe4a 	bl	8005b8a <TIM_ITRx_SetConfig>
      break;
 8004ef6:	e003      	b.n	8004f00 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	73fb      	strb	r3, [r7, #15]
      break;
 8004efc:	e000      	b.n	8004f00 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004efe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b082      	sub	sp, #8
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
 8004f22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d101      	bne.n	8004f32 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004f2e:	2302      	movs	r3, #2
 8004f30:	e031      	b.n	8004f96 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004f42:	6839      	ldr	r1, [r7, #0]
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 fc09 	bl	800575c <TIM_SlaveTimer_SetConfig>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d009      	beq.n	8004f64 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e018      	b.n	8004f96 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68da      	ldr	r2, [r3, #12]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f72:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68da      	ldr	r2, [r3, #12]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f82:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
	...

08004fa0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004faa:	2300      	movs	r3, #0
 8004fac:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	2b0c      	cmp	r3, #12
 8004fb2:	d831      	bhi.n	8005018 <HAL_TIM_ReadCapturedValue+0x78>
 8004fb4:	a201      	add	r2, pc, #4	; (adr r2, 8004fbc <HAL_TIM_ReadCapturedValue+0x1c>)
 8004fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fba:	bf00      	nop
 8004fbc:	08004ff1 	.word	0x08004ff1
 8004fc0:	08005019 	.word	0x08005019
 8004fc4:	08005019 	.word	0x08005019
 8004fc8:	08005019 	.word	0x08005019
 8004fcc:	08004ffb 	.word	0x08004ffb
 8004fd0:	08005019 	.word	0x08005019
 8004fd4:	08005019 	.word	0x08005019
 8004fd8:	08005019 	.word	0x08005019
 8004fdc:	08005005 	.word	0x08005005
 8004fe0:	08005019 	.word	0x08005019
 8004fe4:	08005019 	.word	0x08005019
 8004fe8:	08005019 	.word	0x08005019
 8004fec:	0800500f 	.word	0x0800500f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ff6:	60fb      	str	r3, [r7, #12]

      break;
 8004ff8:	e00f      	b.n	800501a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005000:	60fb      	str	r3, [r7, #12]

      break;
 8005002:	e00a      	b.n	800501a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500a:	60fb      	str	r3, [r7, #12]

      break;
 800500c:	e005      	b.n	800501a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005014:	60fb      	str	r3, [r7, #12]

      break;
 8005016:	e000      	b.n	800501a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005018:	bf00      	nop
  }

  return tmpreg;
 800501a:	68fb      	ldr	r3, [r7, #12]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3714      	adds	r7, #20
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(const TIM_HandleTypeDef *htim)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	7f1b      	ldrb	r3, [r3, #28]
}
 8005070:	4618      	mov	r0, r3
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a40      	ldr	r2, [pc, #256]	; (8005190 <TIM_Base_SetConfig+0x114>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d013      	beq.n	80050bc <TIM_Base_SetConfig+0x40>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800509a:	d00f      	beq.n	80050bc <TIM_Base_SetConfig+0x40>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a3d      	ldr	r2, [pc, #244]	; (8005194 <TIM_Base_SetConfig+0x118>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d00b      	beq.n	80050bc <TIM_Base_SetConfig+0x40>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a3c      	ldr	r2, [pc, #240]	; (8005198 <TIM_Base_SetConfig+0x11c>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d007      	beq.n	80050bc <TIM_Base_SetConfig+0x40>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a3b      	ldr	r2, [pc, #236]	; (800519c <TIM_Base_SetConfig+0x120>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d003      	beq.n	80050bc <TIM_Base_SetConfig+0x40>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a3a      	ldr	r2, [pc, #232]	; (80051a0 <TIM_Base_SetConfig+0x124>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d108      	bne.n	80050ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a2f      	ldr	r2, [pc, #188]	; (8005190 <TIM_Base_SetConfig+0x114>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d01f      	beq.n	8005116 <TIM_Base_SetConfig+0x9a>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050dc:	d01b      	beq.n	8005116 <TIM_Base_SetConfig+0x9a>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a2c      	ldr	r2, [pc, #176]	; (8005194 <TIM_Base_SetConfig+0x118>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d017      	beq.n	8005116 <TIM_Base_SetConfig+0x9a>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a2b      	ldr	r2, [pc, #172]	; (8005198 <TIM_Base_SetConfig+0x11c>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d013      	beq.n	8005116 <TIM_Base_SetConfig+0x9a>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a2a      	ldr	r2, [pc, #168]	; (800519c <TIM_Base_SetConfig+0x120>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d00f      	beq.n	8005116 <TIM_Base_SetConfig+0x9a>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a29      	ldr	r2, [pc, #164]	; (80051a0 <TIM_Base_SetConfig+0x124>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d00b      	beq.n	8005116 <TIM_Base_SetConfig+0x9a>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a28      	ldr	r2, [pc, #160]	; (80051a4 <TIM_Base_SetConfig+0x128>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d007      	beq.n	8005116 <TIM_Base_SetConfig+0x9a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a27      	ldr	r2, [pc, #156]	; (80051a8 <TIM_Base_SetConfig+0x12c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d003      	beq.n	8005116 <TIM_Base_SetConfig+0x9a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a26      	ldr	r2, [pc, #152]	; (80051ac <TIM_Base_SetConfig+0x130>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d108      	bne.n	8005128 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800511c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	4313      	orrs	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	4313      	orrs	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	689a      	ldr	r2, [r3, #8]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a10      	ldr	r2, [pc, #64]	; (8005190 <TIM_Base_SetConfig+0x114>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d00f      	beq.n	8005174 <TIM_Base_SetConfig+0xf8>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a12      	ldr	r2, [pc, #72]	; (80051a0 <TIM_Base_SetConfig+0x124>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d00b      	beq.n	8005174 <TIM_Base_SetConfig+0xf8>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a11      	ldr	r2, [pc, #68]	; (80051a4 <TIM_Base_SetConfig+0x128>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d007      	beq.n	8005174 <TIM_Base_SetConfig+0xf8>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a10      	ldr	r2, [pc, #64]	; (80051a8 <TIM_Base_SetConfig+0x12c>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d003      	beq.n	8005174 <TIM_Base_SetConfig+0xf8>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a0f      	ldr	r2, [pc, #60]	; (80051ac <TIM_Base_SetConfig+0x130>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d103      	bne.n	800517c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	691a      	ldr	r2, [r3, #16]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	615a      	str	r2, [r3, #20]
}
 8005182:	bf00      	nop
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	40012c00 	.word	0x40012c00
 8005194:	40000400 	.word	0x40000400
 8005198:	40000800 	.word	0x40000800
 800519c:	40000c00 	.word	0x40000c00
 80051a0:	40013400 	.word	0x40013400
 80051a4:	40014000 	.word	0x40014000
 80051a8:	40014400 	.word	0x40014400
 80051ac:	40014800 	.word	0x40014800

080051b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b087      	sub	sp, #28
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	f023 0201 	bic.w	r2, r3, #1
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f023 0303 	bic.w	r3, r3, #3
 80051ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f023 0302 	bic.w	r3, r3, #2
 80051fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	4313      	orrs	r3, r2
 8005206:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a2c      	ldr	r2, [pc, #176]	; (80052bc <TIM_OC1_SetConfig+0x10c>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d00f      	beq.n	8005230 <TIM_OC1_SetConfig+0x80>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a2b      	ldr	r2, [pc, #172]	; (80052c0 <TIM_OC1_SetConfig+0x110>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d00b      	beq.n	8005230 <TIM_OC1_SetConfig+0x80>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a2a      	ldr	r2, [pc, #168]	; (80052c4 <TIM_OC1_SetConfig+0x114>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d007      	beq.n	8005230 <TIM_OC1_SetConfig+0x80>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a29      	ldr	r2, [pc, #164]	; (80052c8 <TIM_OC1_SetConfig+0x118>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d003      	beq.n	8005230 <TIM_OC1_SetConfig+0x80>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a28      	ldr	r2, [pc, #160]	; (80052cc <TIM_OC1_SetConfig+0x11c>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d10c      	bne.n	800524a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	f023 0308 	bic.w	r3, r3, #8
 8005236:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	4313      	orrs	r3, r2
 8005240:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f023 0304 	bic.w	r3, r3, #4
 8005248:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a1b      	ldr	r2, [pc, #108]	; (80052bc <TIM_OC1_SetConfig+0x10c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d00f      	beq.n	8005272 <TIM_OC1_SetConfig+0xc2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a1a      	ldr	r2, [pc, #104]	; (80052c0 <TIM_OC1_SetConfig+0x110>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d00b      	beq.n	8005272 <TIM_OC1_SetConfig+0xc2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a19      	ldr	r2, [pc, #100]	; (80052c4 <TIM_OC1_SetConfig+0x114>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d007      	beq.n	8005272 <TIM_OC1_SetConfig+0xc2>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a18      	ldr	r2, [pc, #96]	; (80052c8 <TIM_OC1_SetConfig+0x118>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d003      	beq.n	8005272 <TIM_OC1_SetConfig+0xc2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a17      	ldr	r2, [pc, #92]	; (80052cc <TIM_OC1_SetConfig+0x11c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d111      	bne.n	8005296 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005278:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005280:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	4313      	orrs	r3, r2
 800528a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	4313      	orrs	r3, r2
 8005294:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	621a      	str	r2, [r3, #32]
}
 80052b0:	bf00      	nop
 80052b2:	371c      	adds	r7, #28
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr
 80052bc:	40012c00 	.word	0x40012c00
 80052c0:	40013400 	.word	0x40013400
 80052c4:	40014000 	.word	0x40014000
 80052c8:	40014400 	.word	0x40014400
 80052cc:	40014800 	.word	0x40014800

080052d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a1b      	ldr	r3, [r3, #32]
 80052e4:	f023 0210 	bic.w	r2, r3, #16
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800530a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	021b      	lsls	r3, r3, #8
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	4313      	orrs	r3, r2
 8005316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f023 0320 	bic.w	r3, r3, #32
 800531e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	011b      	lsls	r3, r3, #4
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	4313      	orrs	r3, r2
 800532a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a28      	ldr	r2, [pc, #160]	; (80053d0 <TIM_OC2_SetConfig+0x100>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d003      	beq.n	800533c <TIM_OC2_SetConfig+0x6c>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a27      	ldr	r2, [pc, #156]	; (80053d4 <TIM_OC2_SetConfig+0x104>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d10d      	bne.n	8005358 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005342:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	011b      	lsls	r3, r3, #4
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	4313      	orrs	r3, r2
 800534e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005356:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a1d      	ldr	r2, [pc, #116]	; (80053d0 <TIM_OC2_SetConfig+0x100>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d00f      	beq.n	8005380 <TIM_OC2_SetConfig+0xb0>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a1c      	ldr	r2, [pc, #112]	; (80053d4 <TIM_OC2_SetConfig+0x104>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d00b      	beq.n	8005380 <TIM_OC2_SetConfig+0xb0>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a1b      	ldr	r2, [pc, #108]	; (80053d8 <TIM_OC2_SetConfig+0x108>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d007      	beq.n	8005380 <TIM_OC2_SetConfig+0xb0>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a1a      	ldr	r2, [pc, #104]	; (80053dc <TIM_OC2_SetConfig+0x10c>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d003      	beq.n	8005380 <TIM_OC2_SetConfig+0xb0>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a19      	ldr	r2, [pc, #100]	; (80053e0 <TIM_OC2_SetConfig+0x110>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d113      	bne.n	80053a8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005386:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800538e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	695b      	ldr	r3, [r3, #20]
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	4313      	orrs	r3, r2
 800539a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	621a      	str	r2, [r3, #32]
}
 80053c2:	bf00      	nop
 80053c4:	371c      	adds	r7, #28
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	40012c00 	.word	0x40012c00
 80053d4:	40013400 	.word	0x40013400
 80053d8:	40014000 	.word	0x40014000
 80053dc:	40014400 	.word	0x40014400
 80053e0:	40014800 	.word	0x40014800

080053e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a1b      	ldr	r3, [r3, #32]
 80053f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f023 0303 	bic.w	r3, r3, #3
 800541e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	4313      	orrs	r3, r2
 8005428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005430:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	021b      	lsls	r3, r3, #8
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	4313      	orrs	r3, r2
 800543c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a27      	ldr	r2, [pc, #156]	; (80054e0 <TIM_OC3_SetConfig+0xfc>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d003      	beq.n	800544e <TIM_OC3_SetConfig+0x6a>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a26      	ldr	r2, [pc, #152]	; (80054e4 <TIM_OC3_SetConfig+0x100>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d10d      	bne.n	800546a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005454:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	021b      	lsls	r3, r3, #8
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	4313      	orrs	r3, r2
 8005460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005468:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a1c      	ldr	r2, [pc, #112]	; (80054e0 <TIM_OC3_SetConfig+0xfc>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d00f      	beq.n	8005492 <TIM_OC3_SetConfig+0xae>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a1b      	ldr	r2, [pc, #108]	; (80054e4 <TIM_OC3_SetConfig+0x100>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d00b      	beq.n	8005492 <TIM_OC3_SetConfig+0xae>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a1a      	ldr	r2, [pc, #104]	; (80054e8 <TIM_OC3_SetConfig+0x104>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d007      	beq.n	8005492 <TIM_OC3_SetConfig+0xae>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a19      	ldr	r2, [pc, #100]	; (80054ec <TIM_OC3_SetConfig+0x108>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d003      	beq.n	8005492 <TIM_OC3_SetConfig+0xae>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a18      	ldr	r2, [pc, #96]	; (80054f0 <TIM_OC3_SetConfig+0x10c>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d113      	bne.n	80054ba <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005498:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	011b      	lsls	r3, r3, #4
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	621a      	str	r2, [r3, #32]
}
 80054d4:	bf00      	nop
 80054d6:	371c      	adds	r7, #28
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	40012c00 	.word	0x40012c00
 80054e4:	40013400 	.word	0x40013400
 80054e8:	40014000 	.word	0x40014000
 80054ec:	40014400 	.word	0x40014400
 80054f0:	40014800 	.word	0x40014800

080054f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b087      	sub	sp, #28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	69db      	ldr	r3, [r3, #28]
 800551a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800552e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	021b      	lsls	r3, r3, #8
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	4313      	orrs	r3, r2
 800553a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005542:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	031b      	lsls	r3, r3, #12
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	4313      	orrs	r3, r2
 800554e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a18      	ldr	r2, [pc, #96]	; (80055b4 <TIM_OC4_SetConfig+0xc0>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d00f      	beq.n	8005578 <TIM_OC4_SetConfig+0x84>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a17      	ldr	r2, [pc, #92]	; (80055b8 <TIM_OC4_SetConfig+0xc4>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d00b      	beq.n	8005578 <TIM_OC4_SetConfig+0x84>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a16      	ldr	r2, [pc, #88]	; (80055bc <TIM_OC4_SetConfig+0xc8>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d007      	beq.n	8005578 <TIM_OC4_SetConfig+0x84>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a15      	ldr	r2, [pc, #84]	; (80055c0 <TIM_OC4_SetConfig+0xcc>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d003      	beq.n	8005578 <TIM_OC4_SetConfig+0x84>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a14      	ldr	r2, [pc, #80]	; (80055c4 <TIM_OC4_SetConfig+0xd0>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d109      	bne.n	800558c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800557e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	019b      	lsls	r3, r3, #6
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	4313      	orrs	r3, r2
 800558a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	621a      	str	r2, [r3, #32]
}
 80055a6:	bf00      	nop
 80055a8:	371c      	adds	r7, #28
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	40012c00 	.word	0x40012c00
 80055b8:	40013400 	.word	0x40013400
 80055bc:	40014000 	.word	0x40014000
 80055c0:	40014400 	.word	0x40014400
 80055c4:	40014800 	.word	0x40014800

080055c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	4313      	orrs	r3, r2
 8005604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800560c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	041b      	lsls	r3, r3, #16
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	4313      	orrs	r3, r2
 8005618:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a17      	ldr	r2, [pc, #92]	; (800567c <TIM_OC5_SetConfig+0xb4>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d00f      	beq.n	8005642 <TIM_OC5_SetConfig+0x7a>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a16      	ldr	r2, [pc, #88]	; (8005680 <TIM_OC5_SetConfig+0xb8>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d00b      	beq.n	8005642 <TIM_OC5_SetConfig+0x7a>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a15      	ldr	r2, [pc, #84]	; (8005684 <TIM_OC5_SetConfig+0xbc>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d007      	beq.n	8005642 <TIM_OC5_SetConfig+0x7a>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a14      	ldr	r2, [pc, #80]	; (8005688 <TIM_OC5_SetConfig+0xc0>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d003      	beq.n	8005642 <TIM_OC5_SetConfig+0x7a>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a13      	ldr	r2, [pc, #76]	; (800568c <TIM_OC5_SetConfig+0xc4>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d109      	bne.n	8005656 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005648:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	021b      	lsls	r3, r3, #8
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	4313      	orrs	r3, r2
 8005654:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	621a      	str	r2, [r3, #32]
}
 8005670:	bf00      	nop
 8005672:	371c      	adds	r7, #28
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	40012c00 	.word	0x40012c00
 8005680:	40013400 	.word	0x40013400
 8005684:	40014000 	.word	0x40014000
 8005688:	40014400 	.word	0x40014400
 800568c:	40014800 	.word	0x40014800

08005690 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005690:	b480      	push	{r7}
 8005692:	b087      	sub	sp, #28
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	021b      	lsls	r3, r3, #8
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	051b      	lsls	r3, r3, #20
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a18      	ldr	r2, [pc, #96]	; (8005748 <TIM_OC6_SetConfig+0xb8>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d00f      	beq.n	800570c <TIM_OC6_SetConfig+0x7c>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a17      	ldr	r2, [pc, #92]	; (800574c <TIM_OC6_SetConfig+0xbc>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d00b      	beq.n	800570c <TIM_OC6_SetConfig+0x7c>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a16      	ldr	r2, [pc, #88]	; (8005750 <TIM_OC6_SetConfig+0xc0>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d007      	beq.n	800570c <TIM_OC6_SetConfig+0x7c>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a15      	ldr	r2, [pc, #84]	; (8005754 <TIM_OC6_SetConfig+0xc4>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d003      	beq.n	800570c <TIM_OC6_SetConfig+0x7c>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a14      	ldr	r2, [pc, #80]	; (8005758 <TIM_OC6_SetConfig+0xc8>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d109      	bne.n	8005720 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005712:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	029b      	lsls	r3, r3, #10
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	4313      	orrs	r3, r2
 800571e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	621a      	str	r2, [r3, #32]
}
 800573a:	bf00      	nop
 800573c:	371c      	adds	r7, #28
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	40012c00 	.word	0x40012c00
 800574c:	40013400 	.word	0x40013400
 8005750:	40014000 	.word	0x40014000
 8005754:	40014400 	.word	0x40014400
 8005758:	40014800 	.word	0x40014800

0800575c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b086      	sub	sp, #24
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005766:	2300      	movs	r3, #0
 8005768:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005778:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	4313      	orrs	r3, r2
 8005782:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800578a:	f023 0307 	bic.w	r3, r3, #7
 800578e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	4313      	orrs	r3, r2
 8005798:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	2b70      	cmp	r3, #112	; 0x70
 80057a8:	d01a      	beq.n	80057e0 <TIM_SlaveTimer_SetConfig+0x84>
 80057aa:	2b70      	cmp	r3, #112	; 0x70
 80057ac:	d860      	bhi.n	8005870 <TIM_SlaveTimer_SetConfig+0x114>
 80057ae:	2b60      	cmp	r3, #96	; 0x60
 80057b0:	d054      	beq.n	800585c <TIM_SlaveTimer_SetConfig+0x100>
 80057b2:	2b60      	cmp	r3, #96	; 0x60
 80057b4:	d85c      	bhi.n	8005870 <TIM_SlaveTimer_SetConfig+0x114>
 80057b6:	2b50      	cmp	r3, #80	; 0x50
 80057b8:	d046      	beq.n	8005848 <TIM_SlaveTimer_SetConfig+0xec>
 80057ba:	2b50      	cmp	r3, #80	; 0x50
 80057bc:	d858      	bhi.n	8005870 <TIM_SlaveTimer_SetConfig+0x114>
 80057be:	2b40      	cmp	r3, #64	; 0x40
 80057c0:	d019      	beq.n	80057f6 <TIM_SlaveTimer_SetConfig+0x9a>
 80057c2:	2b40      	cmp	r3, #64	; 0x40
 80057c4:	d854      	bhi.n	8005870 <TIM_SlaveTimer_SetConfig+0x114>
 80057c6:	2b30      	cmp	r3, #48	; 0x30
 80057c8:	d055      	beq.n	8005876 <TIM_SlaveTimer_SetConfig+0x11a>
 80057ca:	2b30      	cmp	r3, #48	; 0x30
 80057cc:	d850      	bhi.n	8005870 <TIM_SlaveTimer_SetConfig+0x114>
 80057ce:	2b20      	cmp	r3, #32
 80057d0:	d051      	beq.n	8005876 <TIM_SlaveTimer_SetConfig+0x11a>
 80057d2:	2b20      	cmp	r3, #32
 80057d4:	d84c      	bhi.n	8005870 <TIM_SlaveTimer_SetConfig+0x114>
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d04d      	beq.n	8005876 <TIM_SlaveTimer_SetConfig+0x11a>
 80057da:	2b10      	cmp	r3, #16
 80057dc:	d04b      	beq.n	8005876 <TIM_SlaveTimer_SetConfig+0x11a>
 80057de:	e047      	b.n	8005870 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80057f0:	f000 f9e6 	bl	8005bc0 <TIM_ETR_SetConfig>
      break;
 80057f4:	e040      	b.n	8005878 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b05      	cmp	r3, #5
 80057fc:	d101      	bne.n	8005802 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e03b      	b.n	800587a <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	6a1b      	ldr	r3, [r3, #32]
 8005808:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	6a1a      	ldr	r2, [r3, #32]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 0201 	bic.w	r2, r2, #1
 8005818:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005828:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	011b      	lsls	r3, r3, #4
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	4313      	orrs	r3, r2
 8005834:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	621a      	str	r2, [r3, #32]
      break;
 8005846:	e017      	b.n	8005878 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005854:	461a      	mov	r2, r3
 8005856:	f000 f883 	bl	8005960 <TIM_TI1_ConfigInputStage>
      break;
 800585a:	e00d      	b.n	8005878 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005868:	461a      	mov	r2, r3
 800586a:	f000 f8e5 	bl	8005a38 <TIM_TI2_ConfigInputStage>
      break;
 800586e:	e003      	b.n	8005878 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	75fb      	strb	r3, [r7, #23]
      break;
 8005874:	e000      	b.n	8005878 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8005876:	bf00      	nop
  }

  return status;
 8005878:	7dfb      	ldrb	r3, [r7, #23]
}
 800587a:	4618      	mov	r0, r3
 800587c:	3718      	adds	r7, #24
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
	...

08005884 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005884:	b480      	push	{r7}
 8005886:	b087      	sub	sp, #28
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
 8005890:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	f023 0201 	bic.w	r2, r3, #1
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	4a26      	ldr	r2, [pc, #152]	; (8005948 <TIM_TI1_SetConfig+0xc4>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d017      	beq.n	80058e2 <TIM_TI1_SetConfig+0x5e>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b8:	d013      	beq.n	80058e2 <TIM_TI1_SetConfig+0x5e>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	4a23      	ldr	r2, [pc, #140]	; (800594c <TIM_TI1_SetConfig+0xc8>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d00f      	beq.n	80058e2 <TIM_TI1_SetConfig+0x5e>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	4a22      	ldr	r2, [pc, #136]	; (8005950 <TIM_TI1_SetConfig+0xcc>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d00b      	beq.n	80058e2 <TIM_TI1_SetConfig+0x5e>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	4a21      	ldr	r2, [pc, #132]	; (8005954 <TIM_TI1_SetConfig+0xd0>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d007      	beq.n	80058e2 <TIM_TI1_SetConfig+0x5e>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	4a20      	ldr	r2, [pc, #128]	; (8005958 <TIM_TI1_SetConfig+0xd4>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d003      	beq.n	80058e2 <TIM_TI1_SetConfig+0x5e>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	4a1f      	ldr	r2, [pc, #124]	; (800595c <TIM_TI1_SetConfig+0xd8>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d101      	bne.n	80058e6 <TIM_TI1_SetConfig+0x62>
 80058e2:	2301      	movs	r3, #1
 80058e4:	e000      	b.n	80058e8 <TIM_TI1_SetConfig+0x64>
 80058e6:	2300      	movs	r3, #0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d008      	beq.n	80058fe <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	f023 0303 	bic.w	r3, r3, #3
 80058f2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	617b      	str	r3, [r7, #20]
 80058fc:	e003      	b.n	8005906 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f043 0301 	orr.w	r3, r3, #1
 8005904:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800590c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	011b      	lsls	r3, r3, #4
 8005912:	b2db      	uxtb	r3, r3
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	4313      	orrs	r3, r2
 8005918:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	f023 030a 	bic.w	r3, r3, #10
 8005920:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	f003 030a 	and.w	r3, r3, #10
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	4313      	orrs	r3, r2
 800592c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	621a      	str	r2, [r3, #32]
}
 800593a:	bf00      	nop
 800593c:	371c      	adds	r7, #28
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	40012c00 	.word	0x40012c00
 800594c:	40000400 	.word	0x40000400
 8005950:	40000800 	.word	0x40000800
 8005954:	40000c00 	.word	0x40000c00
 8005958:	40013400 	.word	0x40013400
 800595c:	40014000 	.word	0x40014000

08005960 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005960:	b480      	push	{r7}
 8005962:	b087      	sub	sp, #28
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6a1b      	ldr	r3, [r3, #32]
 8005970:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	f023 0201 	bic.w	r2, r3, #1
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800598a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	011b      	lsls	r3, r3, #4
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	4313      	orrs	r3, r2
 8005994:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f023 030a 	bic.w	r3, r3, #10
 800599c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	621a      	str	r2, [r3, #32]
}
 80059b2:	bf00      	nop
 80059b4:	371c      	adds	r7, #28
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80059be:	b480      	push	{r7}
 80059c0:	b087      	sub	sp, #28
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	60f8      	str	r0, [r7, #12]
 80059c6:	60b9      	str	r1, [r7, #8]
 80059c8:	607a      	str	r2, [r7, #4]
 80059ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6a1b      	ldr	r3, [r3, #32]
 80059d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	f023 0210 	bic.w	r2, r3, #16
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	021b      	lsls	r3, r3, #8
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	031b      	lsls	r3, r3, #12
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a10:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	011b      	lsls	r3, r3, #4
 8005a16:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	621a      	str	r2, [r3, #32]
}
 8005a2c:	bf00      	nop
 8005a2e:	371c      	adds	r7, #28
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	f023 0210 	bic.w	r2, r3, #16
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	031b      	lsls	r3, r3, #12
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a74:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	011b      	lsls	r3, r3, #4
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	621a      	str	r2, [r3, #32]
}
 8005a8c:	bf00      	nop
 8005a8e:	371c      	adds	r7, #28
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
 8005aa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6a1b      	ldr	r3, [r3, #32]
 8005ab0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	69db      	ldr	r3, [r3, #28]
 8005abc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	f023 0303 	bic.w	r3, r3, #3
 8005ac4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ad4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	011b      	lsls	r3, r3, #4
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005ae8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	021b      	lsls	r3, r3, #8
 8005aee:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	621a      	str	r2, [r3, #32]
}
 8005b04:	bf00      	nop
 8005b06:	371c      	adds	r7, #28
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b087      	sub	sp, #28
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
 8005b1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	69db      	ldr	r3, [r3, #28]
 8005b34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b3c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	021b      	lsls	r3, r3, #8
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b4e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	031b      	lsls	r3, r3, #12
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005b62:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	031b      	lsls	r3, r3, #12
 8005b68:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	621a      	str	r2, [r3, #32]
}
 8005b7e:	bf00      	nop
 8005b80:	371c      	adds	r7, #28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b085      	sub	sp, #20
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	f043 0307 	orr.w	r3, r3, #7
 8005bac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	609a      	str	r2, [r3, #8]
}
 8005bb4:	bf00      	nop
 8005bb6:	3714      	adds	r7, #20
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b087      	sub	sp, #28
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]
 8005bcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	021a      	lsls	r2, r3, #8
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	431a      	orrs	r2, r3
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	609a      	str	r2, [r3, #8]
}
 8005bf4:	bf00      	nop
 8005bf6:	371c      	adds	r7, #28
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b087      	sub	sp, #28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	f003 031f 	and.w	r3, r3, #31
 8005c12:	2201      	movs	r2, #1
 8005c14:	fa02 f303 	lsl.w	r3, r2, r3
 8005c18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6a1a      	ldr	r2, [r3, #32]
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	43db      	mvns	r3, r3
 8005c22:	401a      	ands	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6a1a      	ldr	r2, [r3, #32]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	f003 031f 	and.w	r3, r3, #31
 8005c32:	6879      	ldr	r1, [r7, #4]
 8005c34:	fa01 f303 	lsl.w	r3, r1, r3
 8005c38:	431a      	orrs	r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	621a      	str	r2, [r3, #32]
}
 8005c3e:	bf00      	nop
 8005c40:	371c      	adds	r7, #28
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
	...

08005c4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d101      	bne.n	8005c64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c60:	2302      	movs	r3, #2
 8005c62:	e068      	b.n	8005d36 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2202      	movs	r2, #2
 8005c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a2e      	ldr	r2, [pc, #184]	; (8005d44 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d004      	beq.n	8005c98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a2d      	ldr	r2, [pc, #180]	; (8005d48 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d108      	bne.n	8005caa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a1e      	ldr	r2, [pc, #120]	; (8005d44 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d01d      	beq.n	8005d0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cd6:	d018      	beq.n	8005d0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a1b      	ldr	r2, [pc, #108]	; (8005d4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d013      	beq.n	8005d0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a1a      	ldr	r2, [pc, #104]	; (8005d50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d00e      	beq.n	8005d0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a18      	ldr	r2, [pc, #96]	; (8005d54 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d009      	beq.n	8005d0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a13      	ldr	r2, [pc, #76]	; (8005d48 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d004      	beq.n	8005d0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a14      	ldr	r2, [pc, #80]	; (8005d58 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d10c      	bne.n	8005d24 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	68ba      	ldr	r2, [r7, #8]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3714      	adds	r7, #20
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	40012c00 	.word	0x40012c00
 8005d48:	40013400 	.word	0x40013400
 8005d4c:	40000400 	.word	0x40000400
 8005d50:	40000800 	.word	0x40000800
 8005d54:	40000c00 	.word	0x40000c00
 8005d58:	40014000 	.word	0x40014000

08005d5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e040      	b.n	8005e2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d106      	bne.n	8005dc0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f7fc f93e 	bl	800203c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2224      	movs	r2, #36	; 0x24
 8005dc4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f022 0201 	bic.w	r2, r2, #1
 8005dd4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d002      	beq.n	8005de4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 fc34 	bl	800664c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f979 	bl	80060dc <UART_SetConfig>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d101      	bne.n	8005df4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e01b      	b.n	8005e2c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	685a      	ldr	r2, [r3, #4]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	689a      	ldr	r2, [r3, #8]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f042 0201 	orr.w	r2, r2, #1
 8005e22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 fcb3 	bl	8006790 <UART_CheckIdleState>
 8005e2a:	4603      	mov	r3, r0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3708      	adds	r7, #8
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b08a      	sub	sp, #40	; 0x28
 8005e38:	af02      	add	r7, sp, #8
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	603b      	str	r3, [r7, #0]
 8005e40:	4613      	mov	r3, r2
 8005e42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e48:	2b20      	cmp	r3, #32
 8005e4a:	d178      	bne.n	8005f3e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d002      	beq.n	8005e58 <HAL_UART_Transmit+0x24>
 8005e52:	88fb      	ldrh	r3, [r7, #6]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d101      	bne.n	8005e5c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e071      	b.n	8005f40 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2221      	movs	r2, #33	; 0x21
 8005e68:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e6a:	f7fc f999 	bl	80021a0 <HAL_GetTick>
 8005e6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	88fa      	ldrh	r2, [r7, #6]
 8005e74:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	88fa      	ldrh	r2, [r7, #6]
 8005e7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e88:	d108      	bne.n	8005e9c <HAL_UART_Transmit+0x68>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d104      	bne.n	8005e9c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005e92:	2300      	movs	r3, #0
 8005e94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	61bb      	str	r3, [r7, #24]
 8005e9a:	e003      	b.n	8005ea4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ea4:	e030      	b.n	8005f08 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	9300      	str	r3, [sp, #0]
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	2200      	movs	r2, #0
 8005eae:	2180      	movs	r1, #128	; 0x80
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f000 fd15 	bl	80068e0 <UART_WaitOnFlagUntilTimeout>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d004      	beq.n	8005ec6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e03c      	b.n	8005f40 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10b      	bne.n	8005ee4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	881a      	ldrh	r2, [r3, #0]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ed8:	b292      	uxth	r2, r2
 8005eda:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	3302      	adds	r3, #2
 8005ee0:	61bb      	str	r3, [r7, #24]
 8005ee2:	e008      	b.n	8005ef6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	781a      	ldrb	r2, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	b292      	uxth	r2, r2
 8005eee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	3b01      	subs	r3, #1
 8005f00:	b29a      	uxth	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1c8      	bne.n	8005ea6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	9300      	str	r3, [sp, #0]
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	2140      	movs	r1, #64	; 0x40
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f000 fcde 	bl	80068e0 <UART_WaitOnFlagUntilTimeout>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d004      	beq.n	8005f34 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2220      	movs	r2, #32
 8005f2e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e005      	b.n	8005f40 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2220      	movs	r2, #32
 8005f38:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	e000      	b.n	8005f40 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005f3e:	2302      	movs	r3, #2
  }
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3720      	adds	r7, #32
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b08a      	sub	sp, #40	; 0x28
 8005f4c:	af02      	add	r7, sp, #8
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	603b      	str	r3, [r7, #0]
 8005f54:	4613      	mov	r3, r2
 8005f56:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f5e:	2b20      	cmp	r3, #32
 8005f60:	f040 80b6 	bne.w	80060d0 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d002      	beq.n	8005f70 <HAL_UART_Receive+0x28>
 8005f6a:	88fb      	ldrh	r3, [r7, #6]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d101      	bne.n	8005f74 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e0ae      	b.n	80060d2 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2222      	movs	r2, #34	; 0x22
 8005f80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f8a:	f7fc f909 	bl	80021a0 <HAL_GetTick>
 8005f8e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	88fa      	ldrh	r2, [r7, #6]
 8005f94:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	88fa      	ldrh	r2, [r7, #6]
 8005f9c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fa8:	d10e      	bne.n	8005fc8 <HAL_UART_Receive+0x80>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d105      	bne.n	8005fbe <HAL_UART_Receive+0x76>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005fb8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005fbc:	e02d      	b.n	800601a <HAL_UART_Receive+0xd2>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	22ff      	movs	r2, #255	; 0xff
 8005fc2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005fc6:	e028      	b.n	800601a <HAL_UART_Receive+0xd2>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10d      	bne.n	8005fec <HAL_UART_Receive+0xa4>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d104      	bne.n	8005fe2 <HAL_UART_Receive+0x9a>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	22ff      	movs	r2, #255	; 0xff
 8005fdc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005fe0:	e01b      	b.n	800601a <HAL_UART_Receive+0xd2>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	227f      	movs	r2, #127	; 0x7f
 8005fe6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005fea:	e016      	b.n	800601a <HAL_UART_Receive+0xd2>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ff4:	d10d      	bne.n	8006012 <HAL_UART_Receive+0xca>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d104      	bne.n	8006008 <HAL_UART_Receive+0xc0>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	227f      	movs	r2, #127	; 0x7f
 8006002:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006006:	e008      	b.n	800601a <HAL_UART_Receive+0xd2>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	223f      	movs	r2, #63	; 0x3f
 800600c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006010:	e003      	b.n	800601a <HAL_UART_Receive+0xd2>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006020:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800602a:	d108      	bne.n	800603e <HAL_UART_Receive+0xf6>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d104      	bne.n	800603e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006034:	2300      	movs	r3, #0
 8006036:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	61bb      	str	r3, [r7, #24]
 800603c:	e003      	b.n	8006046 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006042:	2300      	movs	r3, #0
 8006044:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006046:	e037      	b.n	80060b8 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	2200      	movs	r2, #0
 8006050:	2120      	movs	r1, #32
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f000 fc44 	bl	80068e0 <UART_WaitOnFlagUntilTimeout>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d005      	beq.n	800606a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2220      	movs	r2, #32
 8006062:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e033      	b.n	80060d2 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d10c      	bne.n	800608a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006076:	b29a      	uxth	r2, r3
 8006078:	8a7b      	ldrh	r3, [r7, #18]
 800607a:	4013      	ands	r3, r2
 800607c:	b29a      	uxth	r2, r3
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	3302      	adds	r3, #2
 8006086:	61bb      	str	r3, [r7, #24]
 8006088:	e00d      	b.n	80060a6 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006090:	b29b      	uxth	r3, r3
 8006092:	b2da      	uxtb	r2, r3
 8006094:	8a7b      	ldrh	r3, [r7, #18]
 8006096:	b2db      	uxtb	r3, r3
 8006098:	4013      	ands	r3, r2
 800609a:	b2da      	uxtb	r2, r3
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	3301      	adds	r3, #1
 80060a4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	3b01      	subs	r3, #1
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060be:	b29b      	uxth	r3, r3
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d1c1      	bne.n	8006048 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2220      	movs	r2, #32
 80060c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80060cc:	2300      	movs	r3, #0
 80060ce:	e000      	b.n	80060d2 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80060d0:	2302      	movs	r3, #2
  }
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3720      	adds	r7, #32
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
	...

080060dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060e0:	b08a      	sub	sp, #40	; 0x28
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060e6:	2300      	movs	r3, #0
 80060e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	689a      	ldr	r2, [r3, #8]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	431a      	orrs	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	431a      	orrs	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	69db      	ldr	r3, [r3, #28]
 8006100:	4313      	orrs	r3, r2
 8006102:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	4ba4      	ldr	r3, [pc, #656]	; (800639c <UART_SetConfig+0x2c0>)
 800610c:	4013      	ands	r3, r2
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	6812      	ldr	r2, [r2, #0]
 8006112:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006114:	430b      	orrs	r3, r1
 8006116:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	68da      	ldr	r2, [r3, #12]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	430a      	orrs	r2, r1
 800612c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a99      	ldr	r2, [pc, #612]	; (80063a0 <UART_SetConfig+0x2c4>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d004      	beq.n	8006148 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006144:	4313      	orrs	r3, r2
 8006146:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006158:	430a      	orrs	r2, r1
 800615a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a90      	ldr	r2, [pc, #576]	; (80063a4 <UART_SetConfig+0x2c8>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d126      	bne.n	80061b4 <UART_SetConfig+0xd8>
 8006166:	4b90      	ldr	r3, [pc, #576]	; (80063a8 <UART_SetConfig+0x2cc>)
 8006168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800616c:	f003 0303 	and.w	r3, r3, #3
 8006170:	2b03      	cmp	r3, #3
 8006172:	d81b      	bhi.n	80061ac <UART_SetConfig+0xd0>
 8006174:	a201      	add	r2, pc, #4	; (adr r2, 800617c <UART_SetConfig+0xa0>)
 8006176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800617a:	bf00      	nop
 800617c:	0800618d 	.word	0x0800618d
 8006180:	0800619d 	.word	0x0800619d
 8006184:	08006195 	.word	0x08006195
 8006188:	080061a5 	.word	0x080061a5
 800618c:	2301      	movs	r3, #1
 800618e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006192:	e116      	b.n	80063c2 <UART_SetConfig+0x2e6>
 8006194:	2302      	movs	r3, #2
 8006196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800619a:	e112      	b.n	80063c2 <UART_SetConfig+0x2e6>
 800619c:	2304      	movs	r3, #4
 800619e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061a2:	e10e      	b.n	80063c2 <UART_SetConfig+0x2e6>
 80061a4:	2308      	movs	r3, #8
 80061a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061aa:	e10a      	b.n	80063c2 <UART_SetConfig+0x2e6>
 80061ac:	2310      	movs	r3, #16
 80061ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061b2:	e106      	b.n	80063c2 <UART_SetConfig+0x2e6>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a7c      	ldr	r2, [pc, #496]	; (80063ac <UART_SetConfig+0x2d0>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d138      	bne.n	8006230 <UART_SetConfig+0x154>
 80061be:	4b7a      	ldr	r3, [pc, #488]	; (80063a8 <UART_SetConfig+0x2cc>)
 80061c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c4:	f003 030c 	and.w	r3, r3, #12
 80061c8:	2b0c      	cmp	r3, #12
 80061ca:	d82d      	bhi.n	8006228 <UART_SetConfig+0x14c>
 80061cc:	a201      	add	r2, pc, #4	; (adr r2, 80061d4 <UART_SetConfig+0xf8>)
 80061ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d2:	bf00      	nop
 80061d4:	08006209 	.word	0x08006209
 80061d8:	08006229 	.word	0x08006229
 80061dc:	08006229 	.word	0x08006229
 80061e0:	08006229 	.word	0x08006229
 80061e4:	08006219 	.word	0x08006219
 80061e8:	08006229 	.word	0x08006229
 80061ec:	08006229 	.word	0x08006229
 80061f0:	08006229 	.word	0x08006229
 80061f4:	08006211 	.word	0x08006211
 80061f8:	08006229 	.word	0x08006229
 80061fc:	08006229 	.word	0x08006229
 8006200:	08006229 	.word	0x08006229
 8006204:	08006221 	.word	0x08006221
 8006208:	2300      	movs	r3, #0
 800620a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800620e:	e0d8      	b.n	80063c2 <UART_SetConfig+0x2e6>
 8006210:	2302      	movs	r3, #2
 8006212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006216:	e0d4      	b.n	80063c2 <UART_SetConfig+0x2e6>
 8006218:	2304      	movs	r3, #4
 800621a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800621e:	e0d0      	b.n	80063c2 <UART_SetConfig+0x2e6>
 8006220:	2308      	movs	r3, #8
 8006222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006226:	e0cc      	b.n	80063c2 <UART_SetConfig+0x2e6>
 8006228:	2310      	movs	r3, #16
 800622a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800622e:	e0c8      	b.n	80063c2 <UART_SetConfig+0x2e6>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a5e      	ldr	r2, [pc, #376]	; (80063b0 <UART_SetConfig+0x2d4>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d125      	bne.n	8006286 <UART_SetConfig+0x1aa>
 800623a:	4b5b      	ldr	r3, [pc, #364]	; (80063a8 <UART_SetConfig+0x2cc>)
 800623c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006240:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006244:	2b30      	cmp	r3, #48	; 0x30
 8006246:	d016      	beq.n	8006276 <UART_SetConfig+0x19a>
 8006248:	2b30      	cmp	r3, #48	; 0x30
 800624a:	d818      	bhi.n	800627e <UART_SetConfig+0x1a2>
 800624c:	2b20      	cmp	r3, #32
 800624e:	d00a      	beq.n	8006266 <UART_SetConfig+0x18a>
 8006250:	2b20      	cmp	r3, #32
 8006252:	d814      	bhi.n	800627e <UART_SetConfig+0x1a2>
 8006254:	2b00      	cmp	r3, #0
 8006256:	d002      	beq.n	800625e <UART_SetConfig+0x182>
 8006258:	2b10      	cmp	r3, #16
 800625a:	d008      	beq.n	800626e <UART_SetConfig+0x192>
 800625c:	e00f      	b.n	800627e <UART_SetConfig+0x1a2>
 800625e:	2300      	movs	r3, #0
 8006260:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006264:	e0ad      	b.n	80063c2 <UART_SetConfig+0x2e6>
 8006266:	2302      	movs	r3, #2
 8006268:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800626c:	e0a9      	b.n	80063c2 <UART_SetConfig+0x2e6>
 800626e:	2304      	movs	r3, #4
 8006270:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006274:	e0a5      	b.n	80063c2 <UART_SetConfig+0x2e6>
 8006276:	2308      	movs	r3, #8
 8006278:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800627c:	e0a1      	b.n	80063c2 <UART_SetConfig+0x2e6>
 800627e:	2310      	movs	r3, #16
 8006280:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006284:	e09d      	b.n	80063c2 <UART_SetConfig+0x2e6>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a4a      	ldr	r2, [pc, #296]	; (80063b4 <UART_SetConfig+0x2d8>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d125      	bne.n	80062dc <UART_SetConfig+0x200>
 8006290:	4b45      	ldr	r3, [pc, #276]	; (80063a8 <UART_SetConfig+0x2cc>)
 8006292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006296:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800629a:	2bc0      	cmp	r3, #192	; 0xc0
 800629c:	d016      	beq.n	80062cc <UART_SetConfig+0x1f0>
 800629e:	2bc0      	cmp	r3, #192	; 0xc0
 80062a0:	d818      	bhi.n	80062d4 <UART_SetConfig+0x1f8>
 80062a2:	2b80      	cmp	r3, #128	; 0x80
 80062a4:	d00a      	beq.n	80062bc <UART_SetConfig+0x1e0>
 80062a6:	2b80      	cmp	r3, #128	; 0x80
 80062a8:	d814      	bhi.n	80062d4 <UART_SetConfig+0x1f8>
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d002      	beq.n	80062b4 <UART_SetConfig+0x1d8>
 80062ae:	2b40      	cmp	r3, #64	; 0x40
 80062b0:	d008      	beq.n	80062c4 <UART_SetConfig+0x1e8>
 80062b2:	e00f      	b.n	80062d4 <UART_SetConfig+0x1f8>
 80062b4:	2300      	movs	r3, #0
 80062b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062ba:	e082      	b.n	80063c2 <UART_SetConfig+0x2e6>
 80062bc:	2302      	movs	r3, #2
 80062be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062c2:	e07e      	b.n	80063c2 <UART_SetConfig+0x2e6>
 80062c4:	2304      	movs	r3, #4
 80062c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062ca:	e07a      	b.n	80063c2 <UART_SetConfig+0x2e6>
 80062cc:	2308      	movs	r3, #8
 80062ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062d2:	e076      	b.n	80063c2 <UART_SetConfig+0x2e6>
 80062d4:	2310      	movs	r3, #16
 80062d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062da:	e072      	b.n	80063c2 <UART_SetConfig+0x2e6>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a35      	ldr	r2, [pc, #212]	; (80063b8 <UART_SetConfig+0x2dc>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d12a      	bne.n	800633c <UART_SetConfig+0x260>
 80062e6:	4b30      	ldr	r3, [pc, #192]	; (80063a8 <UART_SetConfig+0x2cc>)
 80062e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062f4:	d01a      	beq.n	800632c <UART_SetConfig+0x250>
 80062f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062fa:	d81b      	bhi.n	8006334 <UART_SetConfig+0x258>
 80062fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006300:	d00c      	beq.n	800631c <UART_SetConfig+0x240>
 8006302:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006306:	d815      	bhi.n	8006334 <UART_SetConfig+0x258>
 8006308:	2b00      	cmp	r3, #0
 800630a:	d003      	beq.n	8006314 <UART_SetConfig+0x238>
 800630c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006310:	d008      	beq.n	8006324 <UART_SetConfig+0x248>
 8006312:	e00f      	b.n	8006334 <UART_SetConfig+0x258>
 8006314:	2300      	movs	r3, #0
 8006316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800631a:	e052      	b.n	80063c2 <UART_SetConfig+0x2e6>
 800631c:	2302      	movs	r3, #2
 800631e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006322:	e04e      	b.n	80063c2 <UART_SetConfig+0x2e6>
 8006324:	2304      	movs	r3, #4
 8006326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800632a:	e04a      	b.n	80063c2 <UART_SetConfig+0x2e6>
 800632c:	2308      	movs	r3, #8
 800632e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006332:	e046      	b.n	80063c2 <UART_SetConfig+0x2e6>
 8006334:	2310      	movs	r3, #16
 8006336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800633a:	e042      	b.n	80063c2 <UART_SetConfig+0x2e6>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a17      	ldr	r2, [pc, #92]	; (80063a0 <UART_SetConfig+0x2c4>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d13a      	bne.n	80063bc <UART_SetConfig+0x2e0>
 8006346:	4b18      	ldr	r3, [pc, #96]	; (80063a8 <UART_SetConfig+0x2cc>)
 8006348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800634c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006350:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006354:	d01a      	beq.n	800638c <UART_SetConfig+0x2b0>
 8006356:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800635a:	d81b      	bhi.n	8006394 <UART_SetConfig+0x2b8>
 800635c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006360:	d00c      	beq.n	800637c <UART_SetConfig+0x2a0>
 8006362:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006366:	d815      	bhi.n	8006394 <UART_SetConfig+0x2b8>
 8006368:	2b00      	cmp	r3, #0
 800636a:	d003      	beq.n	8006374 <UART_SetConfig+0x298>
 800636c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006370:	d008      	beq.n	8006384 <UART_SetConfig+0x2a8>
 8006372:	e00f      	b.n	8006394 <UART_SetConfig+0x2b8>
 8006374:	2300      	movs	r3, #0
 8006376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800637a:	e022      	b.n	80063c2 <UART_SetConfig+0x2e6>
 800637c:	2302      	movs	r3, #2
 800637e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006382:	e01e      	b.n	80063c2 <UART_SetConfig+0x2e6>
 8006384:	2304      	movs	r3, #4
 8006386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800638a:	e01a      	b.n	80063c2 <UART_SetConfig+0x2e6>
 800638c:	2308      	movs	r3, #8
 800638e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006392:	e016      	b.n	80063c2 <UART_SetConfig+0x2e6>
 8006394:	2310      	movs	r3, #16
 8006396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800639a:	e012      	b.n	80063c2 <UART_SetConfig+0x2e6>
 800639c:	efff69f3 	.word	0xefff69f3
 80063a0:	40008000 	.word	0x40008000
 80063a4:	40013800 	.word	0x40013800
 80063a8:	40021000 	.word	0x40021000
 80063ac:	40004400 	.word	0x40004400
 80063b0:	40004800 	.word	0x40004800
 80063b4:	40004c00 	.word	0x40004c00
 80063b8:	40005000 	.word	0x40005000
 80063bc:	2310      	movs	r3, #16
 80063be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a9f      	ldr	r2, [pc, #636]	; (8006644 <UART_SetConfig+0x568>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d17a      	bne.n	80064c2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80063cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80063d0:	2b08      	cmp	r3, #8
 80063d2:	d824      	bhi.n	800641e <UART_SetConfig+0x342>
 80063d4:	a201      	add	r2, pc, #4	; (adr r2, 80063dc <UART_SetConfig+0x300>)
 80063d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063da:	bf00      	nop
 80063dc:	08006401 	.word	0x08006401
 80063e0:	0800641f 	.word	0x0800641f
 80063e4:	08006409 	.word	0x08006409
 80063e8:	0800641f 	.word	0x0800641f
 80063ec:	0800640f 	.word	0x0800640f
 80063f0:	0800641f 	.word	0x0800641f
 80063f4:	0800641f 	.word	0x0800641f
 80063f8:	0800641f 	.word	0x0800641f
 80063fc:	08006417 	.word	0x08006417
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006400:	f7fc ff56 	bl	80032b0 <HAL_RCC_GetPCLK1Freq>
 8006404:	61f8      	str	r0, [r7, #28]
        break;
 8006406:	e010      	b.n	800642a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006408:	4b8f      	ldr	r3, [pc, #572]	; (8006648 <UART_SetConfig+0x56c>)
 800640a:	61fb      	str	r3, [r7, #28]
        break;
 800640c:	e00d      	b.n	800642a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800640e:	f7fc feb7 	bl	8003180 <HAL_RCC_GetSysClockFreq>
 8006412:	61f8      	str	r0, [r7, #28]
        break;
 8006414:	e009      	b.n	800642a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800641a:	61fb      	str	r3, [r7, #28]
        break;
 800641c:	e005      	b.n	800642a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800641e:	2300      	movs	r3, #0
 8006420:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006428:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	2b00      	cmp	r3, #0
 800642e:	f000 80fb 	beq.w	8006628 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	685a      	ldr	r2, [r3, #4]
 8006436:	4613      	mov	r3, r2
 8006438:	005b      	lsls	r3, r3, #1
 800643a:	4413      	add	r3, r2
 800643c:	69fa      	ldr	r2, [r7, #28]
 800643e:	429a      	cmp	r2, r3
 8006440:	d305      	bcc.n	800644e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006448:	69fa      	ldr	r2, [r7, #28]
 800644a:	429a      	cmp	r2, r3
 800644c:	d903      	bls.n	8006456 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006454:	e0e8      	b.n	8006628 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	2200      	movs	r2, #0
 800645a:	461c      	mov	r4, r3
 800645c:	4615      	mov	r5, r2
 800645e:	f04f 0200 	mov.w	r2, #0
 8006462:	f04f 0300 	mov.w	r3, #0
 8006466:	022b      	lsls	r3, r5, #8
 8006468:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800646c:	0222      	lsls	r2, r4, #8
 800646e:	68f9      	ldr	r1, [r7, #12]
 8006470:	6849      	ldr	r1, [r1, #4]
 8006472:	0849      	lsrs	r1, r1, #1
 8006474:	2000      	movs	r0, #0
 8006476:	4688      	mov	r8, r1
 8006478:	4681      	mov	r9, r0
 800647a:	eb12 0a08 	adds.w	sl, r2, r8
 800647e:	eb43 0b09 	adc.w	fp, r3, r9
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	603b      	str	r3, [r7, #0]
 800648a:	607a      	str	r2, [r7, #4]
 800648c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006490:	4650      	mov	r0, sl
 8006492:	4659      	mov	r1, fp
 8006494:	f7fa fb98 	bl	8000bc8 <__aeabi_uldivmod>
 8006498:	4602      	mov	r2, r0
 800649a:	460b      	mov	r3, r1
 800649c:	4613      	mov	r3, r2
 800649e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064a6:	d308      	bcc.n	80064ba <UART_SetConfig+0x3de>
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064ae:	d204      	bcs.n	80064ba <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	69ba      	ldr	r2, [r7, #24]
 80064b6:	60da      	str	r2, [r3, #12]
 80064b8:	e0b6      	b.n	8006628 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80064c0:	e0b2      	b.n	8006628 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	69db      	ldr	r3, [r3, #28]
 80064c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064ca:	d15e      	bne.n	800658a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80064cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064d0:	2b08      	cmp	r3, #8
 80064d2:	d828      	bhi.n	8006526 <UART_SetConfig+0x44a>
 80064d4:	a201      	add	r2, pc, #4	; (adr r2, 80064dc <UART_SetConfig+0x400>)
 80064d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064da:	bf00      	nop
 80064dc:	08006501 	.word	0x08006501
 80064e0:	08006509 	.word	0x08006509
 80064e4:	08006511 	.word	0x08006511
 80064e8:	08006527 	.word	0x08006527
 80064ec:	08006517 	.word	0x08006517
 80064f0:	08006527 	.word	0x08006527
 80064f4:	08006527 	.word	0x08006527
 80064f8:	08006527 	.word	0x08006527
 80064fc:	0800651f 	.word	0x0800651f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006500:	f7fc fed6 	bl	80032b0 <HAL_RCC_GetPCLK1Freq>
 8006504:	61f8      	str	r0, [r7, #28]
        break;
 8006506:	e014      	b.n	8006532 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006508:	f7fc fee8 	bl	80032dc <HAL_RCC_GetPCLK2Freq>
 800650c:	61f8      	str	r0, [r7, #28]
        break;
 800650e:	e010      	b.n	8006532 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006510:	4b4d      	ldr	r3, [pc, #308]	; (8006648 <UART_SetConfig+0x56c>)
 8006512:	61fb      	str	r3, [r7, #28]
        break;
 8006514:	e00d      	b.n	8006532 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006516:	f7fc fe33 	bl	8003180 <HAL_RCC_GetSysClockFreq>
 800651a:	61f8      	str	r0, [r7, #28]
        break;
 800651c:	e009      	b.n	8006532 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800651e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006522:	61fb      	str	r3, [r7, #28]
        break;
 8006524:	e005      	b.n	8006532 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006526:	2300      	movs	r3, #0
 8006528:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006530:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d077      	beq.n	8006628 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	005a      	lsls	r2, r3, #1
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	085b      	lsrs	r3, r3, #1
 8006542:	441a      	add	r2, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	fbb2 f3f3 	udiv	r3, r2, r3
 800654c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	2b0f      	cmp	r3, #15
 8006552:	d916      	bls.n	8006582 <UART_SetConfig+0x4a6>
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800655a:	d212      	bcs.n	8006582 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	b29b      	uxth	r3, r3
 8006560:	f023 030f 	bic.w	r3, r3, #15
 8006564:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	085b      	lsrs	r3, r3, #1
 800656a:	b29b      	uxth	r3, r3
 800656c:	f003 0307 	and.w	r3, r3, #7
 8006570:	b29a      	uxth	r2, r3
 8006572:	8afb      	ldrh	r3, [r7, #22]
 8006574:	4313      	orrs	r3, r2
 8006576:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	8afa      	ldrh	r2, [r7, #22]
 800657e:	60da      	str	r2, [r3, #12]
 8006580:	e052      	b.n	8006628 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006588:	e04e      	b.n	8006628 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800658a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800658e:	2b08      	cmp	r3, #8
 8006590:	d827      	bhi.n	80065e2 <UART_SetConfig+0x506>
 8006592:	a201      	add	r2, pc, #4	; (adr r2, 8006598 <UART_SetConfig+0x4bc>)
 8006594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006598:	080065bd 	.word	0x080065bd
 800659c:	080065c5 	.word	0x080065c5
 80065a0:	080065cd 	.word	0x080065cd
 80065a4:	080065e3 	.word	0x080065e3
 80065a8:	080065d3 	.word	0x080065d3
 80065ac:	080065e3 	.word	0x080065e3
 80065b0:	080065e3 	.word	0x080065e3
 80065b4:	080065e3 	.word	0x080065e3
 80065b8:	080065db 	.word	0x080065db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065bc:	f7fc fe78 	bl	80032b0 <HAL_RCC_GetPCLK1Freq>
 80065c0:	61f8      	str	r0, [r7, #28]
        break;
 80065c2:	e014      	b.n	80065ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065c4:	f7fc fe8a 	bl	80032dc <HAL_RCC_GetPCLK2Freq>
 80065c8:	61f8      	str	r0, [r7, #28]
        break;
 80065ca:	e010      	b.n	80065ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065cc:	4b1e      	ldr	r3, [pc, #120]	; (8006648 <UART_SetConfig+0x56c>)
 80065ce:	61fb      	str	r3, [r7, #28]
        break;
 80065d0:	e00d      	b.n	80065ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065d2:	f7fc fdd5 	bl	8003180 <HAL_RCC_GetSysClockFreq>
 80065d6:	61f8      	str	r0, [r7, #28]
        break;
 80065d8:	e009      	b.n	80065ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065de:	61fb      	str	r3, [r7, #28]
        break;
 80065e0:	e005      	b.n	80065ee <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80065e2:	2300      	movs	r3, #0
 80065e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80065ec:	bf00      	nop
    }

    if (pclk != 0U)
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d019      	beq.n	8006628 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	085a      	lsrs	r2, r3, #1
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	441a      	add	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	fbb2 f3f3 	udiv	r3, r2, r3
 8006606:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	2b0f      	cmp	r3, #15
 800660c:	d909      	bls.n	8006622 <UART_SetConfig+0x546>
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006614:	d205      	bcs.n	8006622 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	b29a      	uxth	r2, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	60da      	str	r2, [r3, #12]
 8006620:	e002      	b.n	8006628 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006634:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006638:	4618      	mov	r0, r3
 800663a:	3728      	adds	r7, #40	; 0x28
 800663c:	46bd      	mov	sp, r7
 800663e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006642:	bf00      	nop
 8006644:	40008000 	.word	0x40008000
 8006648:	00f42400 	.word	0x00f42400

0800664c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006658:	f003 0308 	and.w	r3, r3, #8
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00a      	beq.n	8006676 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	430a      	orrs	r2, r1
 8006674:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667a:	f003 0301 	and.w	r3, r3, #1
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00a      	beq.n	8006698 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	430a      	orrs	r2, r1
 8006696:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669c:	f003 0302 	and.w	r3, r3, #2
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00a      	beq.n	80066ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	430a      	orrs	r2, r1
 80066b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066be:	f003 0304 	and.w	r3, r3, #4
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00a      	beq.n	80066dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	430a      	orrs	r2, r1
 80066da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e0:	f003 0310 	and.w	r3, r3, #16
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00a      	beq.n	80066fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	430a      	orrs	r2, r1
 80066fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006702:	f003 0320 	and.w	r3, r3, #32
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00a      	beq.n	8006720 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	430a      	orrs	r2, r1
 800671e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006728:	2b00      	cmp	r3, #0
 800672a:	d01a      	beq.n	8006762 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	430a      	orrs	r2, r1
 8006740:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006746:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800674a:	d10a      	bne.n	8006762 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	430a      	orrs	r2, r1
 8006760:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00a      	beq.n	8006784 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	430a      	orrs	r2, r1
 8006782:	605a      	str	r2, [r3, #4]
  }
}
 8006784:	bf00      	nop
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b098      	sub	sp, #96	; 0x60
 8006794:	af02      	add	r7, sp, #8
 8006796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067a0:	f7fb fcfe 	bl	80021a0 <HAL_GetTick>
 80067a4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0308 	and.w	r3, r3, #8
 80067b0:	2b08      	cmp	r3, #8
 80067b2:	d12e      	bne.n	8006812 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067bc:	2200      	movs	r2, #0
 80067be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f88c 	bl	80068e0 <UART_WaitOnFlagUntilTimeout>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d021      	beq.n	8006812 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d6:	e853 3f00 	ldrex	r3, [r3]
 80067da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80067dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067e2:	653b      	str	r3, [r7, #80]	; 0x50
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	461a      	mov	r2, r3
 80067ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067ec:	647b      	str	r3, [r7, #68]	; 0x44
 80067ee:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80067f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067f4:	e841 2300 	strex	r3, r2, [r1]
 80067f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80067fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1e6      	bne.n	80067ce <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2220      	movs	r2, #32
 8006804:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e062      	b.n	80068d8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0304 	and.w	r3, r3, #4
 800681c:	2b04      	cmp	r3, #4
 800681e:	d149      	bne.n	80068b4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006820:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006828:	2200      	movs	r2, #0
 800682a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 f856 	bl	80068e0 <UART_WaitOnFlagUntilTimeout>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d03c      	beq.n	80068b4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006842:	e853 3f00 	ldrex	r3, [r3]
 8006846:	623b      	str	r3, [r7, #32]
   return(result);
 8006848:	6a3b      	ldr	r3, [r7, #32]
 800684a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800684e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	461a      	mov	r2, r3
 8006856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006858:	633b      	str	r3, [r7, #48]	; 0x30
 800685a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800685e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006860:	e841 2300 	strex	r3, r2, [r1]
 8006864:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006868:	2b00      	cmp	r3, #0
 800686a:	d1e6      	bne.n	800683a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	3308      	adds	r3, #8
 8006872:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	e853 3f00 	ldrex	r3, [r3]
 800687a:	60fb      	str	r3, [r7, #12]
   return(result);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f023 0301 	bic.w	r3, r3, #1
 8006882:	64bb      	str	r3, [r7, #72]	; 0x48
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	3308      	adds	r3, #8
 800688a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800688c:	61fa      	str	r2, [r7, #28]
 800688e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006890:	69b9      	ldr	r1, [r7, #24]
 8006892:	69fa      	ldr	r2, [r7, #28]
 8006894:	e841 2300 	strex	r3, r2, [r1]
 8006898:	617b      	str	r3, [r7, #20]
   return(result);
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d1e5      	bne.n	800686c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2220      	movs	r2, #32
 80068a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e011      	b.n	80068d8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2220      	movs	r2, #32
 80068b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2220      	movs	r2, #32
 80068be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3758      	adds	r7, #88	; 0x58
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	603b      	str	r3, [r7, #0]
 80068ec:	4613      	mov	r3, r2
 80068ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068f0:	e049      	b.n	8006986 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f8:	d045      	beq.n	8006986 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068fa:	f7fb fc51 	bl	80021a0 <HAL_GetTick>
 80068fe:	4602      	mov	r2, r0
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	69ba      	ldr	r2, [r7, #24]
 8006906:	429a      	cmp	r2, r3
 8006908:	d302      	bcc.n	8006910 <UART_WaitOnFlagUntilTimeout+0x30>
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d101      	bne.n	8006914 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e048      	b.n	80069a6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 0304 	and.w	r3, r3, #4
 800691e:	2b00      	cmp	r3, #0
 8006920:	d031      	beq.n	8006986 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	69db      	ldr	r3, [r3, #28]
 8006928:	f003 0308 	and.w	r3, r3, #8
 800692c:	2b08      	cmp	r3, #8
 800692e:	d110      	bne.n	8006952 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2208      	movs	r2, #8
 8006936:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f000 f838 	bl	80069ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2208      	movs	r2, #8
 8006942:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e029      	b.n	80069a6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	69db      	ldr	r3, [r3, #28]
 8006958:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800695c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006960:	d111      	bne.n	8006986 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800696a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f000 f81e 	bl	80069ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2220      	movs	r2, #32
 8006976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e00f      	b.n	80069a6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	69da      	ldr	r2, [r3, #28]
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	4013      	ands	r3, r2
 8006990:	68ba      	ldr	r2, [r7, #8]
 8006992:	429a      	cmp	r2, r3
 8006994:	bf0c      	ite	eq
 8006996:	2301      	moveq	r3, #1
 8006998:	2300      	movne	r3, #0
 800699a:	b2db      	uxtb	r3, r3
 800699c:	461a      	mov	r2, r3
 800699e:	79fb      	ldrb	r3, [r7, #7]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d0a6      	beq.n	80068f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3710      	adds	r7, #16
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069ae:	b480      	push	{r7}
 80069b0:	b095      	sub	sp, #84	; 0x54
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069be:	e853 3f00 	ldrex	r3, [r3]
 80069c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80069c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	461a      	mov	r2, r3
 80069d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069d4:	643b      	str	r3, [r7, #64]	; 0x40
 80069d6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069dc:	e841 2300 	strex	r3, r2, [r1]
 80069e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1e6      	bne.n	80069b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	3308      	adds	r3, #8
 80069ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f0:	6a3b      	ldr	r3, [r7, #32]
 80069f2:	e853 3f00 	ldrex	r3, [r3]
 80069f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	f023 0301 	bic.w	r3, r3, #1
 80069fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	3308      	adds	r3, #8
 8006a06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a10:	e841 2300 	strex	r3, r2, [r1]
 8006a14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1e5      	bne.n	80069e8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d118      	bne.n	8006a56 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	e853 3f00 	ldrex	r3, [r3]
 8006a30:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	f023 0310 	bic.w	r3, r3, #16
 8006a38:	647b      	str	r3, [r7, #68]	; 0x44
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	461a      	mov	r2, r3
 8006a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a42:	61bb      	str	r3, [r7, #24]
 8006a44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a46:	6979      	ldr	r1, [r7, #20]
 8006a48:	69ba      	ldr	r2, [r7, #24]
 8006a4a:	e841 2300 	strex	r3, r2, [r1]
 8006a4e:	613b      	str	r3, [r7, #16]
   return(result);
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1e6      	bne.n	8006a24 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2220      	movs	r2, #32
 8006a5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006a6a:	bf00      	nop
 8006a6c:	3754      	adds	r7, #84	; 0x54
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
	...

08006a78 <__NVIC_SetPriority>:
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	4603      	mov	r3, r0
 8006a80:	6039      	str	r1, [r7, #0]
 8006a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	db0a      	blt.n	8006aa2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	b2da      	uxtb	r2, r3
 8006a90:	490c      	ldr	r1, [pc, #48]	; (8006ac4 <__NVIC_SetPriority+0x4c>)
 8006a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a96:	0112      	lsls	r2, r2, #4
 8006a98:	b2d2      	uxtb	r2, r2
 8006a9a:	440b      	add	r3, r1
 8006a9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006aa0:	e00a      	b.n	8006ab8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	b2da      	uxtb	r2, r3
 8006aa6:	4908      	ldr	r1, [pc, #32]	; (8006ac8 <__NVIC_SetPriority+0x50>)
 8006aa8:	79fb      	ldrb	r3, [r7, #7]
 8006aaa:	f003 030f 	and.w	r3, r3, #15
 8006aae:	3b04      	subs	r3, #4
 8006ab0:	0112      	lsls	r2, r2, #4
 8006ab2:	b2d2      	uxtb	r2, r2
 8006ab4:	440b      	add	r3, r1
 8006ab6:	761a      	strb	r2, [r3, #24]
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr
 8006ac4:	e000e100 	.word	0xe000e100
 8006ac8:	e000ed00 	.word	0xe000ed00

08006acc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006acc:	b580      	push	{r7, lr}
 8006ace:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006ad0:	4b05      	ldr	r3, [pc, #20]	; (8006ae8 <SysTick_Handler+0x1c>)
 8006ad2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006ad4:	f002 faf6 	bl	80090c4 <xTaskGetSchedulerState>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d001      	beq.n	8006ae2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006ade:	f003 f9db 	bl	8009e98 <xPortSysTickHandler>
  }
}
 8006ae2:	bf00      	nop
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	e000e010 	.word	0xe000e010

08006aec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006aec:	b580      	push	{r7, lr}
 8006aee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006af0:	2100      	movs	r1, #0
 8006af2:	f06f 0004 	mvn.w	r0, #4
 8006af6:	f7ff ffbf 	bl	8006a78 <__NVIC_SetPriority>
#endif
}
 8006afa:	bf00      	nop
 8006afc:	bd80      	pop	{r7, pc}
	...

08006b00 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b06:	f3ef 8305 	mrs	r3, IPSR
 8006b0a:	603b      	str	r3, [r7, #0]
  return(result);
 8006b0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d003      	beq.n	8006b1a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006b12:	f06f 0305 	mvn.w	r3, #5
 8006b16:	607b      	str	r3, [r7, #4]
 8006b18:	e00c      	b.n	8006b34 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006b1a:	4b0a      	ldr	r3, [pc, #40]	; (8006b44 <osKernelInitialize+0x44>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d105      	bne.n	8006b2e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006b22:	4b08      	ldr	r3, [pc, #32]	; (8006b44 <osKernelInitialize+0x44>)
 8006b24:	2201      	movs	r2, #1
 8006b26:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	607b      	str	r3, [r7, #4]
 8006b2c:	e002      	b.n	8006b34 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006b34:	687b      	ldr	r3, [r7, #4]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	370c      	adds	r7, #12
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	200003d0 	.word	0x200003d0

08006b48 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b4e:	f3ef 8305 	mrs	r3, IPSR
 8006b52:	603b      	str	r3, [r7, #0]
  return(result);
 8006b54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d003      	beq.n	8006b62 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006b5a:	f06f 0305 	mvn.w	r3, #5
 8006b5e:	607b      	str	r3, [r7, #4]
 8006b60:	e010      	b.n	8006b84 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006b62:	4b0b      	ldr	r3, [pc, #44]	; (8006b90 <osKernelStart+0x48>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d109      	bne.n	8006b7e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006b6a:	f7ff ffbf 	bl	8006aec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006b6e:	4b08      	ldr	r3, [pc, #32]	; (8006b90 <osKernelStart+0x48>)
 8006b70:	2202      	movs	r2, #2
 8006b72:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006b74:	f001 fe4a 	bl	800880c <vTaskStartScheduler>
      stat = osOK;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	607b      	str	r3, [r7, #4]
 8006b7c:	e002      	b.n	8006b84 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b82:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006b84:	687b      	ldr	r3, [r7, #4]
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3708      	adds	r7, #8
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	200003d0 	.word	0x200003d0

08006b94 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b08e      	sub	sp, #56	; 0x38
 8006b98:	af04      	add	r7, sp, #16
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ba4:	f3ef 8305 	mrs	r3, IPSR
 8006ba8:	617b      	str	r3, [r7, #20]
  return(result);
 8006baa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d17e      	bne.n	8006cae <osThreadNew+0x11a>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d07b      	beq.n	8006cae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006bb6:	2380      	movs	r3, #128	; 0x80
 8006bb8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006bba:	2318      	movs	r3, #24
 8006bbc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8006bc6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d045      	beq.n	8006c5a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d002      	beq.n	8006bdc <osThreadNew+0x48>
        name = attr->name;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	699b      	ldr	r3, [r3, #24]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d002      	beq.n	8006bea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d008      	beq.n	8006c02 <osThreadNew+0x6e>
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	2b38      	cmp	r3, #56	; 0x38
 8006bf4:	d805      	bhi.n	8006c02 <osThreadNew+0x6e>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	f003 0301 	and.w	r3, r3, #1
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d001      	beq.n	8006c06 <osThreadNew+0x72>
        return (NULL);
 8006c02:	2300      	movs	r3, #0
 8006c04:	e054      	b.n	8006cb0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d003      	beq.n	8006c16 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	089b      	lsrs	r3, r3, #2
 8006c14:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00e      	beq.n	8006c3c <osThreadNew+0xa8>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	2bb7      	cmp	r3, #183	; 0xb7
 8006c24:	d90a      	bls.n	8006c3c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d006      	beq.n	8006c3c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	695b      	ldr	r3, [r3, #20]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d002      	beq.n	8006c3c <osThreadNew+0xa8>
        mem = 1;
 8006c36:	2301      	movs	r3, #1
 8006c38:	61bb      	str	r3, [r7, #24]
 8006c3a:	e010      	b.n	8006c5e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d10c      	bne.n	8006c5e <osThreadNew+0xca>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d108      	bne.n	8006c5e <osThreadNew+0xca>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d104      	bne.n	8006c5e <osThreadNew+0xca>
          mem = 0;
 8006c54:	2300      	movs	r3, #0
 8006c56:	61bb      	str	r3, [r7, #24]
 8006c58:	e001      	b.n	8006c5e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d110      	bne.n	8006c86 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c6c:	9202      	str	r2, [sp, #8]
 8006c6e:	9301      	str	r3, [sp, #4]
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	9300      	str	r3, [sp, #0]
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	6a3a      	ldr	r2, [r7, #32]
 8006c78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f001 fbda 	bl	8008434 <xTaskCreateStatic>
 8006c80:	4603      	mov	r3, r0
 8006c82:	613b      	str	r3, [r7, #16]
 8006c84:	e013      	b.n	8006cae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d110      	bne.n	8006cae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
 8006c8e:	b29a      	uxth	r2, r3
 8006c90:	f107 0310 	add.w	r3, r7, #16
 8006c94:	9301      	str	r3, [sp, #4]
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f001 fc25 	bl	80084ee <xTaskCreate>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d001      	beq.n	8006cae <osThreadNew+0x11a>
            hTask = NULL;
 8006caa:	2300      	movs	r3, #0
 8006cac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006cae:	693b      	ldr	r3, [r7, #16]
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3728      	adds	r7, #40	; 0x28
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cc0:	f3ef 8305 	mrs	r3, IPSR
 8006cc4:	60bb      	str	r3, [r7, #8]
  return(result);
 8006cc6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d003      	beq.n	8006cd4 <osDelay+0x1c>
    stat = osErrorISR;
 8006ccc:	f06f 0305 	mvn.w	r3, #5
 8006cd0:	60fb      	str	r3, [r7, #12]
 8006cd2:	e007      	b.n	8006ce4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d002      	beq.n	8006ce4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f001 fd60 	bl	80087a4 <vTaskDelay>
    }
  }

  return (stat);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b08a      	sub	sp, #40	; 0x28
 8006cf2:	af02      	add	r7, sp, #8
 8006cf4:	60f8      	str	r0, [r7, #12]
 8006cf6:	60b9      	str	r1, [r7, #8]
 8006cf8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cfe:	f3ef 8305 	mrs	r3, IPSR
 8006d02:	613b      	str	r3, [r7, #16]
  return(result);
 8006d04:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d175      	bne.n	8006df6 <osSemaphoreNew+0x108>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d072      	beq.n	8006df6 <osSemaphoreNew+0x108>
 8006d10:	68ba      	ldr	r2, [r7, #8]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d86e      	bhi.n	8006df6 <osSemaphoreNew+0x108>
    mem = -1;
 8006d18:	f04f 33ff 	mov.w	r3, #4294967295
 8006d1c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d015      	beq.n	8006d50 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d006      	beq.n	8006d3a <osSemaphoreNew+0x4c>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	2b4f      	cmp	r3, #79	; 0x4f
 8006d32:	d902      	bls.n	8006d3a <osSemaphoreNew+0x4c>
        mem = 1;
 8006d34:	2301      	movs	r3, #1
 8006d36:	61bb      	str	r3, [r7, #24]
 8006d38:	e00c      	b.n	8006d54 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d108      	bne.n	8006d54 <osSemaphoreNew+0x66>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d104      	bne.n	8006d54 <osSemaphoreNew+0x66>
          mem = 0;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	61bb      	str	r3, [r7, #24]
 8006d4e:	e001      	b.n	8006d54 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006d50:	2300      	movs	r3, #0
 8006d52:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d5a:	d04c      	beq.n	8006df6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d128      	bne.n	8006db4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d10a      	bne.n	8006d7e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	2203      	movs	r2, #3
 8006d6e:	9200      	str	r2, [sp, #0]
 8006d70:	2200      	movs	r2, #0
 8006d72:	2100      	movs	r1, #0
 8006d74:	2001      	movs	r0, #1
 8006d76:	f000 fb7b 	bl	8007470 <xQueueGenericCreateStatic>
 8006d7a:	61f8      	str	r0, [r7, #28]
 8006d7c:	e005      	b.n	8006d8a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006d7e:	2203      	movs	r2, #3
 8006d80:	2100      	movs	r1, #0
 8006d82:	2001      	movs	r0, #1
 8006d84:	f000 fbec 	bl	8007560 <xQueueGenericCreate>
 8006d88:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d022      	beq.n	8006dd6 <osSemaphoreNew+0xe8>
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d01f      	beq.n	8006dd6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006d96:	2300      	movs	r3, #0
 8006d98:	2200      	movs	r2, #0
 8006d9a:	2100      	movs	r1, #0
 8006d9c:	69f8      	ldr	r0, [r7, #28]
 8006d9e:	f000 fca7 	bl	80076f0 <xQueueGenericSend>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d016      	beq.n	8006dd6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006da8:	69f8      	ldr	r0, [r7, #28]
 8006daa:	f001 f96f 	bl	800808c <vQueueDelete>
            hSemaphore = NULL;
 8006dae:	2300      	movs	r3, #0
 8006db0:	61fb      	str	r3, [r7, #28]
 8006db2:	e010      	b.n	8006dd6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d108      	bne.n	8006dcc <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	68b9      	ldr	r1, [r7, #8]
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f000 fc29 	bl	800761a <xQueueCreateCountingSemaphoreStatic>
 8006dc8:	61f8      	str	r0, [r7, #28]
 8006dca:	e004      	b.n	8006dd6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006dcc:	68b9      	ldr	r1, [r7, #8]
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f000 fc5a 	bl	8007688 <xQueueCreateCountingSemaphore>
 8006dd4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00c      	beq.n	8006df6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d003      	beq.n	8006dea <osSemaphoreNew+0xfc>
          name = attr->name;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	617b      	str	r3, [r7, #20]
 8006de8:	e001      	b.n	8006dee <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006dea:	2300      	movs	r3, #0
 8006dec:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006dee:	6979      	ldr	r1, [r7, #20]
 8006df0:	69f8      	ldr	r0, [r7, #28]
 8006df2:	f001 fa97 	bl	8008324 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006df6:	69fb      	ldr	r3, [r7, #28]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3720      	adds	r7, #32
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d103      	bne.n	8006e20 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006e18:	f06f 0303 	mvn.w	r3, #3
 8006e1c:	617b      	str	r3, [r7, #20]
 8006e1e:	e039      	b.n	8006e94 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e20:	f3ef 8305 	mrs	r3, IPSR
 8006e24:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e26:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d022      	beq.n	8006e72 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d003      	beq.n	8006e3a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8006e32:	f06f 0303 	mvn.w	r3, #3
 8006e36:	617b      	str	r3, [r7, #20]
 8006e38:	e02c      	b.n	8006e94 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006e3e:	f107 0308 	add.w	r3, r7, #8
 8006e42:	461a      	mov	r2, r3
 8006e44:	2100      	movs	r1, #0
 8006e46:	6938      	ldr	r0, [r7, #16]
 8006e48:	f001 f864 	bl	8007f14 <xQueueReceiveFromISR>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d003      	beq.n	8006e5a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006e52:	f06f 0302 	mvn.w	r3, #2
 8006e56:	617b      	str	r3, [r7, #20]
 8006e58:	e01c      	b.n	8006e94 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d019      	beq.n	8006e94 <osSemaphoreAcquire+0x94>
 8006e60:	4b0f      	ldr	r3, [pc, #60]	; (8006ea0 <osSemaphoreAcquire+0xa0>)
 8006e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e66:	601a      	str	r2, [r3, #0]
 8006e68:	f3bf 8f4f 	dsb	sy
 8006e6c:	f3bf 8f6f 	isb	sy
 8006e70:	e010      	b.n	8006e94 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006e72:	6839      	ldr	r1, [r7, #0]
 8006e74:	6938      	ldr	r0, [r7, #16]
 8006e76:	f000 ff41 	bl	8007cfc <xQueueSemaphoreTake>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d009      	beq.n	8006e94 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d003      	beq.n	8006e8e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8006e86:	f06f 0301 	mvn.w	r3, #1
 8006e8a:	617b      	str	r3, [r7, #20]
 8006e8c:	e002      	b.n	8006e94 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006e8e:	f06f 0302 	mvn.w	r3, #2
 8006e92:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006e94:	697b      	ldr	r3, [r7, #20]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3718      	adds	r7, #24
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	e000ed04 	.word	0xe000ed04

08006ea4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b086      	sub	sp, #24
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d103      	bne.n	8006ec2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006eba:	f06f 0303 	mvn.w	r3, #3
 8006ebe:	617b      	str	r3, [r7, #20]
 8006ec0:	e02c      	b.n	8006f1c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ec2:	f3ef 8305 	mrs	r3, IPSR
 8006ec6:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d01a      	beq.n	8006f04 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006ed2:	f107 0308 	add.w	r3, r7, #8
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	6938      	ldr	r0, [r7, #16]
 8006eda:	f000 fda2 	bl	8007a22 <xQueueGiveFromISR>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d003      	beq.n	8006eec <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006ee4:	f06f 0302 	mvn.w	r3, #2
 8006ee8:	617b      	str	r3, [r7, #20]
 8006eea:	e017      	b.n	8006f1c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d014      	beq.n	8006f1c <osSemaphoreRelease+0x78>
 8006ef2:	4b0d      	ldr	r3, [pc, #52]	; (8006f28 <osSemaphoreRelease+0x84>)
 8006ef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ef8:	601a      	str	r2, [r3, #0]
 8006efa:	f3bf 8f4f 	dsb	sy
 8006efe:	f3bf 8f6f 	isb	sy
 8006f02:	e00b      	b.n	8006f1c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006f04:	2300      	movs	r3, #0
 8006f06:	2200      	movs	r2, #0
 8006f08:	2100      	movs	r1, #0
 8006f0a:	6938      	ldr	r0, [r7, #16]
 8006f0c:	f000 fbf0 	bl	80076f0 <xQueueGenericSend>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d002      	beq.n	8006f1c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006f16:	f06f 0302 	mvn.w	r3, #2
 8006f1a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006f1c:	697b      	ldr	r3, [r7, #20]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3718      	adds	r7, #24
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	e000ed04 	.word	0xe000ed04

08006f2c <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b086      	sub	sp, #24
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	613b      	str	r3, [r7, #16]
  uint32_t count;

  if (hSemaphore == NULL) {
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d102      	bne.n	8006f44 <osSemaphoreGetCount+0x18>
    count = 0U;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	617b      	str	r3, [r7, #20]
 8006f42:	e00e      	b.n	8006f62 <osSemaphoreGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f44:	f3ef 8305 	mrs	r3, IPSR
 8006f48:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d004      	beq.n	8006f5a <osSemaphoreGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 8006f50:	6938      	ldr	r0, [r7, #16]
 8006f52:	f001 f87d 	bl	8008050 <uxQueueMessagesWaitingFromISR>
 8006f56:	6178      	str	r0, [r7, #20]
 8006f58:	e003      	b.n	8006f62 <osSemaphoreGetCount+0x36>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 8006f5a:	6938      	ldr	r0, [r7, #16]
 8006f5c:	f001 f85a 	bl	8008014 <uxQueueMessagesWaiting>
 8006f60:	6178      	str	r0, [r7, #20]
  }

  return (count);
 8006f62:	697b      	ldr	r3, [r7, #20]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3718      	adds	r7, #24
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b08a      	sub	sp, #40	; 0x28
 8006f70:	af02      	add	r7, sp, #8
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f7c:	f3ef 8305 	mrs	r3, IPSR
 8006f80:	613b      	str	r3, [r7, #16]
  return(result);
 8006f82:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d15f      	bne.n	8007048 <osMessageQueueNew+0xdc>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d05c      	beq.n	8007048 <osMessageQueueNew+0xdc>
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d059      	beq.n	8007048 <osMessageQueueNew+0xdc>
    mem = -1;
 8006f94:	f04f 33ff 	mov.w	r3, #4294967295
 8006f98:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d029      	beq.n	8006ff4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d012      	beq.n	8006fce <osMessageQueueNew+0x62>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	2b4f      	cmp	r3, #79	; 0x4f
 8006fae:	d90e      	bls.n	8006fce <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00a      	beq.n	8006fce <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	695a      	ldr	r2, [r3, #20]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	68b9      	ldr	r1, [r7, #8]
 8006fc0:	fb01 f303 	mul.w	r3, r1, r3
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d302      	bcc.n	8006fce <osMessageQueueNew+0x62>
        mem = 1;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	61bb      	str	r3, [r7, #24]
 8006fcc:	e014      	b.n	8006ff8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d110      	bne.n	8006ff8 <osMessageQueueNew+0x8c>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10c      	bne.n	8006ff8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d108      	bne.n	8006ff8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	695b      	ldr	r3, [r3, #20]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d104      	bne.n	8006ff8 <osMessageQueueNew+0x8c>
          mem = 0;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	61bb      	str	r3, [r7, #24]
 8006ff2:	e001      	b.n	8006ff8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d10b      	bne.n	8007016 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	691a      	ldr	r2, [r3, #16]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	2100      	movs	r1, #0
 8007008:	9100      	str	r1, [sp, #0]
 800700a:	68b9      	ldr	r1, [r7, #8]
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f000 fa2f 	bl	8007470 <xQueueGenericCreateStatic>
 8007012:	61f8      	str	r0, [r7, #28]
 8007014:	e008      	b.n	8007028 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d105      	bne.n	8007028 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800701c:	2200      	movs	r2, #0
 800701e:	68b9      	ldr	r1, [r7, #8]
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f000 fa9d 	bl	8007560 <xQueueGenericCreate>
 8007026:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00c      	beq.n	8007048 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d003      	beq.n	800703c <osMessageQueueNew+0xd0>
        name = attr->name;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	617b      	str	r3, [r7, #20]
 800703a:	e001      	b.n	8007040 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800703c:	2300      	movs	r3, #0
 800703e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007040:	6979      	ldr	r1, [r7, #20]
 8007042:	69f8      	ldr	r0, [r7, #28]
 8007044:	f001 f96e 	bl	8008324 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007048:	69fb      	ldr	r3, [r7, #28]
}
 800704a:	4618      	mov	r0, r3
 800704c:	3720      	adds	r7, #32
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
	...

08007054 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007054:	b580      	push	{r7, lr}
 8007056:	b088      	sub	sp, #32
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	603b      	str	r3, [r7, #0]
 8007060:	4613      	mov	r3, r2
 8007062:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007068:	2300      	movs	r3, #0
 800706a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800706c:	f3ef 8305 	mrs	r3, IPSR
 8007070:	617b      	str	r3, [r7, #20]
  return(result);
 8007072:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007074:	2b00      	cmp	r3, #0
 8007076:	d028      	beq.n	80070ca <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d005      	beq.n	800708a <osMessageQueuePut+0x36>
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d002      	beq.n	800708a <osMessageQueuePut+0x36>
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d003      	beq.n	8007092 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800708a:	f06f 0303 	mvn.w	r3, #3
 800708e:	61fb      	str	r3, [r7, #28]
 8007090:	e038      	b.n	8007104 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8007092:	2300      	movs	r3, #0
 8007094:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007096:	f107 0210 	add.w	r2, r7, #16
 800709a:	2300      	movs	r3, #0
 800709c:	68b9      	ldr	r1, [r7, #8]
 800709e:	69b8      	ldr	r0, [r7, #24]
 80070a0:	f000 fc24 	bl	80078ec <xQueueGenericSendFromISR>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d003      	beq.n	80070b2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80070aa:	f06f 0302 	mvn.w	r3, #2
 80070ae:	61fb      	str	r3, [r7, #28]
 80070b0:	e028      	b.n	8007104 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d025      	beq.n	8007104 <osMessageQueuePut+0xb0>
 80070b8:	4b15      	ldr	r3, [pc, #84]	; (8007110 <osMessageQueuePut+0xbc>)
 80070ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070be:	601a      	str	r2, [r3, #0]
 80070c0:	f3bf 8f4f 	dsb	sy
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	e01c      	b.n	8007104 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d002      	beq.n	80070d6 <osMessageQueuePut+0x82>
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d103      	bne.n	80070de <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80070d6:	f06f 0303 	mvn.w	r3, #3
 80070da:	61fb      	str	r3, [r7, #28]
 80070dc:	e012      	b.n	8007104 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80070de:	2300      	movs	r3, #0
 80070e0:	683a      	ldr	r2, [r7, #0]
 80070e2:	68b9      	ldr	r1, [r7, #8]
 80070e4:	69b8      	ldr	r0, [r7, #24]
 80070e6:	f000 fb03 	bl	80076f0 <xQueueGenericSend>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d009      	beq.n	8007104 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d003      	beq.n	80070fe <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80070f6:	f06f 0301 	mvn.w	r3, #1
 80070fa:	61fb      	str	r3, [r7, #28]
 80070fc:	e002      	b.n	8007104 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80070fe:	f06f 0302 	mvn.w	r3, #2
 8007102:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007104:	69fb      	ldr	r3, [r7, #28]
}
 8007106:	4618      	mov	r0, r3
 8007108:	3720      	adds	r7, #32
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	e000ed04 	.word	0xe000ed04

08007114 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007114:	b580      	push	{r7, lr}
 8007116:	b088      	sub	sp, #32
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
 8007120:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007126:	2300      	movs	r3, #0
 8007128:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800712a:	f3ef 8305 	mrs	r3, IPSR
 800712e:	617b      	str	r3, [r7, #20]
  return(result);
 8007130:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007132:	2b00      	cmp	r3, #0
 8007134:	d028      	beq.n	8007188 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d005      	beq.n	8007148 <osMessageQueueGet+0x34>
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d002      	beq.n	8007148 <osMessageQueueGet+0x34>
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d003      	beq.n	8007150 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007148:	f06f 0303 	mvn.w	r3, #3
 800714c:	61fb      	str	r3, [r7, #28]
 800714e:	e037      	b.n	80071c0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007150:	2300      	movs	r3, #0
 8007152:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007154:	f107 0310 	add.w	r3, r7, #16
 8007158:	461a      	mov	r2, r3
 800715a:	68b9      	ldr	r1, [r7, #8]
 800715c:	69b8      	ldr	r0, [r7, #24]
 800715e:	f000 fed9 	bl	8007f14 <xQueueReceiveFromISR>
 8007162:	4603      	mov	r3, r0
 8007164:	2b01      	cmp	r3, #1
 8007166:	d003      	beq.n	8007170 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007168:	f06f 0302 	mvn.w	r3, #2
 800716c:	61fb      	str	r3, [r7, #28]
 800716e:	e027      	b.n	80071c0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d024      	beq.n	80071c0 <osMessageQueueGet+0xac>
 8007176:	4b15      	ldr	r3, [pc, #84]	; (80071cc <osMessageQueueGet+0xb8>)
 8007178:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800717c:	601a      	str	r2, [r3, #0]
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	f3bf 8f6f 	isb	sy
 8007186:	e01b      	b.n	80071c0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d002      	beq.n	8007194 <osMessageQueueGet+0x80>
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d103      	bne.n	800719c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007194:	f06f 0303 	mvn.w	r3, #3
 8007198:	61fb      	str	r3, [r7, #28]
 800719a:	e011      	b.n	80071c0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800719c:	683a      	ldr	r2, [r7, #0]
 800719e:	68b9      	ldr	r1, [r7, #8]
 80071a0:	69b8      	ldr	r0, [r7, #24]
 80071a2:	f000 fccb 	bl	8007b3c <xQueueReceive>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d009      	beq.n	80071c0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80071b2:	f06f 0301 	mvn.w	r3, #1
 80071b6:	61fb      	str	r3, [r7, #28]
 80071b8:	e002      	b.n	80071c0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80071ba:	f06f 0302 	mvn.w	r3, #2
 80071be:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80071c0:	69fb      	ldr	r3, [r7, #28]
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3720      	adds	r7, #32
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	e000ed04 	.word	0xe000ed04

080071d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	4a07      	ldr	r2, [pc, #28]	; (80071fc <vApplicationGetIdleTaskMemory+0x2c>)
 80071e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	4a06      	ldr	r2, [pc, #24]	; (8007200 <vApplicationGetIdleTaskMemory+0x30>)
 80071e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2280      	movs	r2, #128	; 0x80
 80071ec:	601a      	str	r2, [r3, #0]
}
 80071ee:	bf00      	nop
 80071f0:	3714      	adds	r7, #20
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	200003d4 	.word	0x200003d4
 8007200:	2000048c 	.word	0x2000048c

08007204 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	4a07      	ldr	r2, [pc, #28]	; (8007230 <vApplicationGetTimerTaskMemory+0x2c>)
 8007214:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	4a06      	ldr	r2, [pc, #24]	; (8007234 <vApplicationGetTimerTaskMemory+0x30>)
 800721a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007222:	601a      	str	r2, [r3, #0]
}
 8007224:	bf00      	nop
 8007226:	3714      	adds	r7, #20
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr
 8007230:	2000068c 	.word	0x2000068c
 8007234:	20000744 	.word	0x20000744

08007238 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f103 0208 	add.w	r2, r3, #8
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f04f 32ff 	mov.w	r2, #4294967295
 8007250:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f103 0208 	add.w	r2, r3, #8
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f103 0208 	add.w	r2, r3, #8
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800726c:	bf00      	nop
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007286:	bf00      	nop
 8007288:	370c      	adds	r7, #12
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr

08007292 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007292:	b480      	push	{r7}
 8007294:	b085      	sub	sp, #20
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
 800729a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	689a      	ldr	r2, [r3, #8]
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	683a      	ldr	r2, [r7, #0]
 80072b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	683a      	ldr	r2, [r7, #0]
 80072bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	1c5a      	adds	r2, r3, #1
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	601a      	str	r2, [r3, #0]
}
 80072ce:	bf00      	nop
 80072d0:	3714      	adds	r7, #20
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr

080072da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80072da:	b480      	push	{r7}
 80072dc:	b085      	sub	sp, #20
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
 80072e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072f0:	d103      	bne.n	80072fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	60fb      	str	r3, [r7, #12]
 80072f8:	e00c      	b.n	8007314 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	3308      	adds	r3, #8
 80072fe:	60fb      	str	r3, [r7, #12]
 8007300:	e002      	b.n	8007308 <vListInsert+0x2e>
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	60fb      	str	r3, [r7, #12]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68ba      	ldr	r2, [r7, #8]
 8007310:	429a      	cmp	r2, r3
 8007312:	d2f6      	bcs.n	8007302 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	683a      	ldr	r2, [r7, #0]
 8007322:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	683a      	ldr	r2, [r7, #0]
 800732e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	1c5a      	adds	r2, r3, #1
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	601a      	str	r2, [r3, #0]
}
 8007340:	bf00      	nop
 8007342:	3714      	adds	r7, #20
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800734c:	b480      	push	{r7}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	6892      	ldr	r2, [r2, #8]
 8007362:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	6852      	ldr	r2, [r2, #4]
 800736c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	429a      	cmp	r2, r3
 8007376:	d103      	bne.n	8007380 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	689a      	ldr	r2, [r3, #8]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	1e5a      	subs	r2, r3, #1
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
}
 8007394:	4618      	mov	r0, r3
 8007396:	3714      	adds	r7, #20
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d10a      	bne.n	80073ca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80073b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b8:	f383 8811 	msr	BASEPRI, r3
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80073c6:	bf00      	nop
 80073c8:	e7fe      	b.n	80073c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80073ca:	f002 fcd3 	bl	8009d74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073d6:	68f9      	ldr	r1, [r7, #12]
 80073d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80073da:	fb01 f303 	mul.w	r3, r1, r3
 80073de:	441a      	add	r2, r3
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2200      	movs	r2, #0
 80073e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073fa:	3b01      	subs	r3, #1
 80073fc:	68f9      	ldr	r1, [r7, #12]
 80073fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007400:	fb01 f303 	mul.w	r3, r1, r3
 8007404:	441a      	add	r2, r3
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	22ff      	movs	r2, #255	; 0xff
 800740e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	22ff      	movs	r2, #255	; 0xff
 8007416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d114      	bne.n	800744a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d01a      	beq.n	800745e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	3310      	adds	r3, #16
 800742c:	4618      	mov	r0, r3
 800742e:	f001 fc87 	bl	8008d40 <xTaskRemoveFromEventList>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d012      	beq.n	800745e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007438:	4b0c      	ldr	r3, [pc, #48]	; (800746c <xQueueGenericReset+0xcc>)
 800743a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800743e:	601a      	str	r2, [r3, #0]
 8007440:	f3bf 8f4f 	dsb	sy
 8007444:	f3bf 8f6f 	isb	sy
 8007448:	e009      	b.n	800745e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	3310      	adds	r3, #16
 800744e:	4618      	mov	r0, r3
 8007450:	f7ff fef2 	bl	8007238 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	3324      	adds	r3, #36	; 0x24
 8007458:	4618      	mov	r0, r3
 800745a:	f7ff feed 	bl	8007238 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800745e:	f002 fcb9 	bl	8009dd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007462:	2301      	movs	r3, #1
}
 8007464:	4618      	mov	r0, r3
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	e000ed04 	.word	0xe000ed04

08007470 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007470:	b580      	push	{r7, lr}
 8007472:	b08e      	sub	sp, #56	; 0x38
 8007474:	af02      	add	r7, sp, #8
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	607a      	str	r2, [r7, #4]
 800747c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d10a      	bne.n	800749a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007488:	f383 8811 	msr	BASEPRI, r3
 800748c:	f3bf 8f6f 	isb	sy
 8007490:	f3bf 8f4f 	dsb	sy
 8007494:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007496:	bf00      	nop
 8007498:	e7fe      	b.n	8007498 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10a      	bne.n	80074b6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80074a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a4:	f383 8811 	msr	BASEPRI, r3
 80074a8:	f3bf 8f6f 	isb	sy
 80074ac:	f3bf 8f4f 	dsb	sy
 80074b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80074b2:	bf00      	nop
 80074b4:	e7fe      	b.n	80074b4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d002      	beq.n	80074c2 <xQueueGenericCreateStatic+0x52>
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d001      	beq.n	80074c6 <xQueueGenericCreateStatic+0x56>
 80074c2:	2301      	movs	r3, #1
 80074c4:	e000      	b.n	80074c8 <xQueueGenericCreateStatic+0x58>
 80074c6:	2300      	movs	r3, #0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10a      	bne.n	80074e2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80074cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d0:	f383 8811 	msr	BASEPRI, r3
 80074d4:	f3bf 8f6f 	isb	sy
 80074d8:	f3bf 8f4f 	dsb	sy
 80074dc:	623b      	str	r3, [r7, #32]
}
 80074de:	bf00      	nop
 80074e0:	e7fe      	b.n	80074e0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d102      	bne.n	80074ee <xQueueGenericCreateStatic+0x7e>
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d101      	bne.n	80074f2 <xQueueGenericCreateStatic+0x82>
 80074ee:	2301      	movs	r3, #1
 80074f0:	e000      	b.n	80074f4 <xQueueGenericCreateStatic+0x84>
 80074f2:	2300      	movs	r3, #0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d10a      	bne.n	800750e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80074f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fc:	f383 8811 	msr	BASEPRI, r3
 8007500:	f3bf 8f6f 	isb	sy
 8007504:	f3bf 8f4f 	dsb	sy
 8007508:	61fb      	str	r3, [r7, #28]
}
 800750a:	bf00      	nop
 800750c:	e7fe      	b.n	800750c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800750e:	2350      	movs	r3, #80	; 0x50
 8007510:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	2b50      	cmp	r3, #80	; 0x50
 8007516:	d00a      	beq.n	800752e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751c:	f383 8811 	msr	BASEPRI, r3
 8007520:	f3bf 8f6f 	isb	sy
 8007524:	f3bf 8f4f 	dsb	sy
 8007528:	61bb      	str	r3, [r7, #24]
}
 800752a:	bf00      	nop
 800752c:	e7fe      	b.n	800752c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800752e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007536:	2b00      	cmp	r3, #0
 8007538:	d00d      	beq.n	8007556 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800753a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800753c:	2201      	movs	r2, #1
 800753e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007542:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007548:	9300      	str	r3, [sp, #0]
 800754a:	4613      	mov	r3, r2
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	68b9      	ldr	r1, [r7, #8]
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f000 f83f 	bl	80075d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007558:	4618      	mov	r0, r3
 800755a:	3730      	adds	r7, #48	; 0x30
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007560:	b580      	push	{r7, lr}
 8007562:	b08a      	sub	sp, #40	; 0x28
 8007564:	af02      	add	r7, sp, #8
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	4613      	mov	r3, r2
 800756c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d10a      	bne.n	800758a <xQueueGenericCreate+0x2a>
	__asm volatile
 8007574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007578:	f383 8811 	msr	BASEPRI, r3
 800757c:	f3bf 8f6f 	isb	sy
 8007580:	f3bf 8f4f 	dsb	sy
 8007584:	613b      	str	r3, [r7, #16]
}
 8007586:	bf00      	nop
 8007588:	e7fe      	b.n	8007588 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	fb02 f303 	mul.w	r3, r2, r3
 8007592:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	3350      	adds	r3, #80	; 0x50
 8007598:	4618      	mov	r0, r3
 800759a:	f002 fd0d 	bl	8009fb8 <pvPortMalloc>
 800759e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d011      	beq.n	80075ca <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	3350      	adds	r3, #80	; 0x50
 80075ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80075b8:	79fa      	ldrb	r2, [r7, #7]
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	9300      	str	r3, [sp, #0]
 80075be:	4613      	mov	r3, r2
 80075c0:	697a      	ldr	r2, [r7, #20]
 80075c2:	68b9      	ldr	r1, [r7, #8]
 80075c4:	68f8      	ldr	r0, [r7, #12]
 80075c6:	f000 f805 	bl	80075d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80075ca:	69bb      	ldr	r3, [r7, #24]
	}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3720      	adds	r7, #32
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	607a      	str	r2, [r7, #4]
 80075e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d103      	bne.n	80075f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	69ba      	ldr	r2, [r7, #24]
 80075ec:	601a      	str	r2, [r3, #0]
 80075ee:	e002      	b.n	80075f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007602:	2101      	movs	r1, #1
 8007604:	69b8      	ldr	r0, [r7, #24]
 8007606:	f7ff fecb 	bl	80073a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	78fa      	ldrb	r2, [r7, #3]
 800760e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007612:	bf00      	nop
 8007614:	3710      	adds	r7, #16
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800761a:	b580      	push	{r7, lr}
 800761c:	b08a      	sub	sp, #40	; 0x28
 800761e:	af02      	add	r7, sp, #8
 8007620:	60f8      	str	r0, [r7, #12]
 8007622:	60b9      	str	r1, [r7, #8]
 8007624:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d10a      	bne.n	8007642 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800762c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007630:	f383 8811 	msr	BASEPRI, r3
 8007634:	f3bf 8f6f 	isb	sy
 8007638:	f3bf 8f4f 	dsb	sy
 800763c:	61bb      	str	r3, [r7, #24]
}
 800763e:	bf00      	nop
 8007640:	e7fe      	b.n	8007640 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007642:	68ba      	ldr	r2, [r7, #8]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	429a      	cmp	r2, r3
 8007648:	d90a      	bls.n	8007660 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800764a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764e:	f383 8811 	msr	BASEPRI, r3
 8007652:	f3bf 8f6f 	isb	sy
 8007656:	f3bf 8f4f 	dsb	sy
 800765a:	617b      	str	r3, [r7, #20]
}
 800765c:	bf00      	nop
 800765e:	e7fe      	b.n	800765e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007660:	2302      	movs	r3, #2
 8007662:	9300      	str	r3, [sp, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	2100      	movs	r1, #0
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f7ff ff00 	bl	8007470 <xQueueGenericCreateStatic>
 8007670:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d002      	beq.n	800767e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	68ba      	ldr	r2, [r7, #8]
 800767c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800767e:	69fb      	ldr	r3, [r7, #28]
	}
 8007680:	4618      	mov	r0, r3
 8007682:	3720      	adds	r7, #32
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007688:	b580      	push	{r7, lr}
 800768a:	b086      	sub	sp, #24
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10a      	bne.n	80076ae <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8007698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769c:	f383 8811 	msr	BASEPRI, r3
 80076a0:	f3bf 8f6f 	isb	sy
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	613b      	str	r3, [r7, #16]
}
 80076aa:	bf00      	nop
 80076ac:	e7fe      	b.n	80076ac <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80076ae:	683a      	ldr	r2, [r7, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d90a      	bls.n	80076cc <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80076b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ba:	f383 8811 	msr	BASEPRI, r3
 80076be:	f3bf 8f6f 	isb	sy
 80076c2:	f3bf 8f4f 	dsb	sy
 80076c6:	60fb      	str	r3, [r7, #12]
}
 80076c8:	bf00      	nop
 80076ca:	e7fe      	b.n	80076ca <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80076cc:	2202      	movs	r2, #2
 80076ce:	2100      	movs	r1, #0
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f7ff ff45 	bl	8007560 <xQueueGenericCreate>
 80076d6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d002      	beq.n	80076e4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	683a      	ldr	r2, [r7, #0]
 80076e2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80076e4:	697b      	ldr	r3, [r7, #20]
	}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3718      	adds	r7, #24
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
	...

080076f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b08e      	sub	sp, #56	; 0x38
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	607a      	str	r2, [r7, #4]
 80076fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80076fe:	2300      	movs	r3, #0
 8007700:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007708:	2b00      	cmp	r3, #0
 800770a:	d10a      	bne.n	8007722 <xQueueGenericSend+0x32>
	__asm volatile
 800770c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007710:	f383 8811 	msr	BASEPRI, r3
 8007714:	f3bf 8f6f 	isb	sy
 8007718:	f3bf 8f4f 	dsb	sy
 800771c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800771e:	bf00      	nop
 8007720:	e7fe      	b.n	8007720 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d103      	bne.n	8007730 <xQueueGenericSend+0x40>
 8007728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772c:	2b00      	cmp	r3, #0
 800772e:	d101      	bne.n	8007734 <xQueueGenericSend+0x44>
 8007730:	2301      	movs	r3, #1
 8007732:	e000      	b.n	8007736 <xQueueGenericSend+0x46>
 8007734:	2300      	movs	r3, #0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d10a      	bne.n	8007750 <xQueueGenericSend+0x60>
	__asm volatile
 800773a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773e:	f383 8811 	msr	BASEPRI, r3
 8007742:	f3bf 8f6f 	isb	sy
 8007746:	f3bf 8f4f 	dsb	sy
 800774a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800774c:	bf00      	nop
 800774e:	e7fe      	b.n	800774e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	2b02      	cmp	r3, #2
 8007754:	d103      	bne.n	800775e <xQueueGenericSend+0x6e>
 8007756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800775a:	2b01      	cmp	r3, #1
 800775c:	d101      	bne.n	8007762 <xQueueGenericSend+0x72>
 800775e:	2301      	movs	r3, #1
 8007760:	e000      	b.n	8007764 <xQueueGenericSend+0x74>
 8007762:	2300      	movs	r3, #0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d10a      	bne.n	800777e <xQueueGenericSend+0x8e>
	__asm volatile
 8007768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776c:	f383 8811 	msr	BASEPRI, r3
 8007770:	f3bf 8f6f 	isb	sy
 8007774:	f3bf 8f4f 	dsb	sy
 8007778:	623b      	str	r3, [r7, #32]
}
 800777a:	bf00      	nop
 800777c:	e7fe      	b.n	800777c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800777e:	f001 fca1 	bl	80090c4 <xTaskGetSchedulerState>
 8007782:	4603      	mov	r3, r0
 8007784:	2b00      	cmp	r3, #0
 8007786:	d102      	bne.n	800778e <xQueueGenericSend+0x9e>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d101      	bne.n	8007792 <xQueueGenericSend+0xa2>
 800778e:	2301      	movs	r3, #1
 8007790:	e000      	b.n	8007794 <xQueueGenericSend+0xa4>
 8007792:	2300      	movs	r3, #0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d10a      	bne.n	80077ae <xQueueGenericSend+0xbe>
	__asm volatile
 8007798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800779c:	f383 8811 	msr	BASEPRI, r3
 80077a0:	f3bf 8f6f 	isb	sy
 80077a4:	f3bf 8f4f 	dsb	sy
 80077a8:	61fb      	str	r3, [r7, #28]
}
 80077aa:	bf00      	nop
 80077ac:	e7fe      	b.n	80077ac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80077ae:	f002 fae1 	bl	8009d74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80077b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d302      	bcc.n	80077c4 <xQueueGenericSend+0xd4>
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d129      	bne.n	8007818 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80077c4:	683a      	ldr	r2, [r7, #0]
 80077c6:	68b9      	ldr	r1, [r7, #8]
 80077c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077ca:	f000 fc9a 	bl	8008102 <prvCopyDataToQueue>
 80077ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d010      	beq.n	80077fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077da:	3324      	adds	r3, #36	; 0x24
 80077dc:	4618      	mov	r0, r3
 80077de:	f001 faaf 	bl	8008d40 <xTaskRemoveFromEventList>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d013      	beq.n	8007810 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80077e8:	4b3f      	ldr	r3, [pc, #252]	; (80078e8 <xQueueGenericSend+0x1f8>)
 80077ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077ee:	601a      	str	r2, [r3, #0]
 80077f0:	f3bf 8f4f 	dsb	sy
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	e00a      	b.n	8007810 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80077fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d007      	beq.n	8007810 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007800:	4b39      	ldr	r3, [pc, #228]	; (80078e8 <xQueueGenericSend+0x1f8>)
 8007802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007806:	601a      	str	r2, [r3, #0]
 8007808:	f3bf 8f4f 	dsb	sy
 800780c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007810:	f002 fae0 	bl	8009dd4 <vPortExitCritical>
				return pdPASS;
 8007814:	2301      	movs	r3, #1
 8007816:	e063      	b.n	80078e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d103      	bne.n	8007826 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800781e:	f002 fad9 	bl	8009dd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007822:	2300      	movs	r3, #0
 8007824:	e05c      	b.n	80078e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007828:	2b00      	cmp	r3, #0
 800782a:	d106      	bne.n	800783a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800782c:	f107 0314 	add.w	r3, r7, #20
 8007830:	4618      	mov	r0, r3
 8007832:	f001 fae9 	bl	8008e08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007836:	2301      	movs	r3, #1
 8007838:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800783a:	f002 facb 	bl	8009dd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800783e:	f001 f855 	bl	80088ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007842:	f002 fa97 	bl	8009d74 <vPortEnterCritical>
 8007846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007848:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800784c:	b25b      	sxtb	r3, r3
 800784e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007852:	d103      	bne.n	800785c <xQueueGenericSend+0x16c>
 8007854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007856:	2200      	movs	r2, #0
 8007858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800785c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007862:	b25b      	sxtb	r3, r3
 8007864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007868:	d103      	bne.n	8007872 <xQueueGenericSend+0x182>
 800786a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786c:	2200      	movs	r2, #0
 800786e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007872:	f002 faaf 	bl	8009dd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007876:	1d3a      	adds	r2, r7, #4
 8007878:	f107 0314 	add.w	r3, r7, #20
 800787c:	4611      	mov	r1, r2
 800787e:	4618      	mov	r0, r3
 8007880:	f001 fad8 	bl	8008e34 <xTaskCheckForTimeOut>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d124      	bne.n	80078d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800788a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800788c:	f000 fd31 	bl	80082f2 <prvIsQueueFull>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d018      	beq.n	80078c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007898:	3310      	adds	r3, #16
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	4611      	mov	r1, r2
 800789e:	4618      	mov	r0, r3
 80078a0:	f001 f9fe 	bl	8008ca0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80078a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078a6:	f000 fcbc 	bl	8008222 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80078aa:	f001 f82d 	bl	8008908 <xTaskResumeAll>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f47f af7c 	bne.w	80077ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80078b6:	4b0c      	ldr	r3, [pc, #48]	; (80078e8 <xQueueGenericSend+0x1f8>)
 80078b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078bc:	601a      	str	r2, [r3, #0]
 80078be:	f3bf 8f4f 	dsb	sy
 80078c2:	f3bf 8f6f 	isb	sy
 80078c6:	e772      	b.n	80077ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80078c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078ca:	f000 fcaa 	bl	8008222 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078ce:	f001 f81b 	bl	8008908 <xTaskResumeAll>
 80078d2:	e76c      	b.n	80077ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80078d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078d6:	f000 fca4 	bl	8008222 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078da:	f001 f815 	bl	8008908 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80078de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3738      	adds	r7, #56	; 0x38
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	e000ed04 	.word	0xe000ed04

080078ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b090      	sub	sp, #64	; 0x40
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	607a      	str	r2, [r7, #4]
 80078f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80078fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007900:	2b00      	cmp	r3, #0
 8007902:	d10a      	bne.n	800791a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007908:	f383 8811 	msr	BASEPRI, r3
 800790c:	f3bf 8f6f 	isb	sy
 8007910:	f3bf 8f4f 	dsb	sy
 8007914:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007916:	bf00      	nop
 8007918:	e7fe      	b.n	8007918 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d103      	bne.n	8007928 <xQueueGenericSendFromISR+0x3c>
 8007920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007924:	2b00      	cmp	r3, #0
 8007926:	d101      	bne.n	800792c <xQueueGenericSendFromISR+0x40>
 8007928:	2301      	movs	r3, #1
 800792a:	e000      	b.n	800792e <xQueueGenericSendFromISR+0x42>
 800792c:	2300      	movs	r3, #0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10a      	bne.n	8007948 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007936:	f383 8811 	msr	BASEPRI, r3
 800793a:	f3bf 8f6f 	isb	sy
 800793e:	f3bf 8f4f 	dsb	sy
 8007942:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007944:	bf00      	nop
 8007946:	e7fe      	b.n	8007946 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	2b02      	cmp	r3, #2
 800794c:	d103      	bne.n	8007956 <xQueueGenericSendFromISR+0x6a>
 800794e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007952:	2b01      	cmp	r3, #1
 8007954:	d101      	bne.n	800795a <xQueueGenericSendFromISR+0x6e>
 8007956:	2301      	movs	r3, #1
 8007958:	e000      	b.n	800795c <xQueueGenericSendFromISR+0x70>
 800795a:	2300      	movs	r3, #0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d10a      	bne.n	8007976 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	623b      	str	r3, [r7, #32]
}
 8007972:	bf00      	nop
 8007974:	e7fe      	b.n	8007974 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007976:	f002 fadf 	bl	8009f38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800797a:	f3ef 8211 	mrs	r2, BASEPRI
 800797e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007982:	f383 8811 	msr	BASEPRI, r3
 8007986:	f3bf 8f6f 	isb	sy
 800798a:	f3bf 8f4f 	dsb	sy
 800798e:	61fa      	str	r2, [r7, #28]
 8007990:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007992:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007994:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007998:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800799a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800799c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800799e:	429a      	cmp	r2, r3
 80079a0:	d302      	bcc.n	80079a8 <xQueueGenericSendFromISR+0xbc>
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d12f      	bne.n	8007a08 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80079a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80079b8:	683a      	ldr	r2, [r7, #0]
 80079ba:	68b9      	ldr	r1, [r7, #8]
 80079bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80079be:	f000 fba0 	bl	8008102 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80079c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80079c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ca:	d112      	bne.n	80079f2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d016      	beq.n	8007a02 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d6:	3324      	adds	r3, #36	; 0x24
 80079d8:	4618      	mov	r0, r3
 80079da:	f001 f9b1 	bl	8008d40 <xTaskRemoveFromEventList>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00e      	beq.n	8007a02 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00b      	beq.n	8007a02 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2201      	movs	r2, #1
 80079ee:	601a      	str	r2, [r3, #0]
 80079f0:	e007      	b.n	8007a02 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80079f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80079f6:	3301      	adds	r3, #1
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	b25a      	sxtb	r2, r3
 80079fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007a02:	2301      	movs	r3, #1
 8007a04:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007a06:	e001      	b.n	8007a0c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a0e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007a16:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3740      	adds	r7, #64	; 0x40
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b08e      	sub	sp, #56	; 0x38
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
 8007a2a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10a      	bne.n	8007a4c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a3a:	f383 8811 	msr	BASEPRI, r3
 8007a3e:	f3bf 8f6f 	isb	sy
 8007a42:	f3bf 8f4f 	dsb	sy
 8007a46:	623b      	str	r3, [r7, #32]
}
 8007a48:	bf00      	nop
 8007a4a:	e7fe      	b.n	8007a4a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00a      	beq.n	8007a6a <xQueueGiveFromISR+0x48>
	__asm volatile
 8007a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a58:	f383 8811 	msr	BASEPRI, r3
 8007a5c:	f3bf 8f6f 	isb	sy
 8007a60:	f3bf 8f4f 	dsb	sy
 8007a64:	61fb      	str	r3, [r7, #28]
}
 8007a66:	bf00      	nop
 8007a68:	e7fe      	b.n	8007a68 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d103      	bne.n	8007a7a <xQueueGiveFromISR+0x58>
 8007a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d101      	bne.n	8007a7e <xQueueGiveFromISR+0x5c>
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e000      	b.n	8007a80 <xQueueGiveFromISR+0x5e>
 8007a7e:	2300      	movs	r3, #0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10a      	bne.n	8007a9a <xQueueGiveFromISR+0x78>
	__asm volatile
 8007a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a88:	f383 8811 	msr	BASEPRI, r3
 8007a8c:	f3bf 8f6f 	isb	sy
 8007a90:	f3bf 8f4f 	dsb	sy
 8007a94:	61bb      	str	r3, [r7, #24]
}
 8007a96:	bf00      	nop
 8007a98:	e7fe      	b.n	8007a98 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a9a:	f002 fa4d 	bl	8009f38 <vPortValidateInterruptPriority>
	__asm volatile
 8007a9e:	f3ef 8211 	mrs	r2, BASEPRI
 8007aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa6:	f383 8811 	msr	BASEPRI, r3
 8007aaa:	f3bf 8f6f 	isb	sy
 8007aae:	f3bf 8f4f 	dsb	sy
 8007ab2:	617a      	str	r2, [r7, #20]
 8007ab4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007ab6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007abe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d22b      	bcs.n	8007b22 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007acc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad6:	1c5a      	adds	r2, r3, #1
 8007ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ada:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007adc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae4:	d112      	bne.n	8007b0c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d016      	beq.n	8007b1c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af0:	3324      	adds	r3, #36	; 0x24
 8007af2:	4618      	mov	r0, r3
 8007af4:	f001 f924 	bl	8008d40 <xTaskRemoveFromEventList>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00e      	beq.n	8007b1c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00b      	beq.n	8007b1c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	2201      	movs	r2, #1
 8007b08:	601a      	str	r2, [r3, #0]
 8007b0a:	e007      	b.n	8007b1c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b10:	3301      	adds	r3, #1
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	b25a      	sxtb	r2, r3
 8007b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b20:	e001      	b.n	8007b26 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b22:	2300      	movs	r3, #0
 8007b24:	637b      	str	r3, [r7, #52]	; 0x34
 8007b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b28:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f383 8811 	msr	BASEPRI, r3
}
 8007b30:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3738      	adds	r7, #56	; 0x38
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b08c      	sub	sp, #48	; 0x30
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d10a      	bne.n	8007b6c <xQueueReceive+0x30>
	__asm volatile
 8007b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5a:	f383 8811 	msr	BASEPRI, r3
 8007b5e:	f3bf 8f6f 	isb	sy
 8007b62:	f3bf 8f4f 	dsb	sy
 8007b66:	623b      	str	r3, [r7, #32]
}
 8007b68:	bf00      	nop
 8007b6a:	e7fe      	b.n	8007b6a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d103      	bne.n	8007b7a <xQueueReceive+0x3e>
 8007b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d101      	bne.n	8007b7e <xQueueReceive+0x42>
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e000      	b.n	8007b80 <xQueueReceive+0x44>
 8007b7e:	2300      	movs	r3, #0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d10a      	bne.n	8007b9a <xQueueReceive+0x5e>
	__asm volatile
 8007b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b88:	f383 8811 	msr	BASEPRI, r3
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	f3bf 8f4f 	dsb	sy
 8007b94:	61fb      	str	r3, [r7, #28]
}
 8007b96:	bf00      	nop
 8007b98:	e7fe      	b.n	8007b98 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b9a:	f001 fa93 	bl	80090c4 <xTaskGetSchedulerState>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d102      	bne.n	8007baa <xQueueReceive+0x6e>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d101      	bne.n	8007bae <xQueueReceive+0x72>
 8007baa:	2301      	movs	r3, #1
 8007bac:	e000      	b.n	8007bb0 <xQueueReceive+0x74>
 8007bae:	2300      	movs	r3, #0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d10a      	bne.n	8007bca <xQueueReceive+0x8e>
	__asm volatile
 8007bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb8:	f383 8811 	msr	BASEPRI, r3
 8007bbc:	f3bf 8f6f 	isb	sy
 8007bc0:	f3bf 8f4f 	dsb	sy
 8007bc4:	61bb      	str	r3, [r7, #24]
}
 8007bc6:	bf00      	nop
 8007bc8:	e7fe      	b.n	8007bc8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007bca:	f002 f8d3 	bl	8009d74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d01f      	beq.n	8007c1a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007bda:	68b9      	ldr	r1, [r7, #8]
 8007bdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bde:	f000 fafa 	bl	80081d6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be4:	1e5a      	subs	r2, r3, #1
 8007be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d00f      	beq.n	8007c12 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf4:	3310      	adds	r3, #16
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f001 f8a2 	bl	8008d40 <xTaskRemoveFromEventList>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d007      	beq.n	8007c12 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007c02:	4b3d      	ldr	r3, [pc, #244]	; (8007cf8 <xQueueReceive+0x1bc>)
 8007c04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c08:	601a      	str	r2, [r3, #0]
 8007c0a:	f3bf 8f4f 	dsb	sy
 8007c0e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c12:	f002 f8df 	bl	8009dd4 <vPortExitCritical>
				return pdPASS;
 8007c16:	2301      	movs	r3, #1
 8007c18:	e069      	b.n	8007cee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d103      	bne.n	8007c28 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c20:	f002 f8d8 	bl	8009dd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c24:	2300      	movs	r3, #0
 8007c26:	e062      	b.n	8007cee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d106      	bne.n	8007c3c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c2e:	f107 0310 	add.w	r3, r7, #16
 8007c32:	4618      	mov	r0, r3
 8007c34:	f001 f8e8 	bl	8008e08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c3c:	f002 f8ca 	bl	8009dd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c40:	f000 fe54 	bl	80088ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c44:	f002 f896 	bl	8009d74 <vPortEnterCritical>
 8007c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c4e:	b25b      	sxtb	r3, r3
 8007c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c54:	d103      	bne.n	8007c5e <xQueueReceive+0x122>
 8007c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c64:	b25b      	sxtb	r3, r3
 8007c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c6a:	d103      	bne.n	8007c74 <xQueueReceive+0x138>
 8007c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c74:	f002 f8ae 	bl	8009dd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c78:	1d3a      	adds	r2, r7, #4
 8007c7a:	f107 0310 	add.w	r3, r7, #16
 8007c7e:	4611      	mov	r1, r2
 8007c80:	4618      	mov	r0, r3
 8007c82:	f001 f8d7 	bl	8008e34 <xTaskCheckForTimeOut>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d123      	bne.n	8007cd4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c8e:	f000 fb1a 	bl	80082c6 <prvIsQueueEmpty>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d017      	beq.n	8007cc8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9a:	3324      	adds	r3, #36	; 0x24
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	4611      	mov	r1, r2
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f000 fffd 	bl	8008ca0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007ca6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ca8:	f000 fabb 	bl	8008222 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007cac:	f000 fe2c 	bl	8008908 <xTaskResumeAll>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d189      	bne.n	8007bca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007cb6:	4b10      	ldr	r3, [pc, #64]	; (8007cf8 <xQueueReceive+0x1bc>)
 8007cb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cbc:	601a      	str	r2, [r3, #0]
 8007cbe:	f3bf 8f4f 	dsb	sy
 8007cc2:	f3bf 8f6f 	isb	sy
 8007cc6:	e780      	b.n	8007bca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007cc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cca:	f000 faaa 	bl	8008222 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007cce:	f000 fe1b 	bl	8008908 <xTaskResumeAll>
 8007cd2:	e77a      	b.n	8007bca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007cd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cd6:	f000 faa4 	bl	8008222 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007cda:	f000 fe15 	bl	8008908 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007cde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ce0:	f000 faf1 	bl	80082c6 <prvIsQueueEmpty>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	f43f af6f 	beq.w	8007bca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007cec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3730      	adds	r7, #48	; 0x30
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	e000ed04 	.word	0xe000ed04

08007cfc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b08e      	sub	sp, #56	; 0x38
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d06:	2300      	movs	r3, #0
 8007d08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d10a      	bne.n	8007d2e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1c:	f383 8811 	msr	BASEPRI, r3
 8007d20:	f3bf 8f6f 	isb	sy
 8007d24:	f3bf 8f4f 	dsb	sy
 8007d28:	623b      	str	r3, [r7, #32]
}
 8007d2a:	bf00      	nop
 8007d2c:	e7fe      	b.n	8007d2c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00a      	beq.n	8007d4c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d3a:	f383 8811 	msr	BASEPRI, r3
 8007d3e:	f3bf 8f6f 	isb	sy
 8007d42:	f3bf 8f4f 	dsb	sy
 8007d46:	61fb      	str	r3, [r7, #28]
}
 8007d48:	bf00      	nop
 8007d4a:	e7fe      	b.n	8007d4a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d4c:	f001 f9ba 	bl	80090c4 <xTaskGetSchedulerState>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d102      	bne.n	8007d5c <xQueueSemaphoreTake+0x60>
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d101      	bne.n	8007d60 <xQueueSemaphoreTake+0x64>
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e000      	b.n	8007d62 <xQueueSemaphoreTake+0x66>
 8007d60:	2300      	movs	r3, #0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d10a      	bne.n	8007d7c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6a:	f383 8811 	msr	BASEPRI, r3
 8007d6e:	f3bf 8f6f 	isb	sy
 8007d72:	f3bf 8f4f 	dsb	sy
 8007d76:	61bb      	str	r3, [r7, #24]
}
 8007d78:	bf00      	nop
 8007d7a:	e7fe      	b.n	8007d7a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d7c:	f001 fffa 	bl	8009d74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d84:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d024      	beq.n	8007dd6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8e:	1e5a      	subs	r2, r3, #1
 8007d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d92:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d104      	bne.n	8007da6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007d9c:	f001 fb08 	bl	80093b0 <pvTaskIncrementMutexHeldCount>
 8007da0:	4602      	mov	r2, r0
 8007da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00f      	beq.n	8007dce <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db0:	3310      	adds	r3, #16
 8007db2:	4618      	mov	r0, r3
 8007db4:	f000 ffc4 	bl	8008d40 <xTaskRemoveFromEventList>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d007      	beq.n	8007dce <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007dbe:	4b54      	ldr	r3, [pc, #336]	; (8007f10 <xQueueSemaphoreTake+0x214>)
 8007dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dc4:	601a      	str	r2, [r3, #0]
 8007dc6:	f3bf 8f4f 	dsb	sy
 8007dca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007dce:	f002 f801 	bl	8009dd4 <vPortExitCritical>
				return pdPASS;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e097      	b.n	8007f06 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d111      	bne.n	8007e00 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00a      	beq.n	8007df8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de6:	f383 8811 	msr	BASEPRI, r3
 8007dea:	f3bf 8f6f 	isb	sy
 8007dee:	f3bf 8f4f 	dsb	sy
 8007df2:	617b      	str	r3, [r7, #20]
}
 8007df4:	bf00      	nop
 8007df6:	e7fe      	b.n	8007df6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007df8:	f001 ffec 	bl	8009dd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	e082      	b.n	8007f06 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d106      	bne.n	8007e14 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e06:	f107 030c 	add.w	r3, r7, #12
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f000 fffc 	bl	8008e08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e10:	2301      	movs	r3, #1
 8007e12:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e14:	f001 ffde 	bl	8009dd4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e18:	f000 fd68 	bl	80088ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e1c:	f001 ffaa 	bl	8009d74 <vPortEnterCritical>
 8007e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e26:	b25b      	sxtb	r3, r3
 8007e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e2c:	d103      	bne.n	8007e36 <xQueueSemaphoreTake+0x13a>
 8007e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e3c:	b25b      	sxtb	r3, r3
 8007e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e42:	d103      	bne.n	8007e4c <xQueueSemaphoreTake+0x150>
 8007e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e4c:	f001 ffc2 	bl	8009dd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e50:	463a      	mov	r2, r7
 8007e52:	f107 030c 	add.w	r3, r7, #12
 8007e56:	4611      	mov	r1, r2
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f000 ffeb 	bl	8008e34 <xTaskCheckForTimeOut>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d132      	bne.n	8007eca <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e66:	f000 fa2e 	bl	80082c6 <prvIsQueueEmpty>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d026      	beq.n	8007ebe <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d109      	bne.n	8007e8c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007e78:	f001 ff7c 	bl	8009d74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	4618      	mov	r0, r3
 8007e82:	f001 f93d 	bl	8009100 <xTaskPriorityInherit>
 8007e86:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007e88:	f001 ffa4 	bl	8009dd4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8e:	3324      	adds	r3, #36	; 0x24
 8007e90:	683a      	ldr	r2, [r7, #0]
 8007e92:	4611      	mov	r1, r2
 8007e94:	4618      	mov	r0, r3
 8007e96:	f000 ff03 	bl	8008ca0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e9c:	f000 f9c1 	bl	8008222 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007ea0:	f000 fd32 	bl	8008908 <xTaskResumeAll>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f47f af68 	bne.w	8007d7c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007eac:	4b18      	ldr	r3, [pc, #96]	; (8007f10 <xQueueSemaphoreTake+0x214>)
 8007eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eb2:	601a      	str	r2, [r3, #0]
 8007eb4:	f3bf 8f4f 	dsb	sy
 8007eb8:	f3bf 8f6f 	isb	sy
 8007ebc:	e75e      	b.n	8007d7c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007ebe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ec0:	f000 f9af 	bl	8008222 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ec4:	f000 fd20 	bl	8008908 <xTaskResumeAll>
 8007ec8:	e758      	b.n	8007d7c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007eca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ecc:	f000 f9a9 	bl	8008222 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ed0:	f000 fd1a 	bl	8008908 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ed4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ed6:	f000 f9f6 	bl	80082c6 <prvIsQueueEmpty>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f43f af4d 	beq.w	8007d7c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00d      	beq.n	8007f04 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007ee8:	f001 ff44 	bl	8009d74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007eec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007eee:	f000 f8f0 	bl	80080d2 <prvGetDisinheritPriorityAfterTimeout>
 8007ef2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007efa:	4618      	mov	r0, r3
 8007efc:	f001 f9d6 	bl	80092ac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007f00:	f001 ff68 	bl	8009dd4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007f04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3738      	adds	r7, #56	; 0x38
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	e000ed04 	.word	0xe000ed04

08007f14 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b08e      	sub	sp, #56	; 0x38
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d10a      	bne.n	8007f40 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2e:	f383 8811 	msr	BASEPRI, r3
 8007f32:	f3bf 8f6f 	isb	sy
 8007f36:	f3bf 8f4f 	dsb	sy
 8007f3a:	623b      	str	r3, [r7, #32]
}
 8007f3c:	bf00      	nop
 8007f3e:	e7fe      	b.n	8007f3e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d103      	bne.n	8007f4e <xQueueReceiveFromISR+0x3a>
 8007f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d101      	bne.n	8007f52 <xQueueReceiveFromISR+0x3e>
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e000      	b.n	8007f54 <xQueueReceiveFromISR+0x40>
 8007f52:	2300      	movs	r3, #0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d10a      	bne.n	8007f6e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5c:	f383 8811 	msr	BASEPRI, r3
 8007f60:	f3bf 8f6f 	isb	sy
 8007f64:	f3bf 8f4f 	dsb	sy
 8007f68:	61fb      	str	r3, [r7, #28]
}
 8007f6a:	bf00      	nop
 8007f6c:	e7fe      	b.n	8007f6c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f6e:	f001 ffe3 	bl	8009f38 <vPortValidateInterruptPriority>
	__asm volatile
 8007f72:	f3ef 8211 	mrs	r2, BASEPRI
 8007f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f7a:	f383 8811 	msr	BASEPRI, r3
 8007f7e:	f3bf 8f6f 	isb	sy
 8007f82:	f3bf 8f4f 	dsb	sy
 8007f86:	61ba      	str	r2, [r7, #24]
 8007f88:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007f8a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f92:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d02f      	beq.n	8007ffa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007fa4:	68b9      	ldr	r1, [r7, #8]
 8007fa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fa8:	f000 f915 	bl	80081d6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fae:	1e5a      	subs	r2, r3, #1
 8007fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007fb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fbc:	d112      	bne.n	8007fe4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d016      	beq.n	8007ff4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc8:	3310      	adds	r3, #16
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f000 feb8 	bl	8008d40 <xTaskRemoveFromEventList>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00e      	beq.n	8007ff4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d00b      	beq.n	8007ff4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	601a      	str	r2, [r3, #0]
 8007fe2:	e007      	b.n	8007ff4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007fe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fe8:	3301      	adds	r3, #1
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	b25a      	sxtb	r2, r3
 8007fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ff8:	e001      	b.n	8007ffe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	637b      	str	r3, [r7, #52]	; 0x34
 8007ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008000:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	f383 8811 	msr	BASEPRI, r3
}
 8008008:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800800a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800800c:	4618      	mov	r0, r3
 800800e:	3738      	adds	r7, #56	; 0x38
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d10a      	bne.n	8008038 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8008022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008026:	f383 8811 	msr	BASEPRI, r3
 800802a:	f3bf 8f6f 	isb	sy
 800802e:	f3bf 8f4f 	dsb	sy
 8008032:	60bb      	str	r3, [r7, #8]
}
 8008034:	bf00      	nop
 8008036:	e7fe      	b.n	8008036 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8008038:	f001 fe9c 	bl	8009d74 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008040:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8008042:	f001 fec7 	bl	8009dd4 <vPortExitCritical>

	return uxReturn;
 8008046:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008048:	4618      	mov	r0, r3
 800804a:	3710      	adds	r7, #16
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8008050:	b480      	push	{r7}
 8008052:	b087      	sub	sp, #28
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d10a      	bne.n	8008078 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8008062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008066:	f383 8811 	msr	BASEPRI, r3
 800806a:	f3bf 8f6f 	isb	sy
 800806e:	f3bf 8f4f 	dsb	sy
 8008072:	60fb      	str	r3, [r7, #12]
}
 8008074:	bf00      	nop
 8008076:	e7fe      	b.n	8008076 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800807e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008080:	4618      	mov	r0, r3
 8008082:	371c      	adds	r7, #28
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d10a      	bne.n	80080b4 <vQueueDelete+0x28>
	__asm volatile
 800809e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a2:	f383 8811 	msr	BASEPRI, r3
 80080a6:	f3bf 8f6f 	isb	sy
 80080aa:	f3bf 8f4f 	dsb	sy
 80080ae:	60bb      	str	r3, [r7, #8]
}
 80080b0:	bf00      	nop
 80080b2:	e7fe      	b.n	80080b2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80080b4:	68f8      	ldr	r0, [r7, #12]
 80080b6:	f000 f95f 	bl	8008378 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d102      	bne.n	80080ca <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f002 f843 	bl	800a150 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80080ca:	bf00      	nop
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80080d2:	b480      	push	{r7}
 80080d4:	b085      	sub	sp, #20
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d006      	beq.n	80080f0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80080ec:	60fb      	str	r3, [r7, #12]
 80080ee:	e001      	b.n	80080f4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80080f0:	2300      	movs	r3, #0
 80080f2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80080f4:	68fb      	ldr	r3, [r7, #12]
	}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3714      	adds	r7, #20
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr

08008102 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b086      	sub	sp, #24
 8008106:	af00      	add	r7, sp, #0
 8008108:	60f8      	str	r0, [r7, #12]
 800810a:	60b9      	str	r1, [r7, #8]
 800810c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800810e:	2300      	movs	r3, #0
 8008110:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008116:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800811c:	2b00      	cmp	r3, #0
 800811e:	d10d      	bne.n	800813c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d14d      	bne.n	80081c4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	4618      	mov	r0, r3
 800812e:	f001 f84f 	bl	80091d0 <xTaskPriorityDisinherit>
 8008132:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2200      	movs	r2, #0
 8008138:	609a      	str	r2, [r3, #8]
 800813a:	e043      	b.n	80081c4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d119      	bne.n	8008176 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	6858      	ldr	r0, [r3, #4]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814a:	461a      	mov	r2, r3
 800814c:	68b9      	ldr	r1, [r7, #8]
 800814e:	f002 ff82 	bl	800b056 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	685a      	ldr	r2, [r3, #4]
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815a:	441a      	add	r2, r3
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	685a      	ldr	r2, [r3, #4]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	429a      	cmp	r2, r3
 800816a:	d32b      	bcc.n	80081c4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	605a      	str	r2, [r3, #4]
 8008174:	e026      	b.n	80081c4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	68d8      	ldr	r0, [r3, #12]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800817e:	461a      	mov	r2, r3
 8008180:	68b9      	ldr	r1, [r7, #8]
 8008182:	f002 ff68 	bl	800b056 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	68da      	ldr	r2, [r3, #12]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818e:	425b      	negs	r3, r3
 8008190:	441a      	add	r2, r3
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	68da      	ldr	r2, [r3, #12]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d207      	bcs.n	80081b2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	689a      	ldr	r2, [r3, #8]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081aa:	425b      	negs	r3, r3
 80081ac:	441a      	add	r2, r3
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2b02      	cmp	r3, #2
 80081b6:	d105      	bne.n	80081c4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d002      	beq.n	80081c4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	3b01      	subs	r3, #1
 80081c2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	1c5a      	adds	r2, r3, #1
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80081cc:	697b      	ldr	r3, [r7, #20]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3718      	adds	r7, #24
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b082      	sub	sp, #8
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
 80081de:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d018      	beq.n	800821a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	68da      	ldr	r2, [r3, #12]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f0:	441a      	add	r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	68da      	ldr	r2, [r3, #12]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d303      	bcc.n	800820a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	68d9      	ldr	r1, [r3, #12]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008212:	461a      	mov	r2, r3
 8008214:	6838      	ldr	r0, [r7, #0]
 8008216:	f002 ff1e 	bl	800b056 <memcpy>
	}
}
 800821a:	bf00      	nop
 800821c:	3708      	adds	r7, #8
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008222:	b580      	push	{r7, lr}
 8008224:	b084      	sub	sp, #16
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800822a:	f001 fda3 	bl	8009d74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008234:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008236:	e011      	b.n	800825c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823c:	2b00      	cmp	r3, #0
 800823e:	d012      	beq.n	8008266 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	3324      	adds	r3, #36	; 0x24
 8008244:	4618      	mov	r0, r3
 8008246:	f000 fd7b 	bl	8008d40 <xTaskRemoveFromEventList>
 800824a:	4603      	mov	r3, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d001      	beq.n	8008254 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008250:	f000 fe52 	bl	8008ef8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008254:	7bfb      	ldrb	r3, [r7, #15]
 8008256:	3b01      	subs	r3, #1
 8008258:	b2db      	uxtb	r3, r3
 800825a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800825c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008260:	2b00      	cmp	r3, #0
 8008262:	dce9      	bgt.n	8008238 <prvUnlockQueue+0x16>
 8008264:	e000      	b.n	8008268 <prvUnlockQueue+0x46>
					break;
 8008266:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	22ff      	movs	r2, #255	; 0xff
 800826c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008270:	f001 fdb0 	bl	8009dd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008274:	f001 fd7e 	bl	8009d74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800827e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008280:	e011      	b.n	80082a6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d012      	beq.n	80082b0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	3310      	adds	r3, #16
 800828e:	4618      	mov	r0, r3
 8008290:	f000 fd56 	bl	8008d40 <xTaskRemoveFromEventList>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d001      	beq.n	800829e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800829a:	f000 fe2d 	bl	8008ef8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800829e:	7bbb      	ldrb	r3, [r7, #14]
 80082a0:	3b01      	subs	r3, #1
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	dce9      	bgt.n	8008282 <prvUnlockQueue+0x60>
 80082ae:	e000      	b.n	80082b2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80082b0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	22ff      	movs	r2, #255	; 0xff
 80082b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80082ba:	f001 fd8b 	bl	8009dd4 <vPortExitCritical>
}
 80082be:	bf00      	nop
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b084      	sub	sp, #16
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80082ce:	f001 fd51 	bl	8009d74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d102      	bne.n	80082e0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80082da:	2301      	movs	r3, #1
 80082dc:	60fb      	str	r3, [r7, #12]
 80082de:	e001      	b.n	80082e4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80082e0:	2300      	movs	r3, #0
 80082e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80082e4:	f001 fd76 	bl	8009dd4 <vPortExitCritical>

	return xReturn;
 80082e8:	68fb      	ldr	r3, [r7, #12]
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3710      	adds	r7, #16
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b084      	sub	sp, #16
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80082fa:	f001 fd3b 	bl	8009d74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008306:	429a      	cmp	r2, r3
 8008308:	d102      	bne.n	8008310 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800830a:	2301      	movs	r3, #1
 800830c:	60fb      	str	r3, [r7, #12]
 800830e:	e001      	b.n	8008314 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008310:	2300      	movs	r3, #0
 8008312:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008314:	f001 fd5e 	bl	8009dd4 <vPortExitCritical>

	return xReturn;
 8008318:	68fb      	ldr	r3, [r7, #12]
}
 800831a:	4618      	mov	r0, r3
 800831c:	3710      	adds	r7, #16
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
	...

08008324 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008324:	b480      	push	{r7}
 8008326:	b085      	sub	sp, #20
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800832e:	2300      	movs	r3, #0
 8008330:	60fb      	str	r3, [r7, #12]
 8008332:	e014      	b.n	800835e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008334:	4a0f      	ldr	r2, [pc, #60]	; (8008374 <vQueueAddToRegistry+0x50>)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d10b      	bne.n	8008358 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008340:	490c      	ldr	r1, [pc, #48]	; (8008374 <vQueueAddToRegistry+0x50>)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	683a      	ldr	r2, [r7, #0]
 8008346:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800834a:	4a0a      	ldr	r2, [pc, #40]	; (8008374 <vQueueAddToRegistry+0x50>)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	00db      	lsls	r3, r3, #3
 8008350:	4413      	add	r3, r2
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008356:	e006      	b.n	8008366 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	3301      	adds	r3, #1
 800835c:	60fb      	str	r3, [r7, #12]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2b07      	cmp	r3, #7
 8008362:	d9e7      	bls.n	8008334 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008364:	bf00      	nop
 8008366:	bf00      	nop
 8008368:	3714      	adds	r7, #20
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	20000b44 	.word	0x20000b44

08008378 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008380:	2300      	movs	r3, #0
 8008382:	60fb      	str	r3, [r7, #12]
 8008384:	e016      	b.n	80083b4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008386:	4a10      	ldr	r2, [pc, #64]	; (80083c8 <vQueueUnregisterQueue+0x50>)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	00db      	lsls	r3, r3, #3
 800838c:	4413      	add	r3, r2
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	429a      	cmp	r2, r3
 8008394:	d10b      	bne.n	80083ae <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008396:	4a0c      	ldr	r2, [pc, #48]	; (80083c8 <vQueueUnregisterQueue+0x50>)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2100      	movs	r1, #0
 800839c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80083a0:	4a09      	ldr	r2, [pc, #36]	; (80083c8 <vQueueUnregisterQueue+0x50>)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	00db      	lsls	r3, r3, #3
 80083a6:	4413      	add	r3, r2
 80083a8:	2200      	movs	r2, #0
 80083aa:	605a      	str	r2, [r3, #4]
				break;
 80083ac:	e006      	b.n	80083bc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	3301      	adds	r3, #1
 80083b2:	60fb      	str	r3, [r7, #12]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2b07      	cmp	r3, #7
 80083b8:	d9e5      	bls.n	8008386 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80083ba:	bf00      	nop
 80083bc:	bf00      	nop
 80083be:	3714      	adds	r7, #20
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr
 80083c8:	20000b44 	.word	0x20000b44

080083cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b086      	sub	sp, #24
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80083dc:	f001 fcca 	bl	8009d74 <vPortEnterCritical>
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083e6:	b25b      	sxtb	r3, r3
 80083e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ec:	d103      	bne.n	80083f6 <vQueueWaitForMessageRestricted+0x2a>
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083fc:	b25b      	sxtb	r3, r3
 80083fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008402:	d103      	bne.n	800840c <vQueueWaitForMessageRestricted+0x40>
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	2200      	movs	r2, #0
 8008408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800840c:	f001 fce2 	bl	8009dd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008414:	2b00      	cmp	r3, #0
 8008416:	d106      	bne.n	8008426 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	3324      	adds	r3, #36	; 0x24
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	68b9      	ldr	r1, [r7, #8]
 8008420:	4618      	mov	r0, r3
 8008422:	f000 fc61 	bl	8008ce8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008426:	6978      	ldr	r0, [r7, #20]
 8008428:	f7ff fefb 	bl	8008222 <prvUnlockQueue>
	}
 800842c:	bf00      	nop
 800842e:	3718      	adds	r7, #24
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008434:	b580      	push	{r7, lr}
 8008436:	b08e      	sub	sp, #56	; 0x38
 8008438:	af04      	add	r7, sp, #16
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	607a      	str	r2, [r7, #4]
 8008440:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008444:	2b00      	cmp	r3, #0
 8008446:	d10a      	bne.n	800845e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844c:	f383 8811 	msr	BASEPRI, r3
 8008450:	f3bf 8f6f 	isb	sy
 8008454:	f3bf 8f4f 	dsb	sy
 8008458:	623b      	str	r3, [r7, #32]
}
 800845a:	bf00      	nop
 800845c:	e7fe      	b.n	800845c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800845e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008460:	2b00      	cmp	r3, #0
 8008462:	d10a      	bne.n	800847a <xTaskCreateStatic+0x46>
	__asm volatile
 8008464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008468:	f383 8811 	msr	BASEPRI, r3
 800846c:	f3bf 8f6f 	isb	sy
 8008470:	f3bf 8f4f 	dsb	sy
 8008474:	61fb      	str	r3, [r7, #28]
}
 8008476:	bf00      	nop
 8008478:	e7fe      	b.n	8008478 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800847a:	23b8      	movs	r3, #184	; 0xb8
 800847c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	2bb8      	cmp	r3, #184	; 0xb8
 8008482:	d00a      	beq.n	800849a <xTaskCreateStatic+0x66>
	__asm volatile
 8008484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008488:	f383 8811 	msr	BASEPRI, r3
 800848c:	f3bf 8f6f 	isb	sy
 8008490:	f3bf 8f4f 	dsb	sy
 8008494:	61bb      	str	r3, [r7, #24]
}
 8008496:	bf00      	nop
 8008498:	e7fe      	b.n	8008498 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800849a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800849c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d01e      	beq.n	80084e0 <xTaskCreateStatic+0xac>
 80084a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d01b      	beq.n	80084e0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80084ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80084b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b4:	2202      	movs	r2, #2
 80084b6:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80084ba:	2300      	movs	r3, #0
 80084bc:	9303      	str	r3, [sp, #12]
 80084be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c0:	9302      	str	r3, [sp, #8]
 80084c2:	f107 0314 	add.w	r3, r7, #20
 80084c6:	9301      	str	r3, [sp, #4]
 80084c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ca:	9300      	str	r3, [sp, #0]
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	68b9      	ldr	r1, [r7, #8]
 80084d2:	68f8      	ldr	r0, [r7, #12]
 80084d4:	f000 f850 	bl	8008578 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084da:	f000 f8f3 	bl	80086c4 <prvAddNewTaskToReadyList>
 80084de:	e001      	b.n	80084e4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80084e0:	2300      	movs	r3, #0
 80084e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80084e4:	697b      	ldr	r3, [r7, #20]
	}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3728      	adds	r7, #40	; 0x28
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}

080084ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80084ee:	b580      	push	{r7, lr}
 80084f0:	b08c      	sub	sp, #48	; 0x30
 80084f2:	af04      	add	r7, sp, #16
 80084f4:	60f8      	str	r0, [r7, #12]
 80084f6:	60b9      	str	r1, [r7, #8]
 80084f8:	603b      	str	r3, [r7, #0]
 80084fa:	4613      	mov	r3, r2
 80084fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80084fe:	88fb      	ldrh	r3, [r7, #6]
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	4618      	mov	r0, r3
 8008504:	f001 fd58 	bl	8009fb8 <pvPortMalloc>
 8008508:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d00e      	beq.n	800852e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008510:	20b8      	movs	r0, #184	; 0xb8
 8008512:	f001 fd51 	bl	8009fb8 <pvPortMalloc>
 8008516:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d003      	beq.n	8008526 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	697a      	ldr	r2, [r7, #20]
 8008522:	631a      	str	r2, [r3, #48]	; 0x30
 8008524:	e005      	b.n	8008532 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008526:	6978      	ldr	r0, [r7, #20]
 8008528:	f001 fe12 	bl	800a150 <vPortFree>
 800852c:	e001      	b.n	8008532 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800852e:	2300      	movs	r3, #0
 8008530:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d017      	beq.n	8008568 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	2200      	movs	r2, #0
 800853c:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008540:	88fa      	ldrh	r2, [r7, #6]
 8008542:	2300      	movs	r3, #0
 8008544:	9303      	str	r3, [sp, #12]
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	9302      	str	r3, [sp, #8]
 800854a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800854c:	9301      	str	r3, [sp, #4]
 800854e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008550:	9300      	str	r3, [sp, #0]
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	68b9      	ldr	r1, [r7, #8]
 8008556:	68f8      	ldr	r0, [r7, #12]
 8008558:	f000 f80e 	bl	8008578 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800855c:	69f8      	ldr	r0, [r7, #28]
 800855e:	f000 f8b1 	bl	80086c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008562:	2301      	movs	r3, #1
 8008564:	61bb      	str	r3, [r7, #24]
 8008566:	e002      	b.n	800856e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008568:	f04f 33ff 	mov.w	r3, #4294967295
 800856c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800856e:	69bb      	ldr	r3, [r7, #24]
	}
 8008570:	4618      	mov	r0, r3
 8008572:	3720      	adds	r7, #32
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b088      	sub	sp, #32
 800857c:	af00      	add	r7, sp, #0
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	607a      	str	r2, [r7, #4]
 8008584:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008588:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	461a      	mov	r2, r3
 8008590:	21a5      	movs	r1, #165	; 0xa5
 8008592:	f002 fc78 	bl	800ae86 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80085a0:	3b01      	subs	r3, #1
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	4413      	add	r3, r2
 80085a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	f023 0307 	bic.w	r3, r3, #7
 80085ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80085b0:	69bb      	ldr	r3, [r7, #24]
 80085b2:	f003 0307 	and.w	r3, r3, #7
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00a      	beq.n	80085d0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80085ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085be:	f383 8811 	msr	BASEPRI, r3
 80085c2:	f3bf 8f6f 	isb	sy
 80085c6:	f3bf 8f4f 	dsb	sy
 80085ca:	617b      	str	r3, [r7, #20]
}
 80085cc:	bf00      	nop
 80085ce:	e7fe      	b.n	80085ce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d01f      	beq.n	8008616 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085d6:	2300      	movs	r3, #0
 80085d8:	61fb      	str	r3, [r7, #28]
 80085da:	e012      	b.n	8008602 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80085dc:	68ba      	ldr	r2, [r7, #8]
 80085de:	69fb      	ldr	r3, [r7, #28]
 80085e0:	4413      	add	r3, r2
 80085e2:	7819      	ldrb	r1, [r3, #0]
 80085e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	4413      	add	r3, r2
 80085ea:	3334      	adds	r3, #52	; 0x34
 80085ec:	460a      	mov	r2, r1
 80085ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80085f0:	68ba      	ldr	r2, [r7, #8]
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	4413      	add	r3, r2
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d006      	beq.n	800860a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	3301      	adds	r3, #1
 8008600:	61fb      	str	r3, [r7, #28]
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	2b1f      	cmp	r3, #31
 8008606:	d9e9      	bls.n	80085dc <prvInitialiseNewTask+0x64>
 8008608:	e000      	b.n	800860c <prvInitialiseNewTask+0x94>
			{
				break;
 800860a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800860c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860e:	2200      	movs	r2, #0
 8008610:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8008614:	e003      	b.n	800861e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008618:	2200      	movs	r2, #0
 800861a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800861e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008620:	2b37      	cmp	r3, #55	; 0x37
 8008622:	d901      	bls.n	8008628 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008624:	2337      	movs	r3, #55	; 0x37
 8008626:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800862c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800862e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008630:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008632:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8008634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008636:	2200      	movs	r2, #0
 8008638:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800863a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863c:	3304      	adds	r3, #4
 800863e:	4618      	mov	r0, r3
 8008640:	f7fe fe1a 	bl	8007278 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008646:	3318      	adds	r3, #24
 8008648:	4618      	mov	r0, r3
 800864a:	f7fe fe15 	bl	8007278 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800864e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008652:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008656:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800865a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800865e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008662:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008666:	2200      	movs	r2, #0
 8008668:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800866c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866e:	2200      	movs	r2, #0
 8008670:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008676:	3364      	adds	r3, #100	; 0x64
 8008678:	224c      	movs	r2, #76	; 0x4c
 800867a:	2100      	movs	r1, #0
 800867c:	4618      	mov	r0, r3
 800867e:	f002 fc02 	bl	800ae86 <memset>
 8008682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008684:	4a0c      	ldr	r2, [pc, #48]	; (80086b8 <prvInitialiseNewTask+0x140>)
 8008686:	669a      	str	r2, [r3, #104]	; 0x68
 8008688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868a:	4a0c      	ldr	r2, [pc, #48]	; (80086bc <prvInitialiseNewTask+0x144>)
 800868c:	66da      	str	r2, [r3, #108]	; 0x6c
 800868e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008690:	4a0b      	ldr	r2, [pc, #44]	; (80086c0 <prvInitialiseNewTask+0x148>)
 8008692:	671a      	str	r2, [r3, #112]	; 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008694:	683a      	ldr	r2, [r7, #0]
 8008696:	68f9      	ldr	r1, [r7, #12]
 8008698:	69b8      	ldr	r0, [r7, #24]
 800869a:	f001 fa3f 	bl	8009b1c <pxPortInitialiseStack>
 800869e:	4602      	mov	r2, r0
 80086a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80086a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d002      	beq.n	80086b0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80086aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086ae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086b0:	bf00      	nop
 80086b2:	3720      	adds	r7, #32
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	20005ff8 	.word	0x20005ff8
 80086bc:	20006060 	.word	0x20006060
 80086c0:	200060c8 	.word	0x200060c8

080086c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80086cc:	f001 fb52 	bl	8009d74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80086d0:	4b2d      	ldr	r3, [pc, #180]	; (8008788 <prvAddNewTaskToReadyList+0xc4>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	3301      	adds	r3, #1
 80086d6:	4a2c      	ldr	r2, [pc, #176]	; (8008788 <prvAddNewTaskToReadyList+0xc4>)
 80086d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80086da:	4b2c      	ldr	r3, [pc, #176]	; (800878c <prvAddNewTaskToReadyList+0xc8>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d109      	bne.n	80086f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80086e2:	4a2a      	ldr	r2, [pc, #168]	; (800878c <prvAddNewTaskToReadyList+0xc8>)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80086e8:	4b27      	ldr	r3, [pc, #156]	; (8008788 <prvAddNewTaskToReadyList+0xc4>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d110      	bne.n	8008712 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80086f0:	f000 fc26 	bl	8008f40 <prvInitialiseTaskLists>
 80086f4:	e00d      	b.n	8008712 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80086f6:	4b26      	ldr	r3, [pc, #152]	; (8008790 <prvAddNewTaskToReadyList+0xcc>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d109      	bne.n	8008712 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80086fe:	4b23      	ldr	r3, [pc, #140]	; (800878c <prvAddNewTaskToReadyList+0xc8>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008708:	429a      	cmp	r2, r3
 800870a:	d802      	bhi.n	8008712 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800870c:	4a1f      	ldr	r2, [pc, #124]	; (800878c <prvAddNewTaskToReadyList+0xc8>)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008712:	4b20      	ldr	r3, [pc, #128]	; (8008794 <prvAddNewTaskToReadyList+0xd0>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	3301      	adds	r3, #1
 8008718:	4a1e      	ldr	r2, [pc, #120]	; (8008794 <prvAddNewTaskToReadyList+0xd0>)
 800871a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800871c:	4b1d      	ldr	r3, [pc, #116]	; (8008794 <prvAddNewTaskToReadyList+0xd0>)
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008728:	4b1b      	ldr	r3, [pc, #108]	; (8008798 <prvAddNewTaskToReadyList+0xd4>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	429a      	cmp	r2, r3
 800872e:	d903      	bls.n	8008738 <prvAddNewTaskToReadyList+0x74>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008734:	4a18      	ldr	r2, [pc, #96]	; (8008798 <prvAddNewTaskToReadyList+0xd4>)
 8008736:	6013      	str	r3, [r2, #0]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800873c:	4613      	mov	r3, r2
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	4413      	add	r3, r2
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	4a15      	ldr	r2, [pc, #84]	; (800879c <prvAddNewTaskToReadyList+0xd8>)
 8008746:	441a      	add	r2, r3
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	3304      	adds	r3, #4
 800874c:	4619      	mov	r1, r3
 800874e:	4610      	mov	r0, r2
 8008750:	f7fe fd9f 	bl	8007292 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008754:	f001 fb3e 	bl	8009dd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008758:	4b0d      	ldr	r3, [pc, #52]	; (8008790 <prvAddNewTaskToReadyList+0xcc>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d00e      	beq.n	800877e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008760:	4b0a      	ldr	r3, [pc, #40]	; (800878c <prvAddNewTaskToReadyList+0xc8>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800876a:	429a      	cmp	r2, r3
 800876c:	d207      	bcs.n	800877e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800876e:	4b0c      	ldr	r3, [pc, #48]	; (80087a0 <prvAddNewTaskToReadyList+0xdc>)
 8008770:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008774:	601a      	str	r2, [r3, #0]
 8008776:	f3bf 8f4f 	dsb	sy
 800877a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800877e:	bf00      	nop
 8008780:	3708      	adds	r7, #8
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	20001058 	.word	0x20001058
 800878c:	20000b84 	.word	0x20000b84
 8008790:	20001064 	.word	0x20001064
 8008794:	20001074 	.word	0x20001074
 8008798:	20001060 	.word	0x20001060
 800879c:	20000b88 	.word	0x20000b88
 80087a0:	e000ed04 	.word	0xe000ed04

080087a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80087ac:	2300      	movs	r3, #0
 80087ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d017      	beq.n	80087e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80087b6:	4b13      	ldr	r3, [pc, #76]	; (8008804 <vTaskDelay+0x60>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00a      	beq.n	80087d4 <vTaskDelay+0x30>
	__asm volatile
 80087be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	60bb      	str	r3, [r7, #8]
}
 80087d0:	bf00      	nop
 80087d2:	e7fe      	b.n	80087d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80087d4:	f000 f88a 	bl	80088ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80087d8:	2100      	movs	r1, #0
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 fdfc 	bl	80093d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80087e0:	f000 f892 	bl	8008908 <xTaskResumeAll>
 80087e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d107      	bne.n	80087fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80087ec:	4b06      	ldr	r3, [pc, #24]	; (8008808 <vTaskDelay+0x64>)
 80087ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087f2:	601a      	str	r2, [r3, #0]
 80087f4:	f3bf 8f4f 	dsb	sy
 80087f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087fc:	bf00      	nop
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}
 8008804:	20001080 	.word	0x20001080
 8008808:	e000ed04 	.word	0xe000ed04

0800880c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b08a      	sub	sp, #40	; 0x28
 8008810:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008812:	2300      	movs	r3, #0
 8008814:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008816:	2300      	movs	r3, #0
 8008818:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800881a:	463a      	mov	r2, r7
 800881c:	1d39      	adds	r1, r7, #4
 800881e:	f107 0308 	add.w	r3, r7, #8
 8008822:	4618      	mov	r0, r3
 8008824:	f7fe fcd4 	bl	80071d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008828:	6839      	ldr	r1, [r7, #0]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	68ba      	ldr	r2, [r7, #8]
 800882e:	9202      	str	r2, [sp, #8]
 8008830:	9301      	str	r3, [sp, #4]
 8008832:	2300      	movs	r3, #0
 8008834:	9300      	str	r3, [sp, #0]
 8008836:	2300      	movs	r3, #0
 8008838:	460a      	mov	r2, r1
 800883a:	4924      	ldr	r1, [pc, #144]	; (80088cc <vTaskStartScheduler+0xc0>)
 800883c:	4824      	ldr	r0, [pc, #144]	; (80088d0 <vTaskStartScheduler+0xc4>)
 800883e:	f7ff fdf9 	bl	8008434 <xTaskCreateStatic>
 8008842:	4603      	mov	r3, r0
 8008844:	4a23      	ldr	r2, [pc, #140]	; (80088d4 <vTaskStartScheduler+0xc8>)
 8008846:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008848:	4b22      	ldr	r3, [pc, #136]	; (80088d4 <vTaskStartScheduler+0xc8>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d002      	beq.n	8008856 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008850:	2301      	movs	r3, #1
 8008852:	617b      	str	r3, [r7, #20]
 8008854:	e001      	b.n	800885a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008856:	2300      	movs	r3, #0
 8008858:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	2b01      	cmp	r3, #1
 800885e:	d102      	bne.n	8008866 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008860:	f000 fe0e 	bl	8009480 <xTimerCreateTimerTask>
 8008864:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	2b01      	cmp	r3, #1
 800886a:	d11b      	bne.n	80088a4 <vTaskStartScheduler+0x98>
	__asm volatile
 800886c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008870:	f383 8811 	msr	BASEPRI, r3
 8008874:	f3bf 8f6f 	isb	sy
 8008878:	f3bf 8f4f 	dsb	sy
 800887c:	613b      	str	r3, [r7, #16]
}
 800887e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008880:	4b15      	ldr	r3, [pc, #84]	; (80088d8 <vTaskStartScheduler+0xcc>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	3364      	adds	r3, #100	; 0x64
 8008886:	4a15      	ldr	r2, [pc, #84]	; (80088dc <vTaskStartScheduler+0xd0>)
 8008888:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800888a:	4b15      	ldr	r3, [pc, #84]	; (80088e0 <vTaskStartScheduler+0xd4>)
 800888c:	f04f 32ff 	mov.w	r2, #4294967295
 8008890:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008892:	4b14      	ldr	r3, [pc, #80]	; (80088e4 <vTaskStartScheduler+0xd8>)
 8008894:	2201      	movs	r2, #1
 8008896:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008898:	4b13      	ldr	r3, [pc, #76]	; (80088e8 <vTaskStartScheduler+0xdc>)
 800889a:	2200      	movs	r2, #0
 800889c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800889e:	f001 f9c7 	bl	8009c30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80088a2:	e00e      	b.n	80088c2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088aa:	d10a      	bne.n	80088c2 <vTaskStartScheduler+0xb6>
	__asm volatile
 80088ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b0:	f383 8811 	msr	BASEPRI, r3
 80088b4:	f3bf 8f6f 	isb	sy
 80088b8:	f3bf 8f4f 	dsb	sy
 80088bc:	60fb      	str	r3, [r7, #12]
}
 80088be:	bf00      	nop
 80088c0:	e7fe      	b.n	80088c0 <vTaskStartScheduler+0xb4>
}
 80088c2:	bf00      	nop
 80088c4:	3718      	adds	r7, #24
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	0800cf24 	.word	0x0800cf24
 80088d0:	08008f11 	.word	0x08008f11
 80088d4:	2000107c 	.word	0x2000107c
 80088d8:	20000b84 	.word	0x20000b84
 80088dc:	20000068 	.word	0x20000068
 80088e0:	20001078 	.word	0x20001078
 80088e4:	20001064 	.word	0x20001064
 80088e8:	2000105c 	.word	0x2000105c

080088ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80088ec:	b480      	push	{r7}
 80088ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80088f0:	4b04      	ldr	r3, [pc, #16]	; (8008904 <vTaskSuspendAll+0x18>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	3301      	adds	r3, #1
 80088f6:	4a03      	ldr	r2, [pc, #12]	; (8008904 <vTaskSuspendAll+0x18>)
 80088f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80088fa:	bf00      	nop
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr
 8008904:	20001080 	.word	0x20001080

08008908 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800890e:	2300      	movs	r3, #0
 8008910:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008912:	2300      	movs	r3, #0
 8008914:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008916:	4b42      	ldr	r3, [pc, #264]	; (8008a20 <xTaskResumeAll+0x118>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10a      	bne.n	8008934 <xTaskResumeAll+0x2c>
	__asm volatile
 800891e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008922:	f383 8811 	msr	BASEPRI, r3
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	603b      	str	r3, [r7, #0]
}
 8008930:	bf00      	nop
 8008932:	e7fe      	b.n	8008932 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008934:	f001 fa1e 	bl	8009d74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008938:	4b39      	ldr	r3, [pc, #228]	; (8008a20 <xTaskResumeAll+0x118>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	3b01      	subs	r3, #1
 800893e:	4a38      	ldr	r2, [pc, #224]	; (8008a20 <xTaskResumeAll+0x118>)
 8008940:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008942:	4b37      	ldr	r3, [pc, #220]	; (8008a20 <xTaskResumeAll+0x118>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d162      	bne.n	8008a10 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800894a:	4b36      	ldr	r3, [pc, #216]	; (8008a24 <xTaskResumeAll+0x11c>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d05e      	beq.n	8008a10 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008952:	e02f      	b.n	80089b4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008954:	4b34      	ldr	r3, [pc, #208]	; (8008a28 <xTaskResumeAll+0x120>)
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	3318      	adds	r3, #24
 8008960:	4618      	mov	r0, r3
 8008962:	f7fe fcf3 	bl	800734c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	3304      	adds	r3, #4
 800896a:	4618      	mov	r0, r3
 800896c:	f7fe fcee 	bl	800734c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008974:	4b2d      	ldr	r3, [pc, #180]	; (8008a2c <xTaskResumeAll+0x124>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	429a      	cmp	r2, r3
 800897a:	d903      	bls.n	8008984 <xTaskResumeAll+0x7c>
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008980:	4a2a      	ldr	r2, [pc, #168]	; (8008a2c <xTaskResumeAll+0x124>)
 8008982:	6013      	str	r3, [r2, #0]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008988:	4613      	mov	r3, r2
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	4413      	add	r3, r2
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	4a27      	ldr	r2, [pc, #156]	; (8008a30 <xTaskResumeAll+0x128>)
 8008992:	441a      	add	r2, r3
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	3304      	adds	r3, #4
 8008998:	4619      	mov	r1, r3
 800899a:	4610      	mov	r0, r2
 800899c:	f7fe fc79 	bl	8007292 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089a4:	4b23      	ldr	r3, [pc, #140]	; (8008a34 <xTaskResumeAll+0x12c>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d302      	bcc.n	80089b4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80089ae:	4b22      	ldr	r3, [pc, #136]	; (8008a38 <xTaskResumeAll+0x130>)
 80089b0:	2201      	movs	r2, #1
 80089b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089b4:	4b1c      	ldr	r3, [pc, #112]	; (8008a28 <xTaskResumeAll+0x120>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1cb      	bne.n	8008954 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d001      	beq.n	80089c6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80089c2:	f000 fb5f 	bl	8009084 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80089c6:	4b1d      	ldr	r3, [pc, #116]	; (8008a3c <xTaskResumeAll+0x134>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d010      	beq.n	80089f4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80089d2:	f000 f847 	bl	8008a64 <xTaskIncrementTick>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d002      	beq.n	80089e2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80089dc:	4b16      	ldr	r3, [pc, #88]	; (8008a38 <xTaskResumeAll+0x130>)
 80089de:	2201      	movs	r2, #1
 80089e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	3b01      	subs	r3, #1
 80089e6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1f1      	bne.n	80089d2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80089ee:	4b13      	ldr	r3, [pc, #76]	; (8008a3c <xTaskResumeAll+0x134>)
 80089f0:	2200      	movs	r2, #0
 80089f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80089f4:	4b10      	ldr	r3, [pc, #64]	; (8008a38 <xTaskResumeAll+0x130>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d009      	beq.n	8008a10 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80089fc:	2301      	movs	r3, #1
 80089fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a00:	4b0f      	ldr	r3, [pc, #60]	; (8008a40 <xTaskResumeAll+0x138>)
 8008a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a06:	601a      	str	r2, [r3, #0]
 8008a08:	f3bf 8f4f 	dsb	sy
 8008a0c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a10:	f001 f9e0 	bl	8009dd4 <vPortExitCritical>

	return xAlreadyYielded;
 8008a14:	68bb      	ldr	r3, [r7, #8]
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3710      	adds	r7, #16
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	20001080 	.word	0x20001080
 8008a24:	20001058 	.word	0x20001058
 8008a28:	20001018 	.word	0x20001018
 8008a2c:	20001060 	.word	0x20001060
 8008a30:	20000b88 	.word	0x20000b88
 8008a34:	20000b84 	.word	0x20000b84
 8008a38:	2000106c 	.word	0x2000106c
 8008a3c:	20001068 	.word	0x20001068
 8008a40:	e000ed04 	.word	0xe000ed04

08008a44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008a4a:	4b05      	ldr	r3, [pc, #20]	; (8008a60 <xTaskGetTickCount+0x1c>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008a50:	687b      	ldr	r3, [r7, #4]
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	370c      	adds	r7, #12
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop
 8008a60:	2000105c 	.word	0x2000105c

08008a64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b086      	sub	sp, #24
 8008a68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a6e:	4b4f      	ldr	r3, [pc, #316]	; (8008bac <xTaskIncrementTick+0x148>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	f040 808f 	bne.w	8008b96 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a78:	4b4d      	ldr	r3, [pc, #308]	; (8008bb0 <xTaskIncrementTick+0x14c>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a80:	4a4b      	ldr	r2, [pc, #300]	; (8008bb0 <xTaskIncrementTick+0x14c>)
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d120      	bne.n	8008ace <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a8c:	4b49      	ldr	r3, [pc, #292]	; (8008bb4 <xTaskIncrementTick+0x150>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00a      	beq.n	8008aac <xTaskIncrementTick+0x48>
	__asm volatile
 8008a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9a:	f383 8811 	msr	BASEPRI, r3
 8008a9e:	f3bf 8f6f 	isb	sy
 8008aa2:	f3bf 8f4f 	dsb	sy
 8008aa6:	603b      	str	r3, [r7, #0]
}
 8008aa8:	bf00      	nop
 8008aaa:	e7fe      	b.n	8008aaa <xTaskIncrementTick+0x46>
 8008aac:	4b41      	ldr	r3, [pc, #260]	; (8008bb4 <xTaskIncrementTick+0x150>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	60fb      	str	r3, [r7, #12]
 8008ab2:	4b41      	ldr	r3, [pc, #260]	; (8008bb8 <xTaskIncrementTick+0x154>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a3f      	ldr	r2, [pc, #252]	; (8008bb4 <xTaskIncrementTick+0x150>)
 8008ab8:	6013      	str	r3, [r2, #0]
 8008aba:	4a3f      	ldr	r2, [pc, #252]	; (8008bb8 <xTaskIncrementTick+0x154>)
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	6013      	str	r3, [r2, #0]
 8008ac0:	4b3e      	ldr	r3, [pc, #248]	; (8008bbc <xTaskIncrementTick+0x158>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	4a3d      	ldr	r2, [pc, #244]	; (8008bbc <xTaskIncrementTick+0x158>)
 8008ac8:	6013      	str	r3, [r2, #0]
 8008aca:	f000 fadb 	bl	8009084 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008ace:	4b3c      	ldr	r3, [pc, #240]	; (8008bc0 <xTaskIncrementTick+0x15c>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	693a      	ldr	r2, [r7, #16]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d349      	bcc.n	8008b6c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ad8:	4b36      	ldr	r3, [pc, #216]	; (8008bb4 <xTaskIncrementTick+0x150>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d104      	bne.n	8008aec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ae2:	4b37      	ldr	r3, [pc, #220]	; (8008bc0 <xTaskIncrementTick+0x15c>)
 8008ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ae8:	601a      	str	r2, [r3, #0]
					break;
 8008aea:	e03f      	b.n	8008b6c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008aec:	4b31      	ldr	r3, [pc, #196]	; (8008bb4 <xTaskIncrementTick+0x150>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	68db      	ldr	r3, [r3, #12]
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008afc:	693a      	ldr	r2, [r7, #16]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d203      	bcs.n	8008b0c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b04:	4a2e      	ldr	r2, [pc, #184]	; (8008bc0 <xTaskIncrementTick+0x15c>)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b0a:	e02f      	b.n	8008b6c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	3304      	adds	r3, #4
 8008b10:	4618      	mov	r0, r3
 8008b12:	f7fe fc1b 	bl	800734c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d004      	beq.n	8008b28 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	3318      	adds	r3, #24
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7fe fc12 	bl	800734c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b2c:	4b25      	ldr	r3, [pc, #148]	; (8008bc4 <xTaskIncrementTick+0x160>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d903      	bls.n	8008b3c <xTaskIncrementTick+0xd8>
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b38:	4a22      	ldr	r2, [pc, #136]	; (8008bc4 <xTaskIncrementTick+0x160>)
 8008b3a:	6013      	str	r3, [r2, #0]
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b40:	4613      	mov	r3, r2
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	4413      	add	r3, r2
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	4a1f      	ldr	r2, [pc, #124]	; (8008bc8 <xTaskIncrementTick+0x164>)
 8008b4a:	441a      	add	r2, r3
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	3304      	adds	r3, #4
 8008b50:	4619      	mov	r1, r3
 8008b52:	4610      	mov	r0, r2
 8008b54:	f7fe fb9d 	bl	8007292 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b5c:	4b1b      	ldr	r3, [pc, #108]	; (8008bcc <xTaskIncrementTick+0x168>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d3b8      	bcc.n	8008ad8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008b66:	2301      	movs	r3, #1
 8008b68:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b6a:	e7b5      	b.n	8008ad8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b6c:	4b17      	ldr	r3, [pc, #92]	; (8008bcc <xTaskIncrementTick+0x168>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b72:	4915      	ldr	r1, [pc, #84]	; (8008bc8 <xTaskIncrementTick+0x164>)
 8008b74:	4613      	mov	r3, r2
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	4413      	add	r3, r2
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	440b      	add	r3, r1
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d901      	bls.n	8008b88 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008b84:	2301      	movs	r3, #1
 8008b86:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008b88:	4b11      	ldr	r3, [pc, #68]	; (8008bd0 <xTaskIncrementTick+0x16c>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d007      	beq.n	8008ba0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008b90:	2301      	movs	r3, #1
 8008b92:	617b      	str	r3, [r7, #20]
 8008b94:	e004      	b.n	8008ba0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008b96:	4b0f      	ldr	r3, [pc, #60]	; (8008bd4 <xTaskIncrementTick+0x170>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	4a0d      	ldr	r2, [pc, #52]	; (8008bd4 <xTaskIncrementTick+0x170>)
 8008b9e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008ba0:	697b      	ldr	r3, [r7, #20]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3718      	adds	r7, #24
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	20001080 	.word	0x20001080
 8008bb0:	2000105c 	.word	0x2000105c
 8008bb4:	20001010 	.word	0x20001010
 8008bb8:	20001014 	.word	0x20001014
 8008bbc:	20001070 	.word	0x20001070
 8008bc0:	20001078 	.word	0x20001078
 8008bc4:	20001060 	.word	0x20001060
 8008bc8:	20000b88 	.word	0x20000b88
 8008bcc:	20000b84 	.word	0x20000b84
 8008bd0:	2000106c 	.word	0x2000106c
 8008bd4:	20001068 	.word	0x20001068

08008bd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b085      	sub	sp, #20
 8008bdc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008bde:	4b2a      	ldr	r3, [pc, #168]	; (8008c88 <vTaskSwitchContext+0xb0>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d003      	beq.n	8008bee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008be6:	4b29      	ldr	r3, [pc, #164]	; (8008c8c <vTaskSwitchContext+0xb4>)
 8008be8:	2201      	movs	r2, #1
 8008bea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008bec:	e046      	b.n	8008c7c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008bee:	4b27      	ldr	r3, [pc, #156]	; (8008c8c <vTaskSwitchContext+0xb4>)
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bf4:	4b26      	ldr	r3, [pc, #152]	; (8008c90 <vTaskSwitchContext+0xb8>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	60fb      	str	r3, [r7, #12]
 8008bfa:	e010      	b.n	8008c1e <vTaskSwitchContext+0x46>
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d10a      	bne.n	8008c18 <vTaskSwitchContext+0x40>
	__asm volatile
 8008c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c06:	f383 8811 	msr	BASEPRI, r3
 8008c0a:	f3bf 8f6f 	isb	sy
 8008c0e:	f3bf 8f4f 	dsb	sy
 8008c12:	607b      	str	r3, [r7, #4]
}
 8008c14:	bf00      	nop
 8008c16:	e7fe      	b.n	8008c16 <vTaskSwitchContext+0x3e>
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	3b01      	subs	r3, #1
 8008c1c:	60fb      	str	r3, [r7, #12]
 8008c1e:	491d      	ldr	r1, [pc, #116]	; (8008c94 <vTaskSwitchContext+0xbc>)
 8008c20:	68fa      	ldr	r2, [r7, #12]
 8008c22:	4613      	mov	r3, r2
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	4413      	add	r3, r2
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	440b      	add	r3, r1
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d0e4      	beq.n	8008bfc <vTaskSwitchContext+0x24>
 8008c32:	68fa      	ldr	r2, [r7, #12]
 8008c34:	4613      	mov	r3, r2
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	4413      	add	r3, r2
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	4a15      	ldr	r2, [pc, #84]	; (8008c94 <vTaskSwitchContext+0xbc>)
 8008c3e:	4413      	add	r3, r2
 8008c40:	60bb      	str	r3, [r7, #8]
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	685a      	ldr	r2, [r3, #4]
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	605a      	str	r2, [r3, #4]
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	685a      	ldr	r2, [r3, #4]
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	3308      	adds	r3, #8
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d104      	bne.n	8008c62 <vTaskSwitchContext+0x8a>
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	685a      	ldr	r2, [r3, #4]
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	605a      	str	r2, [r3, #4]
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	4a0b      	ldr	r2, [pc, #44]	; (8008c98 <vTaskSwitchContext+0xc0>)
 8008c6a:	6013      	str	r3, [r2, #0]
 8008c6c:	4a08      	ldr	r2, [pc, #32]	; (8008c90 <vTaskSwitchContext+0xb8>)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008c72:	4b09      	ldr	r3, [pc, #36]	; (8008c98 <vTaskSwitchContext+0xc0>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	3364      	adds	r3, #100	; 0x64
 8008c78:	4a08      	ldr	r2, [pc, #32]	; (8008c9c <vTaskSwitchContext+0xc4>)
 8008c7a:	6013      	str	r3, [r2, #0]
}
 8008c7c:	bf00      	nop
 8008c7e:	3714      	adds	r7, #20
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr
 8008c88:	20001080 	.word	0x20001080
 8008c8c:	2000106c 	.word	0x2000106c
 8008c90:	20001060 	.word	0x20001060
 8008c94:	20000b88 	.word	0x20000b88
 8008c98:	20000b84 	.word	0x20000b84
 8008c9c:	20000068 	.word	0x20000068

08008ca0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d10a      	bne.n	8008cc6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb4:	f383 8811 	msr	BASEPRI, r3
 8008cb8:	f3bf 8f6f 	isb	sy
 8008cbc:	f3bf 8f4f 	dsb	sy
 8008cc0:	60fb      	str	r3, [r7, #12]
}
 8008cc2:	bf00      	nop
 8008cc4:	e7fe      	b.n	8008cc4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008cc6:	4b07      	ldr	r3, [pc, #28]	; (8008ce4 <vTaskPlaceOnEventList+0x44>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	3318      	adds	r3, #24
 8008ccc:	4619      	mov	r1, r3
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f7fe fb03 	bl	80072da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008cd4:	2101      	movs	r1, #1
 8008cd6:	6838      	ldr	r0, [r7, #0]
 8008cd8:	f000 fb7e 	bl	80093d8 <prvAddCurrentTaskToDelayedList>
}
 8008cdc:	bf00      	nop
 8008cde:	3710      	adds	r7, #16
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}
 8008ce4:	20000b84 	.word	0x20000b84

08008ce8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b086      	sub	sp, #24
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d10a      	bne.n	8008d10 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfe:	f383 8811 	msr	BASEPRI, r3
 8008d02:	f3bf 8f6f 	isb	sy
 8008d06:	f3bf 8f4f 	dsb	sy
 8008d0a:	617b      	str	r3, [r7, #20]
}
 8008d0c:	bf00      	nop
 8008d0e:	e7fe      	b.n	8008d0e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d10:	4b0a      	ldr	r3, [pc, #40]	; (8008d3c <vTaskPlaceOnEventListRestricted+0x54>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	3318      	adds	r3, #24
 8008d16:	4619      	mov	r1, r3
 8008d18:	68f8      	ldr	r0, [r7, #12]
 8008d1a:	f7fe faba 	bl	8007292 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d002      	beq.n	8008d2a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008d24:	f04f 33ff 	mov.w	r3, #4294967295
 8008d28:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008d2a:	6879      	ldr	r1, [r7, #4]
 8008d2c:	68b8      	ldr	r0, [r7, #8]
 8008d2e:	f000 fb53 	bl	80093d8 <prvAddCurrentTaskToDelayedList>
	}
 8008d32:	bf00      	nop
 8008d34:	3718      	adds	r7, #24
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	20000b84 	.word	0x20000b84

08008d40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b086      	sub	sp, #24
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	68db      	ldr	r3, [r3, #12]
 8008d4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d10a      	bne.n	8008d6c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5a:	f383 8811 	msr	BASEPRI, r3
 8008d5e:	f3bf 8f6f 	isb	sy
 8008d62:	f3bf 8f4f 	dsb	sy
 8008d66:	60fb      	str	r3, [r7, #12]
}
 8008d68:	bf00      	nop
 8008d6a:	e7fe      	b.n	8008d6a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	3318      	adds	r3, #24
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7fe faeb 	bl	800734c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d76:	4b1e      	ldr	r3, [pc, #120]	; (8008df0 <xTaskRemoveFromEventList+0xb0>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d11d      	bne.n	8008dba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	3304      	adds	r3, #4
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7fe fae2 	bl	800734c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d8c:	4b19      	ldr	r3, [pc, #100]	; (8008df4 <xTaskRemoveFromEventList+0xb4>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d903      	bls.n	8008d9c <xTaskRemoveFromEventList+0x5c>
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d98:	4a16      	ldr	r2, [pc, #88]	; (8008df4 <xTaskRemoveFromEventList+0xb4>)
 8008d9a:	6013      	str	r3, [r2, #0]
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008da0:	4613      	mov	r3, r2
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	4413      	add	r3, r2
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	4a13      	ldr	r2, [pc, #76]	; (8008df8 <xTaskRemoveFromEventList+0xb8>)
 8008daa:	441a      	add	r2, r3
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	3304      	adds	r3, #4
 8008db0:	4619      	mov	r1, r3
 8008db2:	4610      	mov	r0, r2
 8008db4:	f7fe fa6d 	bl	8007292 <vListInsertEnd>
 8008db8:	e005      	b.n	8008dc6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	3318      	adds	r3, #24
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	480e      	ldr	r0, [pc, #56]	; (8008dfc <xTaskRemoveFromEventList+0xbc>)
 8008dc2:	f7fe fa66 	bl	8007292 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dca:	4b0d      	ldr	r3, [pc, #52]	; (8008e00 <xTaskRemoveFromEventList+0xc0>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d905      	bls.n	8008de0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008dd8:	4b0a      	ldr	r3, [pc, #40]	; (8008e04 <xTaskRemoveFromEventList+0xc4>)
 8008dda:	2201      	movs	r2, #1
 8008ddc:	601a      	str	r2, [r3, #0]
 8008dde:	e001      	b.n	8008de4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008de0:	2300      	movs	r3, #0
 8008de2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008de4:	697b      	ldr	r3, [r7, #20]
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3718      	adds	r7, #24
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	20001080 	.word	0x20001080
 8008df4:	20001060 	.word	0x20001060
 8008df8:	20000b88 	.word	0x20000b88
 8008dfc:	20001018 	.word	0x20001018
 8008e00:	20000b84 	.word	0x20000b84
 8008e04:	2000106c 	.word	0x2000106c

08008e08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e10:	4b06      	ldr	r3, [pc, #24]	; (8008e2c <vTaskInternalSetTimeOutState+0x24>)
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008e18:	4b05      	ldr	r3, [pc, #20]	; (8008e30 <vTaskInternalSetTimeOutState+0x28>)
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	605a      	str	r2, [r3, #4]
}
 8008e20:	bf00      	nop
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr
 8008e2c:	20001070 	.word	0x20001070
 8008e30:	2000105c 	.word	0x2000105c

08008e34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b088      	sub	sp, #32
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d10a      	bne.n	8008e5a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e48:	f383 8811 	msr	BASEPRI, r3
 8008e4c:	f3bf 8f6f 	isb	sy
 8008e50:	f3bf 8f4f 	dsb	sy
 8008e54:	613b      	str	r3, [r7, #16]
}
 8008e56:	bf00      	nop
 8008e58:	e7fe      	b.n	8008e58 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d10a      	bne.n	8008e76 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e64:	f383 8811 	msr	BASEPRI, r3
 8008e68:	f3bf 8f6f 	isb	sy
 8008e6c:	f3bf 8f4f 	dsb	sy
 8008e70:	60fb      	str	r3, [r7, #12]
}
 8008e72:	bf00      	nop
 8008e74:	e7fe      	b.n	8008e74 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008e76:	f000 ff7d 	bl	8009d74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008e7a:	4b1d      	ldr	r3, [pc, #116]	; (8008ef0 <xTaskCheckForTimeOut+0xbc>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	69ba      	ldr	r2, [r7, #24]
 8008e86:	1ad3      	subs	r3, r2, r3
 8008e88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e92:	d102      	bne.n	8008e9a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008e94:	2300      	movs	r3, #0
 8008e96:	61fb      	str	r3, [r7, #28]
 8008e98:	e023      	b.n	8008ee2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	4b15      	ldr	r3, [pc, #84]	; (8008ef4 <xTaskCheckForTimeOut+0xc0>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d007      	beq.n	8008eb6 <xTaskCheckForTimeOut+0x82>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	69ba      	ldr	r2, [r7, #24]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d302      	bcc.n	8008eb6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	61fb      	str	r3, [r7, #28]
 8008eb4:	e015      	b.n	8008ee2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	697a      	ldr	r2, [r7, #20]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d20b      	bcs.n	8008ed8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	1ad2      	subs	r2, r2, r3
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f7ff ff9b 	bl	8008e08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	61fb      	str	r3, [r7, #28]
 8008ed6:	e004      	b.n	8008ee2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	2200      	movs	r2, #0
 8008edc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008ee2:	f000 ff77 	bl	8009dd4 <vPortExitCritical>

	return xReturn;
 8008ee6:	69fb      	ldr	r3, [r7, #28]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3720      	adds	r7, #32
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	2000105c 	.word	0x2000105c
 8008ef4:	20001070 	.word	0x20001070

08008ef8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008ef8:	b480      	push	{r7}
 8008efa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008efc:	4b03      	ldr	r3, [pc, #12]	; (8008f0c <vTaskMissedYield+0x14>)
 8008efe:	2201      	movs	r2, #1
 8008f00:	601a      	str	r2, [r3, #0]
}
 8008f02:	bf00      	nop
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr
 8008f0c:	2000106c 	.word	0x2000106c

08008f10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008f18:	f000 f852 	bl	8008fc0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008f1c:	4b06      	ldr	r3, [pc, #24]	; (8008f38 <prvIdleTask+0x28>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d9f9      	bls.n	8008f18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008f24:	4b05      	ldr	r3, [pc, #20]	; (8008f3c <prvIdleTask+0x2c>)
 8008f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f2a:	601a      	str	r2, [r3, #0]
 8008f2c:	f3bf 8f4f 	dsb	sy
 8008f30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008f34:	e7f0      	b.n	8008f18 <prvIdleTask+0x8>
 8008f36:	bf00      	nop
 8008f38:	20000b88 	.word	0x20000b88
 8008f3c:	e000ed04 	.word	0xe000ed04

08008f40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f46:	2300      	movs	r3, #0
 8008f48:	607b      	str	r3, [r7, #4]
 8008f4a:	e00c      	b.n	8008f66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	4613      	mov	r3, r2
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	4413      	add	r3, r2
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	4a12      	ldr	r2, [pc, #72]	; (8008fa0 <prvInitialiseTaskLists+0x60>)
 8008f58:	4413      	add	r3, r2
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f7fe f96c 	bl	8007238 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	3301      	adds	r3, #1
 8008f64:	607b      	str	r3, [r7, #4]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2b37      	cmp	r3, #55	; 0x37
 8008f6a:	d9ef      	bls.n	8008f4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008f6c:	480d      	ldr	r0, [pc, #52]	; (8008fa4 <prvInitialiseTaskLists+0x64>)
 8008f6e:	f7fe f963 	bl	8007238 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008f72:	480d      	ldr	r0, [pc, #52]	; (8008fa8 <prvInitialiseTaskLists+0x68>)
 8008f74:	f7fe f960 	bl	8007238 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008f78:	480c      	ldr	r0, [pc, #48]	; (8008fac <prvInitialiseTaskLists+0x6c>)
 8008f7a:	f7fe f95d 	bl	8007238 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008f7e:	480c      	ldr	r0, [pc, #48]	; (8008fb0 <prvInitialiseTaskLists+0x70>)
 8008f80:	f7fe f95a 	bl	8007238 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008f84:	480b      	ldr	r0, [pc, #44]	; (8008fb4 <prvInitialiseTaskLists+0x74>)
 8008f86:	f7fe f957 	bl	8007238 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f8a:	4b0b      	ldr	r3, [pc, #44]	; (8008fb8 <prvInitialiseTaskLists+0x78>)
 8008f8c:	4a05      	ldr	r2, [pc, #20]	; (8008fa4 <prvInitialiseTaskLists+0x64>)
 8008f8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f90:	4b0a      	ldr	r3, [pc, #40]	; (8008fbc <prvInitialiseTaskLists+0x7c>)
 8008f92:	4a05      	ldr	r2, [pc, #20]	; (8008fa8 <prvInitialiseTaskLists+0x68>)
 8008f94:	601a      	str	r2, [r3, #0]
}
 8008f96:	bf00      	nop
 8008f98:	3708      	adds	r7, #8
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	20000b88 	.word	0x20000b88
 8008fa4:	20000fe8 	.word	0x20000fe8
 8008fa8:	20000ffc 	.word	0x20000ffc
 8008fac:	20001018 	.word	0x20001018
 8008fb0:	2000102c 	.word	0x2000102c
 8008fb4:	20001044 	.word	0x20001044
 8008fb8:	20001010 	.word	0x20001010
 8008fbc:	20001014 	.word	0x20001014

08008fc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008fc6:	e019      	b.n	8008ffc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008fc8:	f000 fed4 	bl	8009d74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fcc:	4b10      	ldr	r3, [pc, #64]	; (8009010 <prvCheckTasksWaitingTermination+0x50>)
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	3304      	adds	r3, #4
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7fe f9b7 	bl	800734c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008fde:	4b0d      	ldr	r3, [pc, #52]	; (8009014 <prvCheckTasksWaitingTermination+0x54>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	3b01      	subs	r3, #1
 8008fe4:	4a0b      	ldr	r2, [pc, #44]	; (8009014 <prvCheckTasksWaitingTermination+0x54>)
 8008fe6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008fe8:	4b0b      	ldr	r3, [pc, #44]	; (8009018 <prvCheckTasksWaitingTermination+0x58>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	3b01      	subs	r3, #1
 8008fee:	4a0a      	ldr	r2, [pc, #40]	; (8009018 <prvCheckTasksWaitingTermination+0x58>)
 8008ff0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008ff2:	f000 feef 	bl	8009dd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 f810 	bl	800901c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ffc:	4b06      	ldr	r3, [pc, #24]	; (8009018 <prvCheckTasksWaitingTermination+0x58>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d1e1      	bne.n	8008fc8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009004:	bf00      	nop
 8009006:	bf00      	nop
 8009008:	3708      	adds	r7, #8
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop
 8009010:	2000102c 	.word	0x2000102c
 8009014:	20001058 	.word	0x20001058
 8009018:	20001040 	.word	0x20001040

0800901c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	3364      	adds	r3, #100	; 0x64
 8009028:	4618      	mov	r0, r3
 800902a:	f001 ff5b 	bl	800aee4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8009034:	2b00      	cmp	r3, #0
 8009036:	d108      	bne.n	800904a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800903c:	4618      	mov	r0, r3
 800903e:	f001 f887 	bl	800a150 <vPortFree>
				vPortFree( pxTCB );
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f001 f884 	bl	800a150 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009048:	e018      	b.n	800907c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8009050:	2b01      	cmp	r3, #1
 8009052:	d103      	bne.n	800905c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f001 f87b 	bl	800a150 <vPortFree>
	}
 800905a:	e00f      	b.n	800907c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8009062:	2b02      	cmp	r3, #2
 8009064:	d00a      	beq.n	800907c <prvDeleteTCB+0x60>
	__asm volatile
 8009066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906a:	f383 8811 	msr	BASEPRI, r3
 800906e:	f3bf 8f6f 	isb	sy
 8009072:	f3bf 8f4f 	dsb	sy
 8009076:	60fb      	str	r3, [r7, #12]
}
 8009078:	bf00      	nop
 800907a:	e7fe      	b.n	800907a <prvDeleteTCB+0x5e>
	}
 800907c:	bf00      	nop
 800907e:	3710      	adds	r7, #16
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800908a:	4b0c      	ldr	r3, [pc, #48]	; (80090bc <prvResetNextTaskUnblockTime+0x38>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d104      	bne.n	800909e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009094:	4b0a      	ldr	r3, [pc, #40]	; (80090c0 <prvResetNextTaskUnblockTime+0x3c>)
 8009096:	f04f 32ff 	mov.w	r2, #4294967295
 800909a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800909c:	e008      	b.n	80090b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800909e:	4b07      	ldr	r3, [pc, #28]	; (80090bc <prvResetNextTaskUnblockTime+0x38>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	68db      	ldr	r3, [r3, #12]
 80090a4:	68db      	ldr	r3, [r3, #12]
 80090a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	4a04      	ldr	r2, [pc, #16]	; (80090c0 <prvResetNextTaskUnblockTime+0x3c>)
 80090ae:	6013      	str	r3, [r2, #0]
}
 80090b0:	bf00      	nop
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr
 80090bc:	20001010 	.word	0x20001010
 80090c0:	20001078 	.word	0x20001078

080090c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80090ca:	4b0b      	ldr	r3, [pc, #44]	; (80090f8 <xTaskGetSchedulerState+0x34>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d102      	bne.n	80090d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80090d2:	2301      	movs	r3, #1
 80090d4:	607b      	str	r3, [r7, #4]
 80090d6:	e008      	b.n	80090ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090d8:	4b08      	ldr	r3, [pc, #32]	; (80090fc <xTaskGetSchedulerState+0x38>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d102      	bne.n	80090e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80090e0:	2302      	movs	r3, #2
 80090e2:	607b      	str	r3, [r7, #4]
 80090e4:	e001      	b.n	80090ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80090e6:	2300      	movs	r3, #0
 80090e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80090ea:	687b      	ldr	r3, [r7, #4]
	}
 80090ec:	4618      	mov	r0, r3
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr
 80090f8:	20001064 	.word	0x20001064
 80090fc:	20001080 	.word	0x20001080

08009100 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800910c:	2300      	movs	r3, #0
 800910e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d051      	beq.n	80091ba <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800911a:	4b2a      	ldr	r3, [pc, #168]	; (80091c4 <xTaskPriorityInherit+0xc4>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009120:	429a      	cmp	r2, r3
 8009122:	d241      	bcs.n	80091a8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	699b      	ldr	r3, [r3, #24]
 8009128:	2b00      	cmp	r3, #0
 800912a:	db06      	blt.n	800913a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800912c:	4b25      	ldr	r3, [pc, #148]	; (80091c4 <xTaskPriorityInherit+0xc4>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009132:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	6959      	ldr	r1, [r3, #20]
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009142:	4613      	mov	r3, r2
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	4413      	add	r3, r2
 8009148:	009b      	lsls	r3, r3, #2
 800914a:	4a1f      	ldr	r2, [pc, #124]	; (80091c8 <xTaskPriorityInherit+0xc8>)
 800914c:	4413      	add	r3, r2
 800914e:	4299      	cmp	r1, r3
 8009150:	d122      	bne.n	8009198 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	3304      	adds	r3, #4
 8009156:	4618      	mov	r0, r3
 8009158:	f7fe f8f8 	bl	800734c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800915c:	4b19      	ldr	r3, [pc, #100]	; (80091c4 <xTaskPriorityInherit+0xc4>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800916a:	4b18      	ldr	r3, [pc, #96]	; (80091cc <xTaskPriorityInherit+0xcc>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	429a      	cmp	r2, r3
 8009170:	d903      	bls.n	800917a <xTaskPriorityInherit+0x7a>
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009176:	4a15      	ldr	r2, [pc, #84]	; (80091cc <xTaskPriorityInherit+0xcc>)
 8009178:	6013      	str	r3, [r2, #0]
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800917e:	4613      	mov	r3, r2
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	4413      	add	r3, r2
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	4a10      	ldr	r2, [pc, #64]	; (80091c8 <xTaskPriorityInherit+0xc8>)
 8009188:	441a      	add	r2, r3
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	3304      	adds	r3, #4
 800918e:	4619      	mov	r1, r3
 8009190:	4610      	mov	r0, r2
 8009192:	f7fe f87e 	bl	8007292 <vListInsertEnd>
 8009196:	e004      	b.n	80091a2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009198:	4b0a      	ldr	r3, [pc, #40]	; (80091c4 <xTaskPriorityInherit+0xc4>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80091a2:	2301      	movs	r3, #1
 80091a4:	60fb      	str	r3, [r7, #12]
 80091a6:	e008      	b.n	80091ba <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80091ac:	4b05      	ldr	r3, [pc, #20]	; (80091c4 <xTaskPriorityInherit+0xc4>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d201      	bcs.n	80091ba <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80091b6:	2301      	movs	r3, #1
 80091b8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80091ba:	68fb      	ldr	r3, [r7, #12]
	}
 80091bc:	4618      	mov	r0, r3
 80091be:	3710      	adds	r7, #16
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}
 80091c4:	20000b84 	.word	0x20000b84
 80091c8:	20000b88 	.word	0x20000b88
 80091cc:	20001060 	.word	0x20001060

080091d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b086      	sub	sp, #24
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80091dc:	2300      	movs	r3, #0
 80091de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d056      	beq.n	8009294 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80091e6:	4b2e      	ldr	r3, [pc, #184]	; (80092a0 <xTaskPriorityDisinherit+0xd0>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	693a      	ldr	r2, [r7, #16]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d00a      	beq.n	8009206 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80091f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f4:	f383 8811 	msr	BASEPRI, r3
 80091f8:	f3bf 8f6f 	isb	sy
 80091fc:	f3bf 8f4f 	dsb	sy
 8009200:	60fb      	str	r3, [r7, #12]
}
 8009202:	bf00      	nop
 8009204:	e7fe      	b.n	8009204 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800920a:	2b00      	cmp	r3, #0
 800920c:	d10a      	bne.n	8009224 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800920e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009212:	f383 8811 	msr	BASEPRI, r3
 8009216:	f3bf 8f6f 	isb	sy
 800921a:	f3bf 8f4f 	dsb	sy
 800921e:	60bb      	str	r3, [r7, #8]
}
 8009220:	bf00      	nop
 8009222:	e7fe      	b.n	8009222 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009228:	1e5a      	subs	r2, r3, #1
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009236:	429a      	cmp	r2, r3
 8009238:	d02c      	beq.n	8009294 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800923e:	2b00      	cmp	r3, #0
 8009240:	d128      	bne.n	8009294 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	3304      	adds	r3, #4
 8009246:	4618      	mov	r0, r3
 8009248:	f7fe f880 	bl	800734c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009258:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009264:	4b0f      	ldr	r3, [pc, #60]	; (80092a4 <xTaskPriorityDisinherit+0xd4>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	429a      	cmp	r2, r3
 800926a:	d903      	bls.n	8009274 <xTaskPriorityDisinherit+0xa4>
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009270:	4a0c      	ldr	r2, [pc, #48]	; (80092a4 <xTaskPriorityDisinherit+0xd4>)
 8009272:	6013      	str	r3, [r2, #0]
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009278:	4613      	mov	r3, r2
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	4413      	add	r3, r2
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	4a09      	ldr	r2, [pc, #36]	; (80092a8 <xTaskPriorityDisinherit+0xd8>)
 8009282:	441a      	add	r2, r3
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	3304      	adds	r3, #4
 8009288:	4619      	mov	r1, r3
 800928a:	4610      	mov	r0, r2
 800928c:	f7fe f801 	bl	8007292 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009290:	2301      	movs	r3, #1
 8009292:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009294:	697b      	ldr	r3, [r7, #20]
	}
 8009296:	4618      	mov	r0, r3
 8009298:	3718      	adds	r7, #24
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	20000b84 	.word	0x20000b84
 80092a4:	20001060 	.word	0x20001060
 80092a8:	20000b88 	.word	0x20000b88

080092ac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b088      	sub	sp, #32
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80092ba:	2301      	movs	r3, #1
 80092bc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d06a      	beq.n	800939a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d10a      	bne.n	80092e2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80092cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d0:	f383 8811 	msr	BASEPRI, r3
 80092d4:	f3bf 8f6f 	isb	sy
 80092d8:	f3bf 8f4f 	dsb	sy
 80092dc:	60fb      	str	r3, [r7, #12]
}
 80092de:	bf00      	nop
 80092e0:	e7fe      	b.n	80092e0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092e6:	683a      	ldr	r2, [r7, #0]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d902      	bls.n	80092f2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	61fb      	str	r3, [r7, #28]
 80092f0:	e002      	b.n	80092f8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80092f2:	69bb      	ldr	r3, [r7, #24]
 80092f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092f6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80092f8:	69bb      	ldr	r3, [r7, #24]
 80092fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fc:	69fa      	ldr	r2, [r7, #28]
 80092fe:	429a      	cmp	r2, r3
 8009300:	d04b      	beq.n	800939a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009302:	69bb      	ldr	r3, [r7, #24]
 8009304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009306:	697a      	ldr	r2, [r7, #20]
 8009308:	429a      	cmp	r2, r3
 800930a:	d146      	bne.n	800939a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800930c:	4b25      	ldr	r3, [pc, #148]	; (80093a4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	69ba      	ldr	r2, [r7, #24]
 8009312:	429a      	cmp	r2, r3
 8009314:	d10a      	bne.n	800932c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931a:	f383 8811 	msr	BASEPRI, r3
 800931e:	f3bf 8f6f 	isb	sy
 8009322:	f3bf 8f4f 	dsb	sy
 8009326:	60bb      	str	r3, [r7, #8]
}
 8009328:	bf00      	nop
 800932a:	e7fe      	b.n	800932a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800932c:	69bb      	ldr	r3, [r7, #24]
 800932e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009330:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	69fa      	ldr	r2, [r7, #28]
 8009336:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009338:	69bb      	ldr	r3, [r7, #24]
 800933a:	699b      	ldr	r3, [r3, #24]
 800933c:	2b00      	cmp	r3, #0
 800933e:	db04      	blt.n	800934a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009340:	69fb      	ldr	r3, [r7, #28]
 8009342:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	6959      	ldr	r1, [r3, #20]
 800934e:	693a      	ldr	r2, [r7, #16]
 8009350:	4613      	mov	r3, r2
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	4413      	add	r3, r2
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	4a13      	ldr	r2, [pc, #76]	; (80093a8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800935a:	4413      	add	r3, r2
 800935c:	4299      	cmp	r1, r3
 800935e:	d11c      	bne.n	800939a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	3304      	adds	r3, #4
 8009364:	4618      	mov	r0, r3
 8009366:	f7fd fff1 	bl	800734c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800936e:	4b0f      	ldr	r3, [pc, #60]	; (80093ac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	429a      	cmp	r2, r3
 8009374:	d903      	bls.n	800937e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800937a:	4a0c      	ldr	r2, [pc, #48]	; (80093ac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800937c:	6013      	str	r3, [r2, #0]
 800937e:	69bb      	ldr	r3, [r7, #24]
 8009380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009382:	4613      	mov	r3, r2
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	4413      	add	r3, r2
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	4a07      	ldr	r2, [pc, #28]	; (80093a8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800938c:	441a      	add	r2, r3
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	3304      	adds	r3, #4
 8009392:	4619      	mov	r1, r3
 8009394:	4610      	mov	r0, r2
 8009396:	f7fd ff7c 	bl	8007292 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800939a:	bf00      	nop
 800939c:	3720      	adds	r7, #32
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop
 80093a4:	20000b84 	.word	0x20000b84
 80093a8:	20000b88 	.word	0x20000b88
 80093ac:	20001060 	.word	0x20001060

080093b0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80093b0:	b480      	push	{r7}
 80093b2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80093b4:	4b07      	ldr	r3, [pc, #28]	; (80093d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d004      	beq.n	80093c6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80093bc:	4b05      	ldr	r3, [pc, #20]	; (80093d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80093c2:	3201      	adds	r2, #1
 80093c4:	661a      	str	r2, [r3, #96]	; 0x60
		}

		return pxCurrentTCB;
 80093c6:	4b03      	ldr	r3, [pc, #12]	; (80093d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80093c8:	681b      	ldr	r3, [r3, #0]
	}
 80093ca:	4618      	mov	r0, r3
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr
 80093d4:	20000b84 	.word	0x20000b84

080093d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80093e2:	4b21      	ldr	r3, [pc, #132]	; (8009468 <prvAddCurrentTaskToDelayedList+0x90>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093e8:	4b20      	ldr	r3, [pc, #128]	; (800946c <prvAddCurrentTaskToDelayedList+0x94>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	3304      	adds	r3, #4
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7fd ffac 	bl	800734c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093fa:	d10a      	bne.n	8009412 <prvAddCurrentTaskToDelayedList+0x3a>
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d007      	beq.n	8009412 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009402:	4b1a      	ldr	r3, [pc, #104]	; (800946c <prvAddCurrentTaskToDelayedList+0x94>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	3304      	adds	r3, #4
 8009408:	4619      	mov	r1, r3
 800940a:	4819      	ldr	r0, [pc, #100]	; (8009470 <prvAddCurrentTaskToDelayedList+0x98>)
 800940c:	f7fd ff41 	bl	8007292 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009410:	e026      	b.n	8009460 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009412:	68fa      	ldr	r2, [r7, #12]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	4413      	add	r3, r2
 8009418:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800941a:	4b14      	ldr	r3, [pc, #80]	; (800946c <prvAddCurrentTaskToDelayedList+0x94>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68ba      	ldr	r2, [r7, #8]
 8009420:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009422:	68ba      	ldr	r2, [r7, #8]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	429a      	cmp	r2, r3
 8009428:	d209      	bcs.n	800943e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800942a:	4b12      	ldr	r3, [pc, #72]	; (8009474 <prvAddCurrentTaskToDelayedList+0x9c>)
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	4b0f      	ldr	r3, [pc, #60]	; (800946c <prvAddCurrentTaskToDelayedList+0x94>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	3304      	adds	r3, #4
 8009434:	4619      	mov	r1, r3
 8009436:	4610      	mov	r0, r2
 8009438:	f7fd ff4f 	bl	80072da <vListInsert>
}
 800943c:	e010      	b.n	8009460 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800943e:	4b0e      	ldr	r3, [pc, #56]	; (8009478 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	4b0a      	ldr	r3, [pc, #40]	; (800946c <prvAddCurrentTaskToDelayedList+0x94>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	3304      	adds	r3, #4
 8009448:	4619      	mov	r1, r3
 800944a:	4610      	mov	r0, r2
 800944c:	f7fd ff45 	bl	80072da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009450:	4b0a      	ldr	r3, [pc, #40]	; (800947c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	68ba      	ldr	r2, [r7, #8]
 8009456:	429a      	cmp	r2, r3
 8009458:	d202      	bcs.n	8009460 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800945a:	4a08      	ldr	r2, [pc, #32]	; (800947c <prvAddCurrentTaskToDelayedList+0xa4>)
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	6013      	str	r3, [r2, #0]
}
 8009460:	bf00      	nop
 8009462:	3710      	adds	r7, #16
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}
 8009468:	2000105c 	.word	0x2000105c
 800946c:	20000b84 	.word	0x20000b84
 8009470:	20001044 	.word	0x20001044
 8009474:	20001014 	.word	0x20001014
 8009478:	20001010 	.word	0x20001010
 800947c:	20001078 	.word	0x20001078

08009480 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b08a      	sub	sp, #40	; 0x28
 8009484:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009486:	2300      	movs	r3, #0
 8009488:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800948a:	f000 fb07 	bl	8009a9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800948e:	4b1c      	ldr	r3, [pc, #112]	; (8009500 <xTimerCreateTimerTask+0x80>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d021      	beq.n	80094da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009496:	2300      	movs	r3, #0
 8009498:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800949a:	2300      	movs	r3, #0
 800949c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800949e:	1d3a      	adds	r2, r7, #4
 80094a0:	f107 0108 	add.w	r1, r7, #8
 80094a4:	f107 030c 	add.w	r3, r7, #12
 80094a8:	4618      	mov	r0, r3
 80094aa:	f7fd feab 	bl	8007204 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80094ae:	6879      	ldr	r1, [r7, #4]
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	68fa      	ldr	r2, [r7, #12]
 80094b4:	9202      	str	r2, [sp, #8]
 80094b6:	9301      	str	r3, [sp, #4]
 80094b8:	2302      	movs	r3, #2
 80094ba:	9300      	str	r3, [sp, #0]
 80094bc:	2300      	movs	r3, #0
 80094be:	460a      	mov	r2, r1
 80094c0:	4910      	ldr	r1, [pc, #64]	; (8009504 <xTimerCreateTimerTask+0x84>)
 80094c2:	4811      	ldr	r0, [pc, #68]	; (8009508 <xTimerCreateTimerTask+0x88>)
 80094c4:	f7fe ffb6 	bl	8008434 <xTaskCreateStatic>
 80094c8:	4603      	mov	r3, r0
 80094ca:	4a10      	ldr	r2, [pc, #64]	; (800950c <xTimerCreateTimerTask+0x8c>)
 80094cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80094ce:	4b0f      	ldr	r3, [pc, #60]	; (800950c <xTimerCreateTimerTask+0x8c>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d001      	beq.n	80094da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80094d6:	2301      	movs	r3, #1
 80094d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d10a      	bne.n	80094f6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80094e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e4:	f383 8811 	msr	BASEPRI, r3
 80094e8:	f3bf 8f6f 	isb	sy
 80094ec:	f3bf 8f4f 	dsb	sy
 80094f0:	613b      	str	r3, [r7, #16]
}
 80094f2:	bf00      	nop
 80094f4:	e7fe      	b.n	80094f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80094f6:	697b      	ldr	r3, [r7, #20]
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3718      	adds	r7, #24
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}
 8009500:	200010b4 	.word	0x200010b4
 8009504:	0800cf2c 	.word	0x0800cf2c
 8009508:	08009645 	.word	0x08009645
 800950c:	200010b8 	.word	0x200010b8

08009510 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b08a      	sub	sp, #40	; 0x28
 8009514:	af00      	add	r7, sp, #0
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	60b9      	str	r1, [r7, #8]
 800951a:	607a      	str	r2, [r7, #4]
 800951c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800951e:	2300      	movs	r3, #0
 8009520:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d10a      	bne.n	800953e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952c:	f383 8811 	msr	BASEPRI, r3
 8009530:	f3bf 8f6f 	isb	sy
 8009534:	f3bf 8f4f 	dsb	sy
 8009538:	623b      	str	r3, [r7, #32]
}
 800953a:	bf00      	nop
 800953c:	e7fe      	b.n	800953c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800953e:	4b1a      	ldr	r3, [pc, #104]	; (80095a8 <xTimerGenericCommand+0x98>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d02a      	beq.n	800959c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	2b05      	cmp	r3, #5
 8009556:	dc18      	bgt.n	800958a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009558:	f7ff fdb4 	bl	80090c4 <xTaskGetSchedulerState>
 800955c:	4603      	mov	r3, r0
 800955e:	2b02      	cmp	r3, #2
 8009560:	d109      	bne.n	8009576 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009562:	4b11      	ldr	r3, [pc, #68]	; (80095a8 <xTimerGenericCommand+0x98>)
 8009564:	6818      	ldr	r0, [r3, #0]
 8009566:	f107 0110 	add.w	r1, r7, #16
 800956a:	2300      	movs	r3, #0
 800956c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800956e:	f7fe f8bf 	bl	80076f0 <xQueueGenericSend>
 8009572:	6278      	str	r0, [r7, #36]	; 0x24
 8009574:	e012      	b.n	800959c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009576:	4b0c      	ldr	r3, [pc, #48]	; (80095a8 <xTimerGenericCommand+0x98>)
 8009578:	6818      	ldr	r0, [r3, #0]
 800957a:	f107 0110 	add.w	r1, r7, #16
 800957e:	2300      	movs	r3, #0
 8009580:	2200      	movs	r2, #0
 8009582:	f7fe f8b5 	bl	80076f0 <xQueueGenericSend>
 8009586:	6278      	str	r0, [r7, #36]	; 0x24
 8009588:	e008      	b.n	800959c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800958a:	4b07      	ldr	r3, [pc, #28]	; (80095a8 <xTimerGenericCommand+0x98>)
 800958c:	6818      	ldr	r0, [r3, #0]
 800958e:	f107 0110 	add.w	r1, r7, #16
 8009592:	2300      	movs	r3, #0
 8009594:	683a      	ldr	r2, [r7, #0]
 8009596:	f7fe f9a9 	bl	80078ec <xQueueGenericSendFromISR>
 800959a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800959c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3728      	adds	r7, #40	; 0x28
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	200010b4 	.word	0x200010b4

080095ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b088      	sub	sp, #32
 80095b0:	af02      	add	r7, sp, #8
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095b6:	4b22      	ldr	r3, [pc, #136]	; (8009640 <prvProcessExpiredTimer+0x94>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	68db      	ldr	r3, [r3, #12]
 80095be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	3304      	adds	r3, #4
 80095c4:	4618      	mov	r0, r3
 80095c6:	f7fd fec1 	bl	800734c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095d0:	f003 0304 	and.w	r3, r3, #4
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d022      	beq.n	800961e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	699a      	ldr	r2, [r3, #24]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	18d1      	adds	r1, r2, r3
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	683a      	ldr	r2, [r7, #0]
 80095e4:	6978      	ldr	r0, [r7, #20]
 80095e6:	f000 f8d1 	bl	800978c <prvInsertTimerInActiveList>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d01f      	beq.n	8009630 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80095f0:	2300      	movs	r3, #0
 80095f2:	9300      	str	r3, [sp, #0]
 80095f4:	2300      	movs	r3, #0
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	2100      	movs	r1, #0
 80095fa:	6978      	ldr	r0, [r7, #20]
 80095fc:	f7ff ff88 	bl	8009510 <xTimerGenericCommand>
 8009600:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d113      	bne.n	8009630 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800960c:	f383 8811 	msr	BASEPRI, r3
 8009610:	f3bf 8f6f 	isb	sy
 8009614:	f3bf 8f4f 	dsb	sy
 8009618:	60fb      	str	r3, [r7, #12]
}
 800961a:	bf00      	nop
 800961c:	e7fe      	b.n	800961c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009624:	f023 0301 	bic.w	r3, r3, #1
 8009628:	b2da      	uxtb	r2, r3
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	6a1b      	ldr	r3, [r3, #32]
 8009634:	6978      	ldr	r0, [r7, #20]
 8009636:	4798      	blx	r3
}
 8009638:	bf00      	nop
 800963a:	3718      	adds	r7, #24
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	200010ac 	.word	0x200010ac

08009644 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800964c:	f107 0308 	add.w	r3, r7, #8
 8009650:	4618      	mov	r0, r3
 8009652:	f000 f857 	bl	8009704 <prvGetNextExpireTime>
 8009656:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	4619      	mov	r1, r3
 800965c:	68f8      	ldr	r0, [r7, #12]
 800965e:	f000 f803 	bl	8009668 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009662:	f000 f8d5 	bl	8009810 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009666:	e7f1      	b.n	800964c <prvTimerTask+0x8>

08009668 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009672:	f7ff f93b 	bl	80088ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009676:	f107 0308 	add.w	r3, r7, #8
 800967a:	4618      	mov	r0, r3
 800967c:	f000 f866 	bl	800974c <prvSampleTimeNow>
 8009680:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d130      	bne.n	80096ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d10a      	bne.n	80096a4 <prvProcessTimerOrBlockTask+0x3c>
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	429a      	cmp	r2, r3
 8009694:	d806      	bhi.n	80096a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009696:	f7ff f937 	bl	8008908 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800969a:	68f9      	ldr	r1, [r7, #12]
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f7ff ff85 	bl	80095ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80096a2:	e024      	b.n	80096ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d008      	beq.n	80096bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80096aa:	4b13      	ldr	r3, [pc, #76]	; (80096f8 <prvProcessTimerOrBlockTask+0x90>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d101      	bne.n	80096b8 <prvProcessTimerOrBlockTask+0x50>
 80096b4:	2301      	movs	r3, #1
 80096b6:	e000      	b.n	80096ba <prvProcessTimerOrBlockTask+0x52>
 80096b8:	2300      	movs	r3, #0
 80096ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80096bc:	4b0f      	ldr	r3, [pc, #60]	; (80096fc <prvProcessTimerOrBlockTask+0x94>)
 80096be:	6818      	ldr	r0, [r3, #0]
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	1ad3      	subs	r3, r2, r3
 80096c6:	683a      	ldr	r2, [r7, #0]
 80096c8:	4619      	mov	r1, r3
 80096ca:	f7fe fe7f 	bl	80083cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80096ce:	f7ff f91b 	bl	8008908 <xTaskResumeAll>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d10a      	bne.n	80096ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80096d8:	4b09      	ldr	r3, [pc, #36]	; (8009700 <prvProcessTimerOrBlockTask+0x98>)
 80096da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096de:	601a      	str	r2, [r3, #0]
 80096e0:	f3bf 8f4f 	dsb	sy
 80096e4:	f3bf 8f6f 	isb	sy
}
 80096e8:	e001      	b.n	80096ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80096ea:	f7ff f90d 	bl	8008908 <xTaskResumeAll>
}
 80096ee:	bf00      	nop
 80096f0:	3710      	adds	r7, #16
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	200010b0 	.word	0x200010b0
 80096fc:	200010b4 	.word	0x200010b4
 8009700:	e000ed04 	.word	0xe000ed04

08009704 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009704:	b480      	push	{r7}
 8009706:	b085      	sub	sp, #20
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800970c:	4b0e      	ldr	r3, [pc, #56]	; (8009748 <prvGetNextExpireTime+0x44>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d101      	bne.n	800971a <prvGetNextExpireTime+0x16>
 8009716:	2201      	movs	r2, #1
 8009718:	e000      	b.n	800971c <prvGetNextExpireTime+0x18>
 800971a:	2200      	movs	r2, #0
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d105      	bne.n	8009734 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009728:	4b07      	ldr	r3, [pc, #28]	; (8009748 <prvGetNextExpireTime+0x44>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	68db      	ldr	r3, [r3, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	60fb      	str	r3, [r7, #12]
 8009732:	e001      	b.n	8009738 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009734:	2300      	movs	r3, #0
 8009736:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009738:	68fb      	ldr	r3, [r7, #12]
}
 800973a:	4618      	mov	r0, r3
 800973c:	3714      	adds	r7, #20
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop
 8009748:	200010ac 	.word	0x200010ac

0800974c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009754:	f7ff f976 	bl	8008a44 <xTaskGetTickCount>
 8009758:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800975a:	4b0b      	ldr	r3, [pc, #44]	; (8009788 <prvSampleTimeNow+0x3c>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	68fa      	ldr	r2, [r7, #12]
 8009760:	429a      	cmp	r2, r3
 8009762:	d205      	bcs.n	8009770 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009764:	f000 f936 	bl	80099d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2201      	movs	r2, #1
 800976c:	601a      	str	r2, [r3, #0]
 800976e:	e002      	b.n	8009776 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009776:	4a04      	ldr	r2, [pc, #16]	; (8009788 <prvSampleTimeNow+0x3c>)
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800977c:	68fb      	ldr	r3, [r7, #12]
}
 800977e:	4618      	mov	r0, r3
 8009780:	3710      	adds	r7, #16
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop
 8009788:	200010bc 	.word	0x200010bc

0800978c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b086      	sub	sp, #24
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	607a      	str	r2, [r7, #4]
 8009798:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800979a:	2300      	movs	r3, #0
 800979c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	68ba      	ldr	r2, [r7, #8]
 80097a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	68fa      	ldr	r2, [r7, #12]
 80097a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80097aa:	68ba      	ldr	r2, [r7, #8]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d812      	bhi.n	80097d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	1ad2      	subs	r2, r2, r3
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	699b      	ldr	r3, [r3, #24]
 80097bc:	429a      	cmp	r2, r3
 80097be:	d302      	bcc.n	80097c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80097c0:	2301      	movs	r3, #1
 80097c2:	617b      	str	r3, [r7, #20]
 80097c4:	e01b      	b.n	80097fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80097c6:	4b10      	ldr	r3, [pc, #64]	; (8009808 <prvInsertTimerInActiveList+0x7c>)
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	3304      	adds	r3, #4
 80097ce:	4619      	mov	r1, r3
 80097d0:	4610      	mov	r0, r2
 80097d2:	f7fd fd82 	bl	80072da <vListInsert>
 80097d6:	e012      	b.n	80097fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	429a      	cmp	r2, r3
 80097de:	d206      	bcs.n	80097ee <prvInsertTimerInActiveList+0x62>
 80097e0:	68ba      	ldr	r2, [r7, #8]
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d302      	bcc.n	80097ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80097e8:	2301      	movs	r3, #1
 80097ea:	617b      	str	r3, [r7, #20]
 80097ec:	e007      	b.n	80097fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80097ee:	4b07      	ldr	r3, [pc, #28]	; (800980c <prvInsertTimerInActiveList+0x80>)
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	3304      	adds	r3, #4
 80097f6:	4619      	mov	r1, r3
 80097f8:	4610      	mov	r0, r2
 80097fa:	f7fd fd6e 	bl	80072da <vListInsert>
		}
	}

	return xProcessTimerNow;
 80097fe:	697b      	ldr	r3, [r7, #20]
}
 8009800:	4618      	mov	r0, r3
 8009802:	3718      	adds	r7, #24
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}
 8009808:	200010b0 	.word	0x200010b0
 800980c:	200010ac 	.word	0x200010ac

08009810 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b08e      	sub	sp, #56	; 0x38
 8009814:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009816:	e0ca      	b.n	80099ae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2b00      	cmp	r3, #0
 800981c:	da18      	bge.n	8009850 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800981e:	1d3b      	adds	r3, r7, #4
 8009820:	3304      	adds	r3, #4
 8009822:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009826:	2b00      	cmp	r3, #0
 8009828:	d10a      	bne.n	8009840 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800982a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982e:	f383 8811 	msr	BASEPRI, r3
 8009832:	f3bf 8f6f 	isb	sy
 8009836:	f3bf 8f4f 	dsb	sy
 800983a:	61fb      	str	r3, [r7, #28]
}
 800983c:	bf00      	nop
 800983e:	e7fe      	b.n	800983e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009846:	6850      	ldr	r0, [r2, #4]
 8009848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800984a:	6892      	ldr	r2, [r2, #8]
 800984c:	4611      	mov	r1, r2
 800984e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2b00      	cmp	r3, #0
 8009854:	f2c0 80ab 	blt.w	80099ae <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800985c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985e:	695b      	ldr	r3, [r3, #20]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d004      	beq.n	800986e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009866:	3304      	adds	r3, #4
 8009868:	4618      	mov	r0, r3
 800986a:	f7fd fd6f 	bl	800734c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800986e:	463b      	mov	r3, r7
 8009870:	4618      	mov	r0, r3
 8009872:	f7ff ff6b 	bl	800974c <prvSampleTimeNow>
 8009876:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2b09      	cmp	r3, #9
 800987c:	f200 8096 	bhi.w	80099ac <prvProcessReceivedCommands+0x19c>
 8009880:	a201      	add	r2, pc, #4	; (adr r2, 8009888 <prvProcessReceivedCommands+0x78>)
 8009882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009886:	bf00      	nop
 8009888:	080098b1 	.word	0x080098b1
 800988c:	080098b1 	.word	0x080098b1
 8009890:	080098b1 	.word	0x080098b1
 8009894:	08009925 	.word	0x08009925
 8009898:	08009939 	.word	0x08009939
 800989c:	08009983 	.word	0x08009983
 80098a0:	080098b1 	.word	0x080098b1
 80098a4:	080098b1 	.word	0x080098b1
 80098a8:	08009925 	.word	0x08009925
 80098ac:	08009939 	.word	0x08009939
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80098b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098b6:	f043 0301 	orr.w	r3, r3, #1
 80098ba:	b2da      	uxtb	r2, r3
 80098bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80098c2:	68ba      	ldr	r2, [r7, #8]
 80098c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c6:	699b      	ldr	r3, [r3, #24]
 80098c8:	18d1      	adds	r1, r2, r3
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098d0:	f7ff ff5c 	bl	800978c <prvInsertTimerInActiveList>
 80098d4:	4603      	mov	r3, r0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d069      	beq.n	80099ae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098dc:	6a1b      	ldr	r3, [r3, #32]
 80098de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80098e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098e8:	f003 0304 	and.w	r3, r3, #4
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d05e      	beq.n	80099ae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80098f0:	68ba      	ldr	r2, [r7, #8]
 80098f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f4:	699b      	ldr	r3, [r3, #24]
 80098f6:	441a      	add	r2, r3
 80098f8:	2300      	movs	r3, #0
 80098fa:	9300      	str	r3, [sp, #0]
 80098fc:	2300      	movs	r3, #0
 80098fe:	2100      	movs	r1, #0
 8009900:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009902:	f7ff fe05 	bl	8009510 <xTimerGenericCommand>
 8009906:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009908:	6a3b      	ldr	r3, [r7, #32]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d14f      	bne.n	80099ae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800990e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009912:	f383 8811 	msr	BASEPRI, r3
 8009916:	f3bf 8f6f 	isb	sy
 800991a:	f3bf 8f4f 	dsb	sy
 800991e:	61bb      	str	r3, [r7, #24]
}
 8009920:	bf00      	nop
 8009922:	e7fe      	b.n	8009922 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009926:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800992a:	f023 0301 	bic.w	r3, r3, #1
 800992e:	b2da      	uxtb	r2, r3
 8009930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009932:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009936:	e03a      	b.n	80099ae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800993e:	f043 0301 	orr.w	r3, r3, #1
 8009942:	b2da      	uxtb	r2, r3
 8009944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009946:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800994a:	68ba      	ldr	r2, [r7, #8]
 800994c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009952:	699b      	ldr	r3, [r3, #24]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d10a      	bne.n	800996e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800995c:	f383 8811 	msr	BASEPRI, r3
 8009960:	f3bf 8f6f 	isb	sy
 8009964:	f3bf 8f4f 	dsb	sy
 8009968:	617b      	str	r3, [r7, #20]
}
 800996a:	bf00      	nop
 800996c:	e7fe      	b.n	800996c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800996e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009970:	699a      	ldr	r2, [r3, #24]
 8009972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009974:	18d1      	adds	r1, r2, r3
 8009976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800997a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800997c:	f7ff ff06 	bl	800978c <prvInsertTimerInActiveList>
					break;
 8009980:	e015      	b.n	80099ae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009984:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009988:	f003 0302 	and.w	r3, r3, #2
 800998c:	2b00      	cmp	r3, #0
 800998e:	d103      	bne.n	8009998 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009992:	f000 fbdd 	bl	800a150 <vPortFree>
 8009996:	e00a      	b.n	80099ae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800999a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800999e:	f023 0301 	bic.w	r3, r3, #1
 80099a2:	b2da      	uxtb	r2, r3
 80099a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80099aa:	e000      	b.n	80099ae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80099ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80099ae:	4b08      	ldr	r3, [pc, #32]	; (80099d0 <prvProcessReceivedCommands+0x1c0>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	1d39      	adds	r1, r7, #4
 80099b4:	2200      	movs	r2, #0
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7fe f8c0 	bl	8007b3c <xQueueReceive>
 80099bc:	4603      	mov	r3, r0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	f47f af2a 	bne.w	8009818 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80099c4:	bf00      	nop
 80099c6:	bf00      	nop
 80099c8:	3730      	adds	r7, #48	; 0x30
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	200010b4 	.word	0x200010b4

080099d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b088      	sub	sp, #32
 80099d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80099da:	e048      	b.n	8009a6e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80099dc:	4b2d      	ldr	r3, [pc, #180]	; (8009a94 <prvSwitchTimerLists+0xc0>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099e6:	4b2b      	ldr	r3, [pc, #172]	; (8009a94 <prvSwitchTimerLists+0xc0>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	68db      	ldr	r3, [r3, #12]
 80099ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	3304      	adds	r3, #4
 80099f4:	4618      	mov	r0, r3
 80099f6:	f7fd fca9 	bl	800734c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	6a1b      	ldr	r3, [r3, #32]
 80099fe:	68f8      	ldr	r0, [r7, #12]
 8009a00:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a08:	f003 0304 	and.w	r3, r3, #4
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d02e      	beq.n	8009a6e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	699b      	ldr	r3, [r3, #24]
 8009a14:	693a      	ldr	r2, [r7, #16]
 8009a16:	4413      	add	r3, r2
 8009a18:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009a1a:	68ba      	ldr	r2, [r7, #8]
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	d90e      	bls.n	8009a40 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	68ba      	ldr	r2, [r7, #8]
 8009a26:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	68fa      	ldr	r2, [r7, #12]
 8009a2c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a2e:	4b19      	ldr	r3, [pc, #100]	; (8009a94 <prvSwitchTimerLists+0xc0>)
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	3304      	adds	r3, #4
 8009a36:	4619      	mov	r1, r3
 8009a38:	4610      	mov	r0, r2
 8009a3a:	f7fd fc4e 	bl	80072da <vListInsert>
 8009a3e:	e016      	b.n	8009a6e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a40:	2300      	movs	r3, #0
 8009a42:	9300      	str	r3, [sp, #0]
 8009a44:	2300      	movs	r3, #0
 8009a46:	693a      	ldr	r2, [r7, #16]
 8009a48:	2100      	movs	r1, #0
 8009a4a:	68f8      	ldr	r0, [r7, #12]
 8009a4c:	f7ff fd60 	bl	8009510 <xTimerGenericCommand>
 8009a50:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d10a      	bne.n	8009a6e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5c:	f383 8811 	msr	BASEPRI, r3
 8009a60:	f3bf 8f6f 	isb	sy
 8009a64:	f3bf 8f4f 	dsb	sy
 8009a68:	603b      	str	r3, [r7, #0]
}
 8009a6a:	bf00      	nop
 8009a6c:	e7fe      	b.n	8009a6c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a6e:	4b09      	ldr	r3, [pc, #36]	; (8009a94 <prvSwitchTimerLists+0xc0>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d1b1      	bne.n	80099dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009a78:	4b06      	ldr	r3, [pc, #24]	; (8009a94 <prvSwitchTimerLists+0xc0>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009a7e:	4b06      	ldr	r3, [pc, #24]	; (8009a98 <prvSwitchTimerLists+0xc4>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a04      	ldr	r2, [pc, #16]	; (8009a94 <prvSwitchTimerLists+0xc0>)
 8009a84:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009a86:	4a04      	ldr	r2, [pc, #16]	; (8009a98 <prvSwitchTimerLists+0xc4>)
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	6013      	str	r3, [r2, #0]
}
 8009a8c:	bf00      	nop
 8009a8e:	3718      	adds	r7, #24
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}
 8009a94:	200010ac 	.word	0x200010ac
 8009a98:	200010b0 	.word	0x200010b0

08009a9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009aa2:	f000 f967 	bl	8009d74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009aa6:	4b15      	ldr	r3, [pc, #84]	; (8009afc <prvCheckForValidListAndQueue+0x60>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d120      	bne.n	8009af0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009aae:	4814      	ldr	r0, [pc, #80]	; (8009b00 <prvCheckForValidListAndQueue+0x64>)
 8009ab0:	f7fd fbc2 	bl	8007238 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009ab4:	4813      	ldr	r0, [pc, #76]	; (8009b04 <prvCheckForValidListAndQueue+0x68>)
 8009ab6:	f7fd fbbf 	bl	8007238 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009aba:	4b13      	ldr	r3, [pc, #76]	; (8009b08 <prvCheckForValidListAndQueue+0x6c>)
 8009abc:	4a10      	ldr	r2, [pc, #64]	; (8009b00 <prvCheckForValidListAndQueue+0x64>)
 8009abe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009ac0:	4b12      	ldr	r3, [pc, #72]	; (8009b0c <prvCheckForValidListAndQueue+0x70>)
 8009ac2:	4a10      	ldr	r2, [pc, #64]	; (8009b04 <prvCheckForValidListAndQueue+0x68>)
 8009ac4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	9300      	str	r3, [sp, #0]
 8009aca:	4b11      	ldr	r3, [pc, #68]	; (8009b10 <prvCheckForValidListAndQueue+0x74>)
 8009acc:	4a11      	ldr	r2, [pc, #68]	; (8009b14 <prvCheckForValidListAndQueue+0x78>)
 8009ace:	2110      	movs	r1, #16
 8009ad0:	200a      	movs	r0, #10
 8009ad2:	f7fd fccd 	bl	8007470 <xQueueGenericCreateStatic>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	4a08      	ldr	r2, [pc, #32]	; (8009afc <prvCheckForValidListAndQueue+0x60>)
 8009ada:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009adc:	4b07      	ldr	r3, [pc, #28]	; (8009afc <prvCheckForValidListAndQueue+0x60>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d005      	beq.n	8009af0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009ae4:	4b05      	ldr	r3, [pc, #20]	; (8009afc <prvCheckForValidListAndQueue+0x60>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	490b      	ldr	r1, [pc, #44]	; (8009b18 <prvCheckForValidListAndQueue+0x7c>)
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7fe fc1a 	bl	8008324 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009af0:	f000 f970 	bl	8009dd4 <vPortExitCritical>
}
 8009af4:	bf00      	nop
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	200010b4 	.word	0x200010b4
 8009b00:	20001084 	.word	0x20001084
 8009b04:	20001098 	.word	0x20001098
 8009b08:	200010ac 	.word	0x200010ac
 8009b0c:	200010b0 	.word	0x200010b0
 8009b10:	20001160 	.word	0x20001160
 8009b14:	200010c0 	.word	0x200010c0
 8009b18:	0800cf34 	.word	0x0800cf34

08009b1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b085      	sub	sp, #20
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	60f8      	str	r0, [r7, #12]
 8009b24:	60b9      	str	r1, [r7, #8]
 8009b26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	3b04      	subs	r3, #4
 8009b2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009b34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	3b04      	subs	r3, #4
 8009b3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	f023 0201 	bic.w	r2, r3, #1
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	3b04      	subs	r3, #4
 8009b4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009b4c:	4a0c      	ldr	r2, [pc, #48]	; (8009b80 <pxPortInitialiseStack+0x64>)
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	3b14      	subs	r3, #20
 8009b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009b58:	687a      	ldr	r2, [r7, #4]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	3b04      	subs	r3, #4
 8009b62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f06f 0202 	mvn.w	r2, #2
 8009b6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	3b20      	subs	r3, #32
 8009b70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009b72:	68fb      	ldr	r3, [r7, #12]
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3714      	adds	r7, #20
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr
 8009b80:	08009b85 	.word	0x08009b85

08009b84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009b84:	b480      	push	{r7}
 8009b86:	b085      	sub	sp, #20
 8009b88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009b8e:	4b12      	ldr	r3, [pc, #72]	; (8009bd8 <prvTaskExitError+0x54>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b96:	d00a      	beq.n	8009bae <prvTaskExitError+0x2a>
	__asm volatile
 8009b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9c:	f383 8811 	msr	BASEPRI, r3
 8009ba0:	f3bf 8f6f 	isb	sy
 8009ba4:	f3bf 8f4f 	dsb	sy
 8009ba8:	60fb      	str	r3, [r7, #12]
}
 8009baa:	bf00      	nop
 8009bac:	e7fe      	b.n	8009bac <prvTaskExitError+0x28>
	__asm volatile
 8009bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb2:	f383 8811 	msr	BASEPRI, r3
 8009bb6:	f3bf 8f6f 	isb	sy
 8009bba:	f3bf 8f4f 	dsb	sy
 8009bbe:	60bb      	str	r3, [r7, #8]
}
 8009bc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009bc2:	bf00      	nop
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d0fc      	beq.n	8009bc4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009bca:	bf00      	nop
 8009bcc:	bf00      	nop
 8009bce:	3714      	adds	r7, #20
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr
 8009bd8:	2000000c 	.word	0x2000000c
 8009bdc:	00000000 	.word	0x00000000

08009be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009be0:	4b07      	ldr	r3, [pc, #28]	; (8009c00 <pxCurrentTCBConst2>)
 8009be2:	6819      	ldr	r1, [r3, #0]
 8009be4:	6808      	ldr	r0, [r1, #0]
 8009be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bea:	f380 8809 	msr	PSP, r0
 8009bee:	f3bf 8f6f 	isb	sy
 8009bf2:	f04f 0000 	mov.w	r0, #0
 8009bf6:	f380 8811 	msr	BASEPRI, r0
 8009bfa:	4770      	bx	lr
 8009bfc:	f3af 8000 	nop.w

08009c00 <pxCurrentTCBConst2>:
 8009c00:	20000b84 	.word	0x20000b84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009c04:	bf00      	nop
 8009c06:	bf00      	nop

08009c08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009c08:	4808      	ldr	r0, [pc, #32]	; (8009c2c <prvPortStartFirstTask+0x24>)
 8009c0a:	6800      	ldr	r0, [r0, #0]
 8009c0c:	6800      	ldr	r0, [r0, #0]
 8009c0e:	f380 8808 	msr	MSP, r0
 8009c12:	f04f 0000 	mov.w	r0, #0
 8009c16:	f380 8814 	msr	CONTROL, r0
 8009c1a:	b662      	cpsie	i
 8009c1c:	b661      	cpsie	f
 8009c1e:	f3bf 8f4f 	dsb	sy
 8009c22:	f3bf 8f6f 	isb	sy
 8009c26:	df00      	svc	0
 8009c28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009c2a:	bf00      	nop
 8009c2c:	e000ed08 	.word	0xe000ed08

08009c30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b086      	sub	sp, #24
 8009c34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009c36:	4b46      	ldr	r3, [pc, #280]	; (8009d50 <xPortStartScheduler+0x120>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a46      	ldr	r2, [pc, #280]	; (8009d54 <xPortStartScheduler+0x124>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d10a      	bne.n	8009c56 <xPortStartScheduler+0x26>
	__asm volatile
 8009c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c44:	f383 8811 	msr	BASEPRI, r3
 8009c48:	f3bf 8f6f 	isb	sy
 8009c4c:	f3bf 8f4f 	dsb	sy
 8009c50:	613b      	str	r3, [r7, #16]
}
 8009c52:	bf00      	nop
 8009c54:	e7fe      	b.n	8009c54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009c56:	4b3e      	ldr	r3, [pc, #248]	; (8009d50 <xPortStartScheduler+0x120>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a3f      	ldr	r2, [pc, #252]	; (8009d58 <xPortStartScheduler+0x128>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d10a      	bne.n	8009c76 <xPortStartScheduler+0x46>
	__asm volatile
 8009c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c64:	f383 8811 	msr	BASEPRI, r3
 8009c68:	f3bf 8f6f 	isb	sy
 8009c6c:	f3bf 8f4f 	dsb	sy
 8009c70:	60fb      	str	r3, [r7, #12]
}
 8009c72:	bf00      	nop
 8009c74:	e7fe      	b.n	8009c74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009c76:	4b39      	ldr	r3, [pc, #228]	; (8009d5c <xPortStartScheduler+0x12c>)
 8009c78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	b2db      	uxtb	r3, r3
 8009c80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	22ff      	movs	r2, #255	; 0xff
 8009c86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009c90:	78fb      	ldrb	r3, [r7, #3]
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009c98:	b2da      	uxtb	r2, r3
 8009c9a:	4b31      	ldr	r3, [pc, #196]	; (8009d60 <xPortStartScheduler+0x130>)
 8009c9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009c9e:	4b31      	ldr	r3, [pc, #196]	; (8009d64 <xPortStartScheduler+0x134>)
 8009ca0:	2207      	movs	r2, #7
 8009ca2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ca4:	e009      	b.n	8009cba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009ca6:	4b2f      	ldr	r3, [pc, #188]	; (8009d64 <xPortStartScheduler+0x134>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	3b01      	subs	r3, #1
 8009cac:	4a2d      	ldr	r2, [pc, #180]	; (8009d64 <xPortStartScheduler+0x134>)
 8009cae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009cb0:	78fb      	ldrb	r3, [r7, #3]
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	005b      	lsls	r3, r3, #1
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009cba:	78fb      	ldrb	r3, [r7, #3]
 8009cbc:	b2db      	uxtb	r3, r3
 8009cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cc2:	2b80      	cmp	r3, #128	; 0x80
 8009cc4:	d0ef      	beq.n	8009ca6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009cc6:	4b27      	ldr	r3, [pc, #156]	; (8009d64 <xPortStartScheduler+0x134>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f1c3 0307 	rsb	r3, r3, #7
 8009cce:	2b04      	cmp	r3, #4
 8009cd0:	d00a      	beq.n	8009ce8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd6:	f383 8811 	msr	BASEPRI, r3
 8009cda:	f3bf 8f6f 	isb	sy
 8009cde:	f3bf 8f4f 	dsb	sy
 8009ce2:	60bb      	str	r3, [r7, #8]
}
 8009ce4:	bf00      	nop
 8009ce6:	e7fe      	b.n	8009ce6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009ce8:	4b1e      	ldr	r3, [pc, #120]	; (8009d64 <xPortStartScheduler+0x134>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	021b      	lsls	r3, r3, #8
 8009cee:	4a1d      	ldr	r2, [pc, #116]	; (8009d64 <xPortStartScheduler+0x134>)
 8009cf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009cf2:	4b1c      	ldr	r3, [pc, #112]	; (8009d64 <xPortStartScheduler+0x134>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009cfa:	4a1a      	ldr	r2, [pc, #104]	; (8009d64 <xPortStartScheduler+0x134>)
 8009cfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	b2da      	uxtb	r2, r3
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009d06:	4b18      	ldr	r3, [pc, #96]	; (8009d68 <xPortStartScheduler+0x138>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a17      	ldr	r2, [pc, #92]	; (8009d68 <xPortStartScheduler+0x138>)
 8009d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009d10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009d12:	4b15      	ldr	r3, [pc, #84]	; (8009d68 <xPortStartScheduler+0x138>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a14      	ldr	r2, [pc, #80]	; (8009d68 <xPortStartScheduler+0x138>)
 8009d18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009d1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009d1e:	f000 f8dd 	bl	8009edc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009d22:	4b12      	ldr	r3, [pc, #72]	; (8009d6c <xPortStartScheduler+0x13c>)
 8009d24:	2200      	movs	r2, #0
 8009d26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009d28:	f000 f8fc 	bl	8009f24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009d2c:	4b10      	ldr	r3, [pc, #64]	; (8009d70 <xPortStartScheduler+0x140>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a0f      	ldr	r2, [pc, #60]	; (8009d70 <xPortStartScheduler+0x140>)
 8009d32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009d36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009d38:	f7ff ff66 	bl	8009c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009d3c:	f7fe ff4c 	bl	8008bd8 <vTaskSwitchContext>
	prvTaskExitError();
 8009d40:	f7ff ff20 	bl	8009b84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009d44:	2300      	movs	r3, #0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3718      	adds	r7, #24
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	e000ed00 	.word	0xe000ed00
 8009d54:	410fc271 	.word	0x410fc271
 8009d58:	410fc270 	.word	0x410fc270
 8009d5c:	e000e400 	.word	0xe000e400
 8009d60:	200011b0 	.word	0x200011b0
 8009d64:	200011b4 	.word	0x200011b4
 8009d68:	e000ed20 	.word	0xe000ed20
 8009d6c:	2000000c 	.word	0x2000000c
 8009d70:	e000ef34 	.word	0xe000ef34

08009d74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
	__asm volatile
 8009d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d7e:	f383 8811 	msr	BASEPRI, r3
 8009d82:	f3bf 8f6f 	isb	sy
 8009d86:	f3bf 8f4f 	dsb	sy
 8009d8a:	607b      	str	r3, [r7, #4]
}
 8009d8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009d8e:	4b0f      	ldr	r3, [pc, #60]	; (8009dcc <vPortEnterCritical+0x58>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	3301      	adds	r3, #1
 8009d94:	4a0d      	ldr	r2, [pc, #52]	; (8009dcc <vPortEnterCritical+0x58>)
 8009d96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009d98:	4b0c      	ldr	r3, [pc, #48]	; (8009dcc <vPortEnterCritical+0x58>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d10f      	bne.n	8009dc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009da0:	4b0b      	ldr	r3, [pc, #44]	; (8009dd0 <vPortEnterCritical+0x5c>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d00a      	beq.n	8009dc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dae:	f383 8811 	msr	BASEPRI, r3
 8009db2:	f3bf 8f6f 	isb	sy
 8009db6:	f3bf 8f4f 	dsb	sy
 8009dba:	603b      	str	r3, [r7, #0]
}
 8009dbc:	bf00      	nop
 8009dbe:	e7fe      	b.n	8009dbe <vPortEnterCritical+0x4a>
	}
}
 8009dc0:	bf00      	nop
 8009dc2:	370c      	adds	r7, #12
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr
 8009dcc:	2000000c 	.word	0x2000000c
 8009dd0:	e000ed04 	.word	0xe000ed04

08009dd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009dda:	4b12      	ldr	r3, [pc, #72]	; (8009e24 <vPortExitCritical+0x50>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d10a      	bne.n	8009df8 <vPortExitCritical+0x24>
	__asm volatile
 8009de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de6:	f383 8811 	msr	BASEPRI, r3
 8009dea:	f3bf 8f6f 	isb	sy
 8009dee:	f3bf 8f4f 	dsb	sy
 8009df2:	607b      	str	r3, [r7, #4]
}
 8009df4:	bf00      	nop
 8009df6:	e7fe      	b.n	8009df6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009df8:	4b0a      	ldr	r3, [pc, #40]	; (8009e24 <vPortExitCritical+0x50>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	4a09      	ldr	r2, [pc, #36]	; (8009e24 <vPortExitCritical+0x50>)
 8009e00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009e02:	4b08      	ldr	r3, [pc, #32]	; (8009e24 <vPortExitCritical+0x50>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d105      	bne.n	8009e16 <vPortExitCritical+0x42>
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	f383 8811 	msr	BASEPRI, r3
}
 8009e14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009e16:	bf00      	nop
 8009e18:	370c      	adds	r7, #12
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr
 8009e22:	bf00      	nop
 8009e24:	2000000c 	.word	0x2000000c
	...

08009e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009e30:	f3ef 8009 	mrs	r0, PSP
 8009e34:	f3bf 8f6f 	isb	sy
 8009e38:	4b15      	ldr	r3, [pc, #84]	; (8009e90 <pxCurrentTCBConst>)
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	f01e 0f10 	tst.w	lr, #16
 8009e40:	bf08      	it	eq
 8009e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e4a:	6010      	str	r0, [r2, #0]
 8009e4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009e50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009e54:	f380 8811 	msr	BASEPRI, r0
 8009e58:	f3bf 8f4f 	dsb	sy
 8009e5c:	f3bf 8f6f 	isb	sy
 8009e60:	f7fe feba 	bl	8008bd8 <vTaskSwitchContext>
 8009e64:	f04f 0000 	mov.w	r0, #0
 8009e68:	f380 8811 	msr	BASEPRI, r0
 8009e6c:	bc09      	pop	{r0, r3}
 8009e6e:	6819      	ldr	r1, [r3, #0]
 8009e70:	6808      	ldr	r0, [r1, #0]
 8009e72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e76:	f01e 0f10 	tst.w	lr, #16
 8009e7a:	bf08      	it	eq
 8009e7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009e80:	f380 8809 	msr	PSP, r0
 8009e84:	f3bf 8f6f 	isb	sy
 8009e88:	4770      	bx	lr
 8009e8a:	bf00      	nop
 8009e8c:	f3af 8000 	nop.w

08009e90 <pxCurrentTCBConst>:
 8009e90:	20000b84 	.word	0x20000b84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009e94:	bf00      	nop
 8009e96:	bf00      	nop

08009e98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8009e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea2:	f383 8811 	msr	BASEPRI, r3
 8009ea6:	f3bf 8f6f 	isb	sy
 8009eaa:	f3bf 8f4f 	dsb	sy
 8009eae:	607b      	str	r3, [r7, #4]
}
 8009eb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009eb2:	f7fe fdd7 	bl	8008a64 <xTaskIncrementTick>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d003      	beq.n	8009ec4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009ebc:	4b06      	ldr	r3, [pc, #24]	; (8009ed8 <xPortSysTickHandler+0x40>)
 8009ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ec2:	601a      	str	r2, [r3, #0]
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	f383 8811 	msr	BASEPRI, r3
}
 8009ece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ed0:	bf00      	nop
 8009ed2:	3708      	adds	r7, #8
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	e000ed04 	.word	0xe000ed04

08009edc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009edc:	b480      	push	{r7}
 8009ede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009ee0:	4b0b      	ldr	r3, [pc, #44]	; (8009f10 <vPortSetupTimerInterrupt+0x34>)
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009ee6:	4b0b      	ldr	r3, [pc, #44]	; (8009f14 <vPortSetupTimerInterrupt+0x38>)
 8009ee8:	2200      	movs	r2, #0
 8009eea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009eec:	4b0a      	ldr	r3, [pc, #40]	; (8009f18 <vPortSetupTimerInterrupt+0x3c>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a0a      	ldr	r2, [pc, #40]	; (8009f1c <vPortSetupTimerInterrupt+0x40>)
 8009ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ef6:	099b      	lsrs	r3, r3, #6
 8009ef8:	4a09      	ldr	r2, [pc, #36]	; (8009f20 <vPortSetupTimerInterrupt+0x44>)
 8009efa:	3b01      	subs	r3, #1
 8009efc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009efe:	4b04      	ldr	r3, [pc, #16]	; (8009f10 <vPortSetupTimerInterrupt+0x34>)
 8009f00:	2207      	movs	r2, #7
 8009f02:	601a      	str	r2, [r3, #0]
}
 8009f04:	bf00      	nop
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr
 8009f0e:	bf00      	nop
 8009f10:	e000e010 	.word	0xe000e010
 8009f14:	e000e018 	.word	0xe000e018
 8009f18:	20000000 	.word	0x20000000
 8009f1c:	10624dd3 	.word	0x10624dd3
 8009f20:	e000e014 	.word	0xe000e014

08009f24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009f24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009f34 <vPortEnableVFP+0x10>
 8009f28:	6801      	ldr	r1, [r0, #0]
 8009f2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009f2e:	6001      	str	r1, [r0, #0]
 8009f30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009f32:	bf00      	nop
 8009f34:	e000ed88 	.word	0xe000ed88

08009f38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009f3e:	f3ef 8305 	mrs	r3, IPSR
 8009f42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2b0f      	cmp	r3, #15
 8009f48:	d914      	bls.n	8009f74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009f4a:	4a17      	ldr	r2, [pc, #92]	; (8009fa8 <vPortValidateInterruptPriority+0x70>)
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	4413      	add	r3, r2
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009f54:	4b15      	ldr	r3, [pc, #84]	; (8009fac <vPortValidateInterruptPriority+0x74>)
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	7afa      	ldrb	r2, [r7, #11]
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d20a      	bcs.n	8009f74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f62:	f383 8811 	msr	BASEPRI, r3
 8009f66:	f3bf 8f6f 	isb	sy
 8009f6a:	f3bf 8f4f 	dsb	sy
 8009f6e:	607b      	str	r3, [r7, #4]
}
 8009f70:	bf00      	nop
 8009f72:	e7fe      	b.n	8009f72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009f74:	4b0e      	ldr	r3, [pc, #56]	; (8009fb0 <vPortValidateInterruptPriority+0x78>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009f7c:	4b0d      	ldr	r3, [pc, #52]	; (8009fb4 <vPortValidateInterruptPriority+0x7c>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d90a      	bls.n	8009f9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f88:	f383 8811 	msr	BASEPRI, r3
 8009f8c:	f3bf 8f6f 	isb	sy
 8009f90:	f3bf 8f4f 	dsb	sy
 8009f94:	603b      	str	r3, [r7, #0]
}
 8009f96:	bf00      	nop
 8009f98:	e7fe      	b.n	8009f98 <vPortValidateInterruptPriority+0x60>
	}
 8009f9a:	bf00      	nop
 8009f9c:	3714      	adds	r7, #20
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr
 8009fa6:	bf00      	nop
 8009fa8:	e000e3f0 	.word	0xe000e3f0
 8009fac:	200011b0 	.word	0x200011b0
 8009fb0:	e000ed0c 	.word	0xe000ed0c
 8009fb4:	200011b4 	.word	0x200011b4

08009fb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b08a      	sub	sp, #40	; 0x28
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009fc4:	f7fe fc92 	bl	80088ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009fc8:	4b5b      	ldr	r3, [pc, #364]	; (800a138 <pvPortMalloc+0x180>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d101      	bne.n	8009fd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009fd0:	f000 f920 	bl	800a214 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009fd4:	4b59      	ldr	r3, [pc, #356]	; (800a13c <pvPortMalloc+0x184>)
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	4013      	ands	r3, r2
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	f040 8093 	bne.w	800a108 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d01d      	beq.n	800a024 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009fe8:	2208      	movs	r2, #8
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	4413      	add	r3, r2
 8009fee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f003 0307 	and.w	r3, r3, #7
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d014      	beq.n	800a024 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f023 0307 	bic.w	r3, r3, #7
 800a000:	3308      	adds	r3, #8
 800a002:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f003 0307 	and.w	r3, r3, #7
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d00a      	beq.n	800a024 <pvPortMalloc+0x6c>
	__asm volatile
 800a00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a012:	f383 8811 	msr	BASEPRI, r3
 800a016:	f3bf 8f6f 	isb	sy
 800a01a:	f3bf 8f4f 	dsb	sy
 800a01e:	617b      	str	r3, [r7, #20]
}
 800a020:	bf00      	nop
 800a022:	e7fe      	b.n	800a022 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d06e      	beq.n	800a108 <pvPortMalloc+0x150>
 800a02a:	4b45      	ldr	r3, [pc, #276]	; (800a140 <pvPortMalloc+0x188>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	429a      	cmp	r2, r3
 800a032:	d869      	bhi.n	800a108 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a034:	4b43      	ldr	r3, [pc, #268]	; (800a144 <pvPortMalloc+0x18c>)
 800a036:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a038:	4b42      	ldr	r3, [pc, #264]	; (800a144 <pvPortMalloc+0x18c>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a03e:	e004      	b.n	800a04a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a042:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	429a      	cmp	r2, r3
 800a052:	d903      	bls.n	800a05c <pvPortMalloc+0xa4>
 800a054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d1f1      	bne.n	800a040 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a05c:	4b36      	ldr	r3, [pc, #216]	; (800a138 <pvPortMalloc+0x180>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a062:	429a      	cmp	r2, r3
 800a064:	d050      	beq.n	800a108 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a066:	6a3b      	ldr	r3, [r7, #32]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	2208      	movs	r2, #8
 800a06c:	4413      	add	r3, r2
 800a06e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	6a3b      	ldr	r3, [r7, #32]
 800a076:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07a:	685a      	ldr	r2, [r3, #4]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	1ad2      	subs	r2, r2, r3
 800a080:	2308      	movs	r3, #8
 800a082:	005b      	lsls	r3, r3, #1
 800a084:	429a      	cmp	r2, r3
 800a086:	d91f      	bls.n	800a0c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	4413      	add	r3, r2
 800a08e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a090:	69bb      	ldr	r3, [r7, #24]
 800a092:	f003 0307 	and.w	r3, r3, #7
 800a096:	2b00      	cmp	r3, #0
 800a098:	d00a      	beq.n	800a0b0 <pvPortMalloc+0xf8>
	__asm volatile
 800a09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a09e:	f383 8811 	msr	BASEPRI, r3
 800a0a2:	f3bf 8f6f 	isb	sy
 800a0a6:	f3bf 8f4f 	dsb	sy
 800a0aa:	613b      	str	r3, [r7, #16]
}
 800a0ac:	bf00      	nop
 800a0ae:	e7fe      	b.n	800a0ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b2:	685a      	ldr	r2, [r3, #4]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	1ad2      	subs	r2, r2, r3
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a0c2:	69b8      	ldr	r0, [r7, #24]
 800a0c4:	f000 f908 	bl	800a2d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a0c8:	4b1d      	ldr	r3, [pc, #116]	; (800a140 <pvPortMalloc+0x188>)
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	1ad3      	subs	r3, r2, r3
 800a0d2:	4a1b      	ldr	r2, [pc, #108]	; (800a140 <pvPortMalloc+0x188>)
 800a0d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a0d6:	4b1a      	ldr	r3, [pc, #104]	; (800a140 <pvPortMalloc+0x188>)
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	4b1b      	ldr	r3, [pc, #108]	; (800a148 <pvPortMalloc+0x190>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d203      	bcs.n	800a0ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a0e2:	4b17      	ldr	r3, [pc, #92]	; (800a140 <pvPortMalloc+0x188>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a18      	ldr	r2, [pc, #96]	; (800a148 <pvPortMalloc+0x190>)
 800a0e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ec:	685a      	ldr	r2, [r3, #4]
 800a0ee:	4b13      	ldr	r3, [pc, #76]	; (800a13c <pvPortMalloc+0x184>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	431a      	orrs	r2, r3
 800a0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a0fe:	4b13      	ldr	r3, [pc, #76]	; (800a14c <pvPortMalloc+0x194>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	3301      	adds	r3, #1
 800a104:	4a11      	ldr	r2, [pc, #68]	; (800a14c <pvPortMalloc+0x194>)
 800a106:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a108:	f7fe fbfe 	bl	8008908 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	f003 0307 	and.w	r3, r3, #7
 800a112:	2b00      	cmp	r3, #0
 800a114:	d00a      	beq.n	800a12c <pvPortMalloc+0x174>
	__asm volatile
 800a116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11a:	f383 8811 	msr	BASEPRI, r3
 800a11e:	f3bf 8f6f 	isb	sy
 800a122:	f3bf 8f4f 	dsb	sy
 800a126:	60fb      	str	r3, [r7, #12]
}
 800a128:	bf00      	nop
 800a12a:	e7fe      	b.n	800a12a <pvPortMalloc+0x172>
	return pvReturn;
 800a12c:	69fb      	ldr	r3, [r7, #28]
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3728      	adds	r7, #40	; 0x28
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
 800a136:	bf00      	nop
 800a138:	20005fe0 	.word	0x20005fe0
 800a13c:	20005ff4 	.word	0x20005ff4
 800a140:	20005fe4 	.word	0x20005fe4
 800a144:	20005fd8 	.word	0x20005fd8
 800a148:	20005fe8 	.word	0x20005fe8
 800a14c:	20005fec 	.word	0x20005fec

0800a150 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b086      	sub	sp, #24
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d04d      	beq.n	800a1fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a162:	2308      	movs	r3, #8
 800a164:	425b      	negs	r3, r3
 800a166:	697a      	ldr	r2, [r7, #20]
 800a168:	4413      	add	r3, r2
 800a16a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	685a      	ldr	r2, [r3, #4]
 800a174:	4b24      	ldr	r3, [pc, #144]	; (800a208 <vPortFree+0xb8>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4013      	ands	r3, r2
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d10a      	bne.n	800a194 <vPortFree+0x44>
	__asm volatile
 800a17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a182:	f383 8811 	msr	BASEPRI, r3
 800a186:	f3bf 8f6f 	isb	sy
 800a18a:	f3bf 8f4f 	dsb	sy
 800a18e:	60fb      	str	r3, [r7, #12]
}
 800a190:	bf00      	nop
 800a192:	e7fe      	b.n	800a192 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d00a      	beq.n	800a1b2 <vPortFree+0x62>
	__asm volatile
 800a19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a0:	f383 8811 	msr	BASEPRI, r3
 800a1a4:	f3bf 8f6f 	isb	sy
 800a1a8:	f3bf 8f4f 	dsb	sy
 800a1ac:	60bb      	str	r3, [r7, #8]
}
 800a1ae:	bf00      	nop
 800a1b0:	e7fe      	b.n	800a1b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	685a      	ldr	r2, [r3, #4]
 800a1b6:	4b14      	ldr	r3, [pc, #80]	; (800a208 <vPortFree+0xb8>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4013      	ands	r3, r2
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d01e      	beq.n	800a1fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d11a      	bne.n	800a1fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	685a      	ldr	r2, [r3, #4]
 800a1cc:	4b0e      	ldr	r3, [pc, #56]	; (800a208 <vPortFree+0xb8>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	43db      	mvns	r3, r3
 800a1d2:	401a      	ands	r2, r3
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a1d8:	f7fe fb88 	bl	80088ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	685a      	ldr	r2, [r3, #4]
 800a1e0:	4b0a      	ldr	r3, [pc, #40]	; (800a20c <vPortFree+0xbc>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4413      	add	r3, r2
 800a1e6:	4a09      	ldr	r2, [pc, #36]	; (800a20c <vPortFree+0xbc>)
 800a1e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a1ea:	6938      	ldr	r0, [r7, #16]
 800a1ec:	f000 f874 	bl	800a2d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a1f0:	4b07      	ldr	r3, [pc, #28]	; (800a210 <vPortFree+0xc0>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	4a06      	ldr	r2, [pc, #24]	; (800a210 <vPortFree+0xc0>)
 800a1f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a1fa:	f7fe fb85 	bl	8008908 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a1fe:	bf00      	nop
 800a200:	3718      	adds	r7, #24
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	20005ff4 	.word	0x20005ff4
 800a20c:	20005fe4 	.word	0x20005fe4
 800a210:	20005ff0 	.word	0x20005ff0

0800a214 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a214:	b480      	push	{r7}
 800a216:	b085      	sub	sp, #20
 800a218:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a21a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800a21e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a220:	4b27      	ldr	r3, [pc, #156]	; (800a2c0 <prvHeapInit+0xac>)
 800a222:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f003 0307 	and.w	r3, r3, #7
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d00c      	beq.n	800a248 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	3307      	adds	r3, #7
 800a232:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f023 0307 	bic.w	r3, r3, #7
 800a23a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a23c:	68ba      	ldr	r2, [r7, #8]
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	1ad3      	subs	r3, r2, r3
 800a242:	4a1f      	ldr	r2, [pc, #124]	; (800a2c0 <prvHeapInit+0xac>)
 800a244:	4413      	add	r3, r2
 800a246:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a24c:	4a1d      	ldr	r2, [pc, #116]	; (800a2c4 <prvHeapInit+0xb0>)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a252:	4b1c      	ldr	r3, [pc, #112]	; (800a2c4 <prvHeapInit+0xb0>)
 800a254:	2200      	movs	r2, #0
 800a256:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	68ba      	ldr	r2, [r7, #8]
 800a25c:	4413      	add	r3, r2
 800a25e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a260:	2208      	movs	r2, #8
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	1a9b      	subs	r3, r3, r2
 800a266:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f023 0307 	bic.w	r3, r3, #7
 800a26e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	4a15      	ldr	r2, [pc, #84]	; (800a2c8 <prvHeapInit+0xb4>)
 800a274:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a276:	4b14      	ldr	r3, [pc, #80]	; (800a2c8 <prvHeapInit+0xb4>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	2200      	movs	r2, #0
 800a27c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a27e:	4b12      	ldr	r3, [pc, #72]	; (800a2c8 <prvHeapInit+0xb4>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	2200      	movs	r2, #0
 800a284:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	68fa      	ldr	r2, [r7, #12]
 800a28e:	1ad2      	subs	r2, r2, r3
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a294:	4b0c      	ldr	r3, [pc, #48]	; (800a2c8 <prvHeapInit+0xb4>)
 800a296:	681a      	ldr	r2, [r3, #0]
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	4a0a      	ldr	r2, [pc, #40]	; (800a2cc <prvHeapInit+0xb8>)
 800a2a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	4a09      	ldr	r2, [pc, #36]	; (800a2d0 <prvHeapInit+0xbc>)
 800a2aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a2ac:	4b09      	ldr	r3, [pc, #36]	; (800a2d4 <prvHeapInit+0xc0>)
 800a2ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a2b2:	601a      	str	r2, [r3, #0]
}
 800a2b4:	bf00      	nop
 800a2b6:	3714      	adds	r7, #20
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr
 800a2c0:	200011b8 	.word	0x200011b8
 800a2c4:	20005fd8 	.word	0x20005fd8
 800a2c8:	20005fe0 	.word	0x20005fe0
 800a2cc:	20005fe8 	.word	0x20005fe8
 800a2d0:	20005fe4 	.word	0x20005fe4
 800a2d4:	20005ff4 	.word	0x20005ff4

0800a2d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b085      	sub	sp, #20
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a2e0:	4b28      	ldr	r3, [pc, #160]	; (800a384 <prvInsertBlockIntoFreeList+0xac>)
 800a2e2:	60fb      	str	r3, [r7, #12]
 800a2e4:	e002      	b.n	800a2ec <prvInsertBlockIntoFreeList+0x14>
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	60fb      	str	r3, [r7, #12]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	687a      	ldr	r2, [r7, #4]
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d8f7      	bhi.n	800a2e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	68ba      	ldr	r2, [r7, #8]
 800a300:	4413      	add	r3, r2
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	429a      	cmp	r2, r3
 800a306:	d108      	bne.n	800a31a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	685a      	ldr	r2, [r3, #4]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	441a      	add	r2, r3
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	68ba      	ldr	r2, [r7, #8]
 800a324:	441a      	add	r2, r3
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d118      	bne.n	800a360 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	4b15      	ldr	r3, [pc, #84]	; (800a388 <prvInsertBlockIntoFreeList+0xb0>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	429a      	cmp	r2, r3
 800a338:	d00d      	beq.n	800a356 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	685a      	ldr	r2, [r3, #4]
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	441a      	add	r2, r3
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	601a      	str	r2, [r3, #0]
 800a354:	e008      	b.n	800a368 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a356:	4b0c      	ldr	r3, [pc, #48]	; (800a388 <prvInsertBlockIntoFreeList+0xb0>)
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	601a      	str	r2, [r3, #0]
 800a35e:	e003      	b.n	800a368 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d002      	beq.n	800a376 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a376:	bf00      	nop
 800a378:	3714      	adds	r7, #20
 800a37a:	46bd      	mov	sp, r7
 800a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a380:	4770      	bx	lr
 800a382:	bf00      	nop
 800a384:	20005fd8 	.word	0x20005fd8
 800a388:	20005fe0 	.word	0x20005fe0

0800a38c <__cvt>:
 800a38c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a390:	ec55 4b10 	vmov	r4, r5, d0
 800a394:	2d00      	cmp	r5, #0
 800a396:	460e      	mov	r6, r1
 800a398:	4619      	mov	r1, r3
 800a39a:	462b      	mov	r3, r5
 800a39c:	bfbb      	ittet	lt
 800a39e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a3a2:	461d      	movlt	r5, r3
 800a3a4:	2300      	movge	r3, #0
 800a3a6:	232d      	movlt	r3, #45	; 0x2d
 800a3a8:	700b      	strb	r3, [r1, #0]
 800a3aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a3b0:	4691      	mov	r9, r2
 800a3b2:	f023 0820 	bic.w	r8, r3, #32
 800a3b6:	bfbc      	itt	lt
 800a3b8:	4622      	movlt	r2, r4
 800a3ba:	4614      	movlt	r4, r2
 800a3bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a3c0:	d005      	beq.n	800a3ce <__cvt+0x42>
 800a3c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a3c6:	d100      	bne.n	800a3ca <__cvt+0x3e>
 800a3c8:	3601      	adds	r6, #1
 800a3ca:	2102      	movs	r1, #2
 800a3cc:	e000      	b.n	800a3d0 <__cvt+0x44>
 800a3ce:	2103      	movs	r1, #3
 800a3d0:	ab03      	add	r3, sp, #12
 800a3d2:	9301      	str	r3, [sp, #4]
 800a3d4:	ab02      	add	r3, sp, #8
 800a3d6:	9300      	str	r3, [sp, #0]
 800a3d8:	ec45 4b10 	vmov	d0, r4, r5
 800a3dc:	4653      	mov	r3, sl
 800a3de:	4632      	mov	r2, r6
 800a3e0:	f000 fed2 	bl	800b188 <_dtoa_r>
 800a3e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a3e8:	4607      	mov	r7, r0
 800a3ea:	d102      	bne.n	800a3f2 <__cvt+0x66>
 800a3ec:	f019 0f01 	tst.w	r9, #1
 800a3f0:	d022      	beq.n	800a438 <__cvt+0xac>
 800a3f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a3f6:	eb07 0906 	add.w	r9, r7, r6
 800a3fa:	d110      	bne.n	800a41e <__cvt+0x92>
 800a3fc:	783b      	ldrb	r3, [r7, #0]
 800a3fe:	2b30      	cmp	r3, #48	; 0x30
 800a400:	d10a      	bne.n	800a418 <__cvt+0x8c>
 800a402:	2200      	movs	r2, #0
 800a404:	2300      	movs	r3, #0
 800a406:	4620      	mov	r0, r4
 800a408:	4629      	mov	r1, r5
 800a40a:	f7f6 fb6d 	bl	8000ae8 <__aeabi_dcmpeq>
 800a40e:	b918      	cbnz	r0, 800a418 <__cvt+0x8c>
 800a410:	f1c6 0601 	rsb	r6, r6, #1
 800a414:	f8ca 6000 	str.w	r6, [sl]
 800a418:	f8da 3000 	ldr.w	r3, [sl]
 800a41c:	4499      	add	r9, r3
 800a41e:	2200      	movs	r2, #0
 800a420:	2300      	movs	r3, #0
 800a422:	4620      	mov	r0, r4
 800a424:	4629      	mov	r1, r5
 800a426:	f7f6 fb5f 	bl	8000ae8 <__aeabi_dcmpeq>
 800a42a:	b108      	cbz	r0, 800a430 <__cvt+0xa4>
 800a42c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a430:	2230      	movs	r2, #48	; 0x30
 800a432:	9b03      	ldr	r3, [sp, #12]
 800a434:	454b      	cmp	r3, r9
 800a436:	d307      	bcc.n	800a448 <__cvt+0xbc>
 800a438:	9b03      	ldr	r3, [sp, #12]
 800a43a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a43c:	1bdb      	subs	r3, r3, r7
 800a43e:	4638      	mov	r0, r7
 800a440:	6013      	str	r3, [r2, #0]
 800a442:	b004      	add	sp, #16
 800a444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a448:	1c59      	adds	r1, r3, #1
 800a44a:	9103      	str	r1, [sp, #12]
 800a44c:	701a      	strb	r2, [r3, #0]
 800a44e:	e7f0      	b.n	800a432 <__cvt+0xa6>

0800a450 <__exponent>:
 800a450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a452:	4603      	mov	r3, r0
 800a454:	2900      	cmp	r1, #0
 800a456:	bfb8      	it	lt
 800a458:	4249      	neglt	r1, r1
 800a45a:	f803 2b02 	strb.w	r2, [r3], #2
 800a45e:	bfb4      	ite	lt
 800a460:	222d      	movlt	r2, #45	; 0x2d
 800a462:	222b      	movge	r2, #43	; 0x2b
 800a464:	2909      	cmp	r1, #9
 800a466:	7042      	strb	r2, [r0, #1]
 800a468:	dd2a      	ble.n	800a4c0 <__exponent+0x70>
 800a46a:	f10d 0207 	add.w	r2, sp, #7
 800a46e:	4617      	mov	r7, r2
 800a470:	260a      	movs	r6, #10
 800a472:	4694      	mov	ip, r2
 800a474:	fb91 f5f6 	sdiv	r5, r1, r6
 800a478:	fb06 1415 	mls	r4, r6, r5, r1
 800a47c:	3430      	adds	r4, #48	; 0x30
 800a47e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a482:	460c      	mov	r4, r1
 800a484:	2c63      	cmp	r4, #99	; 0x63
 800a486:	f102 32ff 	add.w	r2, r2, #4294967295
 800a48a:	4629      	mov	r1, r5
 800a48c:	dcf1      	bgt.n	800a472 <__exponent+0x22>
 800a48e:	3130      	adds	r1, #48	; 0x30
 800a490:	f1ac 0402 	sub.w	r4, ip, #2
 800a494:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a498:	1c41      	adds	r1, r0, #1
 800a49a:	4622      	mov	r2, r4
 800a49c:	42ba      	cmp	r2, r7
 800a49e:	d30a      	bcc.n	800a4b6 <__exponent+0x66>
 800a4a0:	f10d 0209 	add.w	r2, sp, #9
 800a4a4:	eba2 020c 	sub.w	r2, r2, ip
 800a4a8:	42bc      	cmp	r4, r7
 800a4aa:	bf88      	it	hi
 800a4ac:	2200      	movhi	r2, #0
 800a4ae:	4413      	add	r3, r2
 800a4b0:	1a18      	subs	r0, r3, r0
 800a4b2:	b003      	add	sp, #12
 800a4b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4b6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a4ba:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a4be:	e7ed      	b.n	800a49c <__exponent+0x4c>
 800a4c0:	2330      	movs	r3, #48	; 0x30
 800a4c2:	3130      	adds	r1, #48	; 0x30
 800a4c4:	7083      	strb	r3, [r0, #2]
 800a4c6:	70c1      	strb	r1, [r0, #3]
 800a4c8:	1d03      	adds	r3, r0, #4
 800a4ca:	e7f1      	b.n	800a4b0 <__exponent+0x60>

0800a4cc <_printf_float>:
 800a4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4d0:	ed2d 8b02 	vpush	{d8}
 800a4d4:	b08d      	sub	sp, #52	; 0x34
 800a4d6:	460c      	mov	r4, r1
 800a4d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a4dc:	4616      	mov	r6, r2
 800a4de:	461f      	mov	r7, r3
 800a4e0:	4605      	mov	r5, r0
 800a4e2:	f000 fceb 	bl	800aebc <_localeconv_r>
 800a4e6:	f8d0 a000 	ldr.w	sl, [r0]
 800a4ea:	4650      	mov	r0, sl
 800a4ec:	f7f5 fed0 	bl	8000290 <strlen>
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	930a      	str	r3, [sp, #40]	; 0x28
 800a4f4:	6823      	ldr	r3, [r4, #0]
 800a4f6:	9305      	str	r3, [sp, #20]
 800a4f8:	f8d8 3000 	ldr.w	r3, [r8]
 800a4fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a500:	3307      	adds	r3, #7
 800a502:	f023 0307 	bic.w	r3, r3, #7
 800a506:	f103 0208 	add.w	r2, r3, #8
 800a50a:	f8c8 2000 	str.w	r2, [r8]
 800a50e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a512:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a516:	9307      	str	r3, [sp, #28]
 800a518:	f8cd 8018 	str.w	r8, [sp, #24]
 800a51c:	ee08 0a10 	vmov	s16, r0
 800a520:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a524:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a528:	4b9e      	ldr	r3, [pc, #632]	; (800a7a4 <_printf_float+0x2d8>)
 800a52a:	f04f 32ff 	mov.w	r2, #4294967295
 800a52e:	f7f6 fb0d 	bl	8000b4c <__aeabi_dcmpun>
 800a532:	bb88      	cbnz	r0, 800a598 <_printf_float+0xcc>
 800a534:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a538:	4b9a      	ldr	r3, [pc, #616]	; (800a7a4 <_printf_float+0x2d8>)
 800a53a:	f04f 32ff 	mov.w	r2, #4294967295
 800a53e:	f7f6 fae7 	bl	8000b10 <__aeabi_dcmple>
 800a542:	bb48      	cbnz	r0, 800a598 <_printf_float+0xcc>
 800a544:	2200      	movs	r2, #0
 800a546:	2300      	movs	r3, #0
 800a548:	4640      	mov	r0, r8
 800a54a:	4649      	mov	r1, r9
 800a54c:	f7f6 fad6 	bl	8000afc <__aeabi_dcmplt>
 800a550:	b110      	cbz	r0, 800a558 <_printf_float+0x8c>
 800a552:	232d      	movs	r3, #45	; 0x2d
 800a554:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a558:	4a93      	ldr	r2, [pc, #588]	; (800a7a8 <_printf_float+0x2dc>)
 800a55a:	4b94      	ldr	r3, [pc, #592]	; (800a7ac <_printf_float+0x2e0>)
 800a55c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a560:	bf94      	ite	ls
 800a562:	4690      	movls	r8, r2
 800a564:	4698      	movhi	r8, r3
 800a566:	2303      	movs	r3, #3
 800a568:	6123      	str	r3, [r4, #16]
 800a56a:	9b05      	ldr	r3, [sp, #20]
 800a56c:	f023 0304 	bic.w	r3, r3, #4
 800a570:	6023      	str	r3, [r4, #0]
 800a572:	f04f 0900 	mov.w	r9, #0
 800a576:	9700      	str	r7, [sp, #0]
 800a578:	4633      	mov	r3, r6
 800a57a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a57c:	4621      	mov	r1, r4
 800a57e:	4628      	mov	r0, r5
 800a580:	f000 f9da 	bl	800a938 <_printf_common>
 800a584:	3001      	adds	r0, #1
 800a586:	f040 8090 	bne.w	800a6aa <_printf_float+0x1de>
 800a58a:	f04f 30ff 	mov.w	r0, #4294967295
 800a58e:	b00d      	add	sp, #52	; 0x34
 800a590:	ecbd 8b02 	vpop	{d8}
 800a594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a598:	4642      	mov	r2, r8
 800a59a:	464b      	mov	r3, r9
 800a59c:	4640      	mov	r0, r8
 800a59e:	4649      	mov	r1, r9
 800a5a0:	f7f6 fad4 	bl	8000b4c <__aeabi_dcmpun>
 800a5a4:	b140      	cbz	r0, 800a5b8 <_printf_float+0xec>
 800a5a6:	464b      	mov	r3, r9
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	bfbc      	itt	lt
 800a5ac:	232d      	movlt	r3, #45	; 0x2d
 800a5ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a5b2:	4a7f      	ldr	r2, [pc, #508]	; (800a7b0 <_printf_float+0x2e4>)
 800a5b4:	4b7f      	ldr	r3, [pc, #508]	; (800a7b4 <_printf_float+0x2e8>)
 800a5b6:	e7d1      	b.n	800a55c <_printf_float+0x90>
 800a5b8:	6863      	ldr	r3, [r4, #4]
 800a5ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a5be:	9206      	str	r2, [sp, #24]
 800a5c0:	1c5a      	adds	r2, r3, #1
 800a5c2:	d13f      	bne.n	800a644 <_printf_float+0x178>
 800a5c4:	2306      	movs	r3, #6
 800a5c6:	6063      	str	r3, [r4, #4]
 800a5c8:	9b05      	ldr	r3, [sp, #20]
 800a5ca:	6861      	ldr	r1, [r4, #4]
 800a5cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	9303      	str	r3, [sp, #12]
 800a5d4:	ab0a      	add	r3, sp, #40	; 0x28
 800a5d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a5da:	ab09      	add	r3, sp, #36	; 0x24
 800a5dc:	ec49 8b10 	vmov	d0, r8, r9
 800a5e0:	9300      	str	r3, [sp, #0]
 800a5e2:	6022      	str	r2, [r4, #0]
 800a5e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a5e8:	4628      	mov	r0, r5
 800a5ea:	f7ff fecf 	bl	800a38c <__cvt>
 800a5ee:	9b06      	ldr	r3, [sp, #24]
 800a5f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a5f2:	2b47      	cmp	r3, #71	; 0x47
 800a5f4:	4680      	mov	r8, r0
 800a5f6:	d108      	bne.n	800a60a <_printf_float+0x13e>
 800a5f8:	1cc8      	adds	r0, r1, #3
 800a5fa:	db02      	blt.n	800a602 <_printf_float+0x136>
 800a5fc:	6863      	ldr	r3, [r4, #4]
 800a5fe:	4299      	cmp	r1, r3
 800a600:	dd41      	ble.n	800a686 <_printf_float+0x1ba>
 800a602:	f1ab 0302 	sub.w	r3, fp, #2
 800a606:	fa5f fb83 	uxtb.w	fp, r3
 800a60a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a60e:	d820      	bhi.n	800a652 <_printf_float+0x186>
 800a610:	3901      	subs	r1, #1
 800a612:	465a      	mov	r2, fp
 800a614:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a618:	9109      	str	r1, [sp, #36]	; 0x24
 800a61a:	f7ff ff19 	bl	800a450 <__exponent>
 800a61e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a620:	1813      	adds	r3, r2, r0
 800a622:	2a01      	cmp	r2, #1
 800a624:	4681      	mov	r9, r0
 800a626:	6123      	str	r3, [r4, #16]
 800a628:	dc02      	bgt.n	800a630 <_printf_float+0x164>
 800a62a:	6822      	ldr	r2, [r4, #0]
 800a62c:	07d2      	lsls	r2, r2, #31
 800a62e:	d501      	bpl.n	800a634 <_printf_float+0x168>
 800a630:	3301      	adds	r3, #1
 800a632:	6123      	str	r3, [r4, #16]
 800a634:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d09c      	beq.n	800a576 <_printf_float+0xaa>
 800a63c:	232d      	movs	r3, #45	; 0x2d
 800a63e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a642:	e798      	b.n	800a576 <_printf_float+0xaa>
 800a644:	9a06      	ldr	r2, [sp, #24]
 800a646:	2a47      	cmp	r2, #71	; 0x47
 800a648:	d1be      	bne.n	800a5c8 <_printf_float+0xfc>
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d1bc      	bne.n	800a5c8 <_printf_float+0xfc>
 800a64e:	2301      	movs	r3, #1
 800a650:	e7b9      	b.n	800a5c6 <_printf_float+0xfa>
 800a652:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a656:	d118      	bne.n	800a68a <_printf_float+0x1be>
 800a658:	2900      	cmp	r1, #0
 800a65a:	6863      	ldr	r3, [r4, #4]
 800a65c:	dd0b      	ble.n	800a676 <_printf_float+0x1aa>
 800a65e:	6121      	str	r1, [r4, #16]
 800a660:	b913      	cbnz	r3, 800a668 <_printf_float+0x19c>
 800a662:	6822      	ldr	r2, [r4, #0]
 800a664:	07d0      	lsls	r0, r2, #31
 800a666:	d502      	bpl.n	800a66e <_printf_float+0x1a2>
 800a668:	3301      	adds	r3, #1
 800a66a:	440b      	add	r3, r1
 800a66c:	6123      	str	r3, [r4, #16]
 800a66e:	65a1      	str	r1, [r4, #88]	; 0x58
 800a670:	f04f 0900 	mov.w	r9, #0
 800a674:	e7de      	b.n	800a634 <_printf_float+0x168>
 800a676:	b913      	cbnz	r3, 800a67e <_printf_float+0x1b2>
 800a678:	6822      	ldr	r2, [r4, #0]
 800a67a:	07d2      	lsls	r2, r2, #31
 800a67c:	d501      	bpl.n	800a682 <_printf_float+0x1b6>
 800a67e:	3302      	adds	r3, #2
 800a680:	e7f4      	b.n	800a66c <_printf_float+0x1a0>
 800a682:	2301      	movs	r3, #1
 800a684:	e7f2      	b.n	800a66c <_printf_float+0x1a0>
 800a686:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a68a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a68c:	4299      	cmp	r1, r3
 800a68e:	db05      	blt.n	800a69c <_printf_float+0x1d0>
 800a690:	6823      	ldr	r3, [r4, #0]
 800a692:	6121      	str	r1, [r4, #16]
 800a694:	07d8      	lsls	r0, r3, #31
 800a696:	d5ea      	bpl.n	800a66e <_printf_float+0x1a2>
 800a698:	1c4b      	adds	r3, r1, #1
 800a69a:	e7e7      	b.n	800a66c <_printf_float+0x1a0>
 800a69c:	2900      	cmp	r1, #0
 800a69e:	bfd4      	ite	le
 800a6a0:	f1c1 0202 	rsble	r2, r1, #2
 800a6a4:	2201      	movgt	r2, #1
 800a6a6:	4413      	add	r3, r2
 800a6a8:	e7e0      	b.n	800a66c <_printf_float+0x1a0>
 800a6aa:	6823      	ldr	r3, [r4, #0]
 800a6ac:	055a      	lsls	r2, r3, #21
 800a6ae:	d407      	bmi.n	800a6c0 <_printf_float+0x1f4>
 800a6b0:	6923      	ldr	r3, [r4, #16]
 800a6b2:	4642      	mov	r2, r8
 800a6b4:	4631      	mov	r1, r6
 800a6b6:	4628      	mov	r0, r5
 800a6b8:	47b8      	blx	r7
 800a6ba:	3001      	adds	r0, #1
 800a6bc:	d12c      	bne.n	800a718 <_printf_float+0x24c>
 800a6be:	e764      	b.n	800a58a <_printf_float+0xbe>
 800a6c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a6c4:	f240 80e0 	bls.w	800a888 <_printf_float+0x3bc>
 800a6c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	f7f6 fa0a 	bl	8000ae8 <__aeabi_dcmpeq>
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	d034      	beq.n	800a742 <_printf_float+0x276>
 800a6d8:	4a37      	ldr	r2, [pc, #220]	; (800a7b8 <_printf_float+0x2ec>)
 800a6da:	2301      	movs	r3, #1
 800a6dc:	4631      	mov	r1, r6
 800a6de:	4628      	mov	r0, r5
 800a6e0:	47b8      	blx	r7
 800a6e2:	3001      	adds	r0, #1
 800a6e4:	f43f af51 	beq.w	800a58a <_printf_float+0xbe>
 800a6e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	db02      	blt.n	800a6f6 <_printf_float+0x22a>
 800a6f0:	6823      	ldr	r3, [r4, #0]
 800a6f2:	07d8      	lsls	r0, r3, #31
 800a6f4:	d510      	bpl.n	800a718 <_printf_float+0x24c>
 800a6f6:	ee18 3a10 	vmov	r3, s16
 800a6fa:	4652      	mov	r2, sl
 800a6fc:	4631      	mov	r1, r6
 800a6fe:	4628      	mov	r0, r5
 800a700:	47b8      	blx	r7
 800a702:	3001      	adds	r0, #1
 800a704:	f43f af41 	beq.w	800a58a <_printf_float+0xbe>
 800a708:	f04f 0800 	mov.w	r8, #0
 800a70c:	f104 091a 	add.w	r9, r4, #26
 800a710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a712:	3b01      	subs	r3, #1
 800a714:	4543      	cmp	r3, r8
 800a716:	dc09      	bgt.n	800a72c <_printf_float+0x260>
 800a718:	6823      	ldr	r3, [r4, #0]
 800a71a:	079b      	lsls	r3, r3, #30
 800a71c:	f100 8107 	bmi.w	800a92e <_printf_float+0x462>
 800a720:	68e0      	ldr	r0, [r4, #12]
 800a722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a724:	4298      	cmp	r0, r3
 800a726:	bfb8      	it	lt
 800a728:	4618      	movlt	r0, r3
 800a72a:	e730      	b.n	800a58e <_printf_float+0xc2>
 800a72c:	2301      	movs	r3, #1
 800a72e:	464a      	mov	r2, r9
 800a730:	4631      	mov	r1, r6
 800a732:	4628      	mov	r0, r5
 800a734:	47b8      	blx	r7
 800a736:	3001      	adds	r0, #1
 800a738:	f43f af27 	beq.w	800a58a <_printf_float+0xbe>
 800a73c:	f108 0801 	add.w	r8, r8, #1
 800a740:	e7e6      	b.n	800a710 <_printf_float+0x244>
 800a742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a744:	2b00      	cmp	r3, #0
 800a746:	dc39      	bgt.n	800a7bc <_printf_float+0x2f0>
 800a748:	4a1b      	ldr	r2, [pc, #108]	; (800a7b8 <_printf_float+0x2ec>)
 800a74a:	2301      	movs	r3, #1
 800a74c:	4631      	mov	r1, r6
 800a74e:	4628      	mov	r0, r5
 800a750:	47b8      	blx	r7
 800a752:	3001      	adds	r0, #1
 800a754:	f43f af19 	beq.w	800a58a <_printf_float+0xbe>
 800a758:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a75c:	4313      	orrs	r3, r2
 800a75e:	d102      	bne.n	800a766 <_printf_float+0x29a>
 800a760:	6823      	ldr	r3, [r4, #0]
 800a762:	07d9      	lsls	r1, r3, #31
 800a764:	d5d8      	bpl.n	800a718 <_printf_float+0x24c>
 800a766:	ee18 3a10 	vmov	r3, s16
 800a76a:	4652      	mov	r2, sl
 800a76c:	4631      	mov	r1, r6
 800a76e:	4628      	mov	r0, r5
 800a770:	47b8      	blx	r7
 800a772:	3001      	adds	r0, #1
 800a774:	f43f af09 	beq.w	800a58a <_printf_float+0xbe>
 800a778:	f04f 0900 	mov.w	r9, #0
 800a77c:	f104 0a1a 	add.w	sl, r4, #26
 800a780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a782:	425b      	negs	r3, r3
 800a784:	454b      	cmp	r3, r9
 800a786:	dc01      	bgt.n	800a78c <_printf_float+0x2c0>
 800a788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a78a:	e792      	b.n	800a6b2 <_printf_float+0x1e6>
 800a78c:	2301      	movs	r3, #1
 800a78e:	4652      	mov	r2, sl
 800a790:	4631      	mov	r1, r6
 800a792:	4628      	mov	r0, r5
 800a794:	47b8      	blx	r7
 800a796:	3001      	adds	r0, #1
 800a798:	f43f aef7 	beq.w	800a58a <_printf_float+0xbe>
 800a79c:	f109 0901 	add.w	r9, r9, #1
 800a7a0:	e7ee      	b.n	800a780 <_printf_float+0x2b4>
 800a7a2:	bf00      	nop
 800a7a4:	7fefffff 	.word	0x7fefffff
 800a7a8:	0800d0ac 	.word	0x0800d0ac
 800a7ac:	0800d0b0 	.word	0x0800d0b0
 800a7b0:	0800d0b4 	.word	0x0800d0b4
 800a7b4:	0800d0b8 	.word	0x0800d0b8
 800a7b8:	0800d0bc 	.word	0x0800d0bc
 800a7bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	bfa8      	it	ge
 800a7c4:	461a      	movge	r2, r3
 800a7c6:	2a00      	cmp	r2, #0
 800a7c8:	4691      	mov	r9, r2
 800a7ca:	dc37      	bgt.n	800a83c <_printf_float+0x370>
 800a7cc:	f04f 0b00 	mov.w	fp, #0
 800a7d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a7d4:	f104 021a 	add.w	r2, r4, #26
 800a7d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a7da:	9305      	str	r3, [sp, #20]
 800a7dc:	eba3 0309 	sub.w	r3, r3, r9
 800a7e0:	455b      	cmp	r3, fp
 800a7e2:	dc33      	bgt.n	800a84c <_printf_float+0x380>
 800a7e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	db3b      	blt.n	800a864 <_printf_float+0x398>
 800a7ec:	6823      	ldr	r3, [r4, #0]
 800a7ee:	07da      	lsls	r2, r3, #31
 800a7f0:	d438      	bmi.n	800a864 <_printf_float+0x398>
 800a7f2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a7f6:	eba2 0903 	sub.w	r9, r2, r3
 800a7fa:	9b05      	ldr	r3, [sp, #20]
 800a7fc:	1ad2      	subs	r2, r2, r3
 800a7fe:	4591      	cmp	r9, r2
 800a800:	bfa8      	it	ge
 800a802:	4691      	movge	r9, r2
 800a804:	f1b9 0f00 	cmp.w	r9, #0
 800a808:	dc35      	bgt.n	800a876 <_printf_float+0x3aa>
 800a80a:	f04f 0800 	mov.w	r8, #0
 800a80e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a812:	f104 0a1a 	add.w	sl, r4, #26
 800a816:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a81a:	1a9b      	subs	r3, r3, r2
 800a81c:	eba3 0309 	sub.w	r3, r3, r9
 800a820:	4543      	cmp	r3, r8
 800a822:	f77f af79 	ble.w	800a718 <_printf_float+0x24c>
 800a826:	2301      	movs	r3, #1
 800a828:	4652      	mov	r2, sl
 800a82a:	4631      	mov	r1, r6
 800a82c:	4628      	mov	r0, r5
 800a82e:	47b8      	blx	r7
 800a830:	3001      	adds	r0, #1
 800a832:	f43f aeaa 	beq.w	800a58a <_printf_float+0xbe>
 800a836:	f108 0801 	add.w	r8, r8, #1
 800a83a:	e7ec      	b.n	800a816 <_printf_float+0x34a>
 800a83c:	4613      	mov	r3, r2
 800a83e:	4631      	mov	r1, r6
 800a840:	4642      	mov	r2, r8
 800a842:	4628      	mov	r0, r5
 800a844:	47b8      	blx	r7
 800a846:	3001      	adds	r0, #1
 800a848:	d1c0      	bne.n	800a7cc <_printf_float+0x300>
 800a84a:	e69e      	b.n	800a58a <_printf_float+0xbe>
 800a84c:	2301      	movs	r3, #1
 800a84e:	4631      	mov	r1, r6
 800a850:	4628      	mov	r0, r5
 800a852:	9205      	str	r2, [sp, #20]
 800a854:	47b8      	blx	r7
 800a856:	3001      	adds	r0, #1
 800a858:	f43f ae97 	beq.w	800a58a <_printf_float+0xbe>
 800a85c:	9a05      	ldr	r2, [sp, #20]
 800a85e:	f10b 0b01 	add.w	fp, fp, #1
 800a862:	e7b9      	b.n	800a7d8 <_printf_float+0x30c>
 800a864:	ee18 3a10 	vmov	r3, s16
 800a868:	4652      	mov	r2, sl
 800a86a:	4631      	mov	r1, r6
 800a86c:	4628      	mov	r0, r5
 800a86e:	47b8      	blx	r7
 800a870:	3001      	adds	r0, #1
 800a872:	d1be      	bne.n	800a7f2 <_printf_float+0x326>
 800a874:	e689      	b.n	800a58a <_printf_float+0xbe>
 800a876:	9a05      	ldr	r2, [sp, #20]
 800a878:	464b      	mov	r3, r9
 800a87a:	4442      	add	r2, r8
 800a87c:	4631      	mov	r1, r6
 800a87e:	4628      	mov	r0, r5
 800a880:	47b8      	blx	r7
 800a882:	3001      	adds	r0, #1
 800a884:	d1c1      	bne.n	800a80a <_printf_float+0x33e>
 800a886:	e680      	b.n	800a58a <_printf_float+0xbe>
 800a888:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a88a:	2a01      	cmp	r2, #1
 800a88c:	dc01      	bgt.n	800a892 <_printf_float+0x3c6>
 800a88e:	07db      	lsls	r3, r3, #31
 800a890:	d53a      	bpl.n	800a908 <_printf_float+0x43c>
 800a892:	2301      	movs	r3, #1
 800a894:	4642      	mov	r2, r8
 800a896:	4631      	mov	r1, r6
 800a898:	4628      	mov	r0, r5
 800a89a:	47b8      	blx	r7
 800a89c:	3001      	adds	r0, #1
 800a89e:	f43f ae74 	beq.w	800a58a <_printf_float+0xbe>
 800a8a2:	ee18 3a10 	vmov	r3, s16
 800a8a6:	4652      	mov	r2, sl
 800a8a8:	4631      	mov	r1, r6
 800a8aa:	4628      	mov	r0, r5
 800a8ac:	47b8      	blx	r7
 800a8ae:	3001      	adds	r0, #1
 800a8b0:	f43f ae6b 	beq.w	800a58a <_printf_float+0xbe>
 800a8b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a8c0:	f7f6 f912 	bl	8000ae8 <__aeabi_dcmpeq>
 800a8c4:	b9d8      	cbnz	r0, 800a8fe <_printf_float+0x432>
 800a8c6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a8ca:	f108 0201 	add.w	r2, r8, #1
 800a8ce:	4631      	mov	r1, r6
 800a8d0:	4628      	mov	r0, r5
 800a8d2:	47b8      	blx	r7
 800a8d4:	3001      	adds	r0, #1
 800a8d6:	d10e      	bne.n	800a8f6 <_printf_float+0x42a>
 800a8d8:	e657      	b.n	800a58a <_printf_float+0xbe>
 800a8da:	2301      	movs	r3, #1
 800a8dc:	4652      	mov	r2, sl
 800a8de:	4631      	mov	r1, r6
 800a8e0:	4628      	mov	r0, r5
 800a8e2:	47b8      	blx	r7
 800a8e4:	3001      	adds	r0, #1
 800a8e6:	f43f ae50 	beq.w	800a58a <_printf_float+0xbe>
 800a8ea:	f108 0801 	add.w	r8, r8, #1
 800a8ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8f0:	3b01      	subs	r3, #1
 800a8f2:	4543      	cmp	r3, r8
 800a8f4:	dcf1      	bgt.n	800a8da <_printf_float+0x40e>
 800a8f6:	464b      	mov	r3, r9
 800a8f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a8fc:	e6da      	b.n	800a6b4 <_printf_float+0x1e8>
 800a8fe:	f04f 0800 	mov.w	r8, #0
 800a902:	f104 0a1a 	add.w	sl, r4, #26
 800a906:	e7f2      	b.n	800a8ee <_printf_float+0x422>
 800a908:	2301      	movs	r3, #1
 800a90a:	4642      	mov	r2, r8
 800a90c:	e7df      	b.n	800a8ce <_printf_float+0x402>
 800a90e:	2301      	movs	r3, #1
 800a910:	464a      	mov	r2, r9
 800a912:	4631      	mov	r1, r6
 800a914:	4628      	mov	r0, r5
 800a916:	47b8      	blx	r7
 800a918:	3001      	adds	r0, #1
 800a91a:	f43f ae36 	beq.w	800a58a <_printf_float+0xbe>
 800a91e:	f108 0801 	add.w	r8, r8, #1
 800a922:	68e3      	ldr	r3, [r4, #12]
 800a924:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a926:	1a5b      	subs	r3, r3, r1
 800a928:	4543      	cmp	r3, r8
 800a92a:	dcf0      	bgt.n	800a90e <_printf_float+0x442>
 800a92c:	e6f8      	b.n	800a720 <_printf_float+0x254>
 800a92e:	f04f 0800 	mov.w	r8, #0
 800a932:	f104 0919 	add.w	r9, r4, #25
 800a936:	e7f4      	b.n	800a922 <_printf_float+0x456>

0800a938 <_printf_common>:
 800a938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a93c:	4616      	mov	r6, r2
 800a93e:	4699      	mov	r9, r3
 800a940:	688a      	ldr	r2, [r1, #8]
 800a942:	690b      	ldr	r3, [r1, #16]
 800a944:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a948:	4293      	cmp	r3, r2
 800a94a:	bfb8      	it	lt
 800a94c:	4613      	movlt	r3, r2
 800a94e:	6033      	str	r3, [r6, #0]
 800a950:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a954:	4607      	mov	r7, r0
 800a956:	460c      	mov	r4, r1
 800a958:	b10a      	cbz	r2, 800a95e <_printf_common+0x26>
 800a95a:	3301      	adds	r3, #1
 800a95c:	6033      	str	r3, [r6, #0]
 800a95e:	6823      	ldr	r3, [r4, #0]
 800a960:	0699      	lsls	r1, r3, #26
 800a962:	bf42      	ittt	mi
 800a964:	6833      	ldrmi	r3, [r6, #0]
 800a966:	3302      	addmi	r3, #2
 800a968:	6033      	strmi	r3, [r6, #0]
 800a96a:	6825      	ldr	r5, [r4, #0]
 800a96c:	f015 0506 	ands.w	r5, r5, #6
 800a970:	d106      	bne.n	800a980 <_printf_common+0x48>
 800a972:	f104 0a19 	add.w	sl, r4, #25
 800a976:	68e3      	ldr	r3, [r4, #12]
 800a978:	6832      	ldr	r2, [r6, #0]
 800a97a:	1a9b      	subs	r3, r3, r2
 800a97c:	42ab      	cmp	r3, r5
 800a97e:	dc26      	bgt.n	800a9ce <_printf_common+0x96>
 800a980:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a984:	1e13      	subs	r3, r2, #0
 800a986:	6822      	ldr	r2, [r4, #0]
 800a988:	bf18      	it	ne
 800a98a:	2301      	movne	r3, #1
 800a98c:	0692      	lsls	r2, r2, #26
 800a98e:	d42b      	bmi.n	800a9e8 <_printf_common+0xb0>
 800a990:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a994:	4649      	mov	r1, r9
 800a996:	4638      	mov	r0, r7
 800a998:	47c0      	blx	r8
 800a99a:	3001      	adds	r0, #1
 800a99c:	d01e      	beq.n	800a9dc <_printf_common+0xa4>
 800a99e:	6823      	ldr	r3, [r4, #0]
 800a9a0:	6922      	ldr	r2, [r4, #16]
 800a9a2:	f003 0306 	and.w	r3, r3, #6
 800a9a6:	2b04      	cmp	r3, #4
 800a9a8:	bf02      	ittt	eq
 800a9aa:	68e5      	ldreq	r5, [r4, #12]
 800a9ac:	6833      	ldreq	r3, [r6, #0]
 800a9ae:	1aed      	subeq	r5, r5, r3
 800a9b0:	68a3      	ldr	r3, [r4, #8]
 800a9b2:	bf0c      	ite	eq
 800a9b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a9b8:	2500      	movne	r5, #0
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	bfc4      	itt	gt
 800a9be:	1a9b      	subgt	r3, r3, r2
 800a9c0:	18ed      	addgt	r5, r5, r3
 800a9c2:	2600      	movs	r6, #0
 800a9c4:	341a      	adds	r4, #26
 800a9c6:	42b5      	cmp	r5, r6
 800a9c8:	d11a      	bne.n	800aa00 <_printf_common+0xc8>
 800a9ca:	2000      	movs	r0, #0
 800a9cc:	e008      	b.n	800a9e0 <_printf_common+0xa8>
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	4652      	mov	r2, sl
 800a9d2:	4649      	mov	r1, r9
 800a9d4:	4638      	mov	r0, r7
 800a9d6:	47c0      	blx	r8
 800a9d8:	3001      	adds	r0, #1
 800a9da:	d103      	bne.n	800a9e4 <_printf_common+0xac>
 800a9dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a9e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9e4:	3501      	adds	r5, #1
 800a9e6:	e7c6      	b.n	800a976 <_printf_common+0x3e>
 800a9e8:	18e1      	adds	r1, r4, r3
 800a9ea:	1c5a      	adds	r2, r3, #1
 800a9ec:	2030      	movs	r0, #48	; 0x30
 800a9ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a9f2:	4422      	add	r2, r4
 800a9f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a9f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a9fc:	3302      	adds	r3, #2
 800a9fe:	e7c7      	b.n	800a990 <_printf_common+0x58>
 800aa00:	2301      	movs	r3, #1
 800aa02:	4622      	mov	r2, r4
 800aa04:	4649      	mov	r1, r9
 800aa06:	4638      	mov	r0, r7
 800aa08:	47c0      	blx	r8
 800aa0a:	3001      	adds	r0, #1
 800aa0c:	d0e6      	beq.n	800a9dc <_printf_common+0xa4>
 800aa0e:	3601      	adds	r6, #1
 800aa10:	e7d9      	b.n	800a9c6 <_printf_common+0x8e>
	...

0800aa14 <_printf_i>:
 800aa14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa18:	7e0f      	ldrb	r7, [r1, #24]
 800aa1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa1c:	2f78      	cmp	r7, #120	; 0x78
 800aa1e:	4691      	mov	r9, r2
 800aa20:	4680      	mov	r8, r0
 800aa22:	460c      	mov	r4, r1
 800aa24:	469a      	mov	sl, r3
 800aa26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aa2a:	d807      	bhi.n	800aa3c <_printf_i+0x28>
 800aa2c:	2f62      	cmp	r7, #98	; 0x62
 800aa2e:	d80a      	bhi.n	800aa46 <_printf_i+0x32>
 800aa30:	2f00      	cmp	r7, #0
 800aa32:	f000 80d4 	beq.w	800abde <_printf_i+0x1ca>
 800aa36:	2f58      	cmp	r7, #88	; 0x58
 800aa38:	f000 80c0 	beq.w	800abbc <_printf_i+0x1a8>
 800aa3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa44:	e03a      	b.n	800aabc <_printf_i+0xa8>
 800aa46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa4a:	2b15      	cmp	r3, #21
 800aa4c:	d8f6      	bhi.n	800aa3c <_printf_i+0x28>
 800aa4e:	a101      	add	r1, pc, #4	; (adr r1, 800aa54 <_printf_i+0x40>)
 800aa50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa54:	0800aaad 	.word	0x0800aaad
 800aa58:	0800aac1 	.word	0x0800aac1
 800aa5c:	0800aa3d 	.word	0x0800aa3d
 800aa60:	0800aa3d 	.word	0x0800aa3d
 800aa64:	0800aa3d 	.word	0x0800aa3d
 800aa68:	0800aa3d 	.word	0x0800aa3d
 800aa6c:	0800aac1 	.word	0x0800aac1
 800aa70:	0800aa3d 	.word	0x0800aa3d
 800aa74:	0800aa3d 	.word	0x0800aa3d
 800aa78:	0800aa3d 	.word	0x0800aa3d
 800aa7c:	0800aa3d 	.word	0x0800aa3d
 800aa80:	0800abc5 	.word	0x0800abc5
 800aa84:	0800aaed 	.word	0x0800aaed
 800aa88:	0800ab7f 	.word	0x0800ab7f
 800aa8c:	0800aa3d 	.word	0x0800aa3d
 800aa90:	0800aa3d 	.word	0x0800aa3d
 800aa94:	0800abe7 	.word	0x0800abe7
 800aa98:	0800aa3d 	.word	0x0800aa3d
 800aa9c:	0800aaed 	.word	0x0800aaed
 800aaa0:	0800aa3d 	.word	0x0800aa3d
 800aaa4:	0800aa3d 	.word	0x0800aa3d
 800aaa8:	0800ab87 	.word	0x0800ab87
 800aaac:	682b      	ldr	r3, [r5, #0]
 800aaae:	1d1a      	adds	r2, r3, #4
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	602a      	str	r2, [r5, #0]
 800aab4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aab8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aabc:	2301      	movs	r3, #1
 800aabe:	e09f      	b.n	800ac00 <_printf_i+0x1ec>
 800aac0:	6820      	ldr	r0, [r4, #0]
 800aac2:	682b      	ldr	r3, [r5, #0]
 800aac4:	0607      	lsls	r7, r0, #24
 800aac6:	f103 0104 	add.w	r1, r3, #4
 800aaca:	6029      	str	r1, [r5, #0]
 800aacc:	d501      	bpl.n	800aad2 <_printf_i+0xbe>
 800aace:	681e      	ldr	r6, [r3, #0]
 800aad0:	e003      	b.n	800aada <_printf_i+0xc6>
 800aad2:	0646      	lsls	r6, r0, #25
 800aad4:	d5fb      	bpl.n	800aace <_printf_i+0xba>
 800aad6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800aada:	2e00      	cmp	r6, #0
 800aadc:	da03      	bge.n	800aae6 <_printf_i+0xd2>
 800aade:	232d      	movs	r3, #45	; 0x2d
 800aae0:	4276      	negs	r6, r6
 800aae2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aae6:	485a      	ldr	r0, [pc, #360]	; (800ac50 <_printf_i+0x23c>)
 800aae8:	230a      	movs	r3, #10
 800aaea:	e012      	b.n	800ab12 <_printf_i+0xfe>
 800aaec:	682b      	ldr	r3, [r5, #0]
 800aaee:	6820      	ldr	r0, [r4, #0]
 800aaf0:	1d19      	adds	r1, r3, #4
 800aaf2:	6029      	str	r1, [r5, #0]
 800aaf4:	0605      	lsls	r5, r0, #24
 800aaf6:	d501      	bpl.n	800aafc <_printf_i+0xe8>
 800aaf8:	681e      	ldr	r6, [r3, #0]
 800aafa:	e002      	b.n	800ab02 <_printf_i+0xee>
 800aafc:	0641      	lsls	r1, r0, #25
 800aafe:	d5fb      	bpl.n	800aaf8 <_printf_i+0xe4>
 800ab00:	881e      	ldrh	r6, [r3, #0]
 800ab02:	4853      	ldr	r0, [pc, #332]	; (800ac50 <_printf_i+0x23c>)
 800ab04:	2f6f      	cmp	r7, #111	; 0x6f
 800ab06:	bf0c      	ite	eq
 800ab08:	2308      	moveq	r3, #8
 800ab0a:	230a      	movne	r3, #10
 800ab0c:	2100      	movs	r1, #0
 800ab0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab12:	6865      	ldr	r5, [r4, #4]
 800ab14:	60a5      	str	r5, [r4, #8]
 800ab16:	2d00      	cmp	r5, #0
 800ab18:	bfa2      	ittt	ge
 800ab1a:	6821      	ldrge	r1, [r4, #0]
 800ab1c:	f021 0104 	bicge.w	r1, r1, #4
 800ab20:	6021      	strge	r1, [r4, #0]
 800ab22:	b90e      	cbnz	r6, 800ab28 <_printf_i+0x114>
 800ab24:	2d00      	cmp	r5, #0
 800ab26:	d04b      	beq.n	800abc0 <_printf_i+0x1ac>
 800ab28:	4615      	mov	r5, r2
 800ab2a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ab2e:	fb03 6711 	mls	r7, r3, r1, r6
 800ab32:	5dc7      	ldrb	r7, [r0, r7]
 800ab34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ab38:	4637      	mov	r7, r6
 800ab3a:	42bb      	cmp	r3, r7
 800ab3c:	460e      	mov	r6, r1
 800ab3e:	d9f4      	bls.n	800ab2a <_printf_i+0x116>
 800ab40:	2b08      	cmp	r3, #8
 800ab42:	d10b      	bne.n	800ab5c <_printf_i+0x148>
 800ab44:	6823      	ldr	r3, [r4, #0]
 800ab46:	07de      	lsls	r6, r3, #31
 800ab48:	d508      	bpl.n	800ab5c <_printf_i+0x148>
 800ab4a:	6923      	ldr	r3, [r4, #16]
 800ab4c:	6861      	ldr	r1, [r4, #4]
 800ab4e:	4299      	cmp	r1, r3
 800ab50:	bfde      	ittt	le
 800ab52:	2330      	movle	r3, #48	; 0x30
 800ab54:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab58:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ab5c:	1b52      	subs	r2, r2, r5
 800ab5e:	6122      	str	r2, [r4, #16]
 800ab60:	f8cd a000 	str.w	sl, [sp]
 800ab64:	464b      	mov	r3, r9
 800ab66:	aa03      	add	r2, sp, #12
 800ab68:	4621      	mov	r1, r4
 800ab6a:	4640      	mov	r0, r8
 800ab6c:	f7ff fee4 	bl	800a938 <_printf_common>
 800ab70:	3001      	adds	r0, #1
 800ab72:	d14a      	bne.n	800ac0a <_printf_i+0x1f6>
 800ab74:	f04f 30ff 	mov.w	r0, #4294967295
 800ab78:	b004      	add	sp, #16
 800ab7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab7e:	6823      	ldr	r3, [r4, #0]
 800ab80:	f043 0320 	orr.w	r3, r3, #32
 800ab84:	6023      	str	r3, [r4, #0]
 800ab86:	4833      	ldr	r0, [pc, #204]	; (800ac54 <_printf_i+0x240>)
 800ab88:	2778      	movs	r7, #120	; 0x78
 800ab8a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ab8e:	6823      	ldr	r3, [r4, #0]
 800ab90:	6829      	ldr	r1, [r5, #0]
 800ab92:	061f      	lsls	r7, r3, #24
 800ab94:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab98:	d402      	bmi.n	800aba0 <_printf_i+0x18c>
 800ab9a:	065f      	lsls	r7, r3, #25
 800ab9c:	bf48      	it	mi
 800ab9e:	b2b6      	uxthmi	r6, r6
 800aba0:	07df      	lsls	r7, r3, #31
 800aba2:	bf48      	it	mi
 800aba4:	f043 0320 	orrmi.w	r3, r3, #32
 800aba8:	6029      	str	r1, [r5, #0]
 800abaa:	bf48      	it	mi
 800abac:	6023      	strmi	r3, [r4, #0]
 800abae:	b91e      	cbnz	r6, 800abb8 <_printf_i+0x1a4>
 800abb0:	6823      	ldr	r3, [r4, #0]
 800abb2:	f023 0320 	bic.w	r3, r3, #32
 800abb6:	6023      	str	r3, [r4, #0]
 800abb8:	2310      	movs	r3, #16
 800abba:	e7a7      	b.n	800ab0c <_printf_i+0xf8>
 800abbc:	4824      	ldr	r0, [pc, #144]	; (800ac50 <_printf_i+0x23c>)
 800abbe:	e7e4      	b.n	800ab8a <_printf_i+0x176>
 800abc0:	4615      	mov	r5, r2
 800abc2:	e7bd      	b.n	800ab40 <_printf_i+0x12c>
 800abc4:	682b      	ldr	r3, [r5, #0]
 800abc6:	6826      	ldr	r6, [r4, #0]
 800abc8:	6961      	ldr	r1, [r4, #20]
 800abca:	1d18      	adds	r0, r3, #4
 800abcc:	6028      	str	r0, [r5, #0]
 800abce:	0635      	lsls	r5, r6, #24
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	d501      	bpl.n	800abd8 <_printf_i+0x1c4>
 800abd4:	6019      	str	r1, [r3, #0]
 800abd6:	e002      	b.n	800abde <_printf_i+0x1ca>
 800abd8:	0670      	lsls	r0, r6, #25
 800abda:	d5fb      	bpl.n	800abd4 <_printf_i+0x1c0>
 800abdc:	8019      	strh	r1, [r3, #0]
 800abde:	2300      	movs	r3, #0
 800abe0:	6123      	str	r3, [r4, #16]
 800abe2:	4615      	mov	r5, r2
 800abe4:	e7bc      	b.n	800ab60 <_printf_i+0x14c>
 800abe6:	682b      	ldr	r3, [r5, #0]
 800abe8:	1d1a      	adds	r2, r3, #4
 800abea:	602a      	str	r2, [r5, #0]
 800abec:	681d      	ldr	r5, [r3, #0]
 800abee:	6862      	ldr	r2, [r4, #4]
 800abf0:	2100      	movs	r1, #0
 800abf2:	4628      	mov	r0, r5
 800abf4:	f7f5 fafc 	bl	80001f0 <memchr>
 800abf8:	b108      	cbz	r0, 800abfe <_printf_i+0x1ea>
 800abfa:	1b40      	subs	r0, r0, r5
 800abfc:	6060      	str	r0, [r4, #4]
 800abfe:	6863      	ldr	r3, [r4, #4]
 800ac00:	6123      	str	r3, [r4, #16]
 800ac02:	2300      	movs	r3, #0
 800ac04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac08:	e7aa      	b.n	800ab60 <_printf_i+0x14c>
 800ac0a:	6923      	ldr	r3, [r4, #16]
 800ac0c:	462a      	mov	r2, r5
 800ac0e:	4649      	mov	r1, r9
 800ac10:	4640      	mov	r0, r8
 800ac12:	47d0      	blx	sl
 800ac14:	3001      	adds	r0, #1
 800ac16:	d0ad      	beq.n	800ab74 <_printf_i+0x160>
 800ac18:	6823      	ldr	r3, [r4, #0]
 800ac1a:	079b      	lsls	r3, r3, #30
 800ac1c:	d413      	bmi.n	800ac46 <_printf_i+0x232>
 800ac1e:	68e0      	ldr	r0, [r4, #12]
 800ac20:	9b03      	ldr	r3, [sp, #12]
 800ac22:	4298      	cmp	r0, r3
 800ac24:	bfb8      	it	lt
 800ac26:	4618      	movlt	r0, r3
 800ac28:	e7a6      	b.n	800ab78 <_printf_i+0x164>
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	4632      	mov	r2, r6
 800ac2e:	4649      	mov	r1, r9
 800ac30:	4640      	mov	r0, r8
 800ac32:	47d0      	blx	sl
 800ac34:	3001      	adds	r0, #1
 800ac36:	d09d      	beq.n	800ab74 <_printf_i+0x160>
 800ac38:	3501      	adds	r5, #1
 800ac3a:	68e3      	ldr	r3, [r4, #12]
 800ac3c:	9903      	ldr	r1, [sp, #12]
 800ac3e:	1a5b      	subs	r3, r3, r1
 800ac40:	42ab      	cmp	r3, r5
 800ac42:	dcf2      	bgt.n	800ac2a <_printf_i+0x216>
 800ac44:	e7eb      	b.n	800ac1e <_printf_i+0x20a>
 800ac46:	2500      	movs	r5, #0
 800ac48:	f104 0619 	add.w	r6, r4, #25
 800ac4c:	e7f5      	b.n	800ac3a <_printf_i+0x226>
 800ac4e:	bf00      	nop
 800ac50:	0800d0be 	.word	0x0800d0be
 800ac54:	0800d0cf 	.word	0x0800d0cf

0800ac58 <std>:
 800ac58:	2300      	movs	r3, #0
 800ac5a:	b510      	push	{r4, lr}
 800ac5c:	4604      	mov	r4, r0
 800ac5e:	e9c0 3300 	strd	r3, r3, [r0]
 800ac62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac66:	6083      	str	r3, [r0, #8]
 800ac68:	8181      	strh	r1, [r0, #12]
 800ac6a:	6643      	str	r3, [r0, #100]	; 0x64
 800ac6c:	81c2      	strh	r2, [r0, #14]
 800ac6e:	6183      	str	r3, [r0, #24]
 800ac70:	4619      	mov	r1, r3
 800ac72:	2208      	movs	r2, #8
 800ac74:	305c      	adds	r0, #92	; 0x5c
 800ac76:	f000 f906 	bl	800ae86 <memset>
 800ac7a:	4b0d      	ldr	r3, [pc, #52]	; (800acb0 <std+0x58>)
 800ac7c:	6263      	str	r3, [r4, #36]	; 0x24
 800ac7e:	4b0d      	ldr	r3, [pc, #52]	; (800acb4 <std+0x5c>)
 800ac80:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac82:	4b0d      	ldr	r3, [pc, #52]	; (800acb8 <std+0x60>)
 800ac84:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac86:	4b0d      	ldr	r3, [pc, #52]	; (800acbc <std+0x64>)
 800ac88:	6323      	str	r3, [r4, #48]	; 0x30
 800ac8a:	4b0d      	ldr	r3, [pc, #52]	; (800acc0 <std+0x68>)
 800ac8c:	6224      	str	r4, [r4, #32]
 800ac8e:	429c      	cmp	r4, r3
 800ac90:	d006      	beq.n	800aca0 <std+0x48>
 800ac92:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ac96:	4294      	cmp	r4, r2
 800ac98:	d002      	beq.n	800aca0 <std+0x48>
 800ac9a:	33d0      	adds	r3, #208	; 0xd0
 800ac9c:	429c      	cmp	r4, r3
 800ac9e:	d105      	bne.n	800acac <std+0x54>
 800aca0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aca8:	f000 b9d2 	b.w	800b050 <__retarget_lock_init_recursive>
 800acac:	bd10      	pop	{r4, pc}
 800acae:	bf00      	nop
 800acb0:	0800ae01 	.word	0x0800ae01
 800acb4:	0800ae23 	.word	0x0800ae23
 800acb8:	0800ae5b 	.word	0x0800ae5b
 800acbc:	0800ae7f 	.word	0x0800ae7f
 800acc0:	20005ff8 	.word	0x20005ff8

0800acc4 <stdio_exit_handler>:
 800acc4:	4a02      	ldr	r2, [pc, #8]	; (800acd0 <stdio_exit_handler+0xc>)
 800acc6:	4903      	ldr	r1, [pc, #12]	; (800acd4 <stdio_exit_handler+0x10>)
 800acc8:	4803      	ldr	r0, [pc, #12]	; (800acd8 <stdio_exit_handler+0x14>)
 800acca:	f000 b869 	b.w	800ada0 <_fwalk_sglue>
 800acce:	bf00      	nop
 800acd0:	20000010 	.word	0x20000010
 800acd4:	0800c9f9 	.word	0x0800c9f9
 800acd8:	2000001c 	.word	0x2000001c

0800acdc <cleanup_stdio>:
 800acdc:	6841      	ldr	r1, [r0, #4]
 800acde:	4b0c      	ldr	r3, [pc, #48]	; (800ad10 <cleanup_stdio+0x34>)
 800ace0:	4299      	cmp	r1, r3
 800ace2:	b510      	push	{r4, lr}
 800ace4:	4604      	mov	r4, r0
 800ace6:	d001      	beq.n	800acec <cleanup_stdio+0x10>
 800ace8:	f001 fe86 	bl	800c9f8 <_fflush_r>
 800acec:	68a1      	ldr	r1, [r4, #8]
 800acee:	4b09      	ldr	r3, [pc, #36]	; (800ad14 <cleanup_stdio+0x38>)
 800acf0:	4299      	cmp	r1, r3
 800acf2:	d002      	beq.n	800acfa <cleanup_stdio+0x1e>
 800acf4:	4620      	mov	r0, r4
 800acf6:	f001 fe7f 	bl	800c9f8 <_fflush_r>
 800acfa:	68e1      	ldr	r1, [r4, #12]
 800acfc:	4b06      	ldr	r3, [pc, #24]	; (800ad18 <cleanup_stdio+0x3c>)
 800acfe:	4299      	cmp	r1, r3
 800ad00:	d004      	beq.n	800ad0c <cleanup_stdio+0x30>
 800ad02:	4620      	mov	r0, r4
 800ad04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad08:	f001 be76 	b.w	800c9f8 <_fflush_r>
 800ad0c:	bd10      	pop	{r4, pc}
 800ad0e:	bf00      	nop
 800ad10:	20005ff8 	.word	0x20005ff8
 800ad14:	20006060 	.word	0x20006060
 800ad18:	200060c8 	.word	0x200060c8

0800ad1c <global_stdio_init.part.0>:
 800ad1c:	b510      	push	{r4, lr}
 800ad1e:	4b0b      	ldr	r3, [pc, #44]	; (800ad4c <global_stdio_init.part.0+0x30>)
 800ad20:	4c0b      	ldr	r4, [pc, #44]	; (800ad50 <global_stdio_init.part.0+0x34>)
 800ad22:	4a0c      	ldr	r2, [pc, #48]	; (800ad54 <global_stdio_init.part.0+0x38>)
 800ad24:	601a      	str	r2, [r3, #0]
 800ad26:	4620      	mov	r0, r4
 800ad28:	2200      	movs	r2, #0
 800ad2a:	2104      	movs	r1, #4
 800ad2c:	f7ff ff94 	bl	800ac58 <std>
 800ad30:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ad34:	2201      	movs	r2, #1
 800ad36:	2109      	movs	r1, #9
 800ad38:	f7ff ff8e 	bl	800ac58 <std>
 800ad3c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ad40:	2202      	movs	r2, #2
 800ad42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad46:	2112      	movs	r1, #18
 800ad48:	f7ff bf86 	b.w	800ac58 <std>
 800ad4c:	20006130 	.word	0x20006130
 800ad50:	20005ff8 	.word	0x20005ff8
 800ad54:	0800acc5 	.word	0x0800acc5

0800ad58 <__sfp_lock_acquire>:
 800ad58:	4801      	ldr	r0, [pc, #4]	; (800ad60 <__sfp_lock_acquire+0x8>)
 800ad5a:	f000 b97a 	b.w	800b052 <__retarget_lock_acquire_recursive>
 800ad5e:	bf00      	nop
 800ad60:	20006139 	.word	0x20006139

0800ad64 <__sfp_lock_release>:
 800ad64:	4801      	ldr	r0, [pc, #4]	; (800ad6c <__sfp_lock_release+0x8>)
 800ad66:	f000 b975 	b.w	800b054 <__retarget_lock_release_recursive>
 800ad6a:	bf00      	nop
 800ad6c:	20006139 	.word	0x20006139

0800ad70 <__sinit>:
 800ad70:	b510      	push	{r4, lr}
 800ad72:	4604      	mov	r4, r0
 800ad74:	f7ff fff0 	bl	800ad58 <__sfp_lock_acquire>
 800ad78:	6a23      	ldr	r3, [r4, #32]
 800ad7a:	b11b      	cbz	r3, 800ad84 <__sinit+0x14>
 800ad7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad80:	f7ff bff0 	b.w	800ad64 <__sfp_lock_release>
 800ad84:	4b04      	ldr	r3, [pc, #16]	; (800ad98 <__sinit+0x28>)
 800ad86:	6223      	str	r3, [r4, #32]
 800ad88:	4b04      	ldr	r3, [pc, #16]	; (800ad9c <__sinit+0x2c>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d1f5      	bne.n	800ad7c <__sinit+0xc>
 800ad90:	f7ff ffc4 	bl	800ad1c <global_stdio_init.part.0>
 800ad94:	e7f2      	b.n	800ad7c <__sinit+0xc>
 800ad96:	bf00      	nop
 800ad98:	0800acdd 	.word	0x0800acdd
 800ad9c:	20006130 	.word	0x20006130

0800ada0 <_fwalk_sglue>:
 800ada0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ada4:	4607      	mov	r7, r0
 800ada6:	4688      	mov	r8, r1
 800ada8:	4614      	mov	r4, r2
 800adaa:	2600      	movs	r6, #0
 800adac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800adb0:	f1b9 0901 	subs.w	r9, r9, #1
 800adb4:	d505      	bpl.n	800adc2 <_fwalk_sglue+0x22>
 800adb6:	6824      	ldr	r4, [r4, #0]
 800adb8:	2c00      	cmp	r4, #0
 800adba:	d1f7      	bne.n	800adac <_fwalk_sglue+0xc>
 800adbc:	4630      	mov	r0, r6
 800adbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adc2:	89ab      	ldrh	r3, [r5, #12]
 800adc4:	2b01      	cmp	r3, #1
 800adc6:	d907      	bls.n	800add8 <_fwalk_sglue+0x38>
 800adc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800adcc:	3301      	adds	r3, #1
 800adce:	d003      	beq.n	800add8 <_fwalk_sglue+0x38>
 800add0:	4629      	mov	r1, r5
 800add2:	4638      	mov	r0, r7
 800add4:	47c0      	blx	r8
 800add6:	4306      	orrs	r6, r0
 800add8:	3568      	adds	r5, #104	; 0x68
 800adda:	e7e9      	b.n	800adb0 <_fwalk_sglue+0x10>

0800addc <iprintf>:
 800addc:	b40f      	push	{r0, r1, r2, r3}
 800adde:	b507      	push	{r0, r1, r2, lr}
 800ade0:	4906      	ldr	r1, [pc, #24]	; (800adfc <iprintf+0x20>)
 800ade2:	ab04      	add	r3, sp, #16
 800ade4:	6808      	ldr	r0, [r1, #0]
 800ade6:	f853 2b04 	ldr.w	r2, [r3], #4
 800adea:	6881      	ldr	r1, [r0, #8]
 800adec:	9301      	str	r3, [sp, #4]
 800adee:	f001 fc63 	bl	800c6b8 <_vfiprintf_r>
 800adf2:	b003      	add	sp, #12
 800adf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800adf8:	b004      	add	sp, #16
 800adfa:	4770      	bx	lr
 800adfc:	20000068 	.word	0x20000068

0800ae00 <__sread>:
 800ae00:	b510      	push	{r4, lr}
 800ae02:	460c      	mov	r4, r1
 800ae04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae08:	f000 f8d4 	bl	800afb4 <_read_r>
 800ae0c:	2800      	cmp	r0, #0
 800ae0e:	bfab      	itete	ge
 800ae10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ae12:	89a3      	ldrhlt	r3, [r4, #12]
 800ae14:	181b      	addge	r3, r3, r0
 800ae16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ae1a:	bfac      	ite	ge
 800ae1c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ae1e:	81a3      	strhlt	r3, [r4, #12]
 800ae20:	bd10      	pop	{r4, pc}

0800ae22 <__swrite>:
 800ae22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae26:	461f      	mov	r7, r3
 800ae28:	898b      	ldrh	r3, [r1, #12]
 800ae2a:	05db      	lsls	r3, r3, #23
 800ae2c:	4605      	mov	r5, r0
 800ae2e:	460c      	mov	r4, r1
 800ae30:	4616      	mov	r6, r2
 800ae32:	d505      	bpl.n	800ae40 <__swrite+0x1e>
 800ae34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae38:	2302      	movs	r3, #2
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f000 f8a8 	bl	800af90 <_lseek_r>
 800ae40:	89a3      	ldrh	r3, [r4, #12]
 800ae42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae4a:	81a3      	strh	r3, [r4, #12]
 800ae4c:	4632      	mov	r2, r6
 800ae4e:	463b      	mov	r3, r7
 800ae50:	4628      	mov	r0, r5
 800ae52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae56:	f000 b8bf 	b.w	800afd8 <_write_r>

0800ae5a <__sseek>:
 800ae5a:	b510      	push	{r4, lr}
 800ae5c:	460c      	mov	r4, r1
 800ae5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae62:	f000 f895 	bl	800af90 <_lseek_r>
 800ae66:	1c43      	adds	r3, r0, #1
 800ae68:	89a3      	ldrh	r3, [r4, #12]
 800ae6a:	bf15      	itete	ne
 800ae6c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae76:	81a3      	strheq	r3, [r4, #12]
 800ae78:	bf18      	it	ne
 800ae7a:	81a3      	strhne	r3, [r4, #12]
 800ae7c:	bd10      	pop	{r4, pc}

0800ae7e <__sclose>:
 800ae7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae82:	f000 b81f 	b.w	800aec4 <_close_r>

0800ae86 <memset>:
 800ae86:	4402      	add	r2, r0
 800ae88:	4603      	mov	r3, r0
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d100      	bne.n	800ae90 <memset+0xa>
 800ae8e:	4770      	bx	lr
 800ae90:	f803 1b01 	strb.w	r1, [r3], #1
 800ae94:	e7f9      	b.n	800ae8a <memset+0x4>

0800ae96 <strncpy>:
 800ae96:	b510      	push	{r4, lr}
 800ae98:	3901      	subs	r1, #1
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	b132      	cbz	r2, 800aeac <strncpy+0x16>
 800ae9e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800aea2:	f803 4b01 	strb.w	r4, [r3], #1
 800aea6:	3a01      	subs	r2, #1
 800aea8:	2c00      	cmp	r4, #0
 800aeaa:	d1f7      	bne.n	800ae9c <strncpy+0x6>
 800aeac:	441a      	add	r2, r3
 800aeae:	2100      	movs	r1, #0
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d100      	bne.n	800aeb6 <strncpy+0x20>
 800aeb4:	bd10      	pop	{r4, pc}
 800aeb6:	f803 1b01 	strb.w	r1, [r3], #1
 800aeba:	e7f9      	b.n	800aeb0 <strncpy+0x1a>

0800aebc <_localeconv_r>:
 800aebc:	4800      	ldr	r0, [pc, #0]	; (800aec0 <_localeconv_r+0x4>)
 800aebe:	4770      	bx	lr
 800aec0:	2000015c 	.word	0x2000015c

0800aec4 <_close_r>:
 800aec4:	b538      	push	{r3, r4, r5, lr}
 800aec6:	4d06      	ldr	r5, [pc, #24]	; (800aee0 <_close_r+0x1c>)
 800aec8:	2300      	movs	r3, #0
 800aeca:	4604      	mov	r4, r0
 800aecc:	4608      	mov	r0, r1
 800aece:	602b      	str	r3, [r5, #0]
 800aed0:	f7f6 fe19 	bl	8001b06 <_close>
 800aed4:	1c43      	adds	r3, r0, #1
 800aed6:	d102      	bne.n	800aede <_close_r+0x1a>
 800aed8:	682b      	ldr	r3, [r5, #0]
 800aeda:	b103      	cbz	r3, 800aede <_close_r+0x1a>
 800aedc:	6023      	str	r3, [r4, #0]
 800aede:	bd38      	pop	{r3, r4, r5, pc}
 800aee0:	20006134 	.word	0x20006134

0800aee4 <_reclaim_reent>:
 800aee4:	4b29      	ldr	r3, [pc, #164]	; (800af8c <_reclaim_reent+0xa8>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	4283      	cmp	r3, r0
 800aeea:	b570      	push	{r4, r5, r6, lr}
 800aeec:	4604      	mov	r4, r0
 800aeee:	d04b      	beq.n	800af88 <_reclaim_reent+0xa4>
 800aef0:	69c3      	ldr	r3, [r0, #28]
 800aef2:	b143      	cbz	r3, 800af06 <_reclaim_reent+0x22>
 800aef4:	68db      	ldr	r3, [r3, #12]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d144      	bne.n	800af84 <_reclaim_reent+0xa0>
 800aefa:	69e3      	ldr	r3, [r4, #28]
 800aefc:	6819      	ldr	r1, [r3, #0]
 800aefe:	b111      	cbz	r1, 800af06 <_reclaim_reent+0x22>
 800af00:	4620      	mov	r0, r4
 800af02:	f000 ff33 	bl	800bd6c <_free_r>
 800af06:	6961      	ldr	r1, [r4, #20]
 800af08:	b111      	cbz	r1, 800af10 <_reclaim_reent+0x2c>
 800af0a:	4620      	mov	r0, r4
 800af0c:	f000 ff2e 	bl	800bd6c <_free_r>
 800af10:	69e1      	ldr	r1, [r4, #28]
 800af12:	b111      	cbz	r1, 800af1a <_reclaim_reent+0x36>
 800af14:	4620      	mov	r0, r4
 800af16:	f000 ff29 	bl	800bd6c <_free_r>
 800af1a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800af1c:	b111      	cbz	r1, 800af24 <_reclaim_reent+0x40>
 800af1e:	4620      	mov	r0, r4
 800af20:	f000 ff24 	bl	800bd6c <_free_r>
 800af24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af26:	b111      	cbz	r1, 800af2e <_reclaim_reent+0x4a>
 800af28:	4620      	mov	r0, r4
 800af2a:	f000 ff1f 	bl	800bd6c <_free_r>
 800af2e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800af30:	b111      	cbz	r1, 800af38 <_reclaim_reent+0x54>
 800af32:	4620      	mov	r0, r4
 800af34:	f000 ff1a 	bl	800bd6c <_free_r>
 800af38:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800af3a:	b111      	cbz	r1, 800af42 <_reclaim_reent+0x5e>
 800af3c:	4620      	mov	r0, r4
 800af3e:	f000 ff15 	bl	800bd6c <_free_r>
 800af42:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800af44:	b111      	cbz	r1, 800af4c <_reclaim_reent+0x68>
 800af46:	4620      	mov	r0, r4
 800af48:	f000 ff10 	bl	800bd6c <_free_r>
 800af4c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800af4e:	b111      	cbz	r1, 800af56 <_reclaim_reent+0x72>
 800af50:	4620      	mov	r0, r4
 800af52:	f000 ff0b 	bl	800bd6c <_free_r>
 800af56:	6a23      	ldr	r3, [r4, #32]
 800af58:	b1b3      	cbz	r3, 800af88 <_reclaim_reent+0xa4>
 800af5a:	4620      	mov	r0, r4
 800af5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800af60:	4718      	bx	r3
 800af62:	5949      	ldr	r1, [r1, r5]
 800af64:	b941      	cbnz	r1, 800af78 <_reclaim_reent+0x94>
 800af66:	3504      	adds	r5, #4
 800af68:	69e3      	ldr	r3, [r4, #28]
 800af6a:	2d80      	cmp	r5, #128	; 0x80
 800af6c:	68d9      	ldr	r1, [r3, #12]
 800af6e:	d1f8      	bne.n	800af62 <_reclaim_reent+0x7e>
 800af70:	4620      	mov	r0, r4
 800af72:	f000 fefb 	bl	800bd6c <_free_r>
 800af76:	e7c0      	b.n	800aefa <_reclaim_reent+0x16>
 800af78:	680e      	ldr	r6, [r1, #0]
 800af7a:	4620      	mov	r0, r4
 800af7c:	f000 fef6 	bl	800bd6c <_free_r>
 800af80:	4631      	mov	r1, r6
 800af82:	e7ef      	b.n	800af64 <_reclaim_reent+0x80>
 800af84:	2500      	movs	r5, #0
 800af86:	e7ef      	b.n	800af68 <_reclaim_reent+0x84>
 800af88:	bd70      	pop	{r4, r5, r6, pc}
 800af8a:	bf00      	nop
 800af8c:	20000068 	.word	0x20000068

0800af90 <_lseek_r>:
 800af90:	b538      	push	{r3, r4, r5, lr}
 800af92:	4d07      	ldr	r5, [pc, #28]	; (800afb0 <_lseek_r+0x20>)
 800af94:	4604      	mov	r4, r0
 800af96:	4608      	mov	r0, r1
 800af98:	4611      	mov	r1, r2
 800af9a:	2200      	movs	r2, #0
 800af9c:	602a      	str	r2, [r5, #0]
 800af9e:	461a      	mov	r2, r3
 800afa0:	f7f6 fdd8 	bl	8001b54 <_lseek>
 800afa4:	1c43      	adds	r3, r0, #1
 800afa6:	d102      	bne.n	800afae <_lseek_r+0x1e>
 800afa8:	682b      	ldr	r3, [r5, #0]
 800afaa:	b103      	cbz	r3, 800afae <_lseek_r+0x1e>
 800afac:	6023      	str	r3, [r4, #0]
 800afae:	bd38      	pop	{r3, r4, r5, pc}
 800afb0:	20006134 	.word	0x20006134

0800afb4 <_read_r>:
 800afb4:	b538      	push	{r3, r4, r5, lr}
 800afb6:	4d07      	ldr	r5, [pc, #28]	; (800afd4 <_read_r+0x20>)
 800afb8:	4604      	mov	r4, r0
 800afba:	4608      	mov	r0, r1
 800afbc:	4611      	mov	r1, r2
 800afbe:	2200      	movs	r2, #0
 800afc0:	602a      	str	r2, [r5, #0]
 800afc2:	461a      	mov	r2, r3
 800afc4:	f7f6 fd66 	bl	8001a94 <_read>
 800afc8:	1c43      	adds	r3, r0, #1
 800afca:	d102      	bne.n	800afd2 <_read_r+0x1e>
 800afcc:	682b      	ldr	r3, [r5, #0]
 800afce:	b103      	cbz	r3, 800afd2 <_read_r+0x1e>
 800afd0:	6023      	str	r3, [r4, #0]
 800afd2:	bd38      	pop	{r3, r4, r5, pc}
 800afd4:	20006134 	.word	0x20006134

0800afd8 <_write_r>:
 800afd8:	b538      	push	{r3, r4, r5, lr}
 800afda:	4d07      	ldr	r5, [pc, #28]	; (800aff8 <_write_r+0x20>)
 800afdc:	4604      	mov	r4, r0
 800afde:	4608      	mov	r0, r1
 800afe0:	4611      	mov	r1, r2
 800afe2:	2200      	movs	r2, #0
 800afe4:	602a      	str	r2, [r5, #0]
 800afe6:	461a      	mov	r2, r3
 800afe8:	f7f6 fd71 	bl	8001ace <_write>
 800afec:	1c43      	adds	r3, r0, #1
 800afee:	d102      	bne.n	800aff6 <_write_r+0x1e>
 800aff0:	682b      	ldr	r3, [r5, #0]
 800aff2:	b103      	cbz	r3, 800aff6 <_write_r+0x1e>
 800aff4:	6023      	str	r3, [r4, #0]
 800aff6:	bd38      	pop	{r3, r4, r5, pc}
 800aff8:	20006134 	.word	0x20006134

0800affc <__errno>:
 800affc:	4b01      	ldr	r3, [pc, #4]	; (800b004 <__errno+0x8>)
 800affe:	6818      	ldr	r0, [r3, #0]
 800b000:	4770      	bx	lr
 800b002:	bf00      	nop
 800b004:	20000068 	.word	0x20000068

0800b008 <__libc_init_array>:
 800b008:	b570      	push	{r4, r5, r6, lr}
 800b00a:	4d0d      	ldr	r5, [pc, #52]	; (800b040 <__libc_init_array+0x38>)
 800b00c:	4c0d      	ldr	r4, [pc, #52]	; (800b044 <__libc_init_array+0x3c>)
 800b00e:	1b64      	subs	r4, r4, r5
 800b010:	10a4      	asrs	r4, r4, #2
 800b012:	2600      	movs	r6, #0
 800b014:	42a6      	cmp	r6, r4
 800b016:	d109      	bne.n	800b02c <__libc_init_array+0x24>
 800b018:	4d0b      	ldr	r5, [pc, #44]	; (800b048 <__libc_init_array+0x40>)
 800b01a:	4c0c      	ldr	r4, [pc, #48]	; (800b04c <__libc_init_array+0x44>)
 800b01c:	f001 fef0 	bl	800ce00 <_init>
 800b020:	1b64      	subs	r4, r4, r5
 800b022:	10a4      	asrs	r4, r4, #2
 800b024:	2600      	movs	r6, #0
 800b026:	42a6      	cmp	r6, r4
 800b028:	d105      	bne.n	800b036 <__libc_init_array+0x2e>
 800b02a:	bd70      	pop	{r4, r5, r6, pc}
 800b02c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b030:	4798      	blx	r3
 800b032:	3601      	adds	r6, #1
 800b034:	e7ee      	b.n	800b014 <__libc_init_array+0xc>
 800b036:	f855 3b04 	ldr.w	r3, [r5], #4
 800b03a:	4798      	blx	r3
 800b03c:	3601      	adds	r6, #1
 800b03e:	e7f2      	b.n	800b026 <__libc_init_array+0x1e>
 800b040:	0800d424 	.word	0x0800d424
 800b044:	0800d424 	.word	0x0800d424
 800b048:	0800d424 	.word	0x0800d424
 800b04c:	0800d428 	.word	0x0800d428

0800b050 <__retarget_lock_init_recursive>:
 800b050:	4770      	bx	lr

0800b052 <__retarget_lock_acquire_recursive>:
 800b052:	4770      	bx	lr

0800b054 <__retarget_lock_release_recursive>:
 800b054:	4770      	bx	lr

0800b056 <memcpy>:
 800b056:	440a      	add	r2, r1
 800b058:	4291      	cmp	r1, r2
 800b05a:	f100 33ff 	add.w	r3, r0, #4294967295
 800b05e:	d100      	bne.n	800b062 <memcpy+0xc>
 800b060:	4770      	bx	lr
 800b062:	b510      	push	{r4, lr}
 800b064:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b068:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b06c:	4291      	cmp	r1, r2
 800b06e:	d1f9      	bne.n	800b064 <memcpy+0xe>
 800b070:	bd10      	pop	{r4, pc}

0800b072 <quorem>:
 800b072:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b076:	6903      	ldr	r3, [r0, #16]
 800b078:	690c      	ldr	r4, [r1, #16]
 800b07a:	42a3      	cmp	r3, r4
 800b07c:	4607      	mov	r7, r0
 800b07e:	db7e      	blt.n	800b17e <quorem+0x10c>
 800b080:	3c01      	subs	r4, #1
 800b082:	f101 0814 	add.w	r8, r1, #20
 800b086:	f100 0514 	add.w	r5, r0, #20
 800b08a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b08e:	9301      	str	r3, [sp, #4]
 800b090:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b094:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b098:	3301      	adds	r3, #1
 800b09a:	429a      	cmp	r2, r3
 800b09c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b0a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b0a4:	fbb2 f6f3 	udiv	r6, r2, r3
 800b0a8:	d331      	bcc.n	800b10e <quorem+0x9c>
 800b0aa:	f04f 0e00 	mov.w	lr, #0
 800b0ae:	4640      	mov	r0, r8
 800b0b0:	46ac      	mov	ip, r5
 800b0b2:	46f2      	mov	sl, lr
 800b0b4:	f850 2b04 	ldr.w	r2, [r0], #4
 800b0b8:	b293      	uxth	r3, r2
 800b0ba:	fb06 e303 	mla	r3, r6, r3, lr
 800b0be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b0c2:	0c1a      	lsrs	r2, r3, #16
 800b0c4:	b29b      	uxth	r3, r3
 800b0c6:	ebaa 0303 	sub.w	r3, sl, r3
 800b0ca:	f8dc a000 	ldr.w	sl, [ip]
 800b0ce:	fa13 f38a 	uxtah	r3, r3, sl
 800b0d2:	fb06 220e 	mla	r2, r6, lr, r2
 800b0d6:	9300      	str	r3, [sp, #0]
 800b0d8:	9b00      	ldr	r3, [sp, #0]
 800b0da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b0de:	b292      	uxth	r2, r2
 800b0e0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b0e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b0e8:	f8bd 3000 	ldrh.w	r3, [sp]
 800b0ec:	4581      	cmp	r9, r0
 800b0ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0f2:	f84c 3b04 	str.w	r3, [ip], #4
 800b0f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b0fa:	d2db      	bcs.n	800b0b4 <quorem+0x42>
 800b0fc:	f855 300b 	ldr.w	r3, [r5, fp]
 800b100:	b92b      	cbnz	r3, 800b10e <quorem+0x9c>
 800b102:	9b01      	ldr	r3, [sp, #4]
 800b104:	3b04      	subs	r3, #4
 800b106:	429d      	cmp	r5, r3
 800b108:	461a      	mov	r2, r3
 800b10a:	d32c      	bcc.n	800b166 <quorem+0xf4>
 800b10c:	613c      	str	r4, [r7, #16]
 800b10e:	4638      	mov	r0, r7
 800b110:	f001 f9a8 	bl	800c464 <__mcmp>
 800b114:	2800      	cmp	r0, #0
 800b116:	db22      	blt.n	800b15e <quorem+0xec>
 800b118:	3601      	adds	r6, #1
 800b11a:	4629      	mov	r1, r5
 800b11c:	2000      	movs	r0, #0
 800b11e:	f858 2b04 	ldr.w	r2, [r8], #4
 800b122:	f8d1 c000 	ldr.w	ip, [r1]
 800b126:	b293      	uxth	r3, r2
 800b128:	1ac3      	subs	r3, r0, r3
 800b12a:	0c12      	lsrs	r2, r2, #16
 800b12c:	fa13 f38c 	uxtah	r3, r3, ip
 800b130:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b134:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b138:	b29b      	uxth	r3, r3
 800b13a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b13e:	45c1      	cmp	r9, r8
 800b140:	f841 3b04 	str.w	r3, [r1], #4
 800b144:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b148:	d2e9      	bcs.n	800b11e <quorem+0xac>
 800b14a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b14e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b152:	b922      	cbnz	r2, 800b15e <quorem+0xec>
 800b154:	3b04      	subs	r3, #4
 800b156:	429d      	cmp	r5, r3
 800b158:	461a      	mov	r2, r3
 800b15a:	d30a      	bcc.n	800b172 <quorem+0x100>
 800b15c:	613c      	str	r4, [r7, #16]
 800b15e:	4630      	mov	r0, r6
 800b160:	b003      	add	sp, #12
 800b162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b166:	6812      	ldr	r2, [r2, #0]
 800b168:	3b04      	subs	r3, #4
 800b16a:	2a00      	cmp	r2, #0
 800b16c:	d1ce      	bne.n	800b10c <quorem+0x9a>
 800b16e:	3c01      	subs	r4, #1
 800b170:	e7c9      	b.n	800b106 <quorem+0x94>
 800b172:	6812      	ldr	r2, [r2, #0]
 800b174:	3b04      	subs	r3, #4
 800b176:	2a00      	cmp	r2, #0
 800b178:	d1f0      	bne.n	800b15c <quorem+0xea>
 800b17a:	3c01      	subs	r4, #1
 800b17c:	e7eb      	b.n	800b156 <quorem+0xe4>
 800b17e:	2000      	movs	r0, #0
 800b180:	e7ee      	b.n	800b160 <quorem+0xee>
 800b182:	0000      	movs	r0, r0
 800b184:	0000      	movs	r0, r0
	...

0800b188 <_dtoa_r>:
 800b188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b18c:	ed2d 8b04 	vpush	{d8-d9}
 800b190:	69c5      	ldr	r5, [r0, #28]
 800b192:	b093      	sub	sp, #76	; 0x4c
 800b194:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b198:	ec57 6b10 	vmov	r6, r7, d0
 800b19c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b1a0:	9107      	str	r1, [sp, #28]
 800b1a2:	4604      	mov	r4, r0
 800b1a4:	920a      	str	r2, [sp, #40]	; 0x28
 800b1a6:	930d      	str	r3, [sp, #52]	; 0x34
 800b1a8:	b975      	cbnz	r5, 800b1c8 <_dtoa_r+0x40>
 800b1aa:	2010      	movs	r0, #16
 800b1ac:	f000 fe2a 	bl	800be04 <malloc>
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	61e0      	str	r0, [r4, #28]
 800b1b4:	b920      	cbnz	r0, 800b1c0 <_dtoa_r+0x38>
 800b1b6:	4bae      	ldr	r3, [pc, #696]	; (800b470 <_dtoa_r+0x2e8>)
 800b1b8:	21ef      	movs	r1, #239	; 0xef
 800b1ba:	48ae      	ldr	r0, [pc, #696]	; (800b474 <_dtoa_r+0x2ec>)
 800b1bc:	f001 fcea 	bl	800cb94 <__assert_func>
 800b1c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b1c4:	6005      	str	r5, [r0, #0]
 800b1c6:	60c5      	str	r5, [r0, #12]
 800b1c8:	69e3      	ldr	r3, [r4, #28]
 800b1ca:	6819      	ldr	r1, [r3, #0]
 800b1cc:	b151      	cbz	r1, 800b1e4 <_dtoa_r+0x5c>
 800b1ce:	685a      	ldr	r2, [r3, #4]
 800b1d0:	604a      	str	r2, [r1, #4]
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	4093      	lsls	r3, r2
 800b1d6:	608b      	str	r3, [r1, #8]
 800b1d8:	4620      	mov	r0, r4
 800b1da:	f000 ff07 	bl	800bfec <_Bfree>
 800b1de:	69e3      	ldr	r3, [r4, #28]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	601a      	str	r2, [r3, #0]
 800b1e4:	1e3b      	subs	r3, r7, #0
 800b1e6:	bfbb      	ittet	lt
 800b1e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b1ec:	9303      	strlt	r3, [sp, #12]
 800b1ee:	2300      	movge	r3, #0
 800b1f0:	2201      	movlt	r2, #1
 800b1f2:	bfac      	ite	ge
 800b1f4:	f8c8 3000 	strge.w	r3, [r8]
 800b1f8:	f8c8 2000 	strlt.w	r2, [r8]
 800b1fc:	4b9e      	ldr	r3, [pc, #632]	; (800b478 <_dtoa_r+0x2f0>)
 800b1fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b202:	ea33 0308 	bics.w	r3, r3, r8
 800b206:	d11b      	bne.n	800b240 <_dtoa_r+0xb8>
 800b208:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b20a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b20e:	6013      	str	r3, [r2, #0]
 800b210:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b214:	4333      	orrs	r3, r6
 800b216:	f000 8593 	beq.w	800bd40 <_dtoa_r+0xbb8>
 800b21a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b21c:	b963      	cbnz	r3, 800b238 <_dtoa_r+0xb0>
 800b21e:	4b97      	ldr	r3, [pc, #604]	; (800b47c <_dtoa_r+0x2f4>)
 800b220:	e027      	b.n	800b272 <_dtoa_r+0xea>
 800b222:	4b97      	ldr	r3, [pc, #604]	; (800b480 <_dtoa_r+0x2f8>)
 800b224:	9300      	str	r3, [sp, #0]
 800b226:	3308      	adds	r3, #8
 800b228:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b22a:	6013      	str	r3, [r2, #0]
 800b22c:	9800      	ldr	r0, [sp, #0]
 800b22e:	b013      	add	sp, #76	; 0x4c
 800b230:	ecbd 8b04 	vpop	{d8-d9}
 800b234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b238:	4b90      	ldr	r3, [pc, #576]	; (800b47c <_dtoa_r+0x2f4>)
 800b23a:	9300      	str	r3, [sp, #0]
 800b23c:	3303      	adds	r3, #3
 800b23e:	e7f3      	b.n	800b228 <_dtoa_r+0xa0>
 800b240:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b244:	2200      	movs	r2, #0
 800b246:	ec51 0b17 	vmov	r0, r1, d7
 800b24a:	eeb0 8a47 	vmov.f32	s16, s14
 800b24e:	eef0 8a67 	vmov.f32	s17, s15
 800b252:	2300      	movs	r3, #0
 800b254:	f7f5 fc48 	bl	8000ae8 <__aeabi_dcmpeq>
 800b258:	4681      	mov	r9, r0
 800b25a:	b160      	cbz	r0, 800b276 <_dtoa_r+0xee>
 800b25c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b25e:	2301      	movs	r3, #1
 800b260:	6013      	str	r3, [r2, #0]
 800b262:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b264:	2b00      	cmp	r3, #0
 800b266:	f000 8568 	beq.w	800bd3a <_dtoa_r+0xbb2>
 800b26a:	4b86      	ldr	r3, [pc, #536]	; (800b484 <_dtoa_r+0x2fc>)
 800b26c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b26e:	6013      	str	r3, [r2, #0]
 800b270:	3b01      	subs	r3, #1
 800b272:	9300      	str	r3, [sp, #0]
 800b274:	e7da      	b.n	800b22c <_dtoa_r+0xa4>
 800b276:	aa10      	add	r2, sp, #64	; 0x40
 800b278:	a911      	add	r1, sp, #68	; 0x44
 800b27a:	4620      	mov	r0, r4
 800b27c:	eeb0 0a48 	vmov.f32	s0, s16
 800b280:	eef0 0a68 	vmov.f32	s1, s17
 800b284:	f001 f994 	bl	800c5b0 <__d2b>
 800b288:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b28c:	4682      	mov	sl, r0
 800b28e:	2d00      	cmp	r5, #0
 800b290:	d07f      	beq.n	800b392 <_dtoa_r+0x20a>
 800b292:	ee18 3a90 	vmov	r3, s17
 800b296:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b29a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b29e:	ec51 0b18 	vmov	r0, r1, d8
 800b2a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b2a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b2aa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b2ae:	4619      	mov	r1, r3
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	4b75      	ldr	r3, [pc, #468]	; (800b488 <_dtoa_r+0x300>)
 800b2b4:	f7f4 fff8 	bl	80002a8 <__aeabi_dsub>
 800b2b8:	a367      	add	r3, pc, #412	; (adr r3, 800b458 <_dtoa_r+0x2d0>)
 800b2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2be:	f7f5 f9ab 	bl	8000618 <__aeabi_dmul>
 800b2c2:	a367      	add	r3, pc, #412	; (adr r3, 800b460 <_dtoa_r+0x2d8>)
 800b2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c8:	f7f4 fff0 	bl	80002ac <__adddf3>
 800b2cc:	4606      	mov	r6, r0
 800b2ce:	4628      	mov	r0, r5
 800b2d0:	460f      	mov	r7, r1
 800b2d2:	f7f5 f937 	bl	8000544 <__aeabi_i2d>
 800b2d6:	a364      	add	r3, pc, #400	; (adr r3, 800b468 <_dtoa_r+0x2e0>)
 800b2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2dc:	f7f5 f99c 	bl	8000618 <__aeabi_dmul>
 800b2e0:	4602      	mov	r2, r0
 800b2e2:	460b      	mov	r3, r1
 800b2e4:	4630      	mov	r0, r6
 800b2e6:	4639      	mov	r1, r7
 800b2e8:	f7f4 ffe0 	bl	80002ac <__adddf3>
 800b2ec:	4606      	mov	r6, r0
 800b2ee:	460f      	mov	r7, r1
 800b2f0:	f7f5 fc42 	bl	8000b78 <__aeabi_d2iz>
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	4683      	mov	fp, r0
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	4630      	mov	r0, r6
 800b2fc:	4639      	mov	r1, r7
 800b2fe:	f7f5 fbfd 	bl	8000afc <__aeabi_dcmplt>
 800b302:	b148      	cbz	r0, 800b318 <_dtoa_r+0x190>
 800b304:	4658      	mov	r0, fp
 800b306:	f7f5 f91d 	bl	8000544 <__aeabi_i2d>
 800b30a:	4632      	mov	r2, r6
 800b30c:	463b      	mov	r3, r7
 800b30e:	f7f5 fbeb 	bl	8000ae8 <__aeabi_dcmpeq>
 800b312:	b908      	cbnz	r0, 800b318 <_dtoa_r+0x190>
 800b314:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b318:	f1bb 0f16 	cmp.w	fp, #22
 800b31c:	d857      	bhi.n	800b3ce <_dtoa_r+0x246>
 800b31e:	4b5b      	ldr	r3, [pc, #364]	; (800b48c <_dtoa_r+0x304>)
 800b320:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b328:	ec51 0b18 	vmov	r0, r1, d8
 800b32c:	f7f5 fbe6 	bl	8000afc <__aeabi_dcmplt>
 800b330:	2800      	cmp	r0, #0
 800b332:	d04e      	beq.n	800b3d2 <_dtoa_r+0x24a>
 800b334:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b338:	2300      	movs	r3, #0
 800b33a:	930c      	str	r3, [sp, #48]	; 0x30
 800b33c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b33e:	1b5b      	subs	r3, r3, r5
 800b340:	1e5a      	subs	r2, r3, #1
 800b342:	bf45      	ittet	mi
 800b344:	f1c3 0301 	rsbmi	r3, r3, #1
 800b348:	9305      	strmi	r3, [sp, #20]
 800b34a:	2300      	movpl	r3, #0
 800b34c:	2300      	movmi	r3, #0
 800b34e:	9206      	str	r2, [sp, #24]
 800b350:	bf54      	ite	pl
 800b352:	9305      	strpl	r3, [sp, #20]
 800b354:	9306      	strmi	r3, [sp, #24]
 800b356:	f1bb 0f00 	cmp.w	fp, #0
 800b35a:	db3c      	blt.n	800b3d6 <_dtoa_r+0x24e>
 800b35c:	9b06      	ldr	r3, [sp, #24]
 800b35e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b362:	445b      	add	r3, fp
 800b364:	9306      	str	r3, [sp, #24]
 800b366:	2300      	movs	r3, #0
 800b368:	9308      	str	r3, [sp, #32]
 800b36a:	9b07      	ldr	r3, [sp, #28]
 800b36c:	2b09      	cmp	r3, #9
 800b36e:	d868      	bhi.n	800b442 <_dtoa_r+0x2ba>
 800b370:	2b05      	cmp	r3, #5
 800b372:	bfc4      	itt	gt
 800b374:	3b04      	subgt	r3, #4
 800b376:	9307      	strgt	r3, [sp, #28]
 800b378:	9b07      	ldr	r3, [sp, #28]
 800b37a:	f1a3 0302 	sub.w	r3, r3, #2
 800b37e:	bfcc      	ite	gt
 800b380:	2500      	movgt	r5, #0
 800b382:	2501      	movle	r5, #1
 800b384:	2b03      	cmp	r3, #3
 800b386:	f200 8085 	bhi.w	800b494 <_dtoa_r+0x30c>
 800b38a:	e8df f003 	tbb	[pc, r3]
 800b38e:	3b2e      	.short	0x3b2e
 800b390:	5839      	.short	0x5839
 800b392:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b396:	441d      	add	r5, r3
 800b398:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b39c:	2b20      	cmp	r3, #32
 800b39e:	bfc1      	itttt	gt
 800b3a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b3a4:	fa08 f803 	lslgt.w	r8, r8, r3
 800b3a8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b3ac:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b3b0:	bfd6      	itet	le
 800b3b2:	f1c3 0320 	rsble	r3, r3, #32
 800b3b6:	ea48 0003 	orrgt.w	r0, r8, r3
 800b3ba:	fa06 f003 	lslle.w	r0, r6, r3
 800b3be:	f7f5 f8b1 	bl	8000524 <__aeabi_ui2d>
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b3c8:	3d01      	subs	r5, #1
 800b3ca:	920e      	str	r2, [sp, #56]	; 0x38
 800b3cc:	e76f      	b.n	800b2ae <_dtoa_r+0x126>
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	e7b3      	b.n	800b33a <_dtoa_r+0x1b2>
 800b3d2:	900c      	str	r0, [sp, #48]	; 0x30
 800b3d4:	e7b2      	b.n	800b33c <_dtoa_r+0x1b4>
 800b3d6:	9b05      	ldr	r3, [sp, #20]
 800b3d8:	eba3 030b 	sub.w	r3, r3, fp
 800b3dc:	9305      	str	r3, [sp, #20]
 800b3de:	f1cb 0300 	rsb	r3, fp, #0
 800b3e2:	9308      	str	r3, [sp, #32]
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3e8:	e7bf      	b.n	800b36a <_dtoa_r+0x1e2>
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	9309      	str	r3, [sp, #36]	; 0x24
 800b3ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	dc52      	bgt.n	800b49a <_dtoa_r+0x312>
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	9301      	str	r3, [sp, #4]
 800b3f8:	9304      	str	r3, [sp, #16]
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	920a      	str	r2, [sp, #40]	; 0x28
 800b3fe:	e00b      	b.n	800b418 <_dtoa_r+0x290>
 800b400:	2301      	movs	r3, #1
 800b402:	e7f3      	b.n	800b3ec <_dtoa_r+0x264>
 800b404:	2300      	movs	r3, #0
 800b406:	9309      	str	r3, [sp, #36]	; 0x24
 800b408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b40a:	445b      	add	r3, fp
 800b40c:	9301      	str	r3, [sp, #4]
 800b40e:	3301      	adds	r3, #1
 800b410:	2b01      	cmp	r3, #1
 800b412:	9304      	str	r3, [sp, #16]
 800b414:	bfb8      	it	lt
 800b416:	2301      	movlt	r3, #1
 800b418:	69e0      	ldr	r0, [r4, #28]
 800b41a:	2100      	movs	r1, #0
 800b41c:	2204      	movs	r2, #4
 800b41e:	f102 0614 	add.w	r6, r2, #20
 800b422:	429e      	cmp	r6, r3
 800b424:	d93d      	bls.n	800b4a2 <_dtoa_r+0x31a>
 800b426:	6041      	str	r1, [r0, #4]
 800b428:	4620      	mov	r0, r4
 800b42a:	f000 fd9f 	bl	800bf6c <_Balloc>
 800b42e:	9000      	str	r0, [sp, #0]
 800b430:	2800      	cmp	r0, #0
 800b432:	d139      	bne.n	800b4a8 <_dtoa_r+0x320>
 800b434:	4b16      	ldr	r3, [pc, #88]	; (800b490 <_dtoa_r+0x308>)
 800b436:	4602      	mov	r2, r0
 800b438:	f240 11af 	movw	r1, #431	; 0x1af
 800b43c:	e6bd      	b.n	800b1ba <_dtoa_r+0x32>
 800b43e:	2301      	movs	r3, #1
 800b440:	e7e1      	b.n	800b406 <_dtoa_r+0x27e>
 800b442:	2501      	movs	r5, #1
 800b444:	2300      	movs	r3, #0
 800b446:	9307      	str	r3, [sp, #28]
 800b448:	9509      	str	r5, [sp, #36]	; 0x24
 800b44a:	f04f 33ff 	mov.w	r3, #4294967295
 800b44e:	9301      	str	r3, [sp, #4]
 800b450:	9304      	str	r3, [sp, #16]
 800b452:	2200      	movs	r2, #0
 800b454:	2312      	movs	r3, #18
 800b456:	e7d1      	b.n	800b3fc <_dtoa_r+0x274>
 800b458:	636f4361 	.word	0x636f4361
 800b45c:	3fd287a7 	.word	0x3fd287a7
 800b460:	8b60c8b3 	.word	0x8b60c8b3
 800b464:	3fc68a28 	.word	0x3fc68a28
 800b468:	509f79fb 	.word	0x509f79fb
 800b46c:	3fd34413 	.word	0x3fd34413
 800b470:	0800d0ed 	.word	0x0800d0ed
 800b474:	0800d104 	.word	0x0800d104
 800b478:	7ff00000 	.word	0x7ff00000
 800b47c:	0800d0e9 	.word	0x0800d0e9
 800b480:	0800d0e0 	.word	0x0800d0e0
 800b484:	0800d0bd 	.word	0x0800d0bd
 800b488:	3ff80000 	.word	0x3ff80000
 800b48c:	0800d1f0 	.word	0x0800d1f0
 800b490:	0800d15c 	.word	0x0800d15c
 800b494:	2301      	movs	r3, #1
 800b496:	9309      	str	r3, [sp, #36]	; 0x24
 800b498:	e7d7      	b.n	800b44a <_dtoa_r+0x2c2>
 800b49a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b49c:	9301      	str	r3, [sp, #4]
 800b49e:	9304      	str	r3, [sp, #16]
 800b4a0:	e7ba      	b.n	800b418 <_dtoa_r+0x290>
 800b4a2:	3101      	adds	r1, #1
 800b4a4:	0052      	lsls	r2, r2, #1
 800b4a6:	e7ba      	b.n	800b41e <_dtoa_r+0x296>
 800b4a8:	69e3      	ldr	r3, [r4, #28]
 800b4aa:	9a00      	ldr	r2, [sp, #0]
 800b4ac:	601a      	str	r2, [r3, #0]
 800b4ae:	9b04      	ldr	r3, [sp, #16]
 800b4b0:	2b0e      	cmp	r3, #14
 800b4b2:	f200 80a8 	bhi.w	800b606 <_dtoa_r+0x47e>
 800b4b6:	2d00      	cmp	r5, #0
 800b4b8:	f000 80a5 	beq.w	800b606 <_dtoa_r+0x47e>
 800b4bc:	f1bb 0f00 	cmp.w	fp, #0
 800b4c0:	dd38      	ble.n	800b534 <_dtoa_r+0x3ac>
 800b4c2:	4bc0      	ldr	r3, [pc, #768]	; (800b7c4 <_dtoa_r+0x63c>)
 800b4c4:	f00b 020f 	and.w	r2, fp, #15
 800b4c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4cc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b4d0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b4d4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b4d8:	d019      	beq.n	800b50e <_dtoa_r+0x386>
 800b4da:	4bbb      	ldr	r3, [pc, #748]	; (800b7c8 <_dtoa_r+0x640>)
 800b4dc:	ec51 0b18 	vmov	r0, r1, d8
 800b4e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b4e4:	f7f5 f9c2 	bl	800086c <__aeabi_ddiv>
 800b4e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4ec:	f008 080f 	and.w	r8, r8, #15
 800b4f0:	2503      	movs	r5, #3
 800b4f2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b7c8 <_dtoa_r+0x640>
 800b4f6:	f1b8 0f00 	cmp.w	r8, #0
 800b4fa:	d10a      	bne.n	800b512 <_dtoa_r+0x38a>
 800b4fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b500:	4632      	mov	r2, r6
 800b502:	463b      	mov	r3, r7
 800b504:	f7f5 f9b2 	bl	800086c <__aeabi_ddiv>
 800b508:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b50c:	e02b      	b.n	800b566 <_dtoa_r+0x3de>
 800b50e:	2502      	movs	r5, #2
 800b510:	e7ef      	b.n	800b4f2 <_dtoa_r+0x36a>
 800b512:	f018 0f01 	tst.w	r8, #1
 800b516:	d008      	beq.n	800b52a <_dtoa_r+0x3a2>
 800b518:	4630      	mov	r0, r6
 800b51a:	4639      	mov	r1, r7
 800b51c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b520:	f7f5 f87a 	bl	8000618 <__aeabi_dmul>
 800b524:	3501      	adds	r5, #1
 800b526:	4606      	mov	r6, r0
 800b528:	460f      	mov	r7, r1
 800b52a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b52e:	f109 0908 	add.w	r9, r9, #8
 800b532:	e7e0      	b.n	800b4f6 <_dtoa_r+0x36e>
 800b534:	f000 809f 	beq.w	800b676 <_dtoa_r+0x4ee>
 800b538:	f1cb 0600 	rsb	r6, fp, #0
 800b53c:	4ba1      	ldr	r3, [pc, #644]	; (800b7c4 <_dtoa_r+0x63c>)
 800b53e:	4fa2      	ldr	r7, [pc, #648]	; (800b7c8 <_dtoa_r+0x640>)
 800b540:	f006 020f 	and.w	r2, r6, #15
 800b544:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b54c:	ec51 0b18 	vmov	r0, r1, d8
 800b550:	f7f5 f862 	bl	8000618 <__aeabi_dmul>
 800b554:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b558:	1136      	asrs	r6, r6, #4
 800b55a:	2300      	movs	r3, #0
 800b55c:	2502      	movs	r5, #2
 800b55e:	2e00      	cmp	r6, #0
 800b560:	d17e      	bne.n	800b660 <_dtoa_r+0x4d8>
 800b562:	2b00      	cmp	r3, #0
 800b564:	d1d0      	bne.n	800b508 <_dtoa_r+0x380>
 800b566:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b568:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	f000 8084 	beq.w	800b67a <_dtoa_r+0x4f2>
 800b572:	4b96      	ldr	r3, [pc, #600]	; (800b7cc <_dtoa_r+0x644>)
 800b574:	2200      	movs	r2, #0
 800b576:	4640      	mov	r0, r8
 800b578:	4649      	mov	r1, r9
 800b57a:	f7f5 fabf 	bl	8000afc <__aeabi_dcmplt>
 800b57e:	2800      	cmp	r0, #0
 800b580:	d07b      	beq.n	800b67a <_dtoa_r+0x4f2>
 800b582:	9b04      	ldr	r3, [sp, #16]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d078      	beq.n	800b67a <_dtoa_r+0x4f2>
 800b588:	9b01      	ldr	r3, [sp, #4]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	dd39      	ble.n	800b602 <_dtoa_r+0x47a>
 800b58e:	4b90      	ldr	r3, [pc, #576]	; (800b7d0 <_dtoa_r+0x648>)
 800b590:	2200      	movs	r2, #0
 800b592:	4640      	mov	r0, r8
 800b594:	4649      	mov	r1, r9
 800b596:	f7f5 f83f 	bl	8000618 <__aeabi_dmul>
 800b59a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b59e:	9e01      	ldr	r6, [sp, #4]
 800b5a0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b5a4:	3501      	adds	r5, #1
 800b5a6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b5aa:	4628      	mov	r0, r5
 800b5ac:	f7f4 ffca 	bl	8000544 <__aeabi_i2d>
 800b5b0:	4642      	mov	r2, r8
 800b5b2:	464b      	mov	r3, r9
 800b5b4:	f7f5 f830 	bl	8000618 <__aeabi_dmul>
 800b5b8:	4b86      	ldr	r3, [pc, #536]	; (800b7d4 <_dtoa_r+0x64c>)
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	f7f4 fe76 	bl	80002ac <__adddf3>
 800b5c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b5c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5c8:	9303      	str	r3, [sp, #12]
 800b5ca:	2e00      	cmp	r6, #0
 800b5cc:	d158      	bne.n	800b680 <_dtoa_r+0x4f8>
 800b5ce:	4b82      	ldr	r3, [pc, #520]	; (800b7d8 <_dtoa_r+0x650>)
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	4640      	mov	r0, r8
 800b5d4:	4649      	mov	r1, r9
 800b5d6:	f7f4 fe67 	bl	80002a8 <__aeabi_dsub>
 800b5da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b5de:	4680      	mov	r8, r0
 800b5e0:	4689      	mov	r9, r1
 800b5e2:	f7f5 faa9 	bl	8000b38 <__aeabi_dcmpgt>
 800b5e6:	2800      	cmp	r0, #0
 800b5e8:	f040 8296 	bne.w	800bb18 <_dtoa_r+0x990>
 800b5ec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b5f0:	4640      	mov	r0, r8
 800b5f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b5f6:	4649      	mov	r1, r9
 800b5f8:	f7f5 fa80 	bl	8000afc <__aeabi_dcmplt>
 800b5fc:	2800      	cmp	r0, #0
 800b5fe:	f040 8289 	bne.w	800bb14 <_dtoa_r+0x98c>
 800b602:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b606:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b608:	2b00      	cmp	r3, #0
 800b60a:	f2c0 814e 	blt.w	800b8aa <_dtoa_r+0x722>
 800b60e:	f1bb 0f0e 	cmp.w	fp, #14
 800b612:	f300 814a 	bgt.w	800b8aa <_dtoa_r+0x722>
 800b616:	4b6b      	ldr	r3, [pc, #428]	; (800b7c4 <_dtoa_r+0x63c>)
 800b618:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b61c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b622:	2b00      	cmp	r3, #0
 800b624:	f280 80dc 	bge.w	800b7e0 <_dtoa_r+0x658>
 800b628:	9b04      	ldr	r3, [sp, #16]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	f300 80d8 	bgt.w	800b7e0 <_dtoa_r+0x658>
 800b630:	f040 826f 	bne.w	800bb12 <_dtoa_r+0x98a>
 800b634:	4b68      	ldr	r3, [pc, #416]	; (800b7d8 <_dtoa_r+0x650>)
 800b636:	2200      	movs	r2, #0
 800b638:	4640      	mov	r0, r8
 800b63a:	4649      	mov	r1, r9
 800b63c:	f7f4 ffec 	bl	8000618 <__aeabi_dmul>
 800b640:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b644:	f7f5 fa6e 	bl	8000b24 <__aeabi_dcmpge>
 800b648:	9e04      	ldr	r6, [sp, #16]
 800b64a:	4637      	mov	r7, r6
 800b64c:	2800      	cmp	r0, #0
 800b64e:	f040 8245 	bne.w	800badc <_dtoa_r+0x954>
 800b652:	9d00      	ldr	r5, [sp, #0]
 800b654:	2331      	movs	r3, #49	; 0x31
 800b656:	f805 3b01 	strb.w	r3, [r5], #1
 800b65a:	f10b 0b01 	add.w	fp, fp, #1
 800b65e:	e241      	b.n	800bae4 <_dtoa_r+0x95c>
 800b660:	07f2      	lsls	r2, r6, #31
 800b662:	d505      	bpl.n	800b670 <_dtoa_r+0x4e8>
 800b664:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b668:	f7f4 ffd6 	bl	8000618 <__aeabi_dmul>
 800b66c:	3501      	adds	r5, #1
 800b66e:	2301      	movs	r3, #1
 800b670:	1076      	asrs	r6, r6, #1
 800b672:	3708      	adds	r7, #8
 800b674:	e773      	b.n	800b55e <_dtoa_r+0x3d6>
 800b676:	2502      	movs	r5, #2
 800b678:	e775      	b.n	800b566 <_dtoa_r+0x3de>
 800b67a:	9e04      	ldr	r6, [sp, #16]
 800b67c:	465f      	mov	r7, fp
 800b67e:	e792      	b.n	800b5a6 <_dtoa_r+0x41e>
 800b680:	9900      	ldr	r1, [sp, #0]
 800b682:	4b50      	ldr	r3, [pc, #320]	; (800b7c4 <_dtoa_r+0x63c>)
 800b684:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b688:	4431      	add	r1, r6
 800b68a:	9102      	str	r1, [sp, #8]
 800b68c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b68e:	eeb0 9a47 	vmov.f32	s18, s14
 800b692:	eef0 9a67 	vmov.f32	s19, s15
 800b696:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b69a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b69e:	2900      	cmp	r1, #0
 800b6a0:	d044      	beq.n	800b72c <_dtoa_r+0x5a4>
 800b6a2:	494e      	ldr	r1, [pc, #312]	; (800b7dc <_dtoa_r+0x654>)
 800b6a4:	2000      	movs	r0, #0
 800b6a6:	f7f5 f8e1 	bl	800086c <__aeabi_ddiv>
 800b6aa:	ec53 2b19 	vmov	r2, r3, d9
 800b6ae:	f7f4 fdfb 	bl	80002a8 <__aeabi_dsub>
 800b6b2:	9d00      	ldr	r5, [sp, #0]
 800b6b4:	ec41 0b19 	vmov	d9, r0, r1
 800b6b8:	4649      	mov	r1, r9
 800b6ba:	4640      	mov	r0, r8
 800b6bc:	f7f5 fa5c 	bl	8000b78 <__aeabi_d2iz>
 800b6c0:	4606      	mov	r6, r0
 800b6c2:	f7f4 ff3f 	bl	8000544 <__aeabi_i2d>
 800b6c6:	4602      	mov	r2, r0
 800b6c8:	460b      	mov	r3, r1
 800b6ca:	4640      	mov	r0, r8
 800b6cc:	4649      	mov	r1, r9
 800b6ce:	f7f4 fdeb 	bl	80002a8 <__aeabi_dsub>
 800b6d2:	3630      	adds	r6, #48	; 0x30
 800b6d4:	f805 6b01 	strb.w	r6, [r5], #1
 800b6d8:	ec53 2b19 	vmov	r2, r3, d9
 800b6dc:	4680      	mov	r8, r0
 800b6de:	4689      	mov	r9, r1
 800b6e0:	f7f5 fa0c 	bl	8000afc <__aeabi_dcmplt>
 800b6e4:	2800      	cmp	r0, #0
 800b6e6:	d164      	bne.n	800b7b2 <_dtoa_r+0x62a>
 800b6e8:	4642      	mov	r2, r8
 800b6ea:	464b      	mov	r3, r9
 800b6ec:	4937      	ldr	r1, [pc, #220]	; (800b7cc <_dtoa_r+0x644>)
 800b6ee:	2000      	movs	r0, #0
 800b6f0:	f7f4 fdda 	bl	80002a8 <__aeabi_dsub>
 800b6f4:	ec53 2b19 	vmov	r2, r3, d9
 800b6f8:	f7f5 fa00 	bl	8000afc <__aeabi_dcmplt>
 800b6fc:	2800      	cmp	r0, #0
 800b6fe:	f040 80b6 	bne.w	800b86e <_dtoa_r+0x6e6>
 800b702:	9b02      	ldr	r3, [sp, #8]
 800b704:	429d      	cmp	r5, r3
 800b706:	f43f af7c 	beq.w	800b602 <_dtoa_r+0x47a>
 800b70a:	4b31      	ldr	r3, [pc, #196]	; (800b7d0 <_dtoa_r+0x648>)
 800b70c:	ec51 0b19 	vmov	r0, r1, d9
 800b710:	2200      	movs	r2, #0
 800b712:	f7f4 ff81 	bl	8000618 <__aeabi_dmul>
 800b716:	4b2e      	ldr	r3, [pc, #184]	; (800b7d0 <_dtoa_r+0x648>)
 800b718:	ec41 0b19 	vmov	d9, r0, r1
 800b71c:	2200      	movs	r2, #0
 800b71e:	4640      	mov	r0, r8
 800b720:	4649      	mov	r1, r9
 800b722:	f7f4 ff79 	bl	8000618 <__aeabi_dmul>
 800b726:	4680      	mov	r8, r0
 800b728:	4689      	mov	r9, r1
 800b72a:	e7c5      	b.n	800b6b8 <_dtoa_r+0x530>
 800b72c:	ec51 0b17 	vmov	r0, r1, d7
 800b730:	f7f4 ff72 	bl	8000618 <__aeabi_dmul>
 800b734:	9b02      	ldr	r3, [sp, #8]
 800b736:	9d00      	ldr	r5, [sp, #0]
 800b738:	930f      	str	r3, [sp, #60]	; 0x3c
 800b73a:	ec41 0b19 	vmov	d9, r0, r1
 800b73e:	4649      	mov	r1, r9
 800b740:	4640      	mov	r0, r8
 800b742:	f7f5 fa19 	bl	8000b78 <__aeabi_d2iz>
 800b746:	4606      	mov	r6, r0
 800b748:	f7f4 fefc 	bl	8000544 <__aeabi_i2d>
 800b74c:	3630      	adds	r6, #48	; 0x30
 800b74e:	4602      	mov	r2, r0
 800b750:	460b      	mov	r3, r1
 800b752:	4640      	mov	r0, r8
 800b754:	4649      	mov	r1, r9
 800b756:	f7f4 fda7 	bl	80002a8 <__aeabi_dsub>
 800b75a:	f805 6b01 	strb.w	r6, [r5], #1
 800b75e:	9b02      	ldr	r3, [sp, #8]
 800b760:	429d      	cmp	r5, r3
 800b762:	4680      	mov	r8, r0
 800b764:	4689      	mov	r9, r1
 800b766:	f04f 0200 	mov.w	r2, #0
 800b76a:	d124      	bne.n	800b7b6 <_dtoa_r+0x62e>
 800b76c:	4b1b      	ldr	r3, [pc, #108]	; (800b7dc <_dtoa_r+0x654>)
 800b76e:	ec51 0b19 	vmov	r0, r1, d9
 800b772:	f7f4 fd9b 	bl	80002ac <__adddf3>
 800b776:	4602      	mov	r2, r0
 800b778:	460b      	mov	r3, r1
 800b77a:	4640      	mov	r0, r8
 800b77c:	4649      	mov	r1, r9
 800b77e:	f7f5 f9db 	bl	8000b38 <__aeabi_dcmpgt>
 800b782:	2800      	cmp	r0, #0
 800b784:	d173      	bne.n	800b86e <_dtoa_r+0x6e6>
 800b786:	ec53 2b19 	vmov	r2, r3, d9
 800b78a:	4914      	ldr	r1, [pc, #80]	; (800b7dc <_dtoa_r+0x654>)
 800b78c:	2000      	movs	r0, #0
 800b78e:	f7f4 fd8b 	bl	80002a8 <__aeabi_dsub>
 800b792:	4602      	mov	r2, r0
 800b794:	460b      	mov	r3, r1
 800b796:	4640      	mov	r0, r8
 800b798:	4649      	mov	r1, r9
 800b79a:	f7f5 f9af 	bl	8000afc <__aeabi_dcmplt>
 800b79e:	2800      	cmp	r0, #0
 800b7a0:	f43f af2f 	beq.w	800b602 <_dtoa_r+0x47a>
 800b7a4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b7a6:	1e6b      	subs	r3, r5, #1
 800b7a8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b7ae:	2b30      	cmp	r3, #48	; 0x30
 800b7b0:	d0f8      	beq.n	800b7a4 <_dtoa_r+0x61c>
 800b7b2:	46bb      	mov	fp, r7
 800b7b4:	e04a      	b.n	800b84c <_dtoa_r+0x6c4>
 800b7b6:	4b06      	ldr	r3, [pc, #24]	; (800b7d0 <_dtoa_r+0x648>)
 800b7b8:	f7f4 ff2e 	bl	8000618 <__aeabi_dmul>
 800b7bc:	4680      	mov	r8, r0
 800b7be:	4689      	mov	r9, r1
 800b7c0:	e7bd      	b.n	800b73e <_dtoa_r+0x5b6>
 800b7c2:	bf00      	nop
 800b7c4:	0800d1f0 	.word	0x0800d1f0
 800b7c8:	0800d1c8 	.word	0x0800d1c8
 800b7cc:	3ff00000 	.word	0x3ff00000
 800b7d0:	40240000 	.word	0x40240000
 800b7d4:	401c0000 	.word	0x401c0000
 800b7d8:	40140000 	.word	0x40140000
 800b7dc:	3fe00000 	.word	0x3fe00000
 800b7e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b7e4:	9d00      	ldr	r5, [sp, #0]
 800b7e6:	4642      	mov	r2, r8
 800b7e8:	464b      	mov	r3, r9
 800b7ea:	4630      	mov	r0, r6
 800b7ec:	4639      	mov	r1, r7
 800b7ee:	f7f5 f83d 	bl	800086c <__aeabi_ddiv>
 800b7f2:	f7f5 f9c1 	bl	8000b78 <__aeabi_d2iz>
 800b7f6:	9001      	str	r0, [sp, #4]
 800b7f8:	f7f4 fea4 	bl	8000544 <__aeabi_i2d>
 800b7fc:	4642      	mov	r2, r8
 800b7fe:	464b      	mov	r3, r9
 800b800:	f7f4 ff0a 	bl	8000618 <__aeabi_dmul>
 800b804:	4602      	mov	r2, r0
 800b806:	460b      	mov	r3, r1
 800b808:	4630      	mov	r0, r6
 800b80a:	4639      	mov	r1, r7
 800b80c:	f7f4 fd4c 	bl	80002a8 <__aeabi_dsub>
 800b810:	9e01      	ldr	r6, [sp, #4]
 800b812:	9f04      	ldr	r7, [sp, #16]
 800b814:	3630      	adds	r6, #48	; 0x30
 800b816:	f805 6b01 	strb.w	r6, [r5], #1
 800b81a:	9e00      	ldr	r6, [sp, #0]
 800b81c:	1bae      	subs	r6, r5, r6
 800b81e:	42b7      	cmp	r7, r6
 800b820:	4602      	mov	r2, r0
 800b822:	460b      	mov	r3, r1
 800b824:	d134      	bne.n	800b890 <_dtoa_r+0x708>
 800b826:	f7f4 fd41 	bl	80002ac <__adddf3>
 800b82a:	4642      	mov	r2, r8
 800b82c:	464b      	mov	r3, r9
 800b82e:	4606      	mov	r6, r0
 800b830:	460f      	mov	r7, r1
 800b832:	f7f5 f981 	bl	8000b38 <__aeabi_dcmpgt>
 800b836:	b9c8      	cbnz	r0, 800b86c <_dtoa_r+0x6e4>
 800b838:	4642      	mov	r2, r8
 800b83a:	464b      	mov	r3, r9
 800b83c:	4630      	mov	r0, r6
 800b83e:	4639      	mov	r1, r7
 800b840:	f7f5 f952 	bl	8000ae8 <__aeabi_dcmpeq>
 800b844:	b110      	cbz	r0, 800b84c <_dtoa_r+0x6c4>
 800b846:	9b01      	ldr	r3, [sp, #4]
 800b848:	07db      	lsls	r3, r3, #31
 800b84a:	d40f      	bmi.n	800b86c <_dtoa_r+0x6e4>
 800b84c:	4651      	mov	r1, sl
 800b84e:	4620      	mov	r0, r4
 800b850:	f000 fbcc 	bl	800bfec <_Bfree>
 800b854:	2300      	movs	r3, #0
 800b856:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b858:	702b      	strb	r3, [r5, #0]
 800b85a:	f10b 0301 	add.w	r3, fp, #1
 800b85e:	6013      	str	r3, [r2, #0]
 800b860:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b862:	2b00      	cmp	r3, #0
 800b864:	f43f ace2 	beq.w	800b22c <_dtoa_r+0xa4>
 800b868:	601d      	str	r5, [r3, #0]
 800b86a:	e4df      	b.n	800b22c <_dtoa_r+0xa4>
 800b86c:	465f      	mov	r7, fp
 800b86e:	462b      	mov	r3, r5
 800b870:	461d      	mov	r5, r3
 800b872:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b876:	2a39      	cmp	r2, #57	; 0x39
 800b878:	d106      	bne.n	800b888 <_dtoa_r+0x700>
 800b87a:	9a00      	ldr	r2, [sp, #0]
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d1f7      	bne.n	800b870 <_dtoa_r+0x6e8>
 800b880:	9900      	ldr	r1, [sp, #0]
 800b882:	2230      	movs	r2, #48	; 0x30
 800b884:	3701      	adds	r7, #1
 800b886:	700a      	strb	r2, [r1, #0]
 800b888:	781a      	ldrb	r2, [r3, #0]
 800b88a:	3201      	adds	r2, #1
 800b88c:	701a      	strb	r2, [r3, #0]
 800b88e:	e790      	b.n	800b7b2 <_dtoa_r+0x62a>
 800b890:	4ba3      	ldr	r3, [pc, #652]	; (800bb20 <_dtoa_r+0x998>)
 800b892:	2200      	movs	r2, #0
 800b894:	f7f4 fec0 	bl	8000618 <__aeabi_dmul>
 800b898:	2200      	movs	r2, #0
 800b89a:	2300      	movs	r3, #0
 800b89c:	4606      	mov	r6, r0
 800b89e:	460f      	mov	r7, r1
 800b8a0:	f7f5 f922 	bl	8000ae8 <__aeabi_dcmpeq>
 800b8a4:	2800      	cmp	r0, #0
 800b8a6:	d09e      	beq.n	800b7e6 <_dtoa_r+0x65e>
 800b8a8:	e7d0      	b.n	800b84c <_dtoa_r+0x6c4>
 800b8aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8ac:	2a00      	cmp	r2, #0
 800b8ae:	f000 80ca 	beq.w	800ba46 <_dtoa_r+0x8be>
 800b8b2:	9a07      	ldr	r2, [sp, #28]
 800b8b4:	2a01      	cmp	r2, #1
 800b8b6:	f300 80ad 	bgt.w	800ba14 <_dtoa_r+0x88c>
 800b8ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b8bc:	2a00      	cmp	r2, #0
 800b8be:	f000 80a5 	beq.w	800ba0c <_dtoa_r+0x884>
 800b8c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b8c6:	9e08      	ldr	r6, [sp, #32]
 800b8c8:	9d05      	ldr	r5, [sp, #20]
 800b8ca:	9a05      	ldr	r2, [sp, #20]
 800b8cc:	441a      	add	r2, r3
 800b8ce:	9205      	str	r2, [sp, #20]
 800b8d0:	9a06      	ldr	r2, [sp, #24]
 800b8d2:	2101      	movs	r1, #1
 800b8d4:	441a      	add	r2, r3
 800b8d6:	4620      	mov	r0, r4
 800b8d8:	9206      	str	r2, [sp, #24]
 800b8da:	f000 fc3d 	bl	800c158 <__i2b>
 800b8de:	4607      	mov	r7, r0
 800b8e0:	b165      	cbz	r5, 800b8fc <_dtoa_r+0x774>
 800b8e2:	9b06      	ldr	r3, [sp, #24]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	dd09      	ble.n	800b8fc <_dtoa_r+0x774>
 800b8e8:	42ab      	cmp	r3, r5
 800b8ea:	9a05      	ldr	r2, [sp, #20]
 800b8ec:	bfa8      	it	ge
 800b8ee:	462b      	movge	r3, r5
 800b8f0:	1ad2      	subs	r2, r2, r3
 800b8f2:	9205      	str	r2, [sp, #20]
 800b8f4:	9a06      	ldr	r2, [sp, #24]
 800b8f6:	1aed      	subs	r5, r5, r3
 800b8f8:	1ad3      	subs	r3, r2, r3
 800b8fa:	9306      	str	r3, [sp, #24]
 800b8fc:	9b08      	ldr	r3, [sp, #32]
 800b8fe:	b1f3      	cbz	r3, 800b93e <_dtoa_r+0x7b6>
 800b900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b902:	2b00      	cmp	r3, #0
 800b904:	f000 80a3 	beq.w	800ba4e <_dtoa_r+0x8c6>
 800b908:	2e00      	cmp	r6, #0
 800b90a:	dd10      	ble.n	800b92e <_dtoa_r+0x7a6>
 800b90c:	4639      	mov	r1, r7
 800b90e:	4632      	mov	r2, r6
 800b910:	4620      	mov	r0, r4
 800b912:	f000 fce1 	bl	800c2d8 <__pow5mult>
 800b916:	4652      	mov	r2, sl
 800b918:	4601      	mov	r1, r0
 800b91a:	4607      	mov	r7, r0
 800b91c:	4620      	mov	r0, r4
 800b91e:	f000 fc31 	bl	800c184 <__multiply>
 800b922:	4651      	mov	r1, sl
 800b924:	4680      	mov	r8, r0
 800b926:	4620      	mov	r0, r4
 800b928:	f000 fb60 	bl	800bfec <_Bfree>
 800b92c:	46c2      	mov	sl, r8
 800b92e:	9b08      	ldr	r3, [sp, #32]
 800b930:	1b9a      	subs	r2, r3, r6
 800b932:	d004      	beq.n	800b93e <_dtoa_r+0x7b6>
 800b934:	4651      	mov	r1, sl
 800b936:	4620      	mov	r0, r4
 800b938:	f000 fcce 	bl	800c2d8 <__pow5mult>
 800b93c:	4682      	mov	sl, r0
 800b93e:	2101      	movs	r1, #1
 800b940:	4620      	mov	r0, r4
 800b942:	f000 fc09 	bl	800c158 <__i2b>
 800b946:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b948:	2b00      	cmp	r3, #0
 800b94a:	4606      	mov	r6, r0
 800b94c:	f340 8081 	ble.w	800ba52 <_dtoa_r+0x8ca>
 800b950:	461a      	mov	r2, r3
 800b952:	4601      	mov	r1, r0
 800b954:	4620      	mov	r0, r4
 800b956:	f000 fcbf 	bl	800c2d8 <__pow5mult>
 800b95a:	9b07      	ldr	r3, [sp, #28]
 800b95c:	2b01      	cmp	r3, #1
 800b95e:	4606      	mov	r6, r0
 800b960:	dd7a      	ble.n	800ba58 <_dtoa_r+0x8d0>
 800b962:	f04f 0800 	mov.w	r8, #0
 800b966:	6933      	ldr	r3, [r6, #16]
 800b968:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b96c:	6918      	ldr	r0, [r3, #16]
 800b96e:	f000 fba5 	bl	800c0bc <__hi0bits>
 800b972:	f1c0 0020 	rsb	r0, r0, #32
 800b976:	9b06      	ldr	r3, [sp, #24]
 800b978:	4418      	add	r0, r3
 800b97a:	f010 001f 	ands.w	r0, r0, #31
 800b97e:	f000 8094 	beq.w	800baaa <_dtoa_r+0x922>
 800b982:	f1c0 0320 	rsb	r3, r0, #32
 800b986:	2b04      	cmp	r3, #4
 800b988:	f340 8085 	ble.w	800ba96 <_dtoa_r+0x90e>
 800b98c:	9b05      	ldr	r3, [sp, #20]
 800b98e:	f1c0 001c 	rsb	r0, r0, #28
 800b992:	4403      	add	r3, r0
 800b994:	9305      	str	r3, [sp, #20]
 800b996:	9b06      	ldr	r3, [sp, #24]
 800b998:	4403      	add	r3, r0
 800b99a:	4405      	add	r5, r0
 800b99c:	9306      	str	r3, [sp, #24]
 800b99e:	9b05      	ldr	r3, [sp, #20]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	dd05      	ble.n	800b9b0 <_dtoa_r+0x828>
 800b9a4:	4651      	mov	r1, sl
 800b9a6:	461a      	mov	r2, r3
 800b9a8:	4620      	mov	r0, r4
 800b9aa:	f000 fcef 	bl	800c38c <__lshift>
 800b9ae:	4682      	mov	sl, r0
 800b9b0:	9b06      	ldr	r3, [sp, #24]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	dd05      	ble.n	800b9c2 <_dtoa_r+0x83a>
 800b9b6:	4631      	mov	r1, r6
 800b9b8:	461a      	mov	r2, r3
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	f000 fce6 	bl	800c38c <__lshift>
 800b9c0:	4606      	mov	r6, r0
 800b9c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d072      	beq.n	800baae <_dtoa_r+0x926>
 800b9c8:	4631      	mov	r1, r6
 800b9ca:	4650      	mov	r0, sl
 800b9cc:	f000 fd4a 	bl	800c464 <__mcmp>
 800b9d0:	2800      	cmp	r0, #0
 800b9d2:	da6c      	bge.n	800baae <_dtoa_r+0x926>
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	4651      	mov	r1, sl
 800b9d8:	220a      	movs	r2, #10
 800b9da:	4620      	mov	r0, r4
 800b9dc:	f000 fb28 	bl	800c030 <__multadd>
 800b9e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b9e6:	4682      	mov	sl, r0
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	f000 81b0 	beq.w	800bd4e <_dtoa_r+0xbc6>
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	4639      	mov	r1, r7
 800b9f2:	220a      	movs	r2, #10
 800b9f4:	4620      	mov	r0, r4
 800b9f6:	f000 fb1b 	bl	800c030 <__multadd>
 800b9fa:	9b01      	ldr	r3, [sp, #4]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	4607      	mov	r7, r0
 800ba00:	f300 8096 	bgt.w	800bb30 <_dtoa_r+0x9a8>
 800ba04:	9b07      	ldr	r3, [sp, #28]
 800ba06:	2b02      	cmp	r3, #2
 800ba08:	dc59      	bgt.n	800babe <_dtoa_r+0x936>
 800ba0a:	e091      	b.n	800bb30 <_dtoa_r+0x9a8>
 800ba0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ba0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ba12:	e758      	b.n	800b8c6 <_dtoa_r+0x73e>
 800ba14:	9b04      	ldr	r3, [sp, #16]
 800ba16:	1e5e      	subs	r6, r3, #1
 800ba18:	9b08      	ldr	r3, [sp, #32]
 800ba1a:	42b3      	cmp	r3, r6
 800ba1c:	bfbf      	itttt	lt
 800ba1e:	9b08      	ldrlt	r3, [sp, #32]
 800ba20:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ba22:	9608      	strlt	r6, [sp, #32]
 800ba24:	1af3      	sublt	r3, r6, r3
 800ba26:	bfb4      	ite	lt
 800ba28:	18d2      	addlt	r2, r2, r3
 800ba2a:	1b9e      	subge	r6, r3, r6
 800ba2c:	9b04      	ldr	r3, [sp, #16]
 800ba2e:	bfbc      	itt	lt
 800ba30:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ba32:	2600      	movlt	r6, #0
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	bfb7      	itett	lt
 800ba38:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ba3c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ba40:	1a9d      	sublt	r5, r3, r2
 800ba42:	2300      	movlt	r3, #0
 800ba44:	e741      	b.n	800b8ca <_dtoa_r+0x742>
 800ba46:	9e08      	ldr	r6, [sp, #32]
 800ba48:	9d05      	ldr	r5, [sp, #20]
 800ba4a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ba4c:	e748      	b.n	800b8e0 <_dtoa_r+0x758>
 800ba4e:	9a08      	ldr	r2, [sp, #32]
 800ba50:	e770      	b.n	800b934 <_dtoa_r+0x7ac>
 800ba52:	9b07      	ldr	r3, [sp, #28]
 800ba54:	2b01      	cmp	r3, #1
 800ba56:	dc19      	bgt.n	800ba8c <_dtoa_r+0x904>
 800ba58:	9b02      	ldr	r3, [sp, #8]
 800ba5a:	b9bb      	cbnz	r3, 800ba8c <_dtoa_r+0x904>
 800ba5c:	9b03      	ldr	r3, [sp, #12]
 800ba5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba62:	b99b      	cbnz	r3, 800ba8c <_dtoa_r+0x904>
 800ba64:	9b03      	ldr	r3, [sp, #12]
 800ba66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ba6a:	0d1b      	lsrs	r3, r3, #20
 800ba6c:	051b      	lsls	r3, r3, #20
 800ba6e:	b183      	cbz	r3, 800ba92 <_dtoa_r+0x90a>
 800ba70:	9b05      	ldr	r3, [sp, #20]
 800ba72:	3301      	adds	r3, #1
 800ba74:	9305      	str	r3, [sp, #20]
 800ba76:	9b06      	ldr	r3, [sp, #24]
 800ba78:	3301      	adds	r3, #1
 800ba7a:	9306      	str	r3, [sp, #24]
 800ba7c:	f04f 0801 	mov.w	r8, #1
 800ba80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	f47f af6f 	bne.w	800b966 <_dtoa_r+0x7de>
 800ba88:	2001      	movs	r0, #1
 800ba8a:	e774      	b.n	800b976 <_dtoa_r+0x7ee>
 800ba8c:	f04f 0800 	mov.w	r8, #0
 800ba90:	e7f6      	b.n	800ba80 <_dtoa_r+0x8f8>
 800ba92:	4698      	mov	r8, r3
 800ba94:	e7f4      	b.n	800ba80 <_dtoa_r+0x8f8>
 800ba96:	d082      	beq.n	800b99e <_dtoa_r+0x816>
 800ba98:	9a05      	ldr	r2, [sp, #20]
 800ba9a:	331c      	adds	r3, #28
 800ba9c:	441a      	add	r2, r3
 800ba9e:	9205      	str	r2, [sp, #20]
 800baa0:	9a06      	ldr	r2, [sp, #24]
 800baa2:	441a      	add	r2, r3
 800baa4:	441d      	add	r5, r3
 800baa6:	9206      	str	r2, [sp, #24]
 800baa8:	e779      	b.n	800b99e <_dtoa_r+0x816>
 800baaa:	4603      	mov	r3, r0
 800baac:	e7f4      	b.n	800ba98 <_dtoa_r+0x910>
 800baae:	9b04      	ldr	r3, [sp, #16]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	dc37      	bgt.n	800bb24 <_dtoa_r+0x99c>
 800bab4:	9b07      	ldr	r3, [sp, #28]
 800bab6:	2b02      	cmp	r3, #2
 800bab8:	dd34      	ble.n	800bb24 <_dtoa_r+0x99c>
 800baba:	9b04      	ldr	r3, [sp, #16]
 800babc:	9301      	str	r3, [sp, #4]
 800babe:	9b01      	ldr	r3, [sp, #4]
 800bac0:	b963      	cbnz	r3, 800badc <_dtoa_r+0x954>
 800bac2:	4631      	mov	r1, r6
 800bac4:	2205      	movs	r2, #5
 800bac6:	4620      	mov	r0, r4
 800bac8:	f000 fab2 	bl	800c030 <__multadd>
 800bacc:	4601      	mov	r1, r0
 800bace:	4606      	mov	r6, r0
 800bad0:	4650      	mov	r0, sl
 800bad2:	f000 fcc7 	bl	800c464 <__mcmp>
 800bad6:	2800      	cmp	r0, #0
 800bad8:	f73f adbb 	bgt.w	800b652 <_dtoa_r+0x4ca>
 800badc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bade:	9d00      	ldr	r5, [sp, #0]
 800bae0:	ea6f 0b03 	mvn.w	fp, r3
 800bae4:	f04f 0800 	mov.w	r8, #0
 800bae8:	4631      	mov	r1, r6
 800baea:	4620      	mov	r0, r4
 800baec:	f000 fa7e 	bl	800bfec <_Bfree>
 800baf0:	2f00      	cmp	r7, #0
 800baf2:	f43f aeab 	beq.w	800b84c <_dtoa_r+0x6c4>
 800baf6:	f1b8 0f00 	cmp.w	r8, #0
 800bafa:	d005      	beq.n	800bb08 <_dtoa_r+0x980>
 800bafc:	45b8      	cmp	r8, r7
 800bafe:	d003      	beq.n	800bb08 <_dtoa_r+0x980>
 800bb00:	4641      	mov	r1, r8
 800bb02:	4620      	mov	r0, r4
 800bb04:	f000 fa72 	bl	800bfec <_Bfree>
 800bb08:	4639      	mov	r1, r7
 800bb0a:	4620      	mov	r0, r4
 800bb0c:	f000 fa6e 	bl	800bfec <_Bfree>
 800bb10:	e69c      	b.n	800b84c <_dtoa_r+0x6c4>
 800bb12:	2600      	movs	r6, #0
 800bb14:	4637      	mov	r7, r6
 800bb16:	e7e1      	b.n	800badc <_dtoa_r+0x954>
 800bb18:	46bb      	mov	fp, r7
 800bb1a:	4637      	mov	r7, r6
 800bb1c:	e599      	b.n	800b652 <_dtoa_r+0x4ca>
 800bb1e:	bf00      	nop
 800bb20:	40240000 	.word	0x40240000
 800bb24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	f000 80c8 	beq.w	800bcbc <_dtoa_r+0xb34>
 800bb2c:	9b04      	ldr	r3, [sp, #16]
 800bb2e:	9301      	str	r3, [sp, #4]
 800bb30:	2d00      	cmp	r5, #0
 800bb32:	dd05      	ble.n	800bb40 <_dtoa_r+0x9b8>
 800bb34:	4639      	mov	r1, r7
 800bb36:	462a      	mov	r2, r5
 800bb38:	4620      	mov	r0, r4
 800bb3a:	f000 fc27 	bl	800c38c <__lshift>
 800bb3e:	4607      	mov	r7, r0
 800bb40:	f1b8 0f00 	cmp.w	r8, #0
 800bb44:	d05b      	beq.n	800bbfe <_dtoa_r+0xa76>
 800bb46:	6879      	ldr	r1, [r7, #4]
 800bb48:	4620      	mov	r0, r4
 800bb4a:	f000 fa0f 	bl	800bf6c <_Balloc>
 800bb4e:	4605      	mov	r5, r0
 800bb50:	b928      	cbnz	r0, 800bb5e <_dtoa_r+0x9d6>
 800bb52:	4b83      	ldr	r3, [pc, #524]	; (800bd60 <_dtoa_r+0xbd8>)
 800bb54:	4602      	mov	r2, r0
 800bb56:	f240 21ef 	movw	r1, #751	; 0x2ef
 800bb5a:	f7ff bb2e 	b.w	800b1ba <_dtoa_r+0x32>
 800bb5e:	693a      	ldr	r2, [r7, #16]
 800bb60:	3202      	adds	r2, #2
 800bb62:	0092      	lsls	r2, r2, #2
 800bb64:	f107 010c 	add.w	r1, r7, #12
 800bb68:	300c      	adds	r0, #12
 800bb6a:	f7ff fa74 	bl	800b056 <memcpy>
 800bb6e:	2201      	movs	r2, #1
 800bb70:	4629      	mov	r1, r5
 800bb72:	4620      	mov	r0, r4
 800bb74:	f000 fc0a 	bl	800c38c <__lshift>
 800bb78:	9b00      	ldr	r3, [sp, #0]
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	9304      	str	r3, [sp, #16]
 800bb7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb82:	4413      	add	r3, r2
 800bb84:	9308      	str	r3, [sp, #32]
 800bb86:	9b02      	ldr	r3, [sp, #8]
 800bb88:	f003 0301 	and.w	r3, r3, #1
 800bb8c:	46b8      	mov	r8, r7
 800bb8e:	9306      	str	r3, [sp, #24]
 800bb90:	4607      	mov	r7, r0
 800bb92:	9b04      	ldr	r3, [sp, #16]
 800bb94:	4631      	mov	r1, r6
 800bb96:	3b01      	subs	r3, #1
 800bb98:	4650      	mov	r0, sl
 800bb9a:	9301      	str	r3, [sp, #4]
 800bb9c:	f7ff fa69 	bl	800b072 <quorem>
 800bba0:	4641      	mov	r1, r8
 800bba2:	9002      	str	r0, [sp, #8]
 800bba4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bba8:	4650      	mov	r0, sl
 800bbaa:	f000 fc5b 	bl	800c464 <__mcmp>
 800bbae:	463a      	mov	r2, r7
 800bbb0:	9005      	str	r0, [sp, #20]
 800bbb2:	4631      	mov	r1, r6
 800bbb4:	4620      	mov	r0, r4
 800bbb6:	f000 fc71 	bl	800c49c <__mdiff>
 800bbba:	68c2      	ldr	r2, [r0, #12]
 800bbbc:	4605      	mov	r5, r0
 800bbbe:	bb02      	cbnz	r2, 800bc02 <_dtoa_r+0xa7a>
 800bbc0:	4601      	mov	r1, r0
 800bbc2:	4650      	mov	r0, sl
 800bbc4:	f000 fc4e 	bl	800c464 <__mcmp>
 800bbc8:	4602      	mov	r2, r0
 800bbca:	4629      	mov	r1, r5
 800bbcc:	4620      	mov	r0, r4
 800bbce:	9209      	str	r2, [sp, #36]	; 0x24
 800bbd0:	f000 fa0c 	bl	800bfec <_Bfree>
 800bbd4:	9b07      	ldr	r3, [sp, #28]
 800bbd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbd8:	9d04      	ldr	r5, [sp, #16]
 800bbda:	ea43 0102 	orr.w	r1, r3, r2
 800bbde:	9b06      	ldr	r3, [sp, #24]
 800bbe0:	4319      	orrs	r1, r3
 800bbe2:	d110      	bne.n	800bc06 <_dtoa_r+0xa7e>
 800bbe4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bbe8:	d029      	beq.n	800bc3e <_dtoa_r+0xab6>
 800bbea:	9b05      	ldr	r3, [sp, #20]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	dd02      	ble.n	800bbf6 <_dtoa_r+0xa6e>
 800bbf0:	9b02      	ldr	r3, [sp, #8]
 800bbf2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800bbf6:	9b01      	ldr	r3, [sp, #4]
 800bbf8:	f883 9000 	strb.w	r9, [r3]
 800bbfc:	e774      	b.n	800bae8 <_dtoa_r+0x960>
 800bbfe:	4638      	mov	r0, r7
 800bc00:	e7ba      	b.n	800bb78 <_dtoa_r+0x9f0>
 800bc02:	2201      	movs	r2, #1
 800bc04:	e7e1      	b.n	800bbca <_dtoa_r+0xa42>
 800bc06:	9b05      	ldr	r3, [sp, #20]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	db04      	blt.n	800bc16 <_dtoa_r+0xa8e>
 800bc0c:	9907      	ldr	r1, [sp, #28]
 800bc0e:	430b      	orrs	r3, r1
 800bc10:	9906      	ldr	r1, [sp, #24]
 800bc12:	430b      	orrs	r3, r1
 800bc14:	d120      	bne.n	800bc58 <_dtoa_r+0xad0>
 800bc16:	2a00      	cmp	r2, #0
 800bc18:	dded      	ble.n	800bbf6 <_dtoa_r+0xa6e>
 800bc1a:	4651      	mov	r1, sl
 800bc1c:	2201      	movs	r2, #1
 800bc1e:	4620      	mov	r0, r4
 800bc20:	f000 fbb4 	bl	800c38c <__lshift>
 800bc24:	4631      	mov	r1, r6
 800bc26:	4682      	mov	sl, r0
 800bc28:	f000 fc1c 	bl	800c464 <__mcmp>
 800bc2c:	2800      	cmp	r0, #0
 800bc2e:	dc03      	bgt.n	800bc38 <_dtoa_r+0xab0>
 800bc30:	d1e1      	bne.n	800bbf6 <_dtoa_r+0xa6e>
 800bc32:	f019 0f01 	tst.w	r9, #1
 800bc36:	d0de      	beq.n	800bbf6 <_dtoa_r+0xa6e>
 800bc38:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bc3c:	d1d8      	bne.n	800bbf0 <_dtoa_r+0xa68>
 800bc3e:	9a01      	ldr	r2, [sp, #4]
 800bc40:	2339      	movs	r3, #57	; 0x39
 800bc42:	7013      	strb	r3, [r2, #0]
 800bc44:	462b      	mov	r3, r5
 800bc46:	461d      	mov	r5, r3
 800bc48:	3b01      	subs	r3, #1
 800bc4a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bc4e:	2a39      	cmp	r2, #57	; 0x39
 800bc50:	d06c      	beq.n	800bd2c <_dtoa_r+0xba4>
 800bc52:	3201      	adds	r2, #1
 800bc54:	701a      	strb	r2, [r3, #0]
 800bc56:	e747      	b.n	800bae8 <_dtoa_r+0x960>
 800bc58:	2a00      	cmp	r2, #0
 800bc5a:	dd07      	ble.n	800bc6c <_dtoa_r+0xae4>
 800bc5c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bc60:	d0ed      	beq.n	800bc3e <_dtoa_r+0xab6>
 800bc62:	9a01      	ldr	r2, [sp, #4]
 800bc64:	f109 0301 	add.w	r3, r9, #1
 800bc68:	7013      	strb	r3, [r2, #0]
 800bc6a:	e73d      	b.n	800bae8 <_dtoa_r+0x960>
 800bc6c:	9b04      	ldr	r3, [sp, #16]
 800bc6e:	9a08      	ldr	r2, [sp, #32]
 800bc70:	f803 9c01 	strb.w	r9, [r3, #-1]
 800bc74:	4293      	cmp	r3, r2
 800bc76:	d043      	beq.n	800bd00 <_dtoa_r+0xb78>
 800bc78:	4651      	mov	r1, sl
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	220a      	movs	r2, #10
 800bc7e:	4620      	mov	r0, r4
 800bc80:	f000 f9d6 	bl	800c030 <__multadd>
 800bc84:	45b8      	cmp	r8, r7
 800bc86:	4682      	mov	sl, r0
 800bc88:	f04f 0300 	mov.w	r3, #0
 800bc8c:	f04f 020a 	mov.w	r2, #10
 800bc90:	4641      	mov	r1, r8
 800bc92:	4620      	mov	r0, r4
 800bc94:	d107      	bne.n	800bca6 <_dtoa_r+0xb1e>
 800bc96:	f000 f9cb 	bl	800c030 <__multadd>
 800bc9a:	4680      	mov	r8, r0
 800bc9c:	4607      	mov	r7, r0
 800bc9e:	9b04      	ldr	r3, [sp, #16]
 800bca0:	3301      	adds	r3, #1
 800bca2:	9304      	str	r3, [sp, #16]
 800bca4:	e775      	b.n	800bb92 <_dtoa_r+0xa0a>
 800bca6:	f000 f9c3 	bl	800c030 <__multadd>
 800bcaa:	4639      	mov	r1, r7
 800bcac:	4680      	mov	r8, r0
 800bcae:	2300      	movs	r3, #0
 800bcb0:	220a      	movs	r2, #10
 800bcb2:	4620      	mov	r0, r4
 800bcb4:	f000 f9bc 	bl	800c030 <__multadd>
 800bcb8:	4607      	mov	r7, r0
 800bcba:	e7f0      	b.n	800bc9e <_dtoa_r+0xb16>
 800bcbc:	9b04      	ldr	r3, [sp, #16]
 800bcbe:	9301      	str	r3, [sp, #4]
 800bcc0:	9d00      	ldr	r5, [sp, #0]
 800bcc2:	4631      	mov	r1, r6
 800bcc4:	4650      	mov	r0, sl
 800bcc6:	f7ff f9d4 	bl	800b072 <quorem>
 800bcca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bcce:	9b00      	ldr	r3, [sp, #0]
 800bcd0:	f805 9b01 	strb.w	r9, [r5], #1
 800bcd4:	1aea      	subs	r2, r5, r3
 800bcd6:	9b01      	ldr	r3, [sp, #4]
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	dd07      	ble.n	800bcec <_dtoa_r+0xb64>
 800bcdc:	4651      	mov	r1, sl
 800bcde:	2300      	movs	r3, #0
 800bce0:	220a      	movs	r2, #10
 800bce2:	4620      	mov	r0, r4
 800bce4:	f000 f9a4 	bl	800c030 <__multadd>
 800bce8:	4682      	mov	sl, r0
 800bcea:	e7ea      	b.n	800bcc2 <_dtoa_r+0xb3a>
 800bcec:	9b01      	ldr	r3, [sp, #4]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	bfc8      	it	gt
 800bcf2:	461d      	movgt	r5, r3
 800bcf4:	9b00      	ldr	r3, [sp, #0]
 800bcf6:	bfd8      	it	le
 800bcf8:	2501      	movle	r5, #1
 800bcfa:	441d      	add	r5, r3
 800bcfc:	f04f 0800 	mov.w	r8, #0
 800bd00:	4651      	mov	r1, sl
 800bd02:	2201      	movs	r2, #1
 800bd04:	4620      	mov	r0, r4
 800bd06:	f000 fb41 	bl	800c38c <__lshift>
 800bd0a:	4631      	mov	r1, r6
 800bd0c:	4682      	mov	sl, r0
 800bd0e:	f000 fba9 	bl	800c464 <__mcmp>
 800bd12:	2800      	cmp	r0, #0
 800bd14:	dc96      	bgt.n	800bc44 <_dtoa_r+0xabc>
 800bd16:	d102      	bne.n	800bd1e <_dtoa_r+0xb96>
 800bd18:	f019 0f01 	tst.w	r9, #1
 800bd1c:	d192      	bne.n	800bc44 <_dtoa_r+0xabc>
 800bd1e:	462b      	mov	r3, r5
 800bd20:	461d      	mov	r5, r3
 800bd22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd26:	2a30      	cmp	r2, #48	; 0x30
 800bd28:	d0fa      	beq.n	800bd20 <_dtoa_r+0xb98>
 800bd2a:	e6dd      	b.n	800bae8 <_dtoa_r+0x960>
 800bd2c:	9a00      	ldr	r2, [sp, #0]
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d189      	bne.n	800bc46 <_dtoa_r+0xabe>
 800bd32:	f10b 0b01 	add.w	fp, fp, #1
 800bd36:	2331      	movs	r3, #49	; 0x31
 800bd38:	e796      	b.n	800bc68 <_dtoa_r+0xae0>
 800bd3a:	4b0a      	ldr	r3, [pc, #40]	; (800bd64 <_dtoa_r+0xbdc>)
 800bd3c:	f7ff ba99 	b.w	800b272 <_dtoa_r+0xea>
 800bd40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	f47f aa6d 	bne.w	800b222 <_dtoa_r+0x9a>
 800bd48:	4b07      	ldr	r3, [pc, #28]	; (800bd68 <_dtoa_r+0xbe0>)
 800bd4a:	f7ff ba92 	b.w	800b272 <_dtoa_r+0xea>
 800bd4e:	9b01      	ldr	r3, [sp, #4]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	dcb5      	bgt.n	800bcc0 <_dtoa_r+0xb38>
 800bd54:	9b07      	ldr	r3, [sp, #28]
 800bd56:	2b02      	cmp	r3, #2
 800bd58:	f73f aeb1 	bgt.w	800babe <_dtoa_r+0x936>
 800bd5c:	e7b0      	b.n	800bcc0 <_dtoa_r+0xb38>
 800bd5e:	bf00      	nop
 800bd60:	0800d15c 	.word	0x0800d15c
 800bd64:	0800d0bc 	.word	0x0800d0bc
 800bd68:	0800d0e0 	.word	0x0800d0e0

0800bd6c <_free_r>:
 800bd6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bd6e:	2900      	cmp	r1, #0
 800bd70:	d044      	beq.n	800bdfc <_free_r+0x90>
 800bd72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd76:	9001      	str	r0, [sp, #4]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	f1a1 0404 	sub.w	r4, r1, #4
 800bd7e:	bfb8      	it	lt
 800bd80:	18e4      	addlt	r4, r4, r3
 800bd82:	f000 f8e7 	bl	800bf54 <__malloc_lock>
 800bd86:	4a1e      	ldr	r2, [pc, #120]	; (800be00 <_free_r+0x94>)
 800bd88:	9801      	ldr	r0, [sp, #4]
 800bd8a:	6813      	ldr	r3, [r2, #0]
 800bd8c:	b933      	cbnz	r3, 800bd9c <_free_r+0x30>
 800bd8e:	6063      	str	r3, [r4, #4]
 800bd90:	6014      	str	r4, [r2, #0]
 800bd92:	b003      	add	sp, #12
 800bd94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd98:	f000 b8e2 	b.w	800bf60 <__malloc_unlock>
 800bd9c:	42a3      	cmp	r3, r4
 800bd9e:	d908      	bls.n	800bdb2 <_free_r+0x46>
 800bda0:	6825      	ldr	r5, [r4, #0]
 800bda2:	1961      	adds	r1, r4, r5
 800bda4:	428b      	cmp	r3, r1
 800bda6:	bf01      	itttt	eq
 800bda8:	6819      	ldreq	r1, [r3, #0]
 800bdaa:	685b      	ldreq	r3, [r3, #4]
 800bdac:	1949      	addeq	r1, r1, r5
 800bdae:	6021      	streq	r1, [r4, #0]
 800bdb0:	e7ed      	b.n	800bd8e <_free_r+0x22>
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	b10b      	cbz	r3, 800bdbc <_free_r+0x50>
 800bdb8:	42a3      	cmp	r3, r4
 800bdba:	d9fa      	bls.n	800bdb2 <_free_r+0x46>
 800bdbc:	6811      	ldr	r1, [r2, #0]
 800bdbe:	1855      	adds	r5, r2, r1
 800bdc0:	42a5      	cmp	r5, r4
 800bdc2:	d10b      	bne.n	800bddc <_free_r+0x70>
 800bdc4:	6824      	ldr	r4, [r4, #0]
 800bdc6:	4421      	add	r1, r4
 800bdc8:	1854      	adds	r4, r2, r1
 800bdca:	42a3      	cmp	r3, r4
 800bdcc:	6011      	str	r1, [r2, #0]
 800bdce:	d1e0      	bne.n	800bd92 <_free_r+0x26>
 800bdd0:	681c      	ldr	r4, [r3, #0]
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	6053      	str	r3, [r2, #4]
 800bdd6:	440c      	add	r4, r1
 800bdd8:	6014      	str	r4, [r2, #0]
 800bdda:	e7da      	b.n	800bd92 <_free_r+0x26>
 800bddc:	d902      	bls.n	800bde4 <_free_r+0x78>
 800bdde:	230c      	movs	r3, #12
 800bde0:	6003      	str	r3, [r0, #0]
 800bde2:	e7d6      	b.n	800bd92 <_free_r+0x26>
 800bde4:	6825      	ldr	r5, [r4, #0]
 800bde6:	1961      	adds	r1, r4, r5
 800bde8:	428b      	cmp	r3, r1
 800bdea:	bf04      	itt	eq
 800bdec:	6819      	ldreq	r1, [r3, #0]
 800bdee:	685b      	ldreq	r3, [r3, #4]
 800bdf0:	6063      	str	r3, [r4, #4]
 800bdf2:	bf04      	itt	eq
 800bdf4:	1949      	addeq	r1, r1, r5
 800bdf6:	6021      	streq	r1, [r4, #0]
 800bdf8:	6054      	str	r4, [r2, #4]
 800bdfa:	e7ca      	b.n	800bd92 <_free_r+0x26>
 800bdfc:	b003      	add	sp, #12
 800bdfe:	bd30      	pop	{r4, r5, pc}
 800be00:	2000613c 	.word	0x2000613c

0800be04 <malloc>:
 800be04:	4b02      	ldr	r3, [pc, #8]	; (800be10 <malloc+0xc>)
 800be06:	4601      	mov	r1, r0
 800be08:	6818      	ldr	r0, [r3, #0]
 800be0a:	f000 b823 	b.w	800be54 <_malloc_r>
 800be0e:	bf00      	nop
 800be10:	20000068 	.word	0x20000068

0800be14 <sbrk_aligned>:
 800be14:	b570      	push	{r4, r5, r6, lr}
 800be16:	4e0e      	ldr	r6, [pc, #56]	; (800be50 <sbrk_aligned+0x3c>)
 800be18:	460c      	mov	r4, r1
 800be1a:	6831      	ldr	r1, [r6, #0]
 800be1c:	4605      	mov	r5, r0
 800be1e:	b911      	cbnz	r1, 800be26 <sbrk_aligned+0x12>
 800be20:	f000 fea8 	bl	800cb74 <_sbrk_r>
 800be24:	6030      	str	r0, [r6, #0]
 800be26:	4621      	mov	r1, r4
 800be28:	4628      	mov	r0, r5
 800be2a:	f000 fea3 	bl	800cb74 <_sbrk_r>
 800be2e:	1c43      	adds	r3, r0, #1
 800be30:	d00a      	beq.n	800be48 <sbrk_aligned+0x34>
 800be32:	1cc4      	adds	r4, r0, #3
 800be34:	f024 0403 	bic.w	r4, r4, #3
 800be38:	42a0      	cmp	r0, r4
 800be3a:	d007      	beq.n	800be4c <sbrk_aligned+0x38>
 800be3c:	1a21      	subs	r1, r4, r0
 800be3e:	4628      	mov	r0, r5
 800be40:	f000 fe98 	bl	800cb74 <_sbrk_r>
 800be44:	3001      	adds	r0, #1
 800be46:	d101      	bne.n	800be4c <sbrk_aligned+0x38>
 800be48:	f04f 34ff 	mov.w	r4, #4294967295
 800be4c:	4620      	mov	r0, r4
 800be4e:	bd70      	pop	{r4, r5, r6, pc}
 800be50:	20006140 	.word	0x20006140

0800be54 <_malloc_r>:
 800be54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be58:	1ccd      	adds	r5, r1, #3
 800be5a:	f025 0503 	bic.w	r5, r5, #3
 800be5e:	3508      	adds	r5, #8
 800be60:	2d0c      	cmp	r5, #12
 800be62:	bf38      	it	cc
 800be64:	250c      	movcc	r5, #12
 800be66:	2d00      	cmp	r5, #0
 800be68:	4607      	mov	r7, r0
 800be6a:	db01      	blt.n	800be70 <_malloc_r+0x1c>
 800be6c:	42a9      	cmp	r1, r5
 800be6e:	d905      	bls.n	800be7c <_malloc_r+0x28>
 800be70:	230c      	movs	r3, #12
 800be72:	603b      	str	r3, [r7, #0]
 800be74:	2600      	movs	r6, #0
 800be76:	4630      	mov	r0, r6
 800be78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bf50 <_malloc_r+0xfc>
 800be80:	f000 f868 	bl	800bf54 <__malloc_lock>
 800be84:	f8d8 3000 	ldr.w	r3, [r8]
 800be88:	461c      	mov	r4, r3
 800be8a:	bb5c      	cbnz	r4, 800bee4 <_malloc_r+0x90>
 800be8c:	4629      	mov	r1, r5
 800be8e:	4638      	mov	r0, r7
 800be90:	f7ff ffc0 	bl	800be14 <sbrk_aligned>
 800be94:	1c43      	adds	r3, r0, #1
 800be96:	4604      	mov	r4, r0
 800be98:	d155      	bne.n	800bf46 <_malloc_r+0xf2>
 800be9a:	f8d8 4000 	ldr.w	r4, [r8]
 800be9e:	4626      	mov	r6, r4
 800bea0:	2e00      	cmp	r6, #0
 800bea2:	d145      	bne.n	800bf30 <_malloc_r+0xdc>
 800bea4:	2c00      	cmp	r4, #0
 800bea6:	d048      	beq.n	800bf3a <_malloc_r+0xe6>
 800bea8:	6823      	ldr	r3, [r4, #0]
 800beaa:	4631      	mov	r1, r6
 800beac:	4638      	mov	r0, r7
 800beae:	eb04 0903 	add.w	r9, r4, r3
 800beb2:	f000 fe5f 	bl	800cb74 <_sbrk_r>
 800beb6:	4581      	cmp	r9, r0
 800beb8:	d13f      	bne.n	800bf3a <_malloc_r+0xe6>
 800beba:	6821      	ldr	r1, [r4, #0]
 800bebc:	1a6d      	subs	r5, r5, r1
 800bebe:	4629      	mov	r1, r5
 800bec0:	4638      	mov	r0, r7
 800bec2:	f7ff ffa7 	bl	800be14 <sbrk_aligned>
 800bec6:	3001      	adds	r0, #1
 800bec8:	d037      	beq.n	800bf3a <_malloc_r+0xe6>
 800beca:	6823      	ldr	r3, [r4, #0]
 800becc:	442b      	add	r3, r5
 800bece:	6023      	str	r3, [r4, #0]
 800bed0:	f8d8 3000 	ldr.w	r3, [r8]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d038      	beq.n	800bf4a <_malloc_r+0xf6>
 800bed8:	685a      	ldr	r2, [r3, #4]
 800beda:	42a2      	cmp	r2, r4
 800bedc:	d12b      	bne.n	800bf36 <_malloc_r+0xe2>
 800bede:	2200      	movs	r2, #0
 800bee0:	605a      	str	r2, [r3, #4]
 800bee2:	e00f      	b.n	800bf04 <_malloc_r+0xb0>
 800bee4:	6822      	ldr	r2, [r4, #0]
 800bee6:	1b52      	subs	r2, r2, r5
 800bee8:	d41f      	bmi.n	800bf2a <_malloc_r+0xd6>
 800beea:	2a0b      	cmp	r2, #11
 800beec:	d917      	bls.n	800bf1e <_malloc_r+0xca>
 800beee:	1961      	adds	r1, r4, r5
 800bef0:	42a3      	cmp	r3, r4
 800bef2:	6025      	str	r5, [r4, #0]
 800bef4:	bf18      	it	ne
 800bef6:	6059      	strne	r1, [r3, #4]
 800bef8:	6863      	ldr	r3, [r4, #4]
 800befa:	bf08      	it	eq
 800befc:	f8c8 1000 	streq.w	r1, [r8]
 800bf00:	5162      	str	r2, [r4, r5]
 800bf02:	604b      	str	r3, [r1, #4]
 800bf04:	4638      	mov	r0, r7
 800bf06:	f104 060b 	add.w	r6, r4, #11
 800bf0a:	f000 f829 	bl	800bf60 <__malloc_unlock>
 800bf0e:	f026 0607 	bic.w	r6, r6, #7
 800bf12:	1d23      	adds	r3, r4, #4
 800bf14:	1af2      	subs	r2, r6, r3
 800bf16:	d0ae      	beq.n	800be76 <_malloc_r+0x22>
 800bf18:	1b9b      	subs	r3, r3, r6
 800bf1a:	50a3      	str	r3, [r4, r2]
 800bf1c:	e7ab      	b.n	800be76 <_malloc_r+0x22>
 800bf1e:	42a3      	cmp	r3, r4
 800bf20:	6862      	ldr	r2, [r4, #4]
 800bf22:	d1dd      	bne.n	800bee0 <_malloc_r+0x8c>
 800bf24:	f8c8 2000 	str.w	r2, [r8]
 800bf28:	e7ec      	b.n	800bf04 <_malloc_r+0xb0>
 800bf2a:	4623      	mov	r3, r4
 800bf2c:	6864      	ldr	r4, [r4, #4]
 800bf2e:	e7ac      	b.n	800be8a <_malloc_r+0x36>
 800bf30:	4634      	mov	r4, r6
 800bf32:	6876      	ldr	r6, [r6, #4]
 800bf34:	e7b4      	b.n	800bea0 <_malloc_r+0x4c>
 800bf36:	4613      	mov	r3, r2
 800bf38:	e7cc      	b.n	800bed4 <_malloc_r+0x80>
 800bf3a:	230c      	movs	r3, #12
 800bf3c:	603b      	str	r3, [r7, #0]
 800bf3e:	4638      	mov	r0, r7
 800bf40:	f000 f80e 	bl	800bf60 <__malloc_unlock>
 800bf44:	e797      	b.n	800be76 <_malloc_r+0x22>
 800bf46:	6025      	str	r5, [r4, #0]
 800bf48:	e7dc      	b.n	800bf04 <_malloc_r+0xb0>
 800bf4a:	605b      	str	r3, [r3, #4]
 800bf4c:	deff      	udf	#255	; 0xff
 800bf4e:	bf00      	nop
 800bf50:	2000613c 	.word	0x2000613c

0800bf54 <__malloc_lock>:
 800bf54:	4801      	ldr	r0, [pc, #4]	; (800bf5c <__malloc_lock+0x8>)
 800bf56:	f7ff b87c 	b.w	800b052 <__retarget_lock_acquire_recursive>
 800bf5a:	bf00      	nop
 800bf5c:	20006138 	.word	0x20006138

0800bf60 <__malloc_unlock>:
 800bf60:	4801      	ldr	r0, [pc, #4]	; (800bf68 <__malloc_unlock+0x8>)
 800bf62:	f7ff b877 	b.w	800b054 <__retarget_lock_release_recursive>
 800bf66:	bf00      	nop
 800bf68:	20006138 	.word	0x20006138

0800bf6c <_Balloc>:
 800bf6c:	b570      	push	{r4, r5, r6, lr}
 800bf6e:	69c6      	ldr	r6, [r0, #28]
 800bf70:	4604      	mov	r4, r0
 800bf72:	460d      	mov	r5, r1
 800bf74:	b976      	cbnz	r6, 800bf94 <_Balloc+0x28>
 800bf76:	2010      	movs	r0, #16
 800bf78:	f7ff ff44 	bl	800be04 <malloc>
 800bf7c:	4602      	mov	r2, r0
 800bf7e:	61e0      	str	r0, [r4, #28]
 800bf80:	b920      	cbnz	r0, 800bf8c <_Balloc+0x20>
 800bf82:	4b18      	ldr	r3, [pc, #96]	; (800bfe4 <_Balloc+0x78>)
 800bf84:	4818      	ldr	r0, [pc, #96]	; (800bfe8 <_Balloc+0x7c>)
 800bf86:	216b      	movs	r1, #107	; 0x6b
 800bf88:	f000 fe04 	bl	800cb94 <__assert_func>
 800bf8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf90:	6006      	str	r6, [r0, #0]
 800bf92:	60c6      	str	r6, [r0, #12]
 800bf94:	69e6      	ldr	r6, [r4, #28]
 800bf96:	68f3      	ldr	r3, [r6, #12]
 800bf98:	b183      	cbz	r3, 800bfbc <_Balloc+0x50>
 800bf9a:	69e3      	ldr	r3, [r4, #28]
 800bf9c:	68db      	ldr	r3, [r3, #12]
 800bf9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bfa2:	b9b8      	cbnz	r0, 800bfd4 <_Balloc+0x68>
 800bfa4:	2101      	movs	r1, #1
 800bfa6:	fa01 f605 	lsl.w	r6, r1, r5
 800bfaa:	1d72      	adds	r2, r6, #5
 800bfac:	0092      	lsls	r2, r2, #2
 800bfae:	4620      	mov	r0, r4
 800bfb0:	f000 fe0e 	bl	800cbd0 <_calloc_r>
 800bfb4:	b160      	cbz	r0, 800bfd0 <_Balloc+0x64>
 800bfb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bfba:	e00e      	b.n	800bfda <_Balloc+0x6e>
 800bfbc:	2221      	movs	r2, #33	; 0x21
 800bfbe:	2104      	movs	r1, #4
 800bfc0:	4620      	mov	r0, r4
 800bfc2:	f000 fe05 	bl	800cbd0 <_calloc_r>
 800bfc6:	69e3      	ldr	r3, [r4, #28]
 800bfc8:	60f0      	str	r0, [r6, #12]
 800bfca:	68db      	ldr	r3, [r3, #12]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d1e4      	bne.n	800bf9a <_Balloc+0x2e>
 800bfd0:	2000      	movs	r0, #0
 800bfd2:	bd70      	pop	{r4, r5, r6, pc}
 800bfd4:	6802      	ldr	r2, [r0, #0]
 800bfd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bfda:	2300      	movs	r3, #0
 800bfdc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bfe0:	e7f7      	b.n	800bfd2 <_Balloc+0x66>
 800bfe2:	bf00      	nop
 800bfe4:	0800d0ed 	.word	0x0800d0ed
 800bfe8:	0800d16d 	.word	0x0800d16d

0800bfec <_Bfree>:
 800bfec:	b570      	push	{r4, r5, r6, lr}
 800bfee:	69c6      	ldr	r6, [r0, #28]
 800bff0:	4605      	mov	r5, r0
 800bff2:	460c      	mov	r4, r1
 800bff4:	b976      	cbnz	r6, 800c014 <_Bfree+0x28>
 800bff6:	2010      	movs	r0, #16
 800bff8:	f7ff ff04 	bl	800be04 <malloc>
 800bffc:	4602      	mov	r2, r0
 800bffe:	61e8      	str	r0, [r5, #28]
 800c000:	b920      	cbnz	r0, 800c00c <_Bfree+0x20>
 800c002:	4b09      	ldr	r3, [pc, #36]	; (800c028 <_Bfree+0x3c>)
 800c004:	4809      	ldr	r0, [pc, #36]	; (800c02c <_Bfree+0x40>)
 800c006:	218f      	movs	r1, #143	; 0x8f
 800c008:	f000 fdc4 	bl	800cb94 <__assert_func>
 800c00c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c010:	6006      	str	r6, [r0, #0]
 800c012:	60c6      	str	r6, [r0, #12]
 800c014:	b13c      	cbz	r4, 800c026 <_Bfree+0x3a>
 800c016:	69eb      	ldr	r3, [r5, #28]
 800c018:	6862      	ldr	r2, [r4, #4]
 800c01a:	68db      	ldr	r3, [r3, #12]
 800c01c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c020:	6021      	str	r1, [r4, #0]
 800c022:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c026:	bd70      	pop	{r4, r5, r6, pc}
 800c028:	0800d0ed 	.word	0x0800d0ed
 800c02c:	0800d16d 	.word	0x0800d16d

0800c030 <__multadd>:
 800c030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c034:	690d      	ldr	r5, [r1, #16]
 800c036:	4607      	mov	r7, r0
 800c038:	460c      	mov	r4, r1
 800c03a:	461e      	mov	r6, r3
 800c03c:	f101 0c14 	add.w	ip, r1, #20
 800c040:	2000      	movs	r0, #0
 800c042:	f8dc 3000 	ldr.w	r3, [ip]
 800c046:	b299      	uxth	r1, r3
 800c048:	fb02 6101 	mla	r1, r2, r1, r6
 800c04c:	0c1e      	lsrs	r6, r3, #16
 800c04e:	0c0b      	lsrs	r3, r1, #16
 800c050:	fb02 3306 	mla	r3, r2, r6, r3
 800c054:	b289      	uxth	r1, r1
 800c056:	3001      	adds	r0, #1
 800c058:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c05c:	4285      	cmp	r5, r0
 800c05e:	f84c 1b04 	str.w	r1, [ip], #4
 800c062:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c066:	dcec      	bgt.n	800c042 <__multadd+0x12>
 800c068:	b30e      	cbz	r6, 800c0ae <__multadd+0x7e>
 800c06a:	68a3      	ldr	r3, [r4, #8]
 800c06c:	42ab      	cmp	r3, r5
 800c06e:	dc19      	bgt.n	800c0a4 <__multadd+0x74>
 800c070:	6861      	ldr	r1, [r4, #4]
 800c072:	4638      	mov	r0, r7
 800c074:	3101      	adds	r1, #1
 800c076:	f7ff ff79 	bl	800bf6c <_Balloc>
 800c07a:	4680      	mov	r8, r0
 800c07c:	b928      	cbnz	r0, 800c08a <__multadd+0x5a>
 800c07e:	4602      	mov	r2, r0
 800c080:	4b0c      	ldr	r3, [pc, #48]	; (800c0b4 <__multadd+0x84>)
 800c082:	480d      	ldr	r0, [pc, #52]	; (800c0b8 <__multadd+0x88>)
 800c084:	21ba      	movs	r1, #186	; 0xba
 800c086:	f000 fd85 	bl	800cb94 <__assert_func>
 800c08a:	6922      	ldr	r2, [r4, #16]
 800c08c:	3202      	adds	r2, #2
 800c08e:	f104 010c 	add.w	r1, r4, #12
 800c092:	0092      	lsls	r2, r2, #2
 800c094:	300c      	adds	r0, #12
 800c096:	f7fe ffde 	bl	800b056 <memcpy>
 800c09a:	4621      	mov	r1, r4
 800c09c:	4638      	mov	r0, r7
 800c09e:	f7ff ffa5 	bl	800bfec <_Bfree>
 800c0a2:	4644      	mov	r4, r8
 800c0a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c0a8:	3501      	adds	r5, #1
 800c0aa:	615e      	str	r6, [r3, #20]
 800c0ac:	6125      	str	r5, [r4, #16]
 800c0ae:	4620      	mov	r0, r4
 800c0b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0b4:	0800d15c 	.word	0x0800d15c
 800c0b8:	0800d16d 	.word	0x0800d16d

0800c0bc <__hi0bits>:
 800c0bc:	0c03      	lsrs	r3, r0, #16
 800c0be:	041b      	lsls	r3, r3, #16
 800c0c0:	b9d3      	cbnz	r3, 800c0f8 <__hi0bits+0x3c>
 800c0c2:	0400      	lsls	r0, r0, #16
 800c0c4:	2310      	movs	r3, #16
 800c0c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c0ca:	bf04      	itt	eq
 800c0cc:	0200      	lsleq	r0, r0, #8
 800c0ce:	3308      	addeq	r3, #8
 800c0d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c0d4:	bf04      	itt	eq
 800c0d6:	0100      	lsleq	r0, r0, #4
 800c0d8:	3304      	addeq	r3, #4
 800c0da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c0de:	bf04      	itt	eq
 800c0e0:	0080      	lsleq	r0, r0, #2
 800c0e2:	3302      	addeq	r3, #2
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	db05      	blt.n	800c0f4 <__hi0bits+0x38>
 800c0e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c0ec:	f103 0301 	add.w	r3, r3, #1
 800c0f0:	bf08      	it	eq
 800c0f2:	2320      	moveq	r3, #32
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	4770      	bx	lr
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	e7e4      	b.n	800c0c6 <__hi0bits+0xa>

0800c0fc <__lo0bits>:
 800c0fc:	6803      	ldr	r3, [r0, #0]
 800c0fe:	f013 0207 	ands.w	r2, r3, #7
 800c102:	d00c      	beq.n	800c11e <__lo0bits+0x22>
 800c104:	07d9      	lsls	r1, r3, #31
 800c106:	d422      	bmi.n	800c14e <__lo0bits+0x52>
 800c108:	079a      	lsls	r2, r3, #30
 800c10a:	bf49      	itett	mi
 800c10c:	085b      	lsrmi	r3, r3, #1
 800c10e:	089b      	lsrpl	r3, r3, #2
 800c110:	6003      	strmi	r3, [r0, #0]
 800c112:	2201      	movmi	r2, #1
 800c114:	bf5c      	itt	pl
 800c116:	6003      	strpl	r3, [r0, #0]
 800c118:	2202      	movpl	r2, #2
 800c11a:	4610      	mov	r0, r2
 800c11c:	4770      	bx	lr
 800c11e:	b299      	uxth	r1, r3
 800c120:	b909      	cbnz	r1, 800c126 <__lo0bits+0x2a>
 800c122:	0c1b      	lsrs	r3, r3, #16
 800c124:	2210      	movs	r2, #16
 800c126:	b2d9      	uxtb	r1, r3
 800c128:	b909      	cbnz	r1, 800c12e <__lo0bits+0x32>
 800c12a:	3208      	adds	r2, #8
 800c12c:	0a1b      	lsrs	r3, r3, #8
 800c12e:	0719      	lsls	r1, r3, #28
 800c130:	bf04      	itt	eq
 800c132:	091b      	lsreq	r3, r3, #4
 800c134:	3204      	addeq	r2, #4
 800c136:	0799      	lsls	r1, r3, #30
 800c138:	bf04      	itt	eq
 800c13a:	089b      	lsreq	r3, r3, #2
 800c13c:	3202      	addeq	r2, #2
 800c13e:	07d9      	lsls	r1, r3, #31
 800c140:	d403      	bmi.n	800c14a <__lo0bits+0x4e>
 800c142:	085b      	lsrs	r3, r3, #1
 800c144:	f102 0201 	add.w	r2, r2, #1
 800c148:	d003      	beq.n	800c152 <__lo0bits+0x56>
 800c14a:	6003      	str	r3, [r0, #0]
 800c14c:	e7e5      	b.n	800c11a <__lo0bits+0x1e>
 800c14e:	2200      	movs	r2, #0
 800c150:	e7e3      	b.n	800c11a <__lo0bits+0x1e>
 800c152:	2220      	movs	r2, #32
 800c154:	e7e1      	b.n	800c11a <__lo0bits+0x1e>
	...

0800c158 <__i2b>:
 800c158:	b510      	push	{r4, lr}
 800c15a:	460c      	mov	r4, r1
 800c15c:	2101      	movs	r1, #1
 800c15e:	f7ff ff05 	bl	800bf6c <_Balloc>
 800c162:	4602      	mov	r2, r0
 800c164:	b928      	cbnz	r0, 800c172 <__i2b+0x1a>
 800c166:	4b05      	ldr	r3, [pc, #20]	; (800c17c <__i2b+0x24>)
 800c168:	4805      	ldr	r0, [pc, #20]	; (800c180 <__i2b+0x28>)
 800c16a:	f240 1145 	movw	r1, #325	; 0x145
 800c16e:	f000 fd11 	bl	800cb94 <__assert_func>
 800c172:	2301      	movs	r3, #1
 800c174:	6144      	str	r4, [r0, #20]
 800c176:	6103      	str	r3, [r0, #16]
 800c178:	bd10      	pop	{r4, pc}
 800c17a:	bf00      	nop
 800c17c:	0800d15c 	.word	0x0800d15c
 800c180:	0800d16d 	.word	0x0800d16d

0800c184 <__multiply>:
 800c184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c188:	4691      	mov	r9, r2
 800c18a:	690a      	ldr	r2, [r1, #16]
 800c18c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c190:	429a      	cmp	r2, r3
 800c192:	bfb8      	it	lt
 800c194:	460b      	movlt	r3, r1
 800c196:	460c      	mov	r4, r1
 800c198:	bfbc      	itt	lt
 800c19a:	464c      	movlt	r4, r9
 800c19c:	4699      	movlt	r9, r3
 800c19e:	6927      	ldr	r7, [r4, #16]
 800c1a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c1a4:	68a3      	ldr	r3, [r4, #8]
 800c1a6:	6861      	ldr	r1, [r4, #4]
 800c1a8:	eb07 060a 	add.w	r6, r7, sl
 800c1ac:	42b3      	cmp	r3, r6
 800c1ae:	b085      	sub	sp, #20
 800c1b0:	bfb8      	it	lt
 800c1b2:	3101      	addlt	r1, #1
 800c1b4:	f7ff feda 	bl	800bf6c <_Balloc>
 800c1b8:	b930      	cbnz	r0, 800c1c8 <__multiply+0x44>
 800c1ba:	4602      	mov	r2, r0
 800c1bc:	4b44      	ldr	r3, [pc, #272]	; (800c2d0 <__multiply+0x14c>)
 800c1be:	4845      	ldr	r0, [pc, #276]	; (800c2d4 <__multiply+0x150>)
 800c1c0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c1c4:	f000 fce6 	bl	800cb94 <__assert_func>
 800c1c8:	f100 0514 	add.w	r5, r0, #20
 800c1cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c1d0:	462b      	mov	r3, r5
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	4543      	cmp	r3, r8
 800c1d6:	d321      	bcc.n	800c21c <__multiply+0x98>
 800c1d8:	f104 0314 	add.w	r3, r4, #20
 800c1dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c1e0:	f109 0314 	add.w	r3, r9, #20
 800c1e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c1e8:	9202      	str	r2, [sp, #8]
 800c1ea:	1b3a      	subs	r2, r7, r4
 800c1ec:	3a15      	subs	r2, #21
 800c1ee:	f022 0203 	bic.w	r2, r2, #3
 800c1f2:	3204      	adds	r2, #4
 800c1f4:	f104 0115 	add.w	r1, r4, #21
 800c1f8:	428f      	cmp	r7, r1
 800c1fa:	bf38      	it	cc
 800c1fc:	2204      	movcc	r2, #4
 800c1fe:	9201      	str	r2, [sp, #4]
 800c200:	9a02      	ldr	r2, [sp, #8]
 800c202:	9303      	str	r3, [sp, #12]
 800c204:	429a      	cmp	r2, r3
 800c206:	d80c      	bhi.n	800c222 <__multiply+0x9e>
 800c208:	2e00      	cmp	r6, #0
 800c20a:	dd03      	ble.n	800c214 <__multiply+0x90>
 800c20c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c210:	2b00      	cmp	r3, #0
 800c212:	d05b      	beq.n	800c2cc <__multiply+0x148>
 800c214:	6106      	str	r6, [r0, #16]
 800c216:	b005      	add	sp, #20
 800c218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c21c:	f843 2b04 	str.w	r2, [r3], #4
 800c220:	e7d8      	b.n	800c1d4 <__multiply+0x50>
 800c222:	f8b3 a000 	ldrh.w	sl, [r3]
 800c226:	f1ba 0f00 	cmp.w	sl, #0
 800c22a:	d024      	beq.n	800c276 <__multiply+0xf2>
 800c22c:	f104 0e14 	add.w	lr, r4, #20
 800c230:	46a9      	mov	r9, r5
 800c232:	f04f 0c00 	mov.w	ip, #0
 800c236:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c23a:	f8d9 1000 	ldr.w	r1, [r9]
 800c23e:	fa1f fb82 	uxth.w	fp, r2
 800c242:	b289      	uxth	r1, r1
 800c244:	fb0a 110b 	mla	r1, sl, fp, r1
 800c248:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c24c:	f8d9 2000 	ldr.w	r2, [r9]
 800c250:	4461      	add	r1, ip
 800c252:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c256:	fb0a c20b 	mla	r2, sl, fp, ip
 800c25a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c25e:	b289      	uxth	r1, r1
 800c260:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c264:	4577      	cmp	r7, lr
 800c266:	f849 1b04 	str.w	r1, [r9], #4
 800c26a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c26e:	d8e2      	bhi.n	800c236 <__multiply+0xb2>
 800c270:	9a01      	ldr	r2, [sp, #4]
 800c272:	f845 c002 	str.w	ip, [r5, r2]
 800c276:	9a03      	ldr	r2, [sp, #12]
 800c278:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c27c:	3304      	adds	r3, #4
 800c27e:	f1b9 0f00 	cmp.w	r9, #0
 800c282:	d021      	beq.n	800c2c8 <__multiply+0x144>
 800c284:	6829      	ldr	r1, [r5, #0]
 800c286:	f104 0c14 	add.w	ip, r4, #20
 800c28a:	46ae      	mov	lr, r5
 800c28c:	f04f 0a00 	mov.w	sl, #0
 800c290:	f8bc b000 	ldrh.w	fp, [ip]
 800c294:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c298:	fb09 220b 	mla	r2, r9, fp, r2
 800c29c:	4452      	add	r2, sl
 800c29e:	b289      	uxth	r1, r1
 800c2a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c2a4:	f84e 1b04 	str.w	r1, [lr], #4
 800c2a8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c2ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c2b0:	f8be 1000 	ldrh.w	r1, [lr]
 800c2b4:	fb09 110a 	mla	r1, r9, sl, r1
 800c2b8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c2bc:	4567      	cmp	r7, ip
 800c2be:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c2c2:	d8e5      	bhi.n	800c290 <__multiply+0x10c>
 800c2c4:	9a01      	ldr	r2, [sp, #4]
 800c2c6:	50a9      	str	r1, [r5, r2]
 800c2c8:	3504      	adds	r5, #4
 800c2ca:	e799      	b.n	800c200 <__multiply+0x7c>
 800c2cc:	3e01      	subs	r6, #1
 800c2ce:	e79b      	b.n	800c208 <__multiply+0x84>
 800c2d0:	0800d15c 	.word	0x0800d15c
 800c2d4:	0800d16d 	.word	0x0800d16d

0800c2d8 <__pow5mult>:
 800c2d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2dc:	4615      	mov	r5, r2
 800c2de:	f012 0203 	ands.w	r2, r2, #3
 800c2e2:	4606      	mov	r6, r0
 800c2e4:	460f      	mov	r7, r1
 800c2e6:	d007      	beq.n	800c2f8 <__pow5mult+0x20>
 800c2e8:	4c25      	ldr	r4, [pc, #148]	; (800c380 <__pow5mult+0xa8>)
 800c2ea:	3a01      	subs	r2, #1
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c2f2:	f7ff fe9d 	bl	800c030 <__multadd>
 800c2f6:	4607      	mov	r7, r0
 800c2f8:	10ad      	asrs	r5, r5, #2
 800c2fa:	d03d      	beq.n	800c378 <__pow5mult+0xa0>
 800c2fc:	69f4      	ldr	r4, [r6, #28]
 800c2fe:	b97c      	cbnz	r4, 800c320 <__pow5mult+0x48>
 800c300:	2010      	movs	r0, #16
 800c302:	f7ff fd7f 	bl	800be04 <malloc>
 800c306:	4602      	mov	r2, r0
 800c308:	61f0      	str	r0, [r6, #28]
 800c30a:	b928      	cbnz	r0, 800c318 <__pow5mult+0x40>
 800c30c:	4b1d      	ldr	r3, [pc, #116]	; (800c384 <__pow5mult+0xac>)
 800c30e:	481e      	ldr	r0, [pc, #120]	; (800c388 <__pow5mult+0xb0>)
 800c310:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c314:	f000 fc3e 	bl	800cb94 <__assert_func>
 800c318:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c31c:	6004      	str	r4, [r0, #0]
 800c31e:	60c4      	str	r4, [r0, #12]
 800c320:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c324:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c328:	b94c      	cbnz	r4, 800c33e <__pow5mult+0x66>
 800c32a:	f240 2171 	movw	r1, #625	; 0x271
 800c32e:	4630      	mov	r0, r6
 800c330:	f7ff ff12 	bl	800c158 <__i2b>
 800c334:	2300      	movs	r3, #0
 800c336:	f8c8 0008 	str.w	r0, [r8, #8]
 800c33a:	4604      	mov	r4, r0
 800c33c:	6003      	str	r3, [r0, #0]
 800c33e:	f04f 0900 	mov.w	r9, #0
 800c342:	07eb      	lsls	r3, r5, #31
 800c344:	d50a      	bpl.n	800c35c <__pow5mult+0x84>
 800c346:	4639      	mov	r1, r7
 800c348:	4622      	mov	r2, r4
 800c34a:	4630      	mov	r0, r6
 800c34c:	f7ff ff1a 	bl	800c184 <__multiply>
 800c350:	4639      	mov	r1, r7
 800c352:	4680      	mov	r8, r0
 800c354:	4630      	mov	r0, r6
 800c356:	f7ff fe49 	bl	800bfec <_Bfree>
 800c35a:	4647      	mov	r7, r8
 800c35c:	106d      	asrs	r5, r5, #1
 800c35e:	d00b      	beq.n	800c378 <__pow5mult+0xa0>
 800c360:	6820      	ldr	r0, [r4, #0]
 800c362:	b938      	cbnz	r0, 800c374 <__pow5mult+0x9c>
 800c364:	4622      	mov	r2, r4
 800c366:	4621      	mov	r1, r4
 800c368:	4630      	mov	r0, r6
 800c36a:	f7ff ff0b 	bl	800c184 <__multiply>
 800c36e:	6020      	str	r0, [r4, #0]
 800c370:	f8c0 9000 	str.w	r9, [r0]
 800c374:	4604      	mov	r4, r0
 800c376:	e7e4      	b.n	800c342 <__pow5mult+0x6a>
 800c378:	4638      	mov	r0, r7
 800c37a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c37e:	bf00      	nop
 800c380:	0800d2b8 	.word	0x0800d2b8
 800c384:	0800d0ed 	.word	0x0800d0ed
 800c388:	0800d16d 	.word	0x0800d16d

0800c38c <__lshift>:
 800c38c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c390:	460c      	mov	r4, r1
 800c392:	6849      	ldr	r1, [r1, #4]
 800c394:	6923      	ldr	r3, [r4, #16]
 800c396:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c39a:	68a3      	ldr	r3, [r4, #8]
 800c39c:	4607      	mov	r7, r0
 800c39e:	4691      	mov	r9, r2
 800c3a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c3a4:	f108 0601 	add.w	r6, r8, #1
 800c3a8:	42b3      	cmp	r3, r6
 800c3aa:	db0b      	blt.n	800c3c4 <__lshift+0x38>
 800c3ac:	4638      	mov	r0, r7
 800c3ae:	f7ff fddd 	bl	800bf6c <_Balloc>
 800c3b2:	4605      	mov	r5, r0
 800c3b4:	b948      	cbnz	r0, 800c3ca <__lshift+0x3e>
 800c3b6:	4602      	mov	r2, r0
 800c3b8:	4b28      	ldr	r3, [pc, #160]	; (800c45c <__lshift+0xd0>)
 800c3ba:	4829      	ldr	r0, [pc, #164]	; (800c460 <__lshift+0xd4>)
 800c3bc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c3c0:	f000 fbe8 	bl	800cb94 <__assert_func>
 800c3c4:	3101      	adds	r1, #1
 800c3c6:	005b      	lsls	r3, r3, #1
 800c3c8:	e7ee      	b.n	800c3a8 <__lshift+0x1c>
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	f100 0114 	add.w	r1, r0, #20
 800c3d0:	f100 0210 	add.w	r2, r0, #16
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	4553      	cmp	r3, sl
 800c3d8:	db33      	blt.n	800c442 <__lshift+0xb6>
 800c3da:	6920      	ldr	r0, [r4, #16]
 800c3dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c3e0:	f104 0314 	add.w	r3, r4, #20
 800c3e4:	f019 091f 	ands.w	r9, r9, #31
 800c3e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c3ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c3f0:	d02b      	beq.n	800c44a <__lshift+0xbe>
 800c3f2:	f1c9 0e20 	rsb	lr, r9, #32
 800c3f6:	468a      	mov	sl, r1
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	6818      	ldr	r0, [r3, #0]
 800c3fc:	fa00 f009 	lsl.w	r0, r0, r9
 800c400:	4310      	orrs	r0, r2
 800c402:	f84a 0b04 	str.w	r0, [sl], #4
 800c406:	f853 2b04 	ldr.w	r2, [r3], #4
 800c40a:	459c      	cmp	ip, r3
 800c40c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c410:	d8f3      	bhi.n	800c3fa <__lshift+0x6e>
 800c412:	ebac 0304 	sub.w	r3, ip, r4
 800c416:	3b15      	subs	r3, #21
 800c418:	f023 0303 	bic.w	r3, r3, #3
 800c41c:	3304      	adds	r3, #4
 800c41e:	f104 0015 	add.w	r0, r4, #21
 800c422:	4584      	cmp	ip, r0
 800c424:	bf38      	it	cc
 800c426:	2304      	movcc	r3, #4
 800c428:	50ca      	str	r2, [r1, r3]
 800c42a:	b10a      	cbz	r2, 800c430 <__lshift+0xa4>
 800c42c:	f108 0602 	add.w	r6, r8, #2
 800c430:	3e01      	subs	r6, #1
 800c432:	4638      	mov	r0, r7
 800c434:	612e      	str	r6, [r5, #16]
 800c436:	4621      	mov	r1, r4
 800c438:	f7ff fdd8 	bl	800bfec <_Bfree>
 800c43c:	4628      	mov	r0, r5
 800c43e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c442:	f842 0f04 	str.w	r0, [r2, #4]!
 800c446:	3301      	adds	r3, #1
 800c448:	e7c5      	b.n	800c3d6 <__lshift+0x4a>
 800c44a:	3904      	subs	r1, #4
 800c44c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c450:	f841 2f04 	str.w	r2, [r1, #4]!
 800c454:	459c      	cmp	ip, r3
 800c456:	d8f9      	bhi.n	800c44c <__lshift+0xc0>
 800c458:	e7ea      	b.n	800c430 <__lshift+0xa4>
 800c45a:	bf00      	nop
 800c45c:	0800d15c 	.word	0x0800d15c
 800c460:	0800d16d 	.word	0x0800d16d

0800c464 <__mcmp>:
 800c464:	b530      	push	{r4, r5, lr}
 800c466:	6902      	ldr	r2, [r0, #16]
 800c468:	690c      	ldr	r4, [r1, #16]
 800c46a:	1b12      	subs	r2, r2, r4
 800c46c:	d10e      	bne.n	800c48c <__mcmp+0x28>
 800c46e:	f100 0314 	add.w	r3, r0, #20
 800c472:	3114      	adds	r1, #20
 800c474:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c478:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c47c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c480:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c484:	42a5      	cmp	r5, r4
 800c486:	d003      	beq.n	800c490 <__mcmp+0x2c>
 800c488:	d305      	bcc.n	800c496 <__mcmp+0x32>
 800c48a:	2201      	movs	r2, #1
 800c48c:	4610      	mov	r0, r2
 800c48e:	bd30      	pop	{r4, r5, pc}
 800c490:	4283      	cmp	r3, r0
 800c492:	d3f3      	bcc.n	800c47c <__mcmp+0x18>
 800c494:	e7fa      	b.n	800c48c <__mcmp+0x28>
 800c496:	f04f 32ff 	mov.w	r2, #4294967295
 800c49a:	e7f7      	b.n	800c48c <__mcmp+0x28>

0800c49c <__mdiff>:
 800c49c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4a0:	460c      	mov	r4, r1
 800c4a2:	4606      	mov	r6, r0
 800c4a4:	4611      	mov	r1, r2
 800c4a6:	4620      	mov	r0, r4
 800c4a8:	4690      	mov	r8, r2
 800c4aa:	f7ff ffdb 	bl	800c464 <__mcmp>
 800c4ae:	1e05      	subs	r5, r0, #0
 800c4b0:	d110      	bne.n	800c4d4 <__mdiff+0x38>
 800c4b2:	4629      	mov	r1, r5
 800c4b4:	4630      	mov	r0, r6
 800c4b6:	f7ff fd59 	bl	800bf6c <_Balloc>
 800c4ba:	b930      	cbnz	r0, 800c4ca <__mdiff+0x2e>
 800c4bc:	4b3a      	ldr	r3, [pc, #232]	; (800c5a8 <__mdiff+0x10c>)
 800c4be:	4602      	mov	r2, r0
 800c4c0:	f240 2137 	movw	r1, #567	; 0x237
 800c4c4:	4839      	ldr	r0, [pc, #228]	; (800c5ac <__mdiff+0x110>)
 800c4c6:	f000 fb65 	bl	800cb94 <__assert_func>
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c4d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4d4:	bfa4      	itt	ge
 800c4d6:	4643      	movge	r3, r8
 800c4d8:	46a0      	movge	r8, r4
 800c4da:	4630      	mov	r0, r6
 800c4dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c4e0:	bfa6      	itte	ge
 800c4e2:	461c      	movge	r4, r3
 800c4e4:	2500      	movge	r5, #0
 800c4e6:	2501      	movlt	r5, #1
 800c4e8:	f7ff fd40 	bl	800bf6c <_Balloc>
 800c4ec:	b920      	cbnz	r0, 800c4f8 <__mdiff+0x5c>
 800c4ee:	4b2e      	ldr	r3, [pc, #184]	; (800c5a8 <__mdiff+0x10c>)
 800c4f0:	4602      	mov	r2, r0
 800c4f2:	f240 2145 	movw	r1, #581	; 0x245
 800c4f6:	e7e5      	b.n	800c4c4 <__mdiff+0x28>
 800c4f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c4fc:	6926      	ldr	r6, [r4, #16]
 800c4fe:	60c5      	str	r5, [r0, #12]
 800c500:	f104 0914 	add.w	r9, r4, #20
 800c504:	f108 0514 	add.w	r5, r8, #20
 800c508:	f100 0e14 	add.w	lr, r0, #20
 800c50c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c510:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c514:	f108 0210 	add.w	r2, r8, #16
 800c518:	46f2      	mov	sl, lr
 800c51a:	2100      	movs	r1, #0
 800c51c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c520:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c524:	fa11 f88b 	uxtah	r8, r1, fp
 800c528:	b299      	uxth	r1, r3
 800c52a:	0c1b      	lsrs	r3, r3, #16
 800c52c:	eba8 0801 	sub.w	r8, r8, r1
 800c530:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c534:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c538:	fa1f f888 	uxth.w	r8, r8
 800c53c:	1419      	asrs	r1, r3, #16
 800c53e:	454e      	cmp	r6, r9
 800c540:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c544:	f84a 3b04 	str.w	r3, [sl], #4
 800c548:	d8e8      	bhi.n	800c51c <__mdiff+0x80>
 800c54a:	1b33      	subs	r3, r6, r4
 800c54c:	3b15      	subs	r3, #21
 800c54e:	f023 0303 	bic.w	r3, r3, #3
 800c552:	3304      	adds	r3, #4
 800c554:	3415      	adds	r4, #21
 800c556:	42a6      	cmp	r6, r4
 800c558:	bf38      	it	cc
 800c55a:	2304      	movcc	r3, #4
 800c55c:	441d      	add	r5, r3
 800c55e:	4473      	add	r3, lr
 800c560:	469e      	mov	lr, r3
 800c562:	462e      	mov	r6, r5
 800c564:	4566      	cmp	r6, ip
 800c566:	d30e      	bcc.n	800c586 <__mdiff+0xea>
 800c568:	f10c 0203 	add.w	r2, ip, #3
 800c56c:	1b52      	subs	r2, r2, r5
 800c56e:	f022 0203 	bic.w	r2, r2, #3
 800c572:	3d03      	subs	r5, #3
 800c574:	45ac      	cmp	ip, r5
 800c576:	bf38      	it	cc
 800c578:	2200      	movcc	r2, #0
 800c57a:	4413      	add	r3, r2
 800c57c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c580:	b17a      	cbz	r2, 800c5a2 <__mdiff+0x106>
 800c582:	6107      	str	r7, [r0, #16]
 800c584:	e7a4      	b.n	800c4d0 <__mdiff+0x34>
 800c586:	f856 8b04 	ldr.w	r8, [r6], #4
 800c58a:	fa11 f288 	uxtah	r2, r1, r8
 800c58e:	1414      	asrs	r4, r2, #16
 800c590:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c594:	b292      	uxth	r2, r2
 800c596:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c59a:	f84e 2b04 	str.w	r2, [lr], #4
 800c59e:	1421      	asrs	r1, r4, #16
 800c5a0:	e7e0      	b.n	800c564 <__mdiff+0xc8>
 800c5a2:	3f01      	subs	r7, #1
 800c5a4:	e7ea      	b.n	800c57c <__mdiff+0xe0>
 800c5a6:	bf00      	nop
 800c5a8:	0800d15c 	.word	0x0800d15c
 800c5ac:	0800d16d 	.word	0x0800d16d

0800c5b0 <__d2b>:
 800c5b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c5b4:	460f      	mov	r7, r1
 800c5b6:	2101      	movs	r1, #1
 800c5b8:	ec59 8b10 	vmov	r8, r9, d0
 800c5bc:	4616      	mov	r6, r2
 800c5be:	f7ff fcd5 	bl	800bf6c <_Balloc>
 800c5c2:	4604      	mov	r4, r0
 800c5c4:	b930      	cbnz	r0, 800c5d4 <__d2b+0x24>
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	4b24      	ldr	r3, [pc, #144]	; (800c65c <__d2b+0xac>)
 800c5ca:	4825      	ldr	r0, [pc, #148]	; (800c660 <__d2b+0xb0>)
 800c5cc:	f240 310f 	movw	r1, #783	; 0x30f
 800c5d0:	f000 fae0 	bl	800cb94 <__assert_func>
 800c5d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c5d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c5dc:	bb2d      	cbnz	r5, 800c62a <__d2b+0x7a>
 800c5de:	9301      	str	r3, [sp, #4]
 800c5e0:	f1b8 0300 	subs.w	r3, r8, #0
 800c5e4:	d026      	beq.n	800c634 <__d2b+0x84>
 800c5e6:	4668      	mov	r0, sp
 800c5e8:	9300      	str	r3, [sp, #0]
 800c5ea:	f7ff fd87 	bl	800c0fc <__lo0bits>
 800c5ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c5f2:	b1e8      	cbz	r0, 800c630 <__d2b+0x80>
 800c5f4:	f1c0 0320 	rsb	r3, r0, #32
 800c5f8:	fa02 f303 	lsl.w	r3, r2, r3
 800c5fc:	430b      	orrs	r3, r1
 800c5fe:	40c2      	lsrs	r2, r0
 800c600:	6163      	str	r3, [r4, #20]
 800c602:	9201      	str	r2, [sp, #4]
 800c604:	9b01      	ldr	r3, [sp, #4]
 800c606:	61a3      	str	r3, [r4, #24]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	bf14      	ite	ne
 800c60c:	2202      	movne	r2, #2
 800c60e:	2201      	moveq	r2, #1
 800c610:	6122      	str	r2, [r4, #16]
 800c612:	b1bd      	cbz	r5, 800c644 <__d2b+0x94>
 800c614:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c618:	4405      	add	r5, r0
 800c61a:	603d      	str	r5, [r7, #0]
 800c61c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c620:	6030      	str	r0, [r6, #0]
 800c622:	4620      	mov	r0, r4
 800c624:	b003      	add	sp, #12
 800c626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c62a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c62e:	e7d6      	b.n	800c5de <__d2b+0x2e>
 800c630:	6161      	str	r1, [r4, #20]
 800c632:	e7e7      	b.n	800c604 <__d2b+0x54>
 800c634:	a801      	add	r0, sp, #4
 800c636:	f7ff fd61 	bl	800c0fc <__lo0bits>
 800c63a:	9b01      	ldr	r3, [sp, #4]
 800c63c:	6163      	str	r3, [r4, #20]
 800c63e:	3020      	adds	r0, #32
 800c640:	2201      	movs	r2, #1
 800c642:	e7e5      	b.n	800c610 <__d2b+0x60>
 800c644:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c648:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c64c:	6038      	str	r0, [r7, #0]
 800c64e:	6918      	ldr	r0, [r3, #16]
 800c650:	f7ff fd34 	bl	800c0bc <__hi0bits>
 800c654:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c658:	e7e2      	b.n	800c620 <__d2b+0x70>
 800c65a:	bf00      	nop
 800c65c:	0800d15c 	.word	0x0800d15c
 800c660:	0800d16d 	.word	0x0800d16d

0800c664 <__sfputc_r>:
 800c664:	6893      	ldr	r3, [r2, #8]
 800c666:	3b01      	subs	r3, #1
 800c668:	2b00      	cmp	r3, #0
 800c66a:	b410      	push	{r4}
 800c66c:	6093      	str	r3, [r2, #8]
 800c66e:	da08      	bge.n	800c682 <__sfputc_r+0x1e>
 800c670:	6994      	ldr	r4, [r2, #24]
 800c672:	42a3      	cmp	r3, r4
 800c674:	db01      	blt.n	800c67a <__sfputc_r+0x16>
 800c676:	290a      	cmp	r1, #10
 800c678:	d103      	bne.n	800c682 <__sfputc_r+0x1e>
 800c67a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c67e:	f000 b9e3 	b.w	800ca48 <__swbuf_r>
 800c682:	6813      	ldr	r3, [r2, #0]
 800c684:	1c58      	adds	r0, r3, #1
 800c686:	6010      	str	r0, [r2, #0]
 800c688:	7019      	strb	r1, [r3, #0]
 800c68a:	4608      	mov	r0, r1
 800c68c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c690:	4770      	bx	lr

0800c692 <__sfputs_r>:
 800c692:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c694:	4606      	mov	r6, r0
 800c696:	460f      	mov	r7, r1
 800c698:	4614      	mov	r4, r2
 800c69a:	18d5      	adds	r5, r2, r3
 800c69c:	42ac      	cmp	r4, r5
 800c69e:	d101      	bne.n	800c6a4 <__sfputs_r+0x12>
 800c6a0:	2000      	movs	r0, #0
 800c6a2:	e007      	b.n	800c6b4 <__sfputs_r+0x22>
 800c6a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6a8:	463a      	mov	r2, r7
 800c6aa:	4630      	mov	r0, r6
 800c6ac:	f7ff ffda 	bl	800c664 <__sfputc_r>
 800c6b0:	1c43      	adds	r3, r0, #1
 800c6b2:	d1f3      	bne.n	800c69c <__sfputs_r+0xa>
 800c6b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c6b8 <_vfiprintf_r>:
 800c6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6bc:	460d      	mov	r5, r1
 800c6be:	b09d      	sub	sp, #116	; 0x74
 800c6c0:	4614      	mov	r4, r2
 800c6c2:	4698      	mov	r8, r3
 800c6c4:	4606      	mov	r6, r0
 800c6c6:	b118      	cbz	r0, 800c6d0 <_vfiprintf_r+0x18>
 800c6c8:	6a03      	ldr	r3, [r0, #32]
 800c6ca:	b90b      	cbnz	r3, 800c6d0 <_vfiprintf_r+0x18>
 800c6cc:	f7fe fb50 	bl	800ad70 <__sinit>
 800c6d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6d2:	07d9      	lsls	r1, r3, #31
 800c6d4:	d405      	bmi.n	800c6e2 <_vfiprintf_r+0x2a>
 800c6d6:	89ab      	ldrh	r3, [r5, #12]
 800c6d8:	059a      	lsls	r2, r3, #22
 800c6da:	d402      	bmi.n	800c6e2 <_vfiprintf_r+0x2a>
 800c6dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6de:	f7fe fcb8 	bl	800b052 <__retarget_lock_acquire_recursive>
 800c6e2:	89ab      	ldrh	r3, [r5, #12]
 800c6e4:	071b      	lsls	r3, r3, #28
 800c6e6:	d501      	bpl.n	800c6ec <_vfiprintf_r+0x34>
 800c6e8:	692b      	ldr	r3, [r5, #16]
 800c6ea:	b99b      	cbnz	r3, 800c714 <_vfiprintf_r+0x5c>
 800c6ec:	4629      	mov	r1, r5
 800c6ee:	4630      	mov	r0, r6
 800c6f0:	f000 f9e8 	bl	800cac4 <__swsetup_r>
 800c6f4:	b170      	cbz	r0, 800c714 <_vfiprintf_r+0x5c>
 800c6f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6f8:	07dc      	lsls	r4, r3, #31
 800c6fa:	d504      	bpl.n	800c706 <_vfiprintf_r+0x4e>
 800c6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c700:	b01d      	add	sp, #116	; 0x74
 800c702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c706:	89ab      	ldrh	r3, [r5, #12]
 800c708:	0598      	lsls	r0, r3, #22
 800c70a:	d4f7      	bmi.n	800c6fc <_vfiprintf_r+0x44>
 800c70c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c70e:	f7fe fca1 	bl	800b054 <__retarget_lock_release_recursive>
 800c712:	e7f3      	b.n	800c6fc <_vfiprintf_r+0x44>
 800c714:	2300      	movs	r3, #0
 800c716:	9309      	str	r3, [sp, #36]	; 0x24
 800c718:	2320      	movs	r3, #32
 800c71a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c71e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c722:	2330      	movs	r3, #48	; 0x30
 800c724:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c8d8 <_vfiprintf_r+0x220>
 800c728:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c72c:	f04f 0901 	mov.w	r9, #1
 800c730:	4623      	mov	r3, r4
 800c732:	469a      	mov	sl, r3
 800c734:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c738:	b10a      	cbz	r2, 800c73e <_vfiprintf_r+0x86>
 800c73a:	2a25      	cmp	r2, #37	; 0x25
 800c73c:	d1f9      	bne.n	800c732 <_vfiprintf_r+0x7a>
 800c73e:	ebba 0b04 	subs.w	fp, sl, r4
 800c742:	d00b      	beq.n	800c75c <_vfiprintf_r+0xa4>
 800c744:	465b      	mov	r3, fp
 800c746:	4622      	mov	r2, r4
 800c748:	4629      	mov	r1, r5
 800c74a:	4630      	mov	r0, r6
 800c74c:	f7ff ffa1 	bl	800c692 <__sfputs_r>
 800c750:	3001      	adds	r0, #1
 800c752:	f000 80a9 	beq.w	800c8a8 <_vfiprintf_r+0x1f0>
 800c756:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c758:	445a      	add	r2, fp
 800c75a:	9209      	str	r2, [sp, #36]	; 0x24
 800c75c:	f89a 3000 	ldrb.w	r3, [sl]
 800c760:	2b00      	cmp	r3, #0
 800c762:	f000 80a1 	beq.w	800c8a8 <_vfiprintf_r+0x1f0>
 800c766:	2300      	movs	r3, #0
 800c768:	f04f 32ff 	mov.w	r2, #4294967295
 800c76c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c770:	f10a 0a01 	add.w	sl, sl, #1
 800c774:	9304      	str	r3, [sp, #16]
 800c776:	9307      	str	r3, [sp, #28]
 800c778:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c77c:	931a      	str	r3, [sp, #104]	; 0x68
 800c77e:	4654      	mov	r4, sl
 800c780:	2205      	movs	r2, #5
 800c782:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c786:	4854      	ldr	r0, [pc, #336]	; (800c8d8 <_vfiprintf_r+0x220>)
 800c788:	f7f3 fd32 	bl	80001f0 <memchr>
 800c78c:	9a04      	ldr	r2, [sp, #16]
 800c78e:	b9d8      	cbnz	r0, 800c7c8 <_vfiprintf_r+0x110>
 800c790:	06d1      	lsls	r1, r2, #27
 800c792:	bf44      	itt	mi
 800c794:	2320      	movmi	r3, #32
 800c796:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c79a:	0713      	lsls	r3, r2, #28
 800c79c:	bf44      	itt	mi
 800c79e:	232b      	movmi	r3, #43	; 0x2b
 800c7a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7a4:	f89a 3000 	ldrb.w	r3, [sl]
 800c7a8:	2b2a      	cmp	r3, #42	; 0x2a
 800c7aa:	d015      	beq.n	800c7d8 <_vfiprintf_r+0x120>
 800c7ac:	9a07      	ldr	r2, [sp, #28]
 800c7ae:	4654      	mov	r4, sl
 800c7b0:	2000      	movs	r0, #0
 800c7b2:	f04f 0c0a 	mov.w	ip, #10
 800c7b6:	4621      	mov	r1, r4
 800c7b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7bc:	3b30      	subs	r3, #48	; 0x30
 800c7be:	2b09      	cmp	r3, #9
 800c7c0:	d94d      	bls.n	800c85e <_vfiprintf_r+0x1a6>
 800c7c2:	b1b0      	cbz	r0, 800c7f2 <_vfiprintf_r+0x13a>
 800c7c4:	9207      	str	r2, [sp, #28]
 800c7c6:	e014      	b.n	800c7f2 <_vfiprintf_r+0x13a>
 800c7c8:	eba0 0308 	sub.w	r3, r0, r8
 800c7cc:	fa09 f303 	lsl.w	r3, r9, r3
 800c7d0:	4313      	orrs	r3, r2
 800c7d2:	9304      	str	r3, [sp, #16]
 800c7d4:	46a2      	mov	sl, r4
 800c7d6:	e7d2      	b.n	800c77e <_vfiprintf_r+0xc6>
 800c7d8:	9b03      	ldr	r3, [sp, #12]
 800c7da:	1d19      	adds	r1, r3, #4
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	9103      	str	r1, [sp, #12]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	bfbb      	ittet	lt
 800c7e4:	425b      	neglt	r3, r3
 800c7e6:	f042 0202 	orrlt.w	r2, r2, #2
 800c7ea:	9307      	strge	r3, [sp, #28]
 800c7ec:	9307      	strlt	r3, [sp, #28]
 800c7ee:	bfb8      	it	lt
 800c7f0:	9204      	strlt	r2, [sp, #16]
 800c7f2:	7823      	ldrb	r3, [r4, #0]
 800c7f4:	2b2e      	cmp	r3, #46	; 0x2e
 800c7f6:	d10c      	bne.n	800c812 <_vfiprintf_r+0x15a>
 800c7f8:	7863      	ldrb	r3, [r4, #1]
 800c7fa:	2b2a      	cmp	r3, #42	; 0x2a
 800c7fc:	d134      	bne.n	800c868 <_vfiprintf_r+0x1b0>
 800c7fe:	9b03      	ldr	r3, [sp, #12]
 800c800:	1d1a      	adds	r2, r3, #4
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	9203      	str	r2, [sp, #12]
 800c806:	2b00      	cmp	r3, #0
 800c808:	bfb8      	it	lt
 800c80a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c80e:	3402      	adds	r4, #2
 800c810:	9305      	str	r3, [sp, #20]
 800c812:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c8e8 <_vfiprintf_r+0x230>
 800c816:	7821      	ldrb	r1, [r4, #0]
 800c818:	2203      	movs	r2, #3
 800c81a:	4650      	mov	r0, sl
 800c81c:	f7f3 fce8 	bl	80001f0 <memchr>
 800c820:	b138      	cbz	r0, 800c832 <_vfiprintf_r+0x17a>
 800c822:	9b04      	ldr	r3, [sp, #16]
 800c824:	eba0 000a 	sub.w	r0, r0, sl
 800c828:	2240      	movs	r2, #64	; 0x40
 800c82a:	4082      	lsls	r2, r0
 800c82c:	4313      	orrs	r3, r2
 800c82e:	3401      	adds	r4, #1
 800c830:	9304      	str	r3, [sp, #16]
 800c832:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c836:	4829      	ldr	r0, [pc, #164]	; (800c8dc <_vfiprintf_r+0x224>)
 800c838:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c83c:	2206      	movs	r2, #6
 800c83e:	f7f3 fcd7 	bl	80001f0 <memchr>
 800c842:	2800      	cmp	r0, #0
 800c844:	d03f      	beq.n	800c8c6 <_vfiprintf_r+0x20e>
 800c846:	4b26      	ldr	r3, [pc, #152]	; (800c8e0 <_vfiprintf_r+0x228>)
 800c848:	bb1b      	cbnz	r3, 800c892 <_vfiprintf_r+0x1da>
 800c84a:	9b03      	ldr	r3, [sp, #12]
 800c84c:	3307      	adds	r3, #7
 800c84e:	f023 0307 	bic.w	r3, r3, #7
 800c852:	3308      	adds	r3, #8
 800c854:	9303      	str	r3, [sp, #12]
 800c856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c858:	443b      	add	r3, r7
 800c85a:	9309      	str	r3, [sp, #36]	; 0x24
 800c85c:	e768      	b.n	800c730 <_vfiprintf_r+0x78>
 800c85e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c862:	460c      	mov	r4, r1
 800c864:	2001      	movs	r0, #1
 800c866:	e7a6      	b.n	800c7b6 <_vfiprintf_r+0xfe>
 800c868:	2300      	movs	r3, #0
 800c86a:	3401      	adds	r4, #1
 800c86c:	9305      	str	r3, [sp, #20]
 800c86e:	4619      	mov	r1, r3
 800c870:	f04f 0c0a 	mov.w	ip, #10
 800c874:	4620      	mov	r0, r4
 800c876:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c87a:	3a30      	subs	r2, #48	; 0x30
 800c87c:	2a09      	cmp	r2, #9
 800c87e:	d903      	bls.n	800c888 <_vfiprintf_r+0x1d0>
 800c880:	2b00      	cmp	r3, #0
 800c882:	d0c6      	beq.n	800c812 <_vfiprintf_r+0x15a>
 800c884:	9105      	str	r1, [sp, #20]
 800c886:	e7c4      	b.n	800c812 <_vfiprintf_r+0x15a>
 800c888:	fb0c 2101 	mla	r1, ip, r1, r2
 800c88c:	4604      	mov	r4, r0
 800c88e:	2301      	movs	r3, #1
 800c890:	e7f0      	b.n	800c874 <_vfiprintf_r+0x1bc>
 800c892:	ab03      	add	r3, sp, #12
 800c894:	9300      	str	r3, [sp, #0]
 800c896:	462a      	mov	r2, r5
 800c898:	4b12      	ldr	r3, [pc, #72]	; (800c8e4 <_vfiprintf_r+0x22c>)
 800c89a:	a904      	add	r1, sp, #16
 800c89c:	4630      	mov	r0, r6
 800c89e:	f7fd fe15 	bl	800a4cc <_printf_float>
 800c8a2:	4607      	mov	r7, r0
 800c8a4:	1c78      	adds	r0, r7, #1
 800c8a6:	d1d6      	bne.n	800c856 <_vfiprintf_r+0x19e>
 800c8a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8aa:	07d9      	lsls	r1, r3, #31
 800c8ac:	d405      	bmi.n	800c8ba <_vfiprintf_r+0x202>
 800c8ae:	89ab      	ldrh	r3, [r5, #12]
 800c8b0:	059a      	lsls	r2, r3, #22
 800c8b2:	d402      	bmi.n	800c8ba <_vfiprintf_r+0x202>
 800c8b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8b6:	f7fe fbcd 	bl	800b054 <__retarget_lock_release_recursive>
 800c8ba:	89ab      	ldrh	r3, [r5, #12]
 800c8bc:	065b      	lsls	r3, r3, #25
 800c8be:	f53f af1d 	bmi.w	800c6fc <_vfiprintf_r+0x44>
 800c8c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8c4:	e71c      	b.n	800c700 <_vfiprintf_r+0x48>
 800c8c6:	ab03      	add	r3, sp, #12
 800c8c8:	9300      	str	r3, [sp, #0]
 800c8ca:	462a      	mov	r2, r5
 800c8cc:	4b05      	ldr	r3, [pc, #20]	; (800c8e4 <_vfiprintf_r+0x22c>)
 800c8ce:	a904      	add	r1, sp, #16
 800c8d0:	4630      	mov	r0, r6
 800c8d2:	f7fe f89f 	bl	800aa14 <_printf_i>
 800c8d6:	e7e4      	b.n	800c8a2 <_vfiprintf_r+0x1ea>
 800c8d8:	0800d2c4 	.word	0x0800d2c4
 800c8dc:	0800d2ce 	.word	0x0800d2ce
 800c8e0:	0800a4cd 	.word	0x0800a4cd
 800c8e4:	0800c693 	.word	0x0800c693
 800c8e8:	0800d2ca 	.word	0x0800d2ca

0800c8ec <__sflush_r>:
 800c8ec:	898a      	ldrh	r2, [r1, #12]
 800c8ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8f2:	4605      	mov	r5, r0
 800c8f4:	0710      	lsls	r0, r2, #28
 800c8f6:	460c      	mov	r4, r1
 800c8f8:	d458      	bmi.n	800c9ac <__sflush_r+0xc0>
 800c8fa:	684b      	ldr	r3, [r1, #4]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	dc05      	bgt.n	800c90c <__sflush_r+0x20>
 800c900:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c902:	2b00      	cmp	r3, #0
 800c904:	dc02      	bgt.n	800c90c <__sflush_r+0x20>
 800c906:	2000      	movs	r0, #0
 800c908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c90c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c90e:	2e00      	cmp	r6, #0
 800c910:	d0f9      	beq.n	800c906 <__sflush_r+0x1a>
 800c912:	2300      	movs	r3, #0
 800c914:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c918:	682f      	ldr	r7, [r5, #0]
 800c91a:	6a21      	ldr	r1, [r4, #32]
 800c91c:	602b      	str	r3, [r5, #0]
 800c91e:	d032      	beq.n	800c986 <__sflush_r+0x9a>
 800c920:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c922:	89a3      	ldrh	r3, [r4, #12]
 800c924:	075a      	lsls	r2, r3, #29
 800c926:	d505      	bpl.n	800c934 <__sflush_r+0x48>
 800c928:	6863      	ldr	r3, [r4, #4]
 800c92a:	1ac0      	subs	r0, r0, r3
 800c92c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c92e:	b10b      	cbz	r3, 800c934 <__sflush_r+0x48>
 800c930:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c932:	1ac0      	subs	r0, r0, r3
 800c934:	2300      	movs	r3, #0
 800c936:	4602      	mov	r2, r0
 800c938:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c93a:	6a21      	ldr	r1, [r4, #32]
 800c93c:	4628      	mov	r0, r5
 800c93e:	47b0      	blx	r6
 800c940:	1c43      	adds	r3, r0, #1
 800c942:	89a3      	ldrh	r3, [r4, #12]
 800c944:	d106      	bne.n	800c954 <__sflush_r+0x68>
 800c946:	6829      	ldr	r1, [r5, #0]
 800c948:	291d      	cmp	r1, #29
 800c94a:	d82b      	bhi.n	800c9a4 <__sflush_r+0xb8>
 800c94c:	4a29      	ldr	r2, [pc, #164]	; (800c9f4 <__sflush_r+0x108>)
 800c94e:	410a      	asrs	r2, r1
 800c950:	07d6      	lsls	r6, r2, #31
 800c952:	d427      	bmi.n	800c9a4 <__sflush_r+0xb8>
 800c954:	2200      	movs	r2, #0
 800c956:	6062      	str	r2, [r4, #4]
 800c958:	04d9      	lsls	r1, r3, #19
 800c95a:	6922      	ldr	r2, [r4, #16]
 800c95c:	6022      	str	r2, [r4, #0]
 800c95e:	d504      	bpl.n	800c96a <__sflush_r+0x7e>
 800c960:	1c42      	adds	r2, r0, #1
 800c962:	d101      	bne.n	800c968 <__sflush_r+0x7c>
 800c964:	682b      	ldr	r3, [r5, #0]
 800c966:	b903      	cbnz	r3, 800c96a <__sflush_r+0x7e>
 800c968:	6560      	str	r0, [r4, #84]	; 0x54
 800c96a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c96c:	602f      	str	r7, [r5, #0]
 800c96e:	2900      	cmp	r1, #0
 800c970:	d0c9      	beq.n	800c906 <__sflush_r+0x1a>
 800c972:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c976:	4299      	cmp	r1, r3
 800c978:	d002      	beq.n	800c980 <__sflush_r+0x94>
 800c97a:	4628      	mov	r0, r5
 800c97c:	f7ff f9f6 	bl	800bd6c <_free_r>
 800c980:	2000      	movs	r0, #0
 800c982:	6360      	str	r0, [r4, #52]	; 0x34
 800c984:	e7c0      	b.n	800c908 <__sflush_r+0x1c>
 800c986:	2301      	movs	r3, #1
 800c988:	4628      	mov	r0, r5
 800c98a:	47b0      	blx	r6
 800c98c:	1c41      	adds	r1, r0, #1
 800c98e:	d1c8      	bne.n	800c922 <__sflush_r+0x36>
 800c990:	682b      	ldr	r3, [r5, #0]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d0c5      	beq.n	800c922 <__sflush_r+0x36>
 800c996:	2b1d      	cmp	r3, #29
 800c998:	d001      	beq.n	800c99e <__sflush_r+0xb2>
 800c99a:	2b16      	cmp	r3, #22
 800c99c:	d101      	bne.n	800c9a2 <__sflush_r+0xb6>
 800c99e:	602f      	str	r7, [r5, #0]
 800c9a0:	e7b1      	b.n	800c906 <__sflush_r+0x1a>
 800c9a2:	89a3      	ldrh	r3, [r4, #12]
 800c9a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9a8:	81a3      	strh	r3, [r4, #12]
 800c9aa:	e7ad      	b.n	800c908 <__sflush_r+0x1c>
 800c9ac:	690f      	ldr	r7, [r1, #16]
 800c9ae:	2f00      	cmp	r7, #0
 800c9b0:	d0a9      	beq.n	800c906 <__sflush_r+0x1a>
 800c9b2:	0793      	lsls	r3, r2, #30
 800c9b4:	680e      	ldr	r6, [r1, #0]
 800c9b6:	bf08      	it	eq
 800c9b8:	694b      	ldreq	r3, [r1, #20]
 800c9ba:	600f      	str	r7, [r1, #0]
 800c9bc:	bf18      	it	ne
 800c9be:	2300      	movne	r3, #0
 800c9c0:	eba6 0807 	sub.w	r8, r6, r7
 800c9c4:	608b      	str	r3, [r1, #8]
 800c9c6:	f1b8 0f00 	cmp.w	r8, #0
 800c9ca:	dd9c      	ble.n	800c906 <__sflush_r+0x1a>
 800c9cc:	6a21      	ldr	r1, [r4, #32]
 800c9ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c9d0:	4643      	mov	r3, r8
 800c9d2:	463a      	mov	r2, r7
 800c9d4:	4628      	mov	r0, r5
 800c9d6:	47b0      	blx	r6
 800c9d8:	2800      	cmp	r0, #0
 800c9da:	dc06      	bgt.n	800c9ea <__sflush_r+0xfe>
 800c9dc:	89a3      	ldrh	r3, [r4, #12]
 800c9de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9e2:	81a3      	strh	r3, [r4, #12]
 800c9e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c9e8:	e78e      	b.n	800c908 <__sflush_r+0x1c>
 800c9ea:	4407      	add	r7, r0
 800c9ec:	eba8 0800 	sub.w	r8, r8, r0
 800c9f0:	e7e9      	b.n	800c9c6 <__sflush_r+0xda>
 800c9f2:	bf00      	nop
 800c9f4:	dfbffffe 	.word	0xdfbffffe

0800c9f8 <_fflush_r>:
 800c9f8:	b538      	push	{r3, r4, r5, lr}
 800c9fa:	690b      	ldr	r3, [r1, #16]
 800c9fc:	4605      	mov	r5, r0
 800c9fe:	460c      	mov	r4, r1
 800ca00:	b913      	cbnz	r3, 800ca08 <_fflush_r+0x10>
 800ca02:	2500      	movs	r5, #0
 800ca04:	4628      	mov	r0, r5
 800ca06:	bd38      	pop	{r3, r4, r5, pc}
 800ca08:	b118      	cbz	r0, 800ca12 <_fflush_r+0x1a>
 800ca0a:	6a03      	ldr	r3, [r0, #32]
 800ca0c:	b90b      	cbnz	r3, 800ca12 <_fflush_r+0x1a>
 800ca0e:	f7fe f9af 	bl	800ad70 <__sinit>
 800ca12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d0f3      	beq.n	800ca02 <_fflush_r+0xa>
 800ca1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ca1c:	07d0      	lsls	r0, r2, #31
 800ca1e:	d404      	bmi.n	800ca2a <_fflush_r+0x32>
 800ca20:	0599      	lsls	r1, r3, #22
 800ca22:	d402      	bmi.n	800ca2a <_fflush_r+0x32>
 800ca24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca26:	f7fe fb14 	bl	800b052 <__retarget_lock_acquire_recursive>
 800ca2a:	4628      	mov	r0, r5
 800ca2c:	4621      	mov	r1, r4
 800ca2e:	f7ff ff5d 	bl	800c8ec <__sflush_r>
 800ca32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca34:	07da      	lsls	r2, r3, #31
 800ca36:	4605      	mov	r5, r0
 800ca38:	d4e4      	bmi.n	800ca04 <_fflush_r+0xc>
 800ca3a:	89a3      	ldrh	r3, [r4, #12]
 800ca3c:	059b      	lsls	r3, r3, #22
 800ca3e:	d4e1      	bmi.n	800ca04 <_fflush_r+0xc>
 800ca40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca42:	f7fe fb07 	bl	800b054 <__retarget_lock_release_recursive>
 800ca46:	e7dd      	b.n	800ca04 <_fflush_r+0xc>

0800ca48 <__swbuf_r>:
 800ca48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca4a:	460e      	mov	r6, r1
 800ca4c:	4614      	mov	r4, r2
 800ca4e:	4605      	mov	r5, r0
 800ca50:	b118      	cbz	r0, 800ca5a <__swbuf_r+0x12>
 800ca52:	6a03      	ldr	r3, [r0, #32]
 800ca54:	b90b      	cbnz	r3, 800ca5a <__swbuf_r+0x12>
 800ca56:	f7fe f98b 	bl	800ad70 <__sinit>
 800ca5a:	69a3      	ldr	r3, [r4, #24]
 800ca5c:	60a3      	str	r3, [r4, #8]
 800ca5e:	89a3      	ldrh	r3, [r4, #12]
 800ca60:	071a      	lsls	r2, r3, #28
 800ca62:	d525      	bpl.n	800cab0 <__swbuf_r+0x68>
 800ca64:	6923      	ldr	r3, [r4, #16]
 800ca66:	b31b      	cbz	r3, 800cab0 <__swbuf_r+0x68>
 800ca68:	6823      	ldr	r3, [r4, #0]
 800ca6a:	6922      	ldr	r2, [r4, #16]
 800ca6c:	1a98      	subs	r0, r3, r2
 800ca6e:	6963      	ldr	r3, [r4, #20]
 800ca70:	b2f6      	uxtb	r6, r6
 800ca72:	4283      	cmp	r3, r0
 800ca74:	4637      	mov	r7, r6
 800ca76:	dc04      	bgt.n	800ca82 <__swbuf_r+0x3a>
 800ca78:	4621      	mov	r1, r4
 800ca7a:	4628      	mov	r0, r5
 800ca7c:	f7ff ffbc 	bl	800c9f8 <_fflush_r>
 800ca80:	b9e0      	cbnz	r0, 800cabc <__swbuf_r+0x74>
 800ca82:	68a3      	ldr	r3, [r4, #8]
 800ca84:	3b01      	subs	r3, #1
 800ca86:	60a3      	str	r3, [r4, #8]
 800ca88:	6823      	ldr	r3, [r4, #0]
 800ca8a:	1c5a      	adds	r2, r3, #1
 800ca8c:	6022      	str	r2, [r4, #0]
 800ca8e:	701e      	strb	r6, [r3, #0]
 800ca90:	6962      	ldr	r2, [r4, #20]
 800ca92:	1c43      	adds	r3, r0, #1
 800ca94:	429a      	cmp	r2, r3
 800ca96:	d004      	beq.n	800caa2 <__swbuf_r+0x5a>
 800ca98:	89a3      	ldrh	r3, [r4, #12]
 800ca9a:	07db      	lsls	r3, r3, #31
 800ca9c:	d506      	bpl.n	800caac <__swbuf_r+0x64>
 800ca9e:	2e0a      	cmp	r6, #10
 800caa0:	d104      	bne.n	800caac <__swbuf_r+0x64>
 800caa2:	4621      	mov	r1, r4
 800caa4:	4628      	mov	r0, r5
 800caa6:	f7ff ffa7 	bl	800c9f8 <_fflush_r>
 800caaa:	b938      	cbnz	r0, 800cabc <__swbuf_r+0x74>
 800caac:	4638      	mov	r0, r7
 800caae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cab0:	4621      	mov	r1, r4
 800cab2:	4628      	mov	r0, r5
 800cab4:	f000 f806 	bl	800cac4 <__swsetup_r>
 800cab8:	2800      	cmp	r0, #0
 800caba:	d0d5      	beq.n	800ca68 <__swbuf_r+0x20>
 800cabc:	f04f 37ff 	mov.w	r7, #4294967295
 800cac0:	e7f4      	b.n	800caac <__swbuf_r+0x64>
	...

0800cac4 <__swsetup_r>:
 800cac4:	b538      	push	{r3, r4, r5, lr}
 800cac6:	4b2a      	ldr	r3, [pc, #168]	; (800cb70 <__swsetup_r+0xac>)
 800cac8:	4605      	mov	r5, r0
 800caca:	6818      	ldr	r0, [r3, #0]
 800cacc:	460c      	mov	r4, r1
 800cace:	b118      	cbz	r0, 800cad8 <__swsetup_r+0x14>
 800cad0:	6a03      	ldr	r3, [r0, #32]
 800cad2:	b90b      	cbnz	r3, 800cad8 <__swsetup_r+0x14>
 800cad4:	f7fe f94c 	bl	800ad70 <__sinit>
 800cad8:	89a3      	ldrh	r3, [r4, #12]
 800cada:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cade:	0718      	lsls	r0, r3, #28
 800cae0:	d422      	bmi.n	800cb28 <__swsetup_r+0x64>
 800cae2:	06d9      	lsls	r1, r3, #27
 800cae4:	d407      	bmi.n	800caf6 <__swsetup_r+0x32>
 800cae6:	2309      	movs	r3, #9
 800cae8:	602b      	str	r3, [r5, #0]
 800caea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800caee:	81a3      	strh	r3, [r4, #12]
 800caf0:	f04f 30ff 	mov.w	r0, #4294967295
 800caf4:	e034      	b.n	800cb60 <__swsetup_r+0x9c>
 800caf6:	0758      	lsls	r0, r3, #29
 800caf8:	d512      	bpl.n	800cb20 <__swsetup_r+0x5c>
 800cafa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cafc:	b141      	cbz	r1, 800cb10 <__swsetup_r+0x4c>
 800cafe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb02:	4299      	cmp	r1, r3
 800cb04:	d002      	beq.n	800cb0c <__swsetup_r+0x48>
 800cb06:	4628      	mov	r0, r5
 800cb08:	f7ff f930 	bl	800bd6c <_free_r>
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	6363      	str	r3, [r4, #52]	; 0x34
 800cb10:	89a3      	ldrh	r3, [r4, #12]
 800cb12:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cb16:	81a3      	strh	r3, [r4, #12]
 800cb18:	2300      	movs	r3, #0
 800cb1a:	6063      	str	r3, [r4, #4]
 800cb1c:	6923      	ldr	r3, [r4, #16]
 800cb1e:	6023      	str	r3, [r4, #0]
 800cb20:	89a3      	ldrh	r3, [r4, #12]
 800cb22:	f043 0308 	orr.w	r3, r3, #8
 800cb26:	81a3      	strh	r3, [r4, #12]
 800cb28:	6923      	ldr	r3, [r4, #16]
 800cb2a:	b94b      	cbnz	r3, 800cb40 <__swsetup_r+0x7c>
 800cb2c:	89a3      	ldrh	r3, [r4, #12]
 800cb2e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cb32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb36:	d003      	beq.n	800cb40 <__swsetup_r+0x7c>
 800cb38:	4621      	mov	r1, r4
 800cb3a:	4628      	mov	r0, r5
 800cb3c:	f000 f8b6 	bl	800ccac <__smakebuf_r>
 800cb40:	89a0      	ldrh	r0, [r4, #12]
 800cb42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb46:	f010 0301 	ands.w	r3, r0, #1
 800cb4a:	d00a      	beq.n	800cb62 <__swsetup_r+0x9e>
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	60a3      	str	r3, [r4, #8]
 800cb50:	6963      	ldr	r3, [r4, #20]
 800cb52:	425b      	negs	r3, r3
 800cb54:	61a3      	str	r3, [r4, #24]
 800cb56:	6923      	ldr	r3, [r4, #16]
 800cb58:	b943      	cbnz	r3, 800cb6c <__swsetup_r+0xa8>
 800cb5a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cb5e:	d1c4      	bne.n	800caea <__swsetup_r+0x26>
 800cb60:	bd38      	pop	{r3, r4, r5, pc}
 800cb62:	0781      	lsls	r1, r0, #30
 800cb64:	bf58      	it	pl
 800cb66:	6963      	ldrpl	r3, [r4, #20]
 800cb68:	60a3      	str	r3, [r4, #8]
 800cb6a:	e7f4      	b.n	800cb56 <__swsetup_r+0x92>
 800cb6c:	2000      	movs	r0, #0
 800cb6e:	e7f7      	b.n	800cb60 <__swsetup_r+0x9c>
 800cb70:	20000068 	.word	0x20000068

0800cb74 <_sbrk_r>:
 800cb74:	b538      	push	{r3, r4, r5, lr}
 800cb76:	4d06      	ldr	r5, [pc, #24]	; (800cb90 <_sbrk_r+0x1c>)
 800cb78:	2300      	movs	r3, #0
 800cb7a:	4604      	mov	r4, r0
 800cb7c:	4608      	mov	r0, r1
 800cb7e:	602b      	str	r3, [r5, #0]
 800cb80:	f7f4 fff6 	bl	8001b70 <_sbrk>
 800cb84:	1c43      	adds	r3, r0, #1
 800cb86:	d102      	bne.n	800cb8e <_sbrk_r+0x1a>
 800cb88:	682b      	ldr	r3, [r5, #0]
 800cb8a:	b103      	cbz	r3, 800cb8e <_sbrk_r+0x1a>
 800cb8c:	6023      	str	r3, [r4, #0]
 800cb8e:	bd38      	pop	{r3, r4, r5, pc}
 800cb90:	20006134 	.word	0x20006134

0800cb94 <__assert_func>:
 800cb94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb96:	4614      	mov	r4, r2
 800cb98:	461a      	mov	r2, r3
 800cb9a:	4b09      	ldr	r3, [pc, #36]	; (800cbc0 <__assert_func+0x2c>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	4605      	mov	r5, r0
 800cba0:	68d8      	ldr	r0, [r3, #12]
 800cba2:	b14c      	cbz	r4, 800cbb8 <__assert_func+0x24>
 800cba4:	4b07      	ldr	r3, [pc, #28]	; (800cbc4 <__assert_func+0x30>)
 800cba6:	9100      	str	r1, [sp, #0]
 800cba8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cbac:	4906      	ldr	r1, [pc, #24]	; (800cbc8 <__assert_func+0x34>)
 800cbae:	462b      	mov	r3, r5
 800cbb0:	f000 f844 	bl	800cc3c <fiprintf>
 800cbb4:	f000 f8d8 	bl	800cd68 <abort>
 800cbb8:	4b04      	ldr	r3, [pc, #16]	; (800cbcc <__assert_func+0x38>)
 800cbba:	461c      	mov	r4, r3
 800cbbc:	e7f3      	b.n	800cba6 <__assert_func+0x12>
 800cbbe:	bf00      	nop
 800cbc0:	20000068 	.word	0x20000068
 800cbc4:	0800d2df 	.word	0x0800d2df
 800cbc8:	0800d2ec 	.word	0x0800d2ec
 800cbcc:	0800d31a 	.word	0x0800d31a

0800cbd0 <_calloc_r>:
 800cbd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cbd2:	fba1 2402 	umull	r2, r4, r1, r2
 800cbd6:	b94c      	cbnz	r4, 800cbec <_calloc_r+0x1c>
 800cbd8:	4611      	mov	r1, r2
 800cbda:	9201      	str	r2, [sp, #4]
 800cbdc:	f7ff f93a 	bl	800be54 <_malloc_r>
 800cbe0:	9a01      	ldr	r2, [sp, #4]
 800cbe2:	4605      	mov	r5, r0
 800cbe4:	b930      	cbnz	r0, 800cbf4 <_calloc_r+0x24>
 800cbe6:	4628      	mov	r0, r5
 800cbe8:	b003      	add	sp, #12
 800cbea:	bd30      	pop	{r4, r5, pc}
 800cbec:	220c      	movs	r2, #12
 800cbee:	6002      	str	r2, [r0, #0]
 800cbf0:	2500      	movs	r5, #0
 800cbf2:	e7f8      	b.n	800cbe6 <_calloc_r+0x16>
 800cbf4:	4621      	mov	r1, r4
 800cbf6:	f7fe f946 	bl	800ae86 <memset>
 800cbfa:	e7f4      	b.n	800cbe6 <_calloc_r+0x16>

0800cbfc <__ascii_mbtowc>:
 800cbfc:	b082      	sub	sp, #8
 800cbfe:	b901      	cbnz	r1, 800cc02 <__ascii_mbtowc+0x6>
 800cc00:	a901      	add	r1, sp, #4
 800cc02:	b142      	cbz	r2, 800cc16 <__ascii_mbtowc+0x1a>
 800cc04:	b14b      	cbz	r3, 800cc1a <__ascii_mbtowc+0x1e>
 800cc06:	7813      	ldrb	r3, [r2, #0]
 800cc08:	600b      	str	r3, [r1, #0]
 800cc0a:	7812      	ldrb	r2, [r2, #0]
 800cc0c:	1e10      	subs	r0, r2, #0
 800cc0e:	bf18      	it	ne
 800cc10:	2001      	movne	r0, #1
 800cc12:	b002      	add	sp, #8
 800cc14:	4770      	bx	lr
 800cc16:	4610      	mov	r0, r2
 800cc18:	e7fb      	b.n	800cc12 <__ascii_mbtowc+0x16>
 800cc1a:	f06f 0001 	mvn.w	r0, #1
 800cc1e:	e7f8      	b.n	800cc12 <__ascii_mbtowc+0x16>

0800cc20 <__ascii_wctomb>:
 800cc20:	b149      	cbz	r1, 800cc36 <__ascii_wctomb+0x16>
 800cc22:	2aff      	cmp	r2, #255	; 0xff
 800cc24:	bf85      	ittet	hi
 800cc26:	238a      	movhi	r3, #138	; 0x8a
 800cc28:	6003      	strhi	r3, [r0, #0]
 800cc2a:	700a      	strbls	r2, [r1, #0]
 800cc2c:	f04f 30ff 	movhi.w	r0, #4294967295
 800cc30:	bf98      	it	ls
 800cc32:	2001      	movls	r0, #1
 800cc34:	4770      	bx	lr
 800cc36:	4608      	mov	r0, r1
 800cc38:	4770      	bx	lr
	...

0800cc3c <fiprintf>:
 800cc3c:	b40e      	push	{r1, r2, r3}
 800cc3e:	b503      	push	{r0, r1, lr}
 800cc40:	4601      	mov	r1, r0
 800cc42:	ab03      	add	r3, sp, #12
 800cc44:	4805      	ldr	r0, [pc, #20]	; (800cc5c <fiprintf+0x20>)
 800cc46:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc4a:	6800      	ldr	r0, [r0, #0]
 800cc4c:	9301      	str	r3, [sp, #4]
 800cc4e:	f7ff fd33 	bl	800c6b8 <_vfiprintf_r>
 800cc52:	b002      	add	sp, #8
 800cc54:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc58:	b003      	add	sp, #12
 800cc5a:	4770      	bx	lr
 800cc5c:	20000068 	.word	0x20000068

0800cc60 <__swhatbuf_r>:
 800cc60:	b570      	push	{r4, r5, r6, lr}
 800cc62:	460c      	mov	r4, r1
 800cc64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc68:	2900      	cmp	r1, #0
 800cc6a:	b096      	sub	sp, #88	; 0x58
 800cc6c:	4615      	mov	r5, r2
 800cc6e:	461e      	mov	r6, r3
 800cc70:	da0d      	bge.n	800cc8e <__swhatbuf_r+0x2e>
 800cc72:	89a3      	ldrh	r3, [r4, #12]
 800cc74:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cc78:	f04f 0100 	mov.w	r1, #0
 800cc7c:	bf0c      	ite	eq
 800cc7e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cc82:	2340      	movne	r3, #64	; 0x40
 800cc84:	2000      	movs	r0, #0
 800cc86:	6031      	str	r1, [r6, #0]
 800cc88:	602b      	str	r3, [r5, #0]
 800cc8a:	b016      	add	sp, #88	; 0x58
 800cc8c:	bd70      	pop	{r4, r5, r6, pc}
 800cc8e:	466a      	mov	r2, sp
 800cc90:	f000 f848 	bl	800cd24 <_fstat_r>
 800cc94:	2800      	cmp	r0, #0
 800cc96:	dbec      	blt.n	800cc72 <__swhatbuf_r+0x12>
 800cc98:	9901      	ldr	r1, [sp, #4]
 800cc9a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cc9e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cca2:	4259      	negs	r1, r3
 800cca4:	4159      	adcs	r1, r3
 800cca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccaa:	e7eb      	b.n	800cc84 <__swhatbuf_r+0x24>

0800ccac <__smakebuf_r>:
 800ccac:	898b      	ldrh	r3, [r1, #12]
 800ccae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ccb0:	079d      	lsls	r5, r3, #30
 800ccb2:	4606      	mov	r6, r0
 800ccb4:	460c      	mov	r4, r1
 800ccb6:	d507      	bpl.n	800ccc8 <__smakebuf_r+0x1c>
 800ccb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ccbc:	6023      	str	r3, [r4, #0]
 800ccbe:	6123      	str	r3, [r4, #16]
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	6163      	str	r3, [r4, #20]
 800ccc4:	b002      	add	sp, #8
 800ccc6:	bd70      	pop	{r4, r5, r6, pc}
 800ccc8:	ab01      	add	r3, sp, #4
 800ccca:	466a      	mov	r2, sp
 800cccc:	f7ff ffc8 	bl	800cc60 <__swhatbuf_r>
 800ccd0:	9900      	ldr	r1, [sp, #0]
 800ccd2:	4605      	mov	r5, r0
 800ccd4:	4630      	mov	r0, r6
 800ccd6:	f7ff f8bd 	bl	800be54 <_malloc_r>
 800ccda:	b948      	cbnz	r0, 800ccf0 <__smakebuf_r+0x44>
 800ccdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cce0:	059a      	lsls	r2, r3, #22
 800cce2:	d4ef      	bmi.n	800ccc4 <__smakebuf_r+0x18>
 800cce4:	f023 0303 	bic.w	r3, r3, #3
 800cce8:	f043 0302 	orr.w	r3, r3, #2
 800ccec:	81a3      	strh	r3, [r4, #12]
 800ccee:	e7e3      	b.n	800ccb8 <__smakebuf_r+0xc>
 800ccf0:	89a3      	ldrh	r3, [r4, #12]
 800ccf2:	6020      	str	r0, [r4, #0]
 800ccf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccf8:	81a3      	strh	r3, [r4, #12]
 800ccfa:	9b00      	ldr	r3, [sp, #0]
 800ccfc:	6163      	str	r3, [r4, #20]
 800ccfe:	9b01      	ldr	r3, [sp, #4]
 800cd00:	6120      	str	r0, [r4, #16]
 800cd02:	b15b      	cbz	r3, 800cd1c <__smakebuf_r+0x70>
 800cd04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd08:	4630      	mov	r0, r6
 800cd0a:	f000 f81d 	bl	800cd48 <_isatty_r>
 800cd0e:	b128      	cbz	r0, 800cd1c <__smakebuf_r+0x70>
 800cd10:	89a3      	ldrh	r3, [r4, #12]
 800cd12:	f023 0303 	bic.w	r3, r3, #3
 800cd16:	f043 0301 	orr.w	r3, r3, #1
 800cd1a:	81a3      	strh	r3, [r4, #12]
 800cd1c:	89a3      	ldrh	r3, [r4, #12]
 800cd1e:	431d      	orrs	r5, r3
 800cd20:	81a5      	strh	r5, [r4, #12]
 800cd22:	e7cf      	b.n	800ccc4 <__smakebuf_r+0x18>

0800cd24 <_fstat_r>:
 800cd24:	b538      	push	{r3, r4, r5, lr}
 800cd26:	4d07      	ldr	r5, [pc, #28]	; (800cd44 <_fstat_r+0x20>)
 800cd28:	2300      	movs	r3, #0
 800cd2a:	4604      	mov	r4, r0
 800cd2c:	4608      	mov	r0, r1
 800cd2e:	4611      	mov	r1, r2
 800cd30:	602b      	str	r3, [r5, #0]
 800cd32:	f7f4 fef4 	bl	8001b1e <_fstat>
 800cd36:	1c43      	adds	r3, r0, #1
 800cd38:	d102      	bne.n	800cd40 <_fstat_r+0x1c>
 800cd3a:	682b      	ldr	r3, [r5, #0]
 800cd3c:	b103      	cbz	r3, 800cd40 <_fstat_r+0x1c>
 800cd3e:	6023      	str	r3, [r4, #0]
 800cd40:	bd38      	pop	{r3, r4, r5, pc}
 800cd42:	bf00      	nop
 800cd44:	20006134 	.word	0x20006134

0800cd48 <_isatty_r>:
 800cd48:	b538      	push	{r3, r4, r5, lr}
 800cd4a:	4d06      	ldr	r5, [pc, #24]	; (800cd64 <_isatty_r+0x1c>)
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	4604      	mov	r4, r0
 800cd50:	4608      	mov	r0, r1
 800cd52:	602b      	str	r3, [r5, #0]
 800cd54:	f7f4 fef3 	bl	8001b3e <_isatty>
 800cd58:	1c43      	adds	r3, r0, #1
 800cd5a:	d102      	bne.n	800cd62 <_isatty_r+0x1a>
 800cd5c:	682b      	ldr	r3, [r5, #0]
 800cd5e:	b103      	cbz	r3, 800cd62 <_isatty_r+0x1a>
 800cd60:	6023      	str	r3, [r4, #0]
 800cd62:	bd38      	pop	{r3, r4, r5, pc}
 800cd64:	20006134 	.word	0x20006134

0800cd68 <abort>:
 800cd68:	b508      	push	{r3, lr}
 800cd6a:	2006      	movs	r0, #6
 800cd6c:	f000 f82c 	bl	800cdc8 <raise>
 800cd70:	2001      	movs	r0, #1
 800cd72:	f7f4 fe85 	bl	8001a80 <_exit>

0800cd76 <_raise_r>:
 800cd76:	291f      	cmp	r1, #31
 800cd78:	b538      	push	{r3, r4, r5, lr}
 800cd7a:	4604      	mov	r4, r0
 800cd7c:	460d      	mov	r5, r1
 800cd7e:	d904      	bls.n	800cd8a <_raise_r+0x14>
 800cd80:	2316      	movs	r3, #22
 800cd82:	6003      	str	r3, [r0, #0]
 800cd84:	f04f 30ff 	mov.w	r0, #4294967295
 800cd88:	bd38      	pop	{r3, r4, r5, pc}
 800cd8a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cd8c:	b112      	cbz	r2, 800cd94 <_raise_r+0x1e>
 800cd8e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd92:	b94b      	cbnz	r3, 800cda8 <_raise_r+0x32>
 800cd94:	4620      	mov	r0, r4
 800cd96:	f000 f831 	bl	800cdfc <_getpid_r>
 800cd9a:	462a      	mov	r2, r5
 800cd9c:	4601      	mov	r1, r0
 800cd9e:	4620      	mov	r0, r4
 800cda0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cda4:	f000 b818 	b.w	800cdd8 <_kill_r>
 800cda8:	2b01      	cmp	r3, #1
 800cdaa:	d00a      	beq.n	800cdc2 <_raise_r+0x4c>
 800cdac:	1c59      	adds	r1, r3, #1
 800cdae:	d103      	bne.n	800cdb8 <_raise_r+0x42>
 800cdb0:	2316      	movs	r3, #22
 800cdb2:	6003      	str	r3, [r0, #0]
 800cdb4:	2001      	movs	r0, #1
 800cdb6:	e7e7      	b.n	800cd88 <_raise_r+0x12>
 800cdb8:	2400      	movs	r4, #0
 800cdba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cdbe:	4628      	mov	r0, r5
 800cdc0:	4798      	blx	r3
 800cdc2:	2000      	movs	r0, #0
 800cdc4:	e7e0      	b.n	800cd88 <_raise_r+0x12>
	...

0800cdc8 <raise>:
 800cdc8:	4b02      	ldr	r3, [pc, #8]	; (800cdd4 <raise+0xc>)
 800cdca:	4601      	mov	r1, r0
 800cdcc:	6818      	ldr	r0, [r3, #0]
 800cdce:	f7ff bfd2 	b.w	800cd76 <_raise_r>
 800cdd2:	bf00      	nop
 800cdd4:	20000068 	.word	0x20000068

0800cdd8 <_kill_r>:
 800cdd8:	b538      	push	{r3, r4, r5, lr}
 800cdda:	4d07      	ldr	r5, [pc, #28]	; (800cdf8 <_kill_r+0x20>)
 800cddc:	2300      	movs	r3, #0
 800cdde:	4604      	mov	r4, r0
 800cde0:	4608      	mov	r0, r1
 800cde2:	4611      	mov	r1, r2
 800cde4:	602b      	str	r3, [r5, #0]
 800cde6:	f7f4 fe3b 	bl	8001a60 <_kill>
 800cdea:	1c43      	adds	r3, r0, #1
 800cdec:	d102      	bne.n	800cdf4 <_kill_r+0x1c>
 800cdee:	682b      	ldr	r3, [r5, #0]
 800cdf0:	b103      	cbz	r3, 800cdf4 <_kill_r+0x1c>
 800cdf2:	6023      	str	r3, [r4, #0]
 800cdf4:	bd38      	pop	{r3, r4, r5, pc}
 800cdf6:	bf00      	nop
 800cdf8:	20006134 	.word	0x20006134

0800cdfc <_getpid_r>:
 800cdfc:	f7f4 be28 	b.w	8001a50 <_getpid>

0800ce00 <_init>:
 800ce00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce02:	bf00      	nop
 800ce04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce06:	bc08      	pop	{r3}
 800ce08:	469e      	mov	lr, r3
 800ce0a:	4770      	bx	lr

0800ce0c <_fini>:
 800ce0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce0e:	bf00      	nop
 800ce10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce12:	bc08      	pop	{r3}
 800ce14:	469e      	mov	lr, r3
 800ce16:	4770      	bx	lr
