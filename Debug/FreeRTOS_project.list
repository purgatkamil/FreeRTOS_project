
FreeRTOS_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d868  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006cc  0800d9f8  0800d9f8  0001d9f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e0c4  0800e0c4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e0c4  0800e0c4  0001e0c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e0cc  0800e0cc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e0cc  0800e0cc  0001e0cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e0d0  0800e0d0  0001e0d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800e0d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006020  200001dc  0800e2b0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200061fc  0800e2b0  000261fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022325  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004936  00000000  00000000  00042574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bb0  00000000  00000000  00046eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001577  00000000  00000000  00048a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000653d  00000000  00000000  00049fd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002248e  00000000  00000000  00050514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00102242  00000000  00000000  000729a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000083bc  00000000  00000000  00174be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0017cfa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d9e0 	.word	0x0800d9e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800d9e0 	.word	0x0800d9e0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b970 	b.w	8000ec0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	460d      	mov	r5, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	460f      	mov	r7, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4694      	mov	ip, r2
 8000c0c:	d965      	bls.n	8000cda <__udivmoddi4+0xe2>
 8000c0e:	fab2 f382 	clz	r3, r2
 8000c12:	b143      	cbz	r3, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c18:	f1c3 0220 	rsb	r2, r3, #32
 8000c1c:	409f      	lsls	r7, r3
 8000c1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c22:	4317      	orrs	r7, r2
 8000c24:	409c      	lsls	r4, r3
 8000c26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c2a:	fa1f f58c 	uxth.w	r5, ip
 8000c2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c32:	0c22      	lsrs	r2, r4, #16
 8000c34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c3c:	fb01 f005 	mul.w	r0, r1, r5
 8000c40:	4290      	cmp	r0, r2
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c4c:	f080 811c 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c50:	4290      	cmp	r0, r2
 8000c52:	f240 8119 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c56:	3902      	subs	r1, #2
 8000c58:	4462      	add	r2, ip
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	b2a4      	uxth	r4, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c6a:	fb00 f505 	mul.w	r5, r0, r5
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x90>
 8000c72:	eb1c 0404 	adds.w	r4, ip, r4
 8000c76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c7a:	f080 8107 	bcs.w	8000e8c <__udivmoddi4+0x294>
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	f240 8104 	bls.w	8000e8c <__udivmoddi4+0x294>
 8000c84:	4464      	add	r4, ip
 8000c86:	3802      	subs	r0, #2
 8000c88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11e      	cbz	r6, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40dc      	lsrs	r4, r3
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0xbc>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80ed 	beq.w	8000e82 <__udivmoddi4+0x28a>
 8000ca8:	2100      	movs	r1, #0
 8000caa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	fab3 f183 	clz	r1, r3
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	d149      	bne.n	8000d50 <__udivmoddi4+0x158>
 8000cbc:	42ab      	cmp	r3, r5
 8000cbe:	d302      	bcc.n	8000cc6 <__udivmoddi4+0xce>
 8000cc0:	4282      	cmp	r2, r0
 8000cc2:	f200 80f8 	bhi.w	8000eb6 <__udivmoddi4+0x2be>
 8000cc6:	1a84      	subs	r4, r0, r2
 8000cc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ccc:	2001      	movs	r0, #1
 8000cce:	4617      	mov	r7, r2
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d0e2      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cd8:	e7df      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cda:	b902      	cbnz	r2, 8000cde <__udivmoddi4+0xe6>
 8000cdc:	deff      	udf	#255	; 0xff
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8090 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000ce8:	1a8a      	subs	r2, r1, r2
 8000cea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cf8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cfc:	0c22      	lsrs	r2, r4, #16
 8000cfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d02:	fb0e f005 	mul.w	r0, lr, r5
 8000d06:	4290      	cmp	r0, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d0e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4290      	cmp	r0, r2
 8000d16:	f200 80cb 	bhi.w	8000eb0 <__udivmoddi4+0x2b8>
 8000d1a:	4645      	mov	r5, r8
 8000d1c:	1a12      	subs	r2, r2, r0
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d24:	fb07 2210 	mls	r2, r7, r0, r2
 8000d28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x14e>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x14c>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	f200 80bb 	bhi.w	8000eba <__udivmoddi4+0x2c2>
 8000d44:	4610      	mov	r0, r2
 8000d46:	eba4 040e 	sub.w	r4, r4, lr
 8000d4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d4e:	e79f      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d50:	f1c1 0720 	rsb	r7, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d62:	fa20 f307 	lsr.w	r3, r0, r7
 8000d66:	40fd      	lsrs	r5, r7
 8000d68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6c:	4323      	orrs	r3, r4
 8000d6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d72:	fa1f fe8c 	uxth.w	lr, ip
 8000d76:	fb09 5518 	mls	r5, r9, r8, r5
 8000d7a:	0c1c      	lsrs	r4, r3, #16
 8000d7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d80:	fb08 f50e 	mul.w	r5, r8, lr
 8000d84:	42a5      	cmp	r5, r4
 8000d86:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d98:	f080 8088 	bcs.w	8000eac <__udivmoddi4+0x2b4>
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	f240 8085 	bls.w	8000eac <__udivmoddi4+0x2b4>
 8000da2:	f1a8 0802 	sub.w	r8, r8, #2
 8000da6:	4464      	add	r4, ip
 8000da8:	1b64      	subs	r4, r4, r5
 8000daa:	b29d      	uxth	r5, r3
 8000dac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db0:	fb09 4413 	mls	r4, r9, r3, r4
 8000db4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000db8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dc8:	d26c      	bcs.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	d96a      	bls.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dd6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dda:	eba4 040e 	sub.w	r4, r4, lr
 8000dde:	42ac      	cmp	r4, r5
 8000de0:	46c8      	mov	r8, r9
 8000de2:	46ae      	mov	lr, r5
 8000de4:	d356      	bcc.n	8000e94 <__udivmoddi4+0x29c>
 8000de6:	d053      	beq.n	8000e90 <__udivmoddi4+0x298>
 8000de8:	b156      	cbz	r6, 8000e00 <__udivmoddi4+0x208>
 8000dea:	ebb0 0208 	subs.w	r2, r0, r8
 8000dee:	eb64 040e 	sbc.w	r4, r4, lr
 8000df2:	fa04 f707 	lsl.w	r7, r4, r7
 8000df6:	40ca      	lsrs	r2, r1
 8000df8:	40cc      	lsrs	r4, r1
 8000dfa:	4317      	orrs	r7, r2
 8000dfc:	e9c6 7400 	strd	r7, r4, [r6]
 8000e00:	4618      	mov	r0, r3
 8000e02:	2100      	movs	r1, #0
 8000e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e08:	f1c3 0120 	rsb	r1, r3, #32
 8000e0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e10:	fa20 f201 	lsr.w	r2, r0, r1
 8000e14:	fa25 f101 	lsr.w	r1, r5, r1
 8000e18:	409d      	lsls	r5, r3
 8000e1a:	432a      	orrs	r2, r5
 8000e1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e28:	fb07 1510 	mls	r5, r7, r0, r1
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e32:	fb00 f50e 	mul.w	r5, r0, lr
 8000e36:	428d      	cmp	r5, r1
 8000e38:	fa04 f403 	lsl.w	r4, r4, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x258>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e46:	d22f      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e48:	428d      	cmp	r5, r1
 8000e4a:	d92d      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1b49      	subs	r1, r1, r5
 8000e52:	b292      	uxth	r2, r2
 8000e54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e58:	fb07 1115 	mls	r1, r7, r5, r1
 8000e5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e60:	fb05 f10e 	mul.w	r1, r5, lr
 8000e64:	4291      	cmp	r1, r2
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x282>
 8000e68:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e70:	d216      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e72:	4291      	cmp	r1, r2
 8000e74:	d914      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e76:	3d02      	subs	r5, #2
 8000e78:	4462      	add	r2, ip
 8000e7a:	1a52      	subs	r2, r2, r1
 8000e7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e80:	e738      	b.n	8000cf4 <__udivmoddi4+0xfc>
 8000e82:	4631      	mov	r1, r6
 8000e84:	4630      	mov	r0, r6
 8000e86:	e708      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000e88:	4639      	mov	r1, r7
 8000e8a:	e6e6      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	e6fb      	b.n	8000c88 <__udivmoddi4+0x90>
 8000e90:	4548      	cmp	r0, r9
 8000e92:	d2a9      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e94:	ebb9 0802 	subs.w	r8, r9, r2
 8000e98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	e7a3      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000ea0:	4645      	mov	r5, r8
 8000ea2:	e7ea      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ea4:	462b      	mov	r3, r5
 8000ea6:	e794      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea8:	4640      	mov	r0, r8
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x258>
 8000eac:	46d0      	mov	r8, sl
 8000eae:	e77b      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eb0:	3d02      	subs	r5, #2
 8000eb2:	4462      	add	r2, ip
 8000eb4:	e732      	b.n	8000d1c <__udivmoddi4+0x124>
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e70a      	b.n	8000cd0 <__udivmoddi4+0xd8>
 8000eba:	4464      	add	r4, ip
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	e742      	b.n	8000d46 <__udivmoddi4+0x14e>

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <Engine>:
#include "engine.h"


void Engine(engine_state state){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]

	switch (state){
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	2b04      	cmp	r3, #4
 8000ed2:	d81c      	bhi.n	8000f0e <Engine+0x4a>
 8000ed4:	a201      	add	r2, pc, #4	; (adr r2, 8000edc <Engine+0x18>)
 8000ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eda:	bf00      	nop
 8000edc:	08000ef1 	.word	0x08000ef1
 8000ee0:	08000efd 	.word	0x08000efd
 8000ee4:	08000ef7 	.word	0x08000ef7
 8000ee8:	08000f03 	.word	0x08000f03
 8000eec:	08000f09 	.word	0x08000f09
		case MOVE_FORWARD:
			EngineMoveForward();
 8000ef0:	f000 f890 	bl	8001014 <EngineMoveForward>
			break;
 8000ef4:	e00c      	b.n	8000f10 <Engine+0x4c>
		case TURN_RIGHT:
			EngineTurnRight();
 8000ef6:	f000 f8e7 	bl	80010c8 <EngineTurnRight>
			break;
 8000efa:	e009      	b.n	8000f10 <Engine+0x4c>
		case MOVE_BACKWARD:
			EngineMoveBackward();
 8000efc:	f000 f8a8 	bl	8001050 <EngineMoveBackward>
			break;
 8000f00:	e006      	b.n	8000f10 <Engine+0x4c>
		case TURN_LEFT:
			EngineTurnLeft();
 8000f02:	f000 f8ff 	bl	8001104 <EngineTurnLeft>
			break;
 8000f06:	e003      	b.n	8000f10 <Engine+0x4c>
		case STOP:
			EngineStop();
 8000f08:	f000 f8c0 	bl	800108c <EngineStop>
			break;
 8000f0c:	e000      	b.n	8000f10 <Engine+0x4c>
		default:
			break;
 8000f0e:	bf00      	nop
	}
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <EnginesInit>:


void EnginesInit(){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim4);
 8000f1c:	4808      	ldr	r0, [pc, #32]	; (8000f40 <EnginesInit+0x28>)
 8000f1e:	f003 fb4f 	bl	80045c0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000f22:	2100      	movs	r1, #0
 8000f24:	4806      	ldr	r0, [pc, #24]	; (8000f40 <EnginesInit+0x28>)
 8000f26:	f003 fc85 	bl	8004834 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000f2a:	2104      	movs	r1, #4
 8000f2c:	4804      	ldr	r0, [pc, #16]	; (8000f40 <EnginesInit+0x28>)
 8000f2e:	f003 fc81 	bl	8004834 <HAL_TIM_PWM_Start>
	EnginesSetSpeed(100, 100);
 8000f32:	2164      	movs	r1, #100	; 0x64
 8000f34:	2064      	movs	r0, #100	; 0x64
 8000f36:	f000 f841 	bl	8000fbc <EnginesSetSpeed>
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200003b0 	.word	0x200003b0

08000f44 <EnginesSpeed>:

void EnginesSpeed(engine_speed engine_speed){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
	static int speed = 100;

	switch (engine_speed){
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d015      	beq.n	8000f80 <EnginesSpeed+0x3c>
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	dc20      	bgt.n	8000f9a <EnginesSpeed+0x56>
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d002      	beq.n	8000f62 <EnginesSpeed+0x1e>
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d005      	beq.n	8000f6c <EnginesSpeed+0x28>
 8000f60:	e01b      	b.n	8000f9a <EnginesSpeed+0x56>
		case KEEP:
			speed = speed;
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <EnginesSpeed+0x74>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <EnginesSpeed+0x74>)
 8000f68:	6013      	str	r3, [r2, #0]
			break;
 8000f6a:	e016      	b.n	8000f9a <EnginesSpeed+0x56>
		case FASTER:
			if(speed < 100)
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <EnginesSpeed+0x74>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b63      	cmp	r3, #99	; 0x63
 8000f72:	dc0f      	bgt.n	8000f94 <EnginesSpeed+0x50>
				speed += 10;
 8000f74:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <EnginesSpeed+0x74>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	330a      	adds	r3, #10
 8000f7a:	4a0f      	ldr	r2, [pc, #60]	; (8000fb8 <EnginesSpeed+0x74>)
 8000f7c:	6013      	str	r3, [r2, #0]
			break;
 8000f7e:	e009      	b.n	8000f94 <EnginesSpeed+0x50>
		case SLOWER:
			if(speed > 50)
 8000f80:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <EnginesSpeed+0x74>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b32      	cmp	r3, #50	; 0x32
 8000f86:	dd07      	ble.n	8000f98 <EnginesSpeed+0x54>
				speed -= 10;
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <EnginesSpeed+0x74>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	3b0a      	subs	r3, #10
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <EnginesSpeed+0x74>)
 8000f90:	6013      	str	r3, [r2, #0]
			break;
 8000f92:	e001      	b.n	8000f98 <EnginesSpeed+0x54>
			break;
 8000f94:	bf00      	nop
 8000f96:	e000      	b.n	8000f9a <EnginesSpeed+0x56>
			break;
 8000f98:	bf00      	nop
	}

	EnginesSetSpeed(speed, speed);
 8000f9a:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <EnginesSpeed+0x74>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <EnginesSpeed+0x74>)
 8000fa2:	6812      	ldr	r2, [r2, #0]
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 f807 	bl	8000fbc <EnginesSetSpeed>
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000000 	.word	0x20000000

08000fbc <EnginesSetSpeed>:

void EnginesSetSpeed(uint8_t speedLeft, uint8_t speedRight){
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	460a      	mov	r2, r1
 8000fc6:	71fb      	strb	r3, [r7, #7]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	71bb      	strb	r3, [r7, #6]
	if(speedLeft >= htim4.Instance->ARR){
 8000fcc:	79fa      	ldrb	r2, [r7, #7]
 8000fce:	4b10      	ldr	r3, [pc, #64]	; (8001010 <EnginesSetSpeed+0x54>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d303      	bcc.n	8000fe0 <EnginesSetSpeed+0x24>
		speedLeft = htim4.Instance->ARR;
 8000fd8:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <EnginesSetSpeed+0x54>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fde:	71fb      	strb	r3, [r7, #7]
	}
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, speedLeft);
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <EnginesSetSpeed+0x54>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	79fa      	ldrb	r2, [r7, #7]
 8000fe6:	635a      	str	r2, [r3, #52]	; 0x34

	if(speedRight >= htim4.Instance->ARR){
 8000fe8:	79ba      	ldrb	r2, [r7, #6]
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <EnginesSetSpeed+0x54>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d303      	bcc.n	8000ffc <EnginesSetSpeed+0x40>
		speedRight = htim4.Instance->ARR;
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <EnginesSetSpeed+0x54>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ffa:	71bb      	strb	r3, [r7, #6]
	}
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, speedRight);
 8000ffc:	4b04      	ldr	r3, [pc, #16]	; (8001010 <EnginesSetSpeed+0x54>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	79ba      	ldrb	r2, [r7, #6]
 8001002:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	200003b0 	.word	0x200003b0

08001014 <EngineMoveForward>:

void EngineMoveForward(){
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(Engine_IN1_GPIO_Port, Engine_IN1_Pin, GPIO_PIN_RESET);
 8001018:	2200      	movs	r2, #0
 800101a:	2110      	movs	r1, #16
 800101c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001020:	f001 fdda 	bl	8002bd8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Engine_IN3_GPIO_Port, Engine_IN3_Pin, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	2102      	movs	r1, #2
 8001028:	4807      	ldr	r0, [pc, #28]	; (8001048 <EngineMoveForward+0x34>)
 800102a:	f001 fdd5 	bl	8002bd8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Engine_IN2_GPIO_Port, Engine_IN2_Pin, GPIO_PIN_SET);
 800102e:	2201      	movs	r2, #1
 8001030:	2101      	movs	r1, #1
 8001032:	4806      	ldr	r0, [pc, #24]	; (800104c <EngineMoveForward+0x38>)
 8001034:	f001 fdd0 	bl	8002bd8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Engine_IN4_GPIO_Port, Engine_IN4_Pin, GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	2101      	movs	r1, #1
 800103c:	4802      	ldr	r0, [pc, #8]	; (8001048 <EngineMoveForward+0x34>)
 800103e:	f001 fdcb 	bl	8002bd8 <HAL_GPIO_WritePin>
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	48000800 	.word	0x48000800
 800104c:	48000400 	.word	0x48000400

08001050 <EngineMoveBackward>:

void EngineMoveBackward(){
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Engine_IN1_GPIO_Port, Engine_IN1_Pin, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	2110      	movs	r1, #16
 8001058:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105c:	f001 fdbc 	bl	8002bd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Engine_IN3_GPIO_Port, Engine_IN3_Pin, GPIO_PIN_SET);
 8001060:	2201      	movs	r2, #1
 8001062:	2102      	movs	r1, #2
 8001064:	4807      	ldr	r0, [pc, #28]	; (8001084 <EngineMoveBackward+0x34>)
 8001066:	f001 fdb7 	bl	8002bd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Engine_IN2_GPIO_Port, Engine_IN2_Pin, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	2101      	movs	r1, #1
 800106e:	4806      	ldr	r0, [pc, #24]	; (8001088 <EngineMoveBackward+0x38>)
 8001070:	f001 fdb2 	bl	8002bd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Engine_IN4_GPIO_Port, Engine_IN4_Pin, GPIO_PIN_RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	2101      	movs	r1, #1
 8001078:	4802      	ldr	r0, [pc, #8]	; (8001084 <EngineMoveBackward+0x34>)
 800107a:	f001 fdad 	bl	8002bd8 <HAL_GPIO_WritePin>
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	48000800 	.word	0x48000800
 8001088:	48000400 	.word	0x48000400

0800108c <EngineStop>:

void EngineStop(){
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Engine_IN1_GPIO_Port, Engine_IN1_Pin, GPIO_PIN_SET);
 8001090:	2201      	movs	r2, #1
 8001092:	2110      	movs	r1, #16
 8001094:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001098:	f001 fd9e 	bl	8002bd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Engine_IN3_GPIO_Port, Engine_IN3_Pin, GPIO_PIN_SET);
 800109c:	2201      	movs	r2, #1
 800109e:	2102      	movs	r1, #2
 80010a0:	4807      	ldr	r0, [pc, #28]	; (80010c0 <EngineStop+0x34>)
 80010a2:	f001 fd99 	bl	8002bd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Engine_IN2_GPIO_Port, Engine_IN2_Pin, GPIO_PIN_SET);
 80010a6:	2201      	movs	r2, #1
 80010a8:	2101      	movs	r1, #1
 80010aa:	4806      	ldr	r0, [pc, #24]	; (80010c4 <EngineStop+0x38>)
 80010ac:	f001 fd94 	bl	8002bd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Engine_IN4_GPIO_Port, Engine_IN4_Pin, GPIO_PIN_SET);
 80010b0:	2201      	movs	r2, #1
 80010b2:	2101      	movs	r1, #1
 80010b4:	4802      	ldr	r0, [pc, #8]	; (80010c0 <EngineStop+0x34>)
 80010b6:	f001 fd8f 	bl	8002bd8 <HAL_GPIO_WritePin>
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	48000800 	.word	0x48000800
 80010c4:	48000400 	.word	0x48000400

080010c8 <EngineTurnRight>:

void EngineTurnRight(){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Engine_IN1_GPIO_Port, Engine_IN1_Pin, GPIO_PIN_SET);
 80010cc:	2201      	movs	r2, #1
 80010ce:	2110      	movs	r1, #16
 80010d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d4:	f001 fd80 	bl	8002bd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Engine_IN3_GPIO_Port, Engine_IN3_Pin, GPIO_PIN_RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	2102      	movs	r1, #2
 80010dc:	4807      	ldr	r0, [pc, #28]	; (80010fc <EngineTurnRight+0x34>)
 80010de:	f001 fd7b 	bl	8002bd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Engine_IN2_GPIO_Port, Engine_IN2_Pin, GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2101      	movs	r1, #1
 80010e6:	4806      	ldr	r0, [pc, #24]	; (8001100 <EngineTurnRight+0x38>)
 80010e8:	f001 fd76 	bl	8002bd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Engine_IN4_GPIO_Port, Engine_IN4_Pin, GPIO_PIN_SET);
 80010ec:	2201      	movs	r2, #1
 80010ee:	2101      	movs	r1, #1
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <EngineTurnRight+0x34>)
 80010f2:	f001 fd71 	bl	8002bd8 <HAL_GPIO_WritePin>
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	48000800 	.word	0x48000800
 8001100:	48000400 	.word	0x48000400

08001104 <EngineTurnLeft>:

void EngineTurnLeft(){
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Engine_IN1_GPIO_Port, Engine_IN1_Pin, GPIO_PIN_RESET);
 8001108:	2200      	movs	r2, #0
 800110a:	2110      	movs	r1, #16
 800110c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001110:	f001 fd62 	bl	8002bd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Engine_IN3_GPIO_Port, Engine_IN3_Pin, GPIO_PIN_SET);
 8001114:	2201      	movs	r2, #1
 8001116:	2102      	movs	r1, #2
 8001118:	4807      	ldr	r0, [pc, #28]	; (8001138 <EngineTurnLeft+0x34>)
 800111a:	f001 fd5d 	bl	8002bd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Engine_IN2_GPIO_Port, Engine_IN2_Pin, GPIO_PIN_SET);
 800111e:	2201      	movs	r2, #1
 8001120:	2101      	movs	r1, #1
 8001122:	4806      	ldr	r0, [pc, #24]	; (800113c <EngineTurnLeft+0x38>)
 8001124:	f001 fd58 	bl	8002bd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Engine_IN4_GPIO_Port, Engine_IN4_Pin, GPIO_PIN_RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	2101      	movs	r1, #1
 800112c:	4802      	ldr	r0, [pc, #8]	; (8001138 <EngineTurnLeft+0x34>)
 800112e:	f001 fd53 	bl	8002bd8 <HAL_GPIO_WritePin>
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	48000800 	.word	0x48000800
 800113c:	48000400 	.word	0x48000400

08001140 <HAL_TIM_IC_CaptureCallback>:
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  if (htim == &htim3)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a0b      	ldr	r2, [pc, #44]	; (8001178 <HAL_TIM_IC_CaptureCallback+0x38>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d10e      	bne.n	800116e <HAL_TIM_IC_CaptureCallback+0x2e>
  {


	osSemaphoreRelease(Semaphore1_IR_InterruptHandle);
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <HAL_TIM_IC_CaptureCallback+0x3c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f006 fbbd 	bl	80078d4 <osSemaphoreRelease>
    switch (HAL_TIM_GetActiveChannel(&htim3))
 800115a:	4807      	ldr	r0, [pc, #28]	; (8001178 <HAL_TIM_IC_CaptureCallback+0x38>)
 800115c:	f004 fb38 	bl	80057d0 <HAL_TIM_GetActiveChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b01      	cmp	r3, #1
 8001164:	d102      	bne.n	800116c <HAL_TIM_IC_CaptureCallback+0x2c>
    {
      case HAL_TIM_ACTIVE_CHANNEL_1:
        ir_tim_interrupt();
 8001166:	f000 fc3d 	bl	80019e4 <ir_tim_interrupt>
        break;
 800116a:	e000      	b.n	800116e <HAL_TIM_IC_CaptureCallback+0x2e>
      default:
        break;
 800116c:	bf00      	nop
    }
  }
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000364 	.word	0x20000364
 800117c:	2000022c 	.word	0x2000022c

08001180 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 8001184:	483c      	ldr	r0, [pc, #240]	; (8001278 <MX_FREERTOS_Init+0xf8>)
 8001186:	f006 fa43 	bl	8007610 <osMutexNew>
 800118a:	4603      	mov	r3, r0
 800118c:	4a3b      	ldr	r2, [pc, #236]	; (800127c <MX_FREERTOS_Init+0xfc>)
 800118e:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Semaphore1_IR_Interrupt */
  Semaphore1_IR_InterruptHandle = osSemaphoreNew(1, 1, &Semaphore1_IR_Interrupt_attributes);
 8001190:	4a3b      	ldr	r2, [pc, #236]	; (8001280 <MX_FREERTOS_Init+0x100>)
 8001192:	2101      	movs	r1, #1
 8001194:	2001      	movs	r0, #1
 8001196:	f006 fac1 	bl	800771c <osSemaphoreNew>
 800119a:	4603      	mov	r3, r0
 800119c:	4a39      	ldr	r2, [pc, #228]	; (8001284 <MX_FREERTOS_Init+0x104>)
 800119e:	6013      	str	r3, [r2, #0]

  /* creation of Semaphore2_IR_Engine */
  Semaphore2_IR_EngineHandle = osSemaphoreNew(1, 1, &Semaphore2_IR_Engine_attributes);
 80011a0:	4a39      	ldr	r2, [pc, #228]	; (8001288 <MX_FREERTOS_Init+0x108>)
 80011a2:	2101      	movs	r1, #1
 80011a4:	2001      	movs	r0, #1
 80011a6:	f006 fab9 	bl	800771c <osSemaphoreNew>
 80011aa:	4603      	mov	r3, r0
 80011ac:	4a37      	ldr	r2, [pc, #220]	; (800128c <MX_FREERTOS_Init+0x10c>)
 80011ae:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Timer1_USSensorBlocking */
  Timer1_USSensorBlockingHandle = osTimerNew(Callback01, osTimerOnce, NULL, &Timer1_USSensorBlocking_attributes);
 80011b0:	4b37      	ldr	r3, [pc, #220]	; (8001290 <MX_FREERTOS_Init+0x110>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	2100      	movs	r1, #0
 80011b6:	4837      	ldr	r0, [pc, #220]	; (8001294 <MX_FREERTOS_Init+0x114>)
 80011b8:	f006 f964 	bl	8007484 <osTimerNew>
 80011bc:	4603      	mov	r3, r0
 80011be:	4a36      	ldr	r2, [pc, #216]	; (8001298 <MX_FREERTOS_Init+0x118>)
 80011c0:	6013      	str	r3, [r2, #0]

  /* creation of Timer2_TurningTimer */
  Timer2_TurningTimerHandle = osTimerNew(Callback02, osTimerOnce, NULL, &Timer2_TurningTimer_attributes);
 80011c2:	4b36      	ldr	r3, [pc, #216]	; (800129c <MX_FREERTOS_Init+0x11c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	2100      	movs	r1, #0
 80011c8:	4835      	ldr	r0, [pc, #212]	; (80012a0 <MX_FREERTOS_Init+0x120>)
 80011ca:	f006 f95b 	bl	8007484 <osTimerNew>
 80011ce:	4603      	mov	r3, r0
 80011d0:	4a34      	ldr	r2, [pc, #208]	; (80012a4 <MX_FREERTOS_Init+0x124>)
 80011d2:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Queue1_Commands */
  Queue1_CommandsHandle = osMessageQueueNew (10, 20, &Queue1_Commands_attributes);
 80011d4:	4a34      	ldr	r2, [pc, #208]	; (80012a8 <MX_FREERTOS_Init+0x128>)
 80011d6:	2114      	movs	r1, #20
 80011d8:	200a      	movs	r0, #10
 80011da:	f006 fbbf 	bl	800795c <osMessageQueueNew>
 80011de:	4603      	mov	r3, r0
 80011e0:	4a32      	ldr	r2, [pc, #200]	; (80012ac <MX_FREERTOS_Init+0x12c>)
 80011e2:	6013      	str	r3, [r2, #0]

  /* creation of Queue02_EngineCommands */
  Queue02_EngineCommandsHandle = osMessageQueueNew (10, 10, &Queue02_EngineCommands_attributes);
 80011e4:	4a32      	ldr	r2, [pc, #200]	; (80012b0 <MX_FREERTOS_Init+0x130>)
 80011e6:	210a      	movs	r1, #10
 80011e8:	200a      	movs	r0, #10
 80011ea:	f006 fbb7 	bl	800795c <osMessageQueueNew>
 80011ee:	4603      	mov	r3, r0
 80011f0:	4a30      	ldr	r2, [pc, #192]	; (80012b4 <MX_FREERTOS_Init+0x134>)
 80011f2:	6013      	str	r3, [r2, #0]

  /* creation of Queue03_EngineSpeed */
  Queue03_EngineSpeedHandle = osMessageQueueNew (10, 10, &Queue03_EngineSpeed_attributes);
 80011f4:	4a30      	ldr	r2, [pc, #192]	; (80012b8 <MX_FREERTOS_Init+0x138>)
 80011f6:	210a      	movs	r1, #10
 80011f8:	200a      	movs	r0, #10
 80011fa:	f006 fbaf 	bl	800795c <osMessageQueueNew>
 80011fe:	4603      	mov	r3, r0
 8001200:	4a2e      	ldr	r2, [pc, #184]	; (80012bc <MX_FREERTOS_Init+0x13c>)
 8001202:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001204:	4a2e      	ldr	r2, [pc, #184]	; (80012c0 <MX_FREERTOS_Init+0x140>)
 8001206:	2100      	movs	r1, #0
 8001208:	482e      	ldr	r0, [pc, #184]	; (80012c4 <MX_FREERTOS_Init+0x144>)
 800120a:	f006 f879 	bl	8007300 <osThreadNew>
 800120e:	4603      	mov	r3, r0
 8001210:	4a2d      	ldr	r2, [pc, #180]	; (80012c8 <MX_FREERTOS_Init+0x148>)
 8001212:	6013      	str	r3, [r2, #0]

  /* creation of Task3_CommandDetection */
  Task3_CommandDetectionHandle = osThreadNew(CommandDetection, NULL, &Task3_CommandDetection_attributes);
 8001214:	4a2d      	ldr	r2, [pc, #180]	; (80012cc <MX_FREERTOS_Init+0x14c>)
 8001216:	2100      	movs	r1, #0
 8001218:	482d      	ldr	r0, [pc, #180]	; (80012d0 <MX_FREERTOS_Init+0x150>)
 800121a:	f006 f871 	bl	8007300 <osThreadNew>
 800121e:	4603      	mov	r3, r0
 8001220:	4a2c      	ldr	r2, [pc, #176]	; (80012d4 <MX_FREERTOS_Init+0x154>)
 8001222:	6013      	str	r3, [r2, #0]

  /* creation of Task4_UltrasoundSensor */
  Task4_UltrasoundSensorHandle = osThreadNew(UltrasoundSensor, NULL, &Task4_UltrasoundSensor_attributes);
 8001224:	4a2c      	ldr	r2, [pc, #176]	; (80012d8 <MX_FREERTOS_Init+0x158>)
 8001226:	2100      	movs	r1, #0
 8001228:	482c      	ldr	r0, [pc, #176]	; (80012dc <MX_FREERTOS_Init+0x15c>)
 800122a:	f006 f869 	bl	8007300 <osThreadNew>
 800122e:	4603      	mov	r3, r0
 8001230:	4a2b      	ldr	r2, [pc, #172]	; (80012e0 <MX_FREERTOS_Init+0x160>)
 8001232:	6013      	str	r3, [r2, #0]

  /* creation of Task2_UsartReceiving */
  Task2_UsartReceivingHandle = osThreadNew(UsartReceiving, NULL, &Task2_UsartReceiving_attributes);
 8001234:	4a2b      	ldr	r2, [pc, #172]	; (80012e4 <MX_FREERTOS_Init+0x164>)
 8001236:	2100      	movs	r1, #0
 8001238:	482b      	ldr	r0, [pc, #172]	; (80012e8 <MX_FREERTOS_Init+0x168>)
 800123a:	f006 f861 	bl	8007300 <osThreadNew>
 800123e:	4603      	mov	r3, r0
 8001240:	4a2a      	ldr	r2, [pc, #168]	; (80012ec <MX_FREERTOS_Init+0x16c>)
 8001242:	6013      	str	r3, [r2, #0]

  /* creation of Task10_IR_CommandsDetection */
  Task10_IR_CommandsDetectionHandle = osThreadNew(IR_CommandsDetection, NULL, &Task10_IR_CommandsDetection_attributes);
 8001244:	4a2a      	ldr	r2, [pc, #168]	; (80012f0 <MX_FREERTOS_Init+0x170>)
 8001246:	2100      	movs	r1, #0
 8001248:	482a      	ldr	r0, [pc, #168]	; (80012f4 <MX_FREERTOS_Init+0x174>)
 800124a:	f006 f859 	bl	8007300 <osThreadNew>
 800124e:	4603      	mov	r3, r0
 8001250:	4a29      	ldr	r2, [pc, #164]	; (80012f8 <MX_FREERTOS_Init+0x178>)
 8001252:	6013      	str	r3, [r2, #0]

  /* creation of Task11_EngineTask */
  Task11_EngineTaskHandle = osThreadNew(EngineTask, NULL, &Task11_EngineTask_attributes);
 8001254:	4a29      	ldr	r2, [pc, #164]	; (80012fc <MX_FREERTOS_Init+0x17c>)
 8001256:	2100      	movs	r1, #0
 8001258:	4829      	ldr	r0, [pc, #164]	; (8001300 <MX_FREERTOS_Init+0x180>)
 800125a:	f006 f851 	bl	8007300 <osThreadNew>
 800125e:	4603      	mov	r3, r0
 8001260:	4a28      	ldr	r2, [pc, #160]	; (8001304 <MX_FREERTOS_Init+0x184>)
 8001262:	6013      	str	r3, [r2, #0]

  /* creation of Task07_GetCompassMeasurement */
  Task07_GetCompassMeasurementHandle = osThreadNew(GetCompassMeasurement, NULL, &Task07_GetCompassMeasurement_attributes);
 8001264:	4a28      	ldr	r2, [pc, #160]	; (8001308 <MX_FREERTOS_Init+0x188>)
 8001266:	2100      	movs	r1, #0
 8001268:	4828      	ldr	r0, [pc, #160]	; (800130c <MX_FREERTOS_Init+0x18c>)
 800126a:	f006 f849 	bl	8007300 <osThreadNew>
 800126e:	4603      	mov	r3, r0
 8001270:	4a27      	ldr	r2, [pc, #156]	; (8001310 <MX_FREERTOS_Init+0x190>)
 8001272:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}
 8001278:	0800dcdc 	.word	0x0800dcdc
 800127c:	20000228 	.word	0x20000228
 8001280:	0800dcec 	.word	0x0800dcec
 8001284:	2000022c 	.word	0x2000022c
 8001288:	0800dcfc 	.word	0x0800dcfc
 800128c:	20000230 	.word	0x20000230
 8001290:	0800dcbc 	.word	0x0800dcbc
 8001294:	0800172d 	.word	0x0800172d
 8001298:	20000220 	.word	0x20000220
 800129c:	0800dccc 	.word	0x0800dccc
 80012a0:	08001741 	.word	0x08001741
 80012a4:	20000224 	.word	0x20000224
 80012a8:	0800dc74 	.word	0x0800dc74
 80012ac:	20000214 	.word	0x20000214
 80012b0:	0800dc8c 	.word	0x0800dc8c
 80012b4:	20000218 	.word	0x20000218
 80012b8:	0800dca4 	.word	0x0800dca4
 80012bc:	2000021c 	.word	0x2000021c
 80012c0:	0800db78 	.word	0x0800db78
 80012c4:	08001315 	.word	0x08001315
 80012c8:	200001f8 	.word	0x200001f8
 80012cc:	0800db9c 	.word	0x0800db9c
 80012d0:	08001325 	.word	0x08001325
 80012d4:	200001fc 	.word	0x200001fc
 80012d8:	0800dbc0 	.word	0x0800dbc0
 80012dc:	080013a5 	.word	0x080013a5
 80012e0:	20000200 	.word	0x20000200
 80012e4:	0800dbe4 	.word	0x0800dbe4
 80012e8:	08001479 	.word	0x08001479
 80012ec:	20000204 	.word	0x20000204
 80012f0:	0800dc08 	.word	0x0800dc08
 80012f4:	08001525 	.word	0x08001525
 80012f8:	20000208 	.word	0x20000208
 80012fc:	0800dc2c 	.word	0x0800dc2c
 8001300:	08001695 	.word	0x08001695
 8001304:	2000020c 	.word	0x2000020c
 8001308:	0800dc50 	.word	0x0800dc50
 800130c:	0800171d 	.word	0x0800171d
 8001310:	20000210 	.word	0x20000210

08001314 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800131c:	2001      	movs	r0, #1
 800131e:	f006 f881 	bl	8007424 <osDelay>
 8001322:	e7fb      	b.n	800131c <StartDefaultTask+0x8>

08001324 <CommandDetection>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CommandDetection */
void CommandDetection(void *argument)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CommandDetection */
	char ReceivedValue[MAX_LENGTH_OF_LINE_RECEIVED_BY_USART + 1];
	  /* Infinite loop */
	  for(;;){
		 osMessageQueueGet(Queue1_CommandsHandle, ReceivedValue, 0, osWaitForever);
 800132c:	4b19      	ldr	r3, [pc, #100]	; (8001394 <CommandDetection+0x70>)
 800132e:	6818      	ldr	r0, [r3, #0]
 8001330:	f107 0108 	add.w	r1, r7, #8
 8001334:	f04f 33ff 	mov.w	r3, #4294967295
 8001338:	2200      	movs	r2, #0
 800133a:	f006 fbe3 	bl	8007b04 <osMessageQueueGet>
		  //ReceivedValue = osMessageGet(Queue1_CommandsHandle, osWaitForever)
		  if (strcmp(ReceivedValue, "on") == 0){
 800133e:	f107 0308 	add.w	r3, r7, #8
 8001342:	4915      	ldr	r1, [pc, #84]	; (8001398 <CommandDetection+0x74>)
 8001344:	4618      	mov	r0, r3
 8001346:	f7fe ff43 	bl	80001d0 <strcmp>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d106      	bne.n	800135e <CommandDetection+0x3a>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001350:	2201      	movs	r2, #1
 8001352:	2120      	movs	r1, #32
 8001354:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001358:	f001 fc3e 	bl	8002bd8 <HAL_GPIO_WritePin>
 800135c:	e015      	b.n	800138a <CommandDetection+0x66>
		  }else if (strcmp(ReceivedValue, "off") == 0) {
 800135e:	f107 0308 	add.w	r3, r7, #8
 8001362:	490e      	ldr	r1, [pc, #56]	; (800139c <CommandDetection+0x78>)
 8001364:	4618      	mov	r0, r3
 8001366:	f7fe ff33 	bl	80001d0 <strcmp>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d106      	bne.n	800137e <CommandDetection+0x5a>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001370:	2200      	movs	r2, #0
 8001372:	2120      	movs	r1, #32
 8001374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001378:	f001 fc2e 	bl	8002bd8 <HAL_GPIO_WritePin>
 800137c:	e005      	b.n	800138a <CommandDetection+0x66>
		  }else {
			  printf("Nieznane polecenie: %s\n", ReceivedValue);
 800137e:	f107 0308 	add.w	r3, r7, #8
 8001382:	4619      	mov	r1, r3
 8001384:	4806      	ldr	r0, [pc, #24]	; (80013a0 <CommandDetection+0x7c>)
 8001386:	f00a fb19 	bl	800b9bc <iprintf>
		  }

		  osDelay(1);
 800138a:	2001      	movs	r0, #1
 800138c:	f006 f84a 	bl	8007424 <osDelay>
		 osMessageQueueGet(Queue1_CommandsHandle, ReceivedValue, 0, osWaitForever);
 8001390:	e7cc      	b.n	800132c <CommandDetection+0x8>
 8001392:	bf00      	nop
 8001394:	20000214 	.word	0x20000214
 8001398:	0800db40 	.word	0x0800db40
 800139c:	0800db44 	.word	0x0800db44
 80013a0:	0800db48 	.word	0x0800db48

080013a4 <UltrasoundSensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UltrasoundSensor */
void UltrasoundSensor(void *argument)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UltrasoundSensor */
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 80013ac:	2100      	movs	r1, #0
 80013ae:	482c      	ldr	r0, [pc, #176]	; (8001460 <UltrasoundSensor+0xbc>)
 80013b0:	f003 fba8 	bl	8004b04 <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 80013b4:	2104      	movs	r1, #4
 80013b6:	482a      	ldr	r0, [pc, #168]	; (8001460 <UltrasoundSensor+0xbc>)
 80013b8:	f003 fba4 	bl	8004b04 <HAL_TIM_IC_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80013bc:	2108      	movs	r1, #8
 80013be:	4828      	ldr	r0, [pc, #160]	; (8001460 <UltrasoundSensor+0xbc>)
 80013c0:	f003 fa38 	bl	8004834 <HAL_TIM_PWM_Start>
	osDelay(1000);
 80013c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013c8:	f006 f82c 	bl	8007424 <osDelay>
  /* Infinite loop */
  for(;;)
  {

	uint32_t start = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 80013cc:	2100      	movs	r1, #0
 80013ce:	4824      	ldr	r0, [pc, #144]	; (8001460 <UltrasoundSensor+0xbc>)
 80013d0:	f004 f99c 	bl	800570c <HAL_TIM_ReadCapturedValue>
 80013d4:	6178      	str	r0, [r7, #20]
	uint32_t stop = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 80013d6:	2104      	movs	r1, #4
 80013d8:	4821      	ldr	r0, [pc, #132]	; (8001460 <UltrasoundSensor+0xbc>)
 80013da:	f004 f997 	bl	800570c <HAL_TIM_ReadCapturedValue>
 80013de:	6138      	str	r0, [r7, #16]
	uint32_t distance = (stop - start) / 58.0f;
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	ee07 3a90 	vmov	s15, r3
 80013ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013ee:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8001464 <UltrasoundSensor+0xc0>
 80013f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013fa:	ee17 3a90 	vmov	r3, s15
 80013fe:	60fb      	str	r3, [r7, #12]
	if(distance < 20 && !osTimerIsRunning(Timer1_USSensorBlockingHandle)){
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2b13      	cmp	r3, #19
 8001404:	d828      	bhi.n	8001458 <UltrasoundSensor+0xb4>
 8001406:	4b18      	ldr	r3, [pc, #96]	; (8001468 <UltrasoundSensor+0xc4>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f006 f8e4 	bl	80075d8 <osTimerIsRunning>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d120      	bne.n	8001458 <UltrasoundSensor+0xb4>
		engine_state state = STOP;
 8001416:	2304      	movs	r3, #4
 8001418:	72fb      	strb	r3, [r7, #11]
		osSemaphoreRelease(Semaphore1_IR_InterruptHandle);
 800141a:	4b14      	ldr	r3, [pc, #80]	; (800146c <UltrasoundSensor+0xc8>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f006 fa58 	bl	80078d4 <osSemaphoreRelease>
		osSemaphoreAcquire(Semaphore1_IR_InterruptHandle, 0);
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <UltrasoundSensor+0xc8>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f006 fa00 	bl	8007830 <osSemaphoreAcquire>
		osMessageQueuePut(Queue02_EngineCommandsHandle, &state, 0, 200);
 8001430:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <UltrasoundSensor+0xcc>)
 8001432:	6818      	ldr	r0, [r3, #0]
 8001434:	f107 010b 	add.w	r1, r7, #11
 8001438:	23c8      	movs	r3, #200	; 0xc8
 800143a:	2200      	movs	r2, #0
 800143c:	f006 fb02 	bl	8007a44 <osMessageQueuePut>
		osSemaphoreRelease(Semaphore2_IR_EngineHandle);
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <UltrasoundSensor+0xd0>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f006 fa45 	bl	80078d4 <osSemaphoreRelease>
		osTimerStart(Timer1_USSensorBlockingHandle, 2000 / portTICK_PERIOD_MS);
 800144a:	4b07      	ldr	r3, [pc, #28]	; (8001468 <UltrasoundSensor+0xc4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001452:	4618      	mov	r0, r3
 8001454:	f006 f892 	bl	800757c <osTimerStart>
	}

	osDelay(1);
 8001458:	2001      	movs	r0, #1
 800145a:	f005 ffe3 	bl	8007424 <osDelay>
  {
 800145e:	e7b5      	b.n	80013cc <UltrasoundSensor+0x28>
 8001460:	20000318 	.word	0x20000318
 8001464:	42680000 	.word	0x42680000
 8001468:	20000220 	.word	0x20000220
 800146c:	2000022c 	.word	0x2000022c
 8001470:	20000218 	.word	0x20000218
 8001474:	20000230 	.word	0x20000230

08001478 <UsartReceiving>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UsartReceiving */
void UsartReceiving(void *argument)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	  static char receivedLine[MAX_LENGTH_OF_LINE_RECEIVED_BY_USART + 1]; // +1 for null terminator

	  /* Infinite loop */
	  for(;;)
	  {
		  if (HAL_UART_Receive(&huart2, &value, 1, 0) == HAL_OK){
 8001480:	2300      	movs	r3, #0
 8001482:	2201      	movs	r2, #1
 8001484:	4921      	ldr	r1, [pc, #132]	; (800150c <UsartReceiving+0x94>)
 8001486:	4822      	ldr	r0, [pc, #136]	; (8001510 <UsartReceiving+0x98>)
 8001488:	f005 f914 	bl	80066b4 <HAL_UART_Receive>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d137      	bne.n	8001502 <UsartReceiving+0x8a>
		  		if (value == '\r' || value == '\n') {
 8001492:	4b1e      	ldr	r3, [pc, #120]	; (800150c <UsartReceiving+0x94>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b0d      	cmp	r3, #13
 8001498:	d003      	beq.n	80014a2 <UsartReceiving+0x2a>
 800149a:	4b1c      	ldr	r3, [pc, #112]	; (800150c <UsartReceiving+0x94>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b0a      	cmp	r3, #10
 80014a0:	d11f      	bne.n	80014e2 <UsartReceiving+0x6a>
		  			// end of line character received
		  			if (line_length > 0){
 80014a2:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <UsartReceiving+0x9c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d02b      	beq.n	8001502 <UsartReceiving+0x8a>
		  				// if the buffer is not empty, we add the \0 character at the end of the line
		  				line_buffer[line_length] = '\0';
 80014aa:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <UsartReceiving+0x9c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a1a      	ldr	r2, [pc, #104]	; (8001518 <UsartReceiving+0xa0>)
 80014b0:	2100      	movs	r1, #0
 80014b2:	54d1      	strb	r1, [r2, r3]
		  				// passing the buffer to CommendDetection Task by queue
		  			    strncpy(receivedLine, line_buffer, line_length);
 80014b4:	4b17      	ldr	r3, [pc, #92]	; (8001514 <UsartReceiving+0x9c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	4917      	ldr	r1, [pc, #92]	; (8001518 <UsartReceiving+0xa0>)
 80014bc:	4817      	ldr	r0, [pc, #92]	; (800151c <UsartReceiving+0xa4>)
 80014be:	f00a fada 	bl	800ba76 <strncpy>
		  			    receivedLine[line_length] = '\0'; // Ensure null termination
 80014c2:	4b14      	ldr	r3, [pc, #80]	; (8001514 <UsartReceiving+0x9c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a15      	ldr	r2, [pc, #84]	; (800151c <UsartReceiving+0xa4>)
 80014c8:	2100      	movs	r1, #0
 80014ca:	54d1      	strb	r1, [r2, r3]
		  				osMessageQueuePut(Queue1_CommandsHandle, receivedLine, 0, 200);
 80014cc:	4b14      	ldr	r3, [pc, #80]	; (8001520 <UsartReceiving+0xa8>)
 80014ce:	6818      	ldr	r0, [r3, #0]
 80014d0:	23c8      	movs	r3, #200	; 0xc8
 80014d2:	2200      	movs	r2, #0
 80014d4:	4911      	ldr	r1, [pc, #68]	; (800151c <UsartReceiving+0xa4>)
 80014d6:	f006 fab5 	bl	8007a44 <osMessageQueuePut>
		  				int y = osMessageQueueGetMsgSize(Queue1_CommandsHandle

		  				**************************/

		  				// starting data collection again
		  				line_length = 0;
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <UsartReceiving+0x9c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
		  			if (line_length > 0){
 80014e0:	e00f      	b.n	8001502 <UsartReceiving+0x8a>
		  			}
		  		}
		  		else {
		  			if (line_length >= MAX_LENGTH_OF_LINE_RECEIVED_BY_USART) {
 80014e2:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <UsartReceiving+0x9c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2b13      	cmp	r3, #19
 80014e8:	d902      	bls.n	80014f0 <UsartReceiving+0x78>
		  				// too much data, we delete what we have collected so far
		  				line_length = 0;
 80014ea:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <UsartReceiving+0x9c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
		  			}
		  			// we add the value to the buffer
		  			line_buffer[line_length++] = value;
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <UsartReceiving+0x9c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	1c5a      	adds	r2, r3, #1
 80014f6:	4907      	ldr	r1, [pc, #28]	; (8001514 <UsartReceiving+0x9c>)
 80014f8:	600a      	str	r2, [r1, #0]
 80014fa:	4a04      	ldr	r2, [pc, #16]	; (800150c <UsartReceiving+0x94>)
 80014fc:	7811      	ldrb	r1, [r2, #0]
 80014fe:	4a06      	ldr	r2, [pc, #24]	; (8001518 <UsartReceiving+0xa0>)
 8001500:	54d1      	strb	r1, [r2, r3]
		  		}
		  	}

	    osDelay(1);
 8001502:	2001      	movs	r0, #1
 8001504:	f005 ff8e 	bl	8007424 <osDelay>
		  if (HAL_UART_Receive(&huart2, &value, 1, 0) == HAL_OK){
 8001508:	e7ba      	b.n	8001480 <UsartReceiving+0x8>
 800150a:	bf00      	nop
 800150c:	20000234 	.word	0x20000234
 8001510:	200003fc 	.word	0x200003fc
 8001514:	20000238 	.word	0x20000238
 8001518:	2000023c 	.word	0x2000023c
 800151c:	20000254 	.word	0x20000254
 8001520:	20000214 	.word	0x20000214

08001524 <IR_CommandsDetection>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_IR_CommandsDetection */
void IR_CommandsDetection(void *argument)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IR_CommandsDetection */
  /* Infinite loop */
  for(;;)
  {

	  	if(osSemaphoreAcquire(Semaphore1_IR_InterruptHandle, 0) == osOK){
 800152c:	4b55      	ldr	r3, [pc, #340]	; (8001684 <IR_CommandsDetection+0x160>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f006 f97c 	bl	8007830 <osSemaphoreAcquire>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	f040 809e 	bne.w	800167c <IR_CommandsDetection+0x158>

	  		int value = ir_read();
 8001540:	f000 fab6 	bl	8001ab0 <ir_read>
 8001544:	60f8      	str	r0, [r7, #12]
	  		engine_state state = STOP;
 8001546:	2304      	movs	r3, #4
 8001548:	72fb      	strb	r3, [r7, #11]
	  		engine_speed speed = KEEP;
 800154a:	2300      	movs	r3, #0
 800154c:	72bb      	strb	r3, [r7, #10]

	  		if(value == IR_CODE_TEST || value == IR_CODE_0){
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2b44      	cmp	r3, #68	; 0x44
 8001552:	d002      	beq.n	800155a <IR_CommandsDetection+0x36>
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2b16      	cmp	r3, #22
 8001558:	d11d      	bne.n	8001596 <IR_CommandsDetection+0x72>
	  			switch (value){
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2b16      	cmp	r3, #22
 800155e:	d00d      	beq.n	800157c <IR_CommandsDetection+0x58>
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2b44      	cmp	r3, #68	; 0x44
 8001564:	d115      	bne.n	8001592 <IR_CommandsDetection+0x6e>
					   case IR_CODE_TEST:
						     speed = FASTER;
 8001566:	2301      	movs	r3, #1
 8001568:	72bb      	strb	r3, [r7, #10]
						     osMessageQueuePut(Queue03_EngineSpeedHandle, &speed, 0, 200);
 800156a:	4b47      	ldr	r3, [pc, #284]	; (8001688 <IR_CommandsDetection+0x164>)
 800156c:	6818      	ldr	r0, [r3, #0]
 800156e:	f107 010a 	add.w	r1, r7, #10
 8001572:	23c8      	movs	r3, #200	; 0xc8
 8001574:	2200      	movs	r2, #0
 8001576:	f006 fa65 	bl	8007a44 <osMessageQueuePut>
					     break;
 800157a:	e00b      	b.n	8001594 <IR_CommandsDetection+0x70>
					   case IR_CODE_0  :
						     speed = SLOWER;
 800157c:	2302      	movs	r3, #2
 800157e:	72bb      	strb	r3, [r7, #10]
						     osMessageQueuePut(Queue03_EngineSpeedHandle, &speed, 0, 200);
 8001580:	4b41      	ldr	r3, [pc, #260]	; (8001688 <IR_CommandsDetection+0x164>)
 8001582:	6818      	ldr	r0, [r3, #0]
 8001584:	f107 010a 	add.w	r1, r7, #10
 8001588:	23c8      	movs	r3, #200	; 0xc8
 800158a:	2200      	movs	r2, #0
 800158c:	f006 fa5a 	bl	8007a44 <osMessageQueuePut>
					     break;
 8001590:	e000      	b.n	8001594 <IR_CommandsDetection+0x70>
					   default:

					   	 break;
 8001592:	bf00      	nop
	  			switch (value){
 8001594:	e06d      	b.n	8001672 <IR_CommandsDetection+0x14e>
	  			}
	  		}else{
				switch (value) {
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2b19      	cmp	r3, #25
 800159a:	dc2f      	bgt.n	80015fc <IR_CommandsDetection+0xd8>
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2b07      	cmp	r3, #7
 80015a0:	db66      	blt.n	8001670 <IR_CommandsDetection+0x14c>
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	3b07      	subs	r3, #7
 80015a6:	2b12      	cmp	r3, #18
 80015a8:	d862      	bhi.n	8001670 <IR_CommandsDetection+0x14c>
 80015aa:	a201      	add	r2, pc, #4	; (adr r2, 80015b0 <IR_CommandsDetection+0x8c>)
 80015ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b0:	08001645 	.word	0x08001645
 80015b4:	08001671 	.word	0x08001671
 80015b8:	08001619 	.word	0x08001619
 80015bc:	08001671 	.word	0x08001671
 80015c0:	08001671 	.word	0x08001671
 80015c4:	08001671 	.word	0x08001671
 80015c8:	08001671 	.word	0x08001671
 80015cc:	08001671 	.word	0x08001671
 80015d0:	08001671 	.word	0x08001671
 80015d4:	08001671 	.word	0x08001671
 80015d8:	08001671 	.word	0x08001671
 80015dc:	08001671 	.word	0x08001671
 80015e0:	08001671 	.word	0x08001671
 80015e4:	08001671 	.word	0x08001671
 80015e8:	0800165b 	.word	0x0800165b
 80015ec:	08001671 	.word	0x08001671
 80015f0:	08001671 	.word	0x08001671
 80015f4:	08001671 	.word	0x08001671
 80015f8:	0800162f 	.word	0x0800162f
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2b40      	cmp	r3, #64	; 0x40
 8001600:	d136      	bne.n	8001670 <IR_CommandsDetection+0x14c>

					    case IR_CODE_PLUS:
							  state = MOVE_FORWARD;
 8001602:	2300      	movs	r3, #0
 8001604:	72fb      	strb	r3, [r7, #11]
							  osMessageQueuePut(Queue02_EngineCommandsHandle, &state, 0, 200);
 8001606:	4b21      	ldr	r3, [pc, #132]	; (800168c <IR_CommandsDetection+0x168>)
 8001608:	6818      	ldr	r0, [r3, #0]
 800160a:	f107 010b 	add.w	r1, r7, #11
 800160e:	23c8      	movs	r3, #200	; 0xc8
 8001610:	2200      	movs	r2, #0
 8001612:	f006 fa17 	bl	8007a44 <osMessageQueuePut>
						  break;
 8001616:	e02c      	b.n	8001672 <IR_CommandsDetection+0x14e>
						case IR_CODE_FORWARD:
							  state = TURN_RIGHT;
 8001618:	2302      	movs	r3, #2
 800161a:	72fb      	strb	r3, [r7, #11]
							  osMessageQueuePut(Queue02_EngineCommandsHandle, &state, 0, 200);
 800161c:	4b1b      	ldr	r3, [pc, #108]	; (800168c <IR_CommandsDetection+0x168>)
 800161e:	6818      	ldr	r0, [r3, #0]
 8001620:	f107 010b 	add.w	r1, r7, #11
 8001624:	23c8      	movs	r3, #200	; 0xc8
 8001626:	2200      	movs	r2, #0
 8001628:	f006 fa0c 	bl	8007a44 <osMessageQueuePut>
						  break;
 800162c:	e021      	b.n	8001672 <IR_CommandsDetection+0x14e>
						case IR_CODE_MINUS:
							  state = MOVE_BACKWARD;
 800162e:	2301      	movs	r3, #1
 8001630:	72fb      	strb	r3, [r7, #11]
							  osMessageQueuePut(Queue02_EngineCommandsHandle, &state, 0, 200);
 8001632:	4b16      	ldr	r3, [pc, #88]	; (800168c <IR_CommandsDetection+0x168>)
 8001634:	6818      	ldr	r0, [r3, #0]
 8001636:	f107 010b 	add.w	r1, r7, #11
 800163a:	23c8      	movs	r3, #200	; 0xc8
 800163c:	2200      	movs	r2, #0
 800163e:	f006 fa01 	bl	8007a44 <osMessageQueuePut>
						  break;
 8001642:	e016      	b.n	8001672 <IR_CommandsDetection+0x14e>
						case IR_CODE_REWIND:
							  state = TURN_LEFT;
 8001644:	2303      	movs	r3, #3
 8001646:	72fb      	strb	r3, [r7, #11]
							  osMessageQueuePut(Queue02_EngineCommandsHandle, &state, 0, 200);
 8001648:	4b10      	ldr	r3, [pc, #64]	; (800168c <IR_CommandsDetection+0x168>)
 800164a:	6818      	ldr	r0, [r3, #0]
 800164c:	f107 010b 	add.w	r1, r7, #11
 8001650:	23c8      	movs	r3, #200	; 0xc8
 8001652:	2200      	movs	r2, #0
 8001654:	f006 f9f6 	bl	8007a44 <osMessageQueuePut>
						  break;
 8001658:	e00b      	b.n	8001672 <IR_CommandsDetection+0x14e>
						case IR_CODE_PLAY:
							  state = STOP;
 800165a:	2304      	movs	r3, #4
 800165c:	72fb      	strb	r3, [r7, #11]
							  osMessageQueuePut(Queue02_EngineCommandsHandle, &state, 0, 200);
 800165e:	4b0b      	ldr	r3, [pc, #44]	; (800168c <IR_CommandsDetection+0x168>)
 8001660:	6818      	ldr	r0, [r3, #0]
 8001662:	f107 010b 	add.w	r1, r7, #11
 8001666:	23c8      	movs	r3, #200	; 0xc8
 8001668:	2200      	movs	r2, #0
 800166a:	f006 f9eb 	bl	8007a44 <osMessageQueuePut>
						  break;
 800166e:	e000      	b.n	8001672 <IR_CommandsDetection+0x14e>
						default:
							//printf("Inna komenda");
							break;
 8001670:	bf00      	nop
						}
	  		}
	  		osSemaphoreRelease(Semaphore2_IR_EngineHandle);
 8001672:	4b07      	ldr	r3, [pc, #28]	; (8001690 <IR_CommandsDetection+0x16c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f006 f92c 	bl	80078d4 <osSemaphoreRelease>
	  	}

    osDelay(1);
 800167c:	2001      	movs	r0, #1
 800167e:	f005 fed1 	bl	8007424 <osDelay>
	  	if(osSemaphoreAcquire(Semaphore1_IR_InterruptHandle, 0) == osOK){
 8001682:	e753      	b.n	800152c <IR_CommandsDetection+0x8>
 8001684:	2000022c 	.word	0x2000022c
 8001688:	2000021c 	.word	0x2000021c
 800168c:	20000218 	.word	0x20000218
 8001690:	20000230 	.word	0x20000230

08001694 <EngineTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_EngineTask */
void EngineTask(void *argument)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	engine_state IR_ReceivedValue_state;
	engine_speed IR_ReceivedValue_speed;
  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreAcquire(Semaphore2_IR_EngineHandle, 0) == osOK){
 800169c:	4b1b      	ldr	r3, [pc, #108]	; (800170c <EngineTask+0x78>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2100      	movs	r1, #0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f006 f8c4 	bl	8007830 <osSemaphoreAcquire>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d12a      	bne.n	8001704 <EngineTask+0x70>

	  	  //osMutexAcquire(myMutex01Handle, 0);
	  	  //osThreadId_t x = osMutexGetOwner(myMutex01Handle);
		  if(osMessageQueueGet(Queue02_EngineCommandsHandle, &IR_ReceivedValue_state, 0, 200) == osOK){
 80016ae:	4b18      	ldr	r3, [pc, #96]	; (8001710 <EngineTask+0x7c>)
 80016b0:	6818      	ldr	r0, [r3, #0]
 80016b2:	f107 010f 	add.w	r1, r7, #15
 80016b6:	23c8      	movs	r3, #200	; 0xc8
 80016b8:	2200      	movs	r2, #0
 80016ba:	f006 fa23 	bl	8007b04 <osMessageQueueGet>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d110      	bne.n	80016e6 <EngineTask+0x52>
		  //if(osMessageQueueGetCount(Queue02_EngineCommandsHandle) != 0){
			  //osMessageQueueGet(Queue02_EngineCommandsHandle, &IR_ReceivedValue_state, 0, osWaitForever);
			  Engine(IR_ReceivedValue_state);
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fbfc 	bl	8000ec4 <Engine>
			  if(IR_ReceivedValue_state == TURN_RIGHT || IR_ReceivedValue_state == TURN_LEFT){
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d002      	beq.n	80016d8 <EngineTask+0x44>
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	2b03      	cmp	r3, #3
 80016d6:	d115      	bne.n	8001704 <EngineTask+0x70>
				 osTimerStart(Timer2_TurningTimerHandle, 60 / portTICK_PERIOD_MS);
 80016d8:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <EngineTask+0x80>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	213c      	movs	r1, #60	; 0x3c
 80016de:	4618      	mov	r0, r3
 80016e0:	f005 ff4c 	bl	800757c <osTimerStart>
 80016e4:	e00e      	b.n	8001704 <EngineTask+0x70>
			  }
		  }else if(osMessageQueueGet(Queue03_EngineSpeedHandle, &IR_ReceivedValue_speed, 0, 200) == osOK){
 80016e6:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <EngineTask+0x84>)
 80016e8:	6818      	ldr	r0, [r3, #0]
 80016ea:	f107 010e 	add.w	r1, r7, #14
 80016ee:	23c8      	movs	r3, #200	; 0xc8
 80016f0:	2200      	movs	r2, #0
 80016f2:	f006 fa07 	bl	8007b04 <osMessageQueueGet>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d103      	bne.n	8001704 <EngineTask+0x70>
			  //osMessageQueueGet(Queue03_EngineSpeedHandle, &IR_ReceivedValue_speed, 0, osWaitForever);
			  EnginesSpeed(IR_ReceivedValue_speed);
 80016fc:	7bbb      	ldrb	r3, [r7, #14]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff fc20 	bl	8000f44 <EnginesSpeed>
		  }

	  }

    osDelay(1);
 8001704:	2001      	movs	r0, #1
 8001706:	f005 fe8d 	bl	8007424 <osDelay>
	  if(osSemaphoreAcquire(Semaphore2_IR_EngineHandle, 0) == osOK){
 800170a:	e7c7      	b.n	800169c <EngineTask+0x8>
 800170c:	20000230 	.word	0x20000230
 8001710:	20000218 	.word	0x20000218
 8001714:	20000224 	.word	0x20000224
 8001718:	2000021c 	.word	0x2000021c

0800171c <GetCompassMeasurement>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GetCompassMeasurement */
void GetCompassMeasurement(void *argument)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetCompassMeasurement */
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 8001724:	2001      	movs	r0, #1
 8001726:	f005 fe7d 	bl	8007424 <osDelay>
 800172a:	e7fb      	b.n	8001724 <GetCompassMeasurement+0x8>

0800172c <Callback01>:
  /* USER CODE END GetCompassMeasurement */
}

/* Callback01 function */
void Callback01(void *argument)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */
  /* USER CODE END Callback01 */
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <Callback02>:

/* Callback02 function */
void Callback02(void *argument)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback02 */

	Engine(STOP);
 8001748:	2004      	movs	r0, #4
 800174a:	f7ff fbbb 	bl	8000ec4 <Engine>

  /* USER CODE END Callback02 */
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b088      	sub	sp, #32
 800175c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175e:	f107 030c 	add.w	r3, r7, #12
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]
 800176c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800176e:	4b32      	ldr	r3, [pc, #200]	; (8001838 <MX_GPIO_Init+0xe0>)
 8001770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001772:	4a31      	ldr	r2, [pc, #196]	; (8001838 <MX_GPIO_Init+0xe0>)
 8001774:	f043 0304 	orr.w	r3, r3, #4
 8001778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800177a:	4b2f      	ldr	r3, [pc, #188]	; (8001838 <MX_GPIO_Init+0xe0>)
 800177c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177e:	f003 0304 	and.w	r3, r3, #4
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001786:	4b2c      	ldr	r3, [pc, #176]	; (8001838 <MX_GPIO_Init+0xe0>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178a:	4a2b      	ldr	r2, [pc, #172]	; (8001838 <MX_GPIO_Init+0xe0>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001792:	4b29      	ldr	r3, [pc, #164]	; (8001838 <MX_GPIO_Init+0xe0>)
 8001794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800179e:	4b26      	ldr	r3, [pc, #152]	; (8001838 <MX_GPIO_Init+0xe0>)
 80017a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a2:	4a25      	ldr	r2, [pc, #148]	; (8001838 <MX_GPIO_Init+0xe0>)
 80017a4:	f043 0302 	orr.w	r3, r3, #2
 80017a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017aa:	4b23      	ldr	r3, [pc, #140]	; (8001838 <MX_GPIO_Init+0xe0>)
 80017ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	603b      	str	r3, [r7, #0]
 80017b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Engine_IN4_Pin|Engine_IN3_Pin, GPIO_PIN_RESET);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2103      	movs	r1, #3
 80017ba:	4820      	ldr	r0, [pc, #128]	; (800183c <MX_GPIO_Init+0xe4>)
 80017bc:	f001 fa0c 	bl	8002bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Engine_IN1_Pin|LD2_Pin|Enable_A_Pin, GPIO_PIN_RESET);
 80017c0:	2200      	movs	r2, #0
 80017c2:	f44f 6186 	mov.w	r1, #1072	; 0x430
 80017c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ca:	f001 fa05 	bl	8002bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Engine_IN2_Pin|Enable_B_Pin, GPIO_PIN_RESET);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2109      	movs	r1, #9
 80017d2:	481b      	ldr	r0, [pc, #108]	; (8001840 <MX_GPIO_Init+0xe8>)
 80017d4:	f001 fa00 	bl	8002bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Engine_IN4_Pin|Engine_IN3_Pin;
 80017d8:	2303      	movs	r3, #3
 80017da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017dc:	2301      	movs	r3, #1
 80017de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	4619      	mov	r1, r3
 80017ee:	4813      	ldr	r0, [pc, #76]	; (800183c <MX_GPIO_Init+0xe4>)
 80017f0:	f001 f848 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Engine_IN1_Pin|LD2_Pin|Enable_A_Pin;
 80017f4:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80017f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fa:	2301      	movs	r3, #1
 80017fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	2300      	movs	r3, #0
 8001804:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001806:	f107 030c 	add.w	r3, r7, #12
 800180a:	4619      	mov	r1, r3
 800180c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001810:	f001 f838 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Engine_IN2_Pin|Enable_B_Pin;
 8001814:	2309      	movs	r3, #9
 8001816:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001818:	2301      	movs	r3, #1
 800181a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	2300      	movs	r3, #0
 8001822:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001824:	f107 030c 	add.w	r3, r7, #12
 8001828:	4619      	mov	r1, r3
 800182a:	4805      	ldr	r0, [pc, #20]	; (8001840 <MX_GPIO_Init+0xe8>)
 800182c:	f001 f82a 	bl	8002884 <HAL_GPIO_Init>

}
 8001830:	bf00      	nop
 8001832:	3720      	adds	r7, #32
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40021000 	.word	0x40021000
 800183c:	48000800 	.word	0x48000800
 8001840:	48000400 	.word	0x48000400

08001844 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001848:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <MX_I2C1_Init+0x74>)
 800184a:	4a1c      	ldr	r2, [pc, #112]	; (80018bc <MX_I2C1_Init+0x78>)
 800184c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 800184e:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <MX_I2C1_Init+0x74>)
 8001850:	4a1b      	ldr	r2, [pc, #108]	; (80018c0 <MX_I2C1_Init+0x7c>)
 8001852:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001854:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <MX_I2C1_Init+0x74>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800185a:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <MX_I2C1_Init+0x74>)
 800185c:	2201      	movs	r2, #1
 800185e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001860:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <MX_I2C1_Init+0x74>)
 8001862:	2200      	movs	r2, #0
 8001864:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001866:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <MX_I2C1_Init+0x74>)
 8001868:	2200      	movs	r2, #0
 800186a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <MX_I2C1_Init+0x74>)
 800186e:	2200      	movs	r2, #0
 8001870:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001872:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <MX_I2C1_Init+0x74>)
 8001874:	2200      	movs	r2, #0
 8001876:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001878:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <MX_I2C1_Init+0x74>)
 800187a:	2200      	movs	r2, #0
 800187c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800187e:	480e      	ldr	r0, [pc, #56]	; (80018b8 <MX_I2C1_Init+0x74>)
 8001880:	f001 f9c2 	bl	8002c08 <HAL_I2C_Init>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800188a:	f000 f9cf 	bl	8001c2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800188e:	2100      	movs	r1, #0
 8001890:	4809      	ldr	r0, [pc, #36]	; (80018b8 <MX_I2C1_Init+0x74>)
 8001892:	f001 fa54 	bl	8002d3e <HAL_I2CEx_ConfigAnalogFilter>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800189c:	f000 f9c6 	bl	8001c2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80018a0:	2100      	movs	r1, #0
 80018a2:	4805      	ldr	r0, [pc, #20]	; (80018b8 <MX_I2C1_Init+0x74>)
 80018a4:	f001 fa96 	bl	8002dd4 <HAL_I2CEx_ConfigDigitalFilter>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80018ae:	f000 f9bd 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	2000026c 	.word	0x2000026c
 80018bc:	40005400 	.word	0x40005400
 80018c0:	00702991 	.word	0x00702991

080018c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b0ac      	sub	sp, #176	; 0xb0
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	2288      	movs	r2, #136	; 0x88
 80018e2:	2100      	movs	r1, #0
 80018e4:	4618      	mov	r0, r3
 80018e6:	f00a f8be 	bl	800ba66 <memset>
  if(i2cHandle->Instance==I2C1)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a21      	ldr	r2, [pc, #132]	; (8001974 <HAL_I2C_MspInit+0xb0>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d13b      	bne.n	800196c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80018f4:	2340      	movs	r3, #64	; 0x40
 80018f6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80018f8:	2300      	movs	r3, #0
 80018fa:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	4618      	mov	r0, r3
 8001902:	f002 f949 	bl	8003b98 <HAL_RCCEx_PeriphCLKConfig>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800190c:	f000 f98e 	bl	8001c2c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001910:	4b19      	ldr	r3, [pc, #100]	; (8001978 <HAL_I2C_MspInit+0xb4>)
 8001912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001914:	4a18      	ldr	r2, [pc, #96]	; (8001978 <HAL_I2C_MspInit+0xb4>)
 8001916:	f043 0302 	orr.w	r3, r3, #2
 800191a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800191c:	4b16      	ldr	r3, [pc, #88]	; (8001978 <HAL_I2C_MspInit+0xb4>)
 800191e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001928:	f44f 7340 	mov.w	r3, #768	; 0x300
 800192c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001930:	2312      	movs	r3, #18
 8001932:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193c:	2303      	movs	r3, #3
 800193e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001942:	2304      	movs	r3, #4
 8001944:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001948:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800194c:	4619      	mov	r1, r3
 800194e:	480b      	ldr	r0, [pc, #44]	; (800197c <HAL_I2C_MspInit+0xb8>)
 8001950:	f000 ff98 	bl	8002884 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001954:	4b08      	ldr	r3, [pc, #32]	; (8001978 <HAL_I2C_MspInit+0xb4>)
 8001956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001958:	4a07      	ldr	r2, [pc, #28]	; (8001978 <HAL_I2C_MspInit+0xb4>)
 800195a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800195e:	6593      	str	r3, [r2, #88]	; 0x58
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <HAL_I2C_MspInit+0xb4>)
 8001962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800196c:	bf00      	nop
 800196e:	37b0      	adds	r7, #176	; 0xb0
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40005400 	.word	0x40005400
 8001978:	40021000 	.word	0x40021000
 800197c:	48000400 	.word	0x48000400

08001980 <calc_pulse>:

static volatile uint32_t received_value;
static int received_bits;

static pulse_t calc_pulse(uint32_t time)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	if (time < 250)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2bf9      	cmp	r3, #249	; 0xf9
 800198c:	d801      	bhi.n	8001992 <calc_pulse+0x12>
		return PULSE_ERROR;
 800198e:	2305      	movs	r3, #5
 8001990:	e021      	b.n	80019d6 <calc_pulse+0x56>
	else if (time < 1200)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001998:	d201      	bcs.n	800199e <calc_pulse+0x1e>
		return PULSE_SHORT;
 800199a:	2304      	movs	r3, #4
 800199c:	e01b      	b.n	80019d6 <calc_pulse+0x56>
	else if (time < 2000)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80019a4:	d201      	bcs.n	80019aa <calc_pulse+0x2a>
		return PULSE_LONG;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e015      	b.n	80019d6 <calc_pulse+0x56>
	else if (time < 3000)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d801      	bhi.n	80019b8 <calc_pulse+0x38>
		return PULSE_2MS;
 80019b4:	2302      	movs	r3, #2
 80019b6:	e00e      	b.n	80019d6 <calc_pulse+0x56>
	else if (time < 6000)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f241 726f 	movw	r2, #5999	; 0x176f
 80019be:	4293      	cmp	r3, r2
 80019c0:	d801      	bhi.n	80019c6 <calc_pulse+0x46>
		return PULSE_4MS;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e007      	b.n	80019d6 <calc_pulse+0x56>
	else if (time < 12000)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f642 62df 	movw	r2, #11999	; 0x2edf
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d801      	bhi.n	80019d4 <calc_pulse+0x54>
		return PULSE_9MS;
 80019d0:	2300      	movs	r3, #0
 80019d2:	e000      	b.n	80019d6 <calc_pulse+0x56>
	else
		return PULSE_ERROR;
 80019d4:	2305      	movs	r3, #5
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <ir_tim_interrupt>:

void ir_tim_interrupt(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
	pulse_t pulse;

	if (received_bits >= 32)
 80019ea:	4b27      	ldr	r3, [pc, #156]	; (8001a88 <ir_tim_interrupt+0xa4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2b1f      	cmp	r3, #31
 80019f0:	dc43      	bgt.n	8001a7a <ir_tim_interrupt+0x96>
		return;

	pulse = calc_pulse(HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1));
 80019f2:	2100      	movs	r1, #0
 80019f4:	4825      	ldr	r0, [pc, #148]	; (8001a8c <ir_tim_interrupt+0xa8>)
 80019f6:	f003 fe89 	bl	800570c <HAL_TIM_ReadCapturedValue>
 80019fa:	4603      	mov	r3, r0
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ffbf 	bl	8001980 <calc_pulse>
 8001a02:	4603      	mov	r3, r0
 8001a04:	71fb      	strb	r3, [r7, #7]

	switch (pulse) {
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	d831      	bhi.n	8001a72 <ir_tim_interrupt+0x8e>
 8001a0e:	a201      	add	r2, pc, #4	; (adr r2, 8001a14 <ir_tim_interrupt+0x30>)
 8001a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a14:	08001a55 	.word	0x08001a55
 8001a18:	08001a63 	.word	0x08001a63
 8001a1c:	08001a3b 	.word	0x08001a3b
 8001a20:	08001a25 	.word	0x08001a25
	case PULSE_SHORT:
		received_value = received_value >> 1;
 8001a24:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <ir_tim_interrupt+0xac>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	085b      	lsrs	r3, r3, #1
 8001a2a:	4a19      	ldr	r2, [pc, #100]	; (8001a90 <ir_tim_interrupt+0xac>)
 8001a2c:	6013      	str	r3, [r2, #0]
		received_bits++;
 8001a2e:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <ir_tim_interrupt+0xa4>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	3301      	adds	r3, #1
 8001a34:	4a14      	ldr	r2, [pc, #80]	; (8001a88 <ir_tim_interrupt+0xa4>)
 8001a36:	6013      	str	r3, [r2, #0]
		break;
 8001a38:	e022      	b.n	8001a80 <ir_tim_interrupt+0x9c>
	case PULSE_LONG:
		received_value = (received_value >> 1) | 0x80000000;
 8001a3a:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <ir_tim_interrupt+0xac>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	085b      	lsrs	r3, r3, #1
 8001a40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001a44:	4a12      	ldr	r2, [pc, #72]	; (8001a90 <ir_tim_interrupt+0xac>)
 8001a46:	6013      	str	r3, [r2, #0]
		received_bits++;
 8001a48:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <ir_tim_interrupt+0xa4>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	4a0e      	ldr	r2, [pc, #56]	; (8001a88 <ir_tim_interrupt+0xa4>)
 8001a50:	6013      	str	r3, [r2, #0]
		break;
 8001a52:	e015      	b.n	8001a80 <ir_tim_interrupt+0x9c>
	case PULSE_4MS:
		received_value = 0;
 8001a54:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <ir_tim_interrupt+0xac>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
		received_bits = 0;
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <ir_tim_interrupt+0xa4>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
		break;
 8001a60:	e00e      	b.n	8001a80 <ir_tim_interrupt+0x9c>
	case PULSE_2MS:
		if (received_bits == 0)
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <ir_tim_interrupt+0xa4>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d109      	bne.n	8001a7e <ir_tim_interrupt+0x9a>
			received_bits = 32;
 8001a6a:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <ir_tim_interrupt+0xa4>)
 8001a6c:	2220      	movs	r2, #32
 8001a6e:	601a      	str	r2, [r3, #0]
		break;
 8001a70:	e005      	b.n	8001a7e <ir_tim_interrupt+0x9a>
	default:
		received_bits = 0;
 8001a72:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <ir_tim_interrupt+0xa4>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
		break;
 8001a78:	e002      	b.n	8001a80 <ir_tim_interrupt+0x9c>
		return;
 8001a7a:	bf00      	nop
 8001a7c:	e000      	b.n	8001a80 <ir_tim_interrupt+0x9c>
		break;
 8001a7e:	bf00      	nop
	}
}
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	200002c4 	.word	0x200002c4
 8001a8c:	20000364 	.word	0x20000364
 8001a90:	200002c0 	.word	0x200002c0

08001a94 <ir_init>:

void ir_init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start(&htim3);
 8001a98:	4804      	ldr	r0, [pc, #16]	; (8001aac <ir_init+0x18>)
 8001a9a:	f002 fd91 	bl	80045c0 <HAL_TIM_Base_Start>
	  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4802      	ldr	r0, [pc, #8]	; (8001aac <ir_init+0x18>)
 8001aa2:	f003 f92b 	bl	8004cfc <HAL_TIM_IC_Start_IT>
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000364 	.word	0x20000364

08001ab0 <ir_read>:

int ir_read(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
	if (received_bits != 32)
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <ir_read+0x30>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b20      	cmp	r3, #32
 8001abc:	d002      	beq.n	8001ac4 <ir_read+0x14>
		return -1;
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac2:	e007      	b.n	8001ad4 <ir_read+0x24>

	uint8_t value = received_value >> 16;
 8001ac4:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <ir_read+0x34>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	0c1b      	lsrs	r3, r3, #16
 8001aca:	71fb      	strb	r3, [r7, #7]
	received_bits = 0;
 8001acc:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <ir_read+0x30>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
	return value;
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	200002c4 	.word	0x200002c4
 8001ae4:	200002c0 	.word	0x200002c0

08001ae8 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b0a      	cmp	r3, #10
 8001af4:	d109      	bne.n	8001b0a <__io_putchar+0x22>
        uint8_t ch2 = '\r';
 8001af6:	230d      	movs	r3, #13
 8001af8:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 8001afa:	f107 010f 	add.w	r1, r7, #15
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295
 8001b02:	2201      	movs	r2, #1
 8001b04:	4807      	ldr	r0, [pc, #28]	; (8001b24 <__io_putchar+0x3c>)
 8001b06:	f004 fd4b 	bl	80065a0 <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001b0a:	1d39      	adds	r1, r7, #4
 8001b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b10:	2201      	movs	r2, #1
 8001b12:	4804      	ldr	r0, [pc, #16]	; (8001b24 <__io_putchar+0x3c>)
 8001b14:	f004 fd44 	bl	80065a0 <HAL_UART_Transmit>
    return 1;
 8001b18:	2301      	movs	r3, #1
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200003fc 	.word	0x200003fc

08001b28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b2c:	f000 fd8f 	bl	800264e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b30:	f000 f817 	bl	8001b62 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b34:	f7ff fe10 	bl	8001758 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b38:	f000 fcd4 	bl	80024e4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001b3c:	f000 fa2a 	bl	8001f94 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b40:	f000 fad2 	bl	80020e8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001b44:	f000 fb5c 	bl	8002200 <MX_TIM4_Init>
  MX_I2C1_Init();
 8001b48:	f7ff fe7c 	bl	8001844 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  EnginesInit();
 8001b4c:	f7ff f9e4 	bl	8000f18 <EnginesInit>

  ir_init();
 8001b50:	f7ff ffa0 	bl	8001a94 <ir_init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001b54:	f005 fb8a 	bl	800726c <osKernelInitialize>
  MX_FREERTOS_Init();
 8001b58:	f7ff fb12 	bl	8001180 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001b5c:	f005 fbaa 	bl	80072b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <main+0x38>

08001b62 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b096      	sub	sp, #88	; 0x58
 8001b66:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	2244      	movs	r2, #68	; 0x44
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4618      	mov	r0, r3
 8001b72:	f009 ff78 	bl	800ba66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b76:	463b      	mov	r3, r7
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b84:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b88:	f001 f97e 	bl	8002e88 <HAL_PWREx_ControlVoltageScaling>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001b92:	f000 f84b 	bl	8001c2c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001b96:	2310      	movs	r3, #16
 8001b98:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001ba2:	2360      	movs	r3, #96	; 0x60
 8001ba4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001baa:	2301      	movs	r3, #1
 8001bac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001bb2:	2328      	movs	r3, #40	; 0x28
 8001bb4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001bb6:	2307      	movs	r3, #7
 8001bb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bc2:	f107 0314 	add.w	r3, r7, #20
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f001 f9b4 	bl	8002f34 <HAL_RCC_OscConfig>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001bd2:	f000 f82b 	bl	8001c2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bd6:	230f      	movs	r3, #15
 8001bd8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bde:	2300      	movs	r3, #0
 8001be0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001be6:	2300      	movs	r3, #0
 8001be8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001bea:	463b      	mov	r3, r7
 8001bec:	2104      	movs	r1, #4
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f001 fd7c 	bl	80036ec <HAL_RCC_ClockConfig>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001bfa:	f000 f817 	bl	8001c2c <Error_Handler>
  }
}
 8001bfe:	bf00      	nop
 8001c00:	3758      	adds	r7, #88	; 0x58
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
	...

08001c08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a04      	ldr	r2, [pc, #16]	; (8001c28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d101      	bne.n	8001c1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c1a:	f000 fd31 	bl	8002680 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40001400 	.word	0x40001400

08001c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c30:	b672      	cpsid	i
}
 8001c32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c34:	e7fe      	b.n	8001c34 <Error_Handler+0x8>
	...

08001c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <HAL_MspInit+0x4c>)
 8001c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c42:	4a10      	ldr	r2, [pc, #64]	; (8001c84 <HAL_MspInit+0x4c>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	6613      	str	r3, [r2, #96]	; 0x60
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <HAL_MspInit+0x4c>)
 8001c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	607b      	str	r3, [r7, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c56:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <HAL_MspInit+0x4c>)
 8001c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	; (8001c84 <HAL_MspInit+0x4c>)
 8001c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c60:	6593      	str	r3, [r2, #88]	; 0x58
 8001c62:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <HAL_MspInit+0x4c>)
 8001c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6a:	603b      	str	r3, [r7, #0]
 8001c6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	210f      	movs	r1, #15
 8001c72:	f06f 0001 	mvn.w	r0, #1
 8001c76:	f000 fddb 	bl	8002830 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40021000 	.word	0x40021000

08001c88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08e      	sub	sp, #56	; 0x38
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001c90:	2300      	movs	r3, #0
 8001c92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001c96:	4b34      	ldr	r3, [pc, #208]	; (8001d68 <HAL_InitTick+0xe0>)
 8001c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9a:	4a33      	ldr	r2, [pc, #204]	; (8001d68 <HAL_InitTick+0xe0>)
 8001c9c:	f043 0320 	orr.w	r3, r3, #32
 8001ca0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ca2:	4b31      	ldr	r3, [pc, #196]	; (8001d68 <HAL_InitTick+0xe0>)
 8001ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca6:	f003 0320 	and.w	r3, r3, #32
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cae:	f107 0210 	add.w	r2, r7, #16
 8001cb2:	f107 0314 	add.w	r3, r7, #20
 8001cb6:	4611      	mov	r1, r2
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f001 fedb 	bl	8003a74 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d103      	bne.n	8001cd0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001cc8:	f001 fea8 	bl	8003a1c <HAL_RCC_GetPCLK1Freq>
 8001ccc:	6378      	str	r0, [r7, #52]	; 0x34
 8001cce:	e004      	b.n	8001cda <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001cd0:	f001 fea4 	bl	8003a1c <HAL_RCC_GetPCLK1Freq>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cdc:	4a23      	ldr	r2, [pc, #140]	; (8001d6c <HAL_InitTick+0xe4>)
 8001cde:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce2:	0c9b      	lsrs	r3, r3, #18
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001ce8:	4b21      	ldr	r3, [pc, #132]	; (8001d70 <HAL_InitTick+0xe8>)
 8001cea:	4a22      	ldr	r2, [pc, #136]	; (8001d74 <HAL_InitTick+0xec>)
 8001cec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001cee:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <HAL_InitTick+0xe8>)
 8001cf0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cf4:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001cf6:	4a1e      	ldr	r2, [pc, #120]	; (8001d70 <HAL_InitTick+0xe8>)
 8001cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cfa:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001cfc:	4b1c      	ldr	r3, [pc, #112]	; (8001d70 <HAL_InitTick+0xe8>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d02:	4b1b      	ldr	r3, [pc, #108]	; (8001d70 <HAL_InitTick+0xe8>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d08:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <HAL_InitTick+0xe8>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8001d0e:	4818      	ldr	r0, [pc, #96]	; (8001d70 <HAL_InitTick+0xe8>)
 8001d10:	f002 fbfe 	bl	8004510 <HAL_TIM_Base_Init>
 8001d14:	4603      	mov	r3, r0
 8001d16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001d1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d11b      	bne.n	8001d5a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001d22:	4813      	ldr	r0, [pc, #76]	; (8001d70 <HAL_InitTick+0xe8>)
 8001d24:	f002 fcb4 	bl	8004690 <HAL_TIM_Base_Start_IT>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001d2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d111      	bne.n	8001d5a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001d36:	2037      	movs	r0, #55	; 0x37
 8001d38:	f000 fd96 	bl	8002868 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b0f      	cmp	r3, #15
 8001d40:	d808      	bhi.n	8001d54 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001d42:	2200      	movs	r2, #0
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	2037      	movs	r0, #55	; 0x37
 8001d48:	f000 fd72 	bl	8002830 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d4c:	4a0a      	ldr	r2, [pc, #40]	; (8001d78 <HAL_InitTick+0xf0>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	e002      	b.n	8001d5a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001d5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3738      	adds	r7, #56	; 0x38
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	431bde83 	.word	0x431bde83
 8001d70:	200002c8 	.word	0x200002c8
 8001d74:	40001400 	.word	0x40001400
 8001d78:	20000008 	.word	0x20000008

08001d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d80:	e7fe      	b.n	8001d80 <NMI_Handler+0x4>

08001d82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d86:	e7fe      	b.n	8001d86 <HardFault_Handler+0x4>

08001d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <MemManage_Handler+0x4>

08001d8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d92:	e7fe      	b.n	8001d92 <BusFault_Handler+0x4>

08001d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d98:	e7fe      	b.n	8001d98 <UsageFault_Handler+0x4>

08001d9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001dac:	4802      	ldr	r0, [pc, #8]	; (8001db8 <TIM2_IRQHandler+0x10>)
 8001dae:	f003 f8ef 	bl	8004f90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000318 	.word	0x20000318

08001dbc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001dc0:	4802      	ldr	r0, [pc, #8]	; (8001dcc <TIM3_IRQHandler+0x10>)
 8001dc2:	f003 f8e5 	bl	8004f90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000364 	.word	0x20000364

08001dd0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001dd4:	4802      	ldr	r0, [pc, #8]	; (8001de0 <TIM7_IRQHandler+0x10>)
 8001dd6:	f003 f8db 	bl	8004f90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200002c8 	.word	0x200002c8

08001de4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return 1;
 8001de8:	2301      	movs	r3, #1
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <_kill>:

int _kill(int pid, int sig)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dfe:	f009 feed 	bl	800bbdc <__errno>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2216      	movs	r2, #22
 8001e06:	601a      	str	r2, [r3, #0]
  return -1;
 8001e08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <_exit>:

void _exit (int status)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff ffe7 	bl	8001df4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e26:	e7fe      	b.n	8001e26 <_exit+0x12>

08001e28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	e00a      	b.n	8001e50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e3a:	f3af 8000 	nop.w
 8001e3e:	4601      	mov	r1, r0
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	1c5a      	adds	r2, r3, #1
 8001e44:	60ba      	str	r2, [r7, #8]
 8001e46:	b2ca      	uxtb	r2, r1
 8001e48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	dbf0      	blt.n	8001e3a <_read+0x12>
  }

  return len;
 8001e58:	687b      	ldr	r3, [r7, #4]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b086      	sub	sp, #24
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	e009      	b.n	8001e88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	1c5a      	adds	r2, r3, #1
 8001e78:	60ba      	str	r2, [r7, #8]
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff fe33 	bl	8001ae8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	3301      	adds	r3, #1
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	dbf1      	blt.n	8001e74 <_write+0x12>
  }
  return len;
 8001e90:	687b      	ldr	r3, [r7, #4]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <_close>:

int _close(int file)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ea2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
 8001eba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ec2:	605a      	str	r2, [r3, #4]
  return 0;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <_isatty>:

int _isatty(int file)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001eda:	2301      	movs	r3, #1
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
	...

08001f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f0c:	4a14      	ldr	r2, [pc, #80]	; (8001f60 <_sbrk+0x5c>)
 8001f0e:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <_sbrk+0x60>)
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f18:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <_sbrk+0x64>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d102      	bne.n	8001f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f20:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <_sbrk+0x64>)
 8001f22:	4a12      	ldr	r2, [pc, #72]	; (8001f6c <_sbrk+0x68>)
 8001f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f26:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <_sbrk+0x64>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d207      	bcs.n	8001f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f34:	f009 fe52 	bl	800bbdc <__errno>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	220c      	movs	r2, #12
 8001f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f42:	e009      	b.n	8001f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <_sbrk+0x64>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f4a:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <_sbrk+0x64>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	4a05      	ldr	r2, [pc, #20]	; (8001f68 <_sbrk+0x64>)
 8001f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f56:	68fb      	ldr	r3, [r7, #12]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20018000 	.word	0x20018000
 8001f64:	00000400 	.word	0x00000400
 8001f68:	20000314 	.word	0x20000314
 8001f6c:	20006200 	.word	0x20006200

08001f70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f74:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <SystemInit+0x20>)
 8001f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f7a:	4a05      	ldr	r2, [pc, #20]	; (8001f90 <SystemInit+0x20>)
 8001f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b092      	sub	sp, #72	; 0x48
 8001f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f9a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	605a      	str	r2, [r3, #4]
 8001fa4:	609a      	str	r2, [r3, #8]
 8001fa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fa8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001fb4:	f107 031c 	add.w	r3, r7, #28
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fc2:	463b      	mov	r3, r7
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]
 8001fd0:	615a      	str	r2, [r3, #20]
 8001fd2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fd4:	4b42      	ldr	r3, [pc, #264]	; (80020e0 <MX_TIM2_Init+0x14c>)
 8001fd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001fdc:	4b40      	ldr	r3, [pc, #256]	; (80020e0 <MX_TIM2_Init+0x14c>)
 8001fde:	224f      	movs	r2, #79	; 0x4f
 8001fe0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe2:	4b3f      	ldr	r3, [pc, #252]	; (80020e0 <MX_TIM2_Init+0x14c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999999;
 8001fe8:	4b3d      	ldr	r3, [pc, #244]	; (80020e0 <MX_TIM2_Init+0x14c>)
 8001fea:	4a3e      	ldr	r2, [pc, #248]	; (80020e4 <MX_TIM2_Init+0x150>)
 8001fec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fee:	4b3c      	ldr	r3, [pc, #240]	; (80020e0 <MX_TIM2_Init+0x14c>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ff4:	4b3a      	ldr	r3, [pc, #232]	; (80020e0 <MX_TIM2_Init+0x14c>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ffa:	4839      	ldr	r0, [pc, #228]	; (80020e0 <MX_TIM2_Init+0x14c>)
 8001ffc:	f002 fa88 	bl	8004510 <HAL_TIM_Base_Init>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8002006:	f7ff fe11 	bl	8001c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800200a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800200e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002010:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002014:	4619      	mov	r1, r3
 8002016:	4832      	ldr	r0, [pc, #200]	; (80020e0 <MX_TIM2_Init+0x14c>)
 8002018:	f003 fa6c 	bl	80054f4 <HAL_TIM_ConfigClockSource>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8002022:	f7ff fe03 	bl	8001c2c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002026:	482e      	ldr	r0, [pc, #184]	; (80020e0 <MX_TIM2_Init+0x14c>)
 8002028:	f002 fd0a 	bl	8004a40 <HAL_TIM_IC_Init>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8002032:	f7ff fdfb 	bl	8001c2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002036:	482a      	ldr	r0, [pc, #168]	; (80020e0 <MX_TIM2_Init+0x14c>)
 8002038:	f002 fb9a 	bl	8004770 <HAL_TIM_PWM_Init>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002042:	f7ff fdf3 	bl	8001c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002046:	2300      	movs	r3, #0
 8002048:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800204a:	2300      	movs	r3, #0
 800204c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800204e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002052:	4619      	mov	r1, r3
 8002054:	4822      	ldr	r0, [pc, #136]	; (80020e0 <MX_TIM2_Init+0x14c>)
 8002056:	f004 f9af 	bl	80063b8 <HAL_TIMEx_MasterConfigSynchronization>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8002060:	f7ff fde4 	bl	8001c2c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002064:	2300      	movs	r3, #0
 8002066:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002068:	2301      	movs	r3, #1
 800206a:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800206c:	2300      	movs	r3, #0
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 8002070:	2300      	movs	r3, #0
 8002072:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002074:	f107 031c 	add.w	r3, r7, #28
 8002078:	2200      	movs	r2, #0
 800207a:	4619      	mov	r1, r3
 800207c:	4818      	ldr	r0, [pc, #96]	; (80020e0 <MX_TIM2_Init+0x14c>)
 800207e:	f003 f889 	bl	8005194 <HAL_TIM_IC_ConfigChannel>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 8002088:	f7ff fdd0 	bl	8001c2c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800208c:	2302      	movs	r3, #2
 800208e:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002090:	2302      	movs	r3, #2
 8002092:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002094:	f107 031c 	add.w	r3, r7, #28
 8002098:	2204      	movs	r2, #4
 800209a:	4619      	mov	r1, r3
 800209c:	4810      	ldr	r0, [pc, #64]	; (80020e0 <MX_TIM2_Init+0x14c>)
 800209e:	f003 f879 	bl	8005194 <HAL_TIM_IC_ConfigChannel>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 80020a8:	f7ff fdc0 	bl	8001c2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020ac:	2360      	movs	r3, #96	; 0x60
 80020ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 80020b0:	230a      	movs	r3, #10
 80020b2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020b4:	2300      	movs	r3, #0
 80020b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020b8:	2300      	movs	r3, #0
 80020ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020bc:	463b      	mov	r3, r7
 80020be:	2208      	movs	r2, #8
 80020c0:	4619      	mov	r1, r3
 80020c2:	4807      	ldr	r0, [pc, #28]	; (80020e0 <MX_TIM2_Init+0x14c>)
 80020c4:	f003 f902 	bl	80052cc <HAL_TIM_PWM_ConfigChannel>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_TIM2_Init+0x13e>
  {
    Error_Handler();
 80020ce:	f7ff fdad 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80020d2:	4803      	ldr	r0, [pc, #12]	; (80020e0 <MX_TIM2_Init+0x14c>)
 80020d4:	f000 f9ac 	bl	8002430 <HAL_TIM_MspPostInit>

}
 80020d8:	bf00      	nop
 80020da:	3748      	adds	r7, #72	; 0x48
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	20000318 	.word	0x20000318
 80020e4:	000f423f 	.word	0x000f423f

080020e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b090      	sub	sp, #64	; 0x40
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]
 80020f8:	609a      	str	r2, [r3, #8]
 80020fa:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80020fc:	f107 031c 	add.w	r3, r7, #28
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	60da      	str	r2, [r3, #12]
 800210a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800210c:	f107 0310 	add.w	r3, r7, #16
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002118:	463b      	mov	r3, r7
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	605a      	str	r2, [r3, #4]
 8002120:	609a      	str	r2, [r3, #8]
 8002122:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002124:	4b34      	ldr	r3, [pc, #208]	; (80021f8 <MX_TIM3_Init+0x110>)
 8002126:	4a35      	ldr	r2, [pc, #212]	; (80021fc <MX_TIM3_Init+0x114>)
 8002128:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 800212a:	4b33      	ldr	r3, [pc, #204]	; (80021f8 <MX_TIM3_Init+0x110>)
 800212c:	224f      	movs	r2, #79	; 0x4f
 800212e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002130:	4b31      	ldr	r3, [pc, #196]	; (80021f8 <MX_TIM3_Init+0x110>)
 8002132:	2200      	movs	r2, #0
 8002134:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002136:	4b30      	ldr	r3, [pc, #192]	; (80021f8 <MX_TIM3_Init+0x110>)
 8002138:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800213c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800213e:	4b2e      	ldr	r3, [pc, #184]	; (80021f8 <MX_TIM3_Init+0x110>)
 8002140:	2200      	movs	r2, #0
 8002142:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002144:	4b2c      	ldr	r3, [pc, #176]	; (80021f8 <MX_TIM3_Init+0x110>)
 8002146:	2200      	movs	r2, #0
 8002148:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800214a:	482b      	ldr	r0, [pc, #172]	; (80021f8 <MX_TIM3_Init+0x110>)
 800214c:	f002 f9e0 	bl	8004510 <HAL_TIM_Base_Init>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8002156:	f7ff fd69 	bl	8001c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800215a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800215e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002160:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002164:	4619      	mov	r1, r3
 8002166:	4824      	ldr	r0, [pc, #144]	; (80021f8 <MX_TIM3_Init+0x110>)
 8002168:	f003 f9c4 	bl	80054f4 <HAL_TIM_ConfigClockSource>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8002172:	f7ff fd5b 	bl	8001c2c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002176:	4820      	ldr	r0, [pc, #128]	; (80021f8 <MX_TIM3_Init+0x110>)
 8002178:	f002 fc62 	bl	8004a40 <HAL_TIM_IC_Init>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002182:	f7ff fd53 	bl	8001c2c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002186:	2304      	movs	r3, #4
 8002188:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 800218a:	2340      	movs	r3, #64	; 0x40
 800218c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800218e:	2300      	movs	r3, #0
 8002190:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8002192:	2300      	movs	r3, #0
 8002194:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8002196:	f107 031c 	add.w	r3, r7, #28
 800219a:	4619      	mov	r1, r3
 800219c:	4816      	ldr	r0, [pc, #88]	; (80021f8 <MX_TIM3_Init+0x110>)
 800219e:	f003 fa72 	bl	8005686 <HAL_TIM_SlaveConfigSynchro>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_TIM3_Init+0xc4>
  {
    Error_Handler();
 80021a8:	f7ff fd40 	bl	8001c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ac:	2300      	movs	r3, #0
 80021ae:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021b4:	f107 0310 	add.w	r3, r7, #16
 80021b8:	4619      	mov	r1, r3
 80021ba:	480f      	ldr	r0, [pc, #60]	; (80021f8 <MX_TIM3_Init+0x110>)
 80021bc:	f004 f8fc 	bl	80063b8 <HAL_TIMEx_MasterConfigSynchronization>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 80021c6:	f7ff fd31 	bl	8001c2c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80021ca:	2302      	movs	r3, #2
 80021cc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80021ce:	2301      	movs	r3, #1
 80021d0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80021d2:	2300      	movs	r3, #0
 80021d4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80021da:	463b      	mov	r3, r7
 80021dc:	2200      	movs	r2, #0
 80021de:	4619      	mov	r1, r3
 80021e0:	4805      	ldr	r0, [pc, #20]	; (80021f8 <MX_TIM3_Init+0x110>)
 80021e2:	f002 ffd7 	bl	8005194 <HAL_TIM_IC_ConfigChannel>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 80021ec:	f7ff fd1e 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80021f0:	bf00      	nop
 80021f2:	3740      	adds	r7, #64	; 0x40
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20000364 	.word	0x20000364
 80021fc:	40000400 	.word	0x40000400

08002200 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08e      	sub	sp, #56	; 0x38
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002206:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	605a      	str	r2, [r3, #4]
 8002210:	609a      	str	r2, [r3, #8]
 8002212:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002214:	f107 031c 	add.w	r3, r7, #28
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002220:	463b      	mov	r3, r7
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	605a      	str	r2, [r3, #4]
 8002228:	609a      	str	r2, [r3, #8]
 800222a:	60da      	str	r2, [r3, #12]
 800222c:	611a      	str	r2, [r3, #16]
 800222e:	615a      	str	r2, [r3, #20]
 8002230:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002232:	4b32      	ldr	r3, [pc, #200]	; (80022fc <MX_TIM4_Init+0xfc>)
 8002234:	4a32      	ldr	r2, [pc, #200]	; (8002300 <MX_TIM4_Init+0x100>)
 8002236:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 40-1;
 8002238:	4b30      	ldr	r3, [pc, #192]	; (80022fc <MX_TIM4_Init+0xfc>)
 800223a:	2227      	movs	r2, #39	; 0x27
 800223c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800223e:	4b2f      	ldr	r3, [pc, #188]	; (80022fc <MX_TIM4_Init+0xfc>)
 8002240:	2200      	movs	r2, #0
 8002242:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8002244:	4b2d      	ldr	r3, [pc, #180]	; (80022fc <MX_TIM4_Init+0xfc>)
 8002246:	2263      	movs	r2, #99	; 0x63
 8002248:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800224a:	4b2c      	ldr	r3, [pc, #176]	; (80022fc <MX_TIM4_Init+0xfc>)
 800224c:	2200      	movs	r2, #0
 800224e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002250:	4b2a      	ldr	r3, [pc, #168]	; (80022fc <MX_TIM4_Init+0xfc>)
 8002252:	2200      	movs	r2, #0
 8002254:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002256:	4829      	ldr	r0, [pc, #164]	; (80022fc <MX_TIM4_Init+0xfc>)
 8002258:	f002 f95a 	bl	8004510 <HAL_TIM_Base_Init>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002262:	f7ff fce3 	bl	8001c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002266:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800226a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800226c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002270:	4619      	mov	r1, r3
 8002272:	4822      	ldr	r0, [pc, #136]	; (80022fc <MX_TIM4_Init+0xfc>)
 8002274:	f003 f93e 	bl	80054f4 <HAL_TIM_ConfigClockSource>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800227e:	f7ff fcd5 	bl	8001c2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002282:	481e      	ldr	r0, [pc, #120]	; (80022fc <MX_TIM4_Init+0xfc>)
 8002284:	f002 fa74 	bl	8004770 <HAL_TIM_PWM_Init>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800228e:	f7ff fccd 	bl	8001c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002292:	2300      	movs	r3, #0
 8002294:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002296:	2300      	movs	r3, #0
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800229a:	f107 031c 	add.w	r3, r7, #28
 800229e:	4619      	mov	r1, r3
 80022a0:	4816      	ldr	r0, [pc, #88]	; (80022fc <MX_TIM4_Init+0xfc>)
 80022a2:	f004 f889 	bl	80063b8 <HAL_TIMEx_MasterConfigSynchronization>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80022ac:	f7ff fcbe 	bl	8001c2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022b0:	2360      	movs	r3, #96	; 0x60
 80022b2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80022b4:	2300      	movs	r3, #0
 80022b6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022b8:	2300      	movs	r3, #0
 80022ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022bc:	2300      	movs	r3, #0
 80022be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022c0:	463b      	mov	r3, r7
 80022c2:	2200      	movs	r2, #0
 80022c4:	4619      	mov	r1, r3
 80022c6:	480d      	ldr	r0, [pc, #52]	; (80022fc <MX_TIM4_Init+0xfc>)
 80022c8:	f003 f800 	bl	80052cc <HAL_TIM_PWM_ConfigChannel>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80022d2:	f7ff fcab 	bl	8001c2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022d6:	463b      	mov	r3, r7
 80022d8:	2204      	movs	r2, #4
 80022da:	4619      	mov	r1, r3
 80022dc:	4807      	ldr	r0, [pc, #28]	; (80022fc <MX_TIM4_Init+0xfc>)
 80022de:	f002 fff5 	bl	80052cc <HAL_TIM_PWM_ConfigChannel>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80022e8:	f7ff fca0 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80022ec:	4803      	ldr	r0, [pc, #12]	; (80022fc <MX_TIM4_Init+0xfc>)
 80022ee:	f000 f89f 	bl	8002430 <HAL_TIM_MspPostInit>

}
 80022f2:	bf00      	nop
 80022f4:	3738      	adds	r7, #56	; 0x38
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	200003b0 	.word	0x200003b0
 8002300:	40000800 	.word	0x40000800

08002304 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08c      	sub	sp, #48	; 0x30
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230c:	f107 031c 	add.w	r3, r7, #28
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002324:	d131      	bne.n	800238a <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002326:	4b3e      	ldr	r3, [pc, #248]	; (8002420 <HAL_TIM_Base_MspInit+0x11c>)
 8002328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232a:	4a3d      	ldr	r2, [pc, #244]	; (8002420 <HAL_TIM_Base_MspInit+0x11c>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	6593      	str	r3, [r2, #88]	; 0x58
 8002332:	4b3b      	ldr	r3, [pc, #236]	; (8002420 <HAL_TIM_Base_MspInit+0x11c>)
 8002334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	61bb      	str	r3, [r7, #24]
 800233c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233e:	4b38      	ldr	r3, [pc, #224]	; (8002420 <HAL_TIM_Base_MspInit+0x11c>)
 8002340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002342:	4a37      	ldr	r2, [pc, #220]	; (8002420 <HAL_TIM_Base_MspInit+0x11c>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800234a:	4b35      	ldr	r3, [pc, #212]	; (8002420 <HAL_TIM_Base_MspInit+0x11c>)
 800234c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002356:	2301      	movs	r3, #1
 8002358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235a:	2302      	movs	r3, #2
 800235c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002362:	2300      	movs	r3, #0
 8002364:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002366:	2301      	movs	r3, #1
 8002368:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236a:	f107 031c 	add.w	r3, r7, #28
 800236e:	4619      	mov	r1, r3
 8002370:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002374:	f000 fa86 	bl	8002884 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002378:	2200      	movs	r2, #0
 800237a:	2105      	movs	r1, #5
 800237c:	201c      	movs	r0, #28
 800237e:	f000 fa57 	bl	8002830 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002382:	201c      	movs	r0, #28
 8002384:	f000 fa70 	bl	8002868 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002388:	e046      	b.n	8002418 <HAL_TIM_Base_MspInit+0x114>
  else if(tim_baseHandle->Instance==TIM3)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a25      	ldr	r2, [pc, #148]	; (8002424 <HAL_TIM_Base_MspInit+0x120>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d130      	bne.n	80023f6 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002394:	4b22      	ldr	r3, [pc, #136]	; (8002420 <HAL_TIM_Base_MspInit+0x11c>)
 8002396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002398:	4a21      	ldr	r2, [pc, #132]	; (8002420 <HAL_TIM_Base_MspInit+0x11c>)
 800239a:	f043 0302 	orr.w	r3, r3, #2
 800239e:	6593      	str	r3, [r2, #88]	; 0x58
 80023a0:	4b1f      	ldr	r3, [pc, #124]	; (8002420 <HAL_TIM_Base_MspInit+0x11c>)
 80023a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ac:	4b1c      	ldr	r3, [pc, #112]	; (8002420 <HAL_TIM_Base_MspInit+0x11c>)
 80023ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b0:	4a1b      	ldr	r2, [pc, #108]	; (8002420 <HAL_TIM_Base_MspInit+0x11c>)
 80023b2:	f043 0302 	orr.w	r3, r3, #2
 80023b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023b8:	4b19      	ldr	r3, [pc, #100]	; (8002420 <HAL_TIM_Base_MspInit+0x11c>)
 80023ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80023c4:	2310      	movs	r3, #16
 80023c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c8:	2302      	movs	r3, #2
 80023ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d0:	2300      	movs	r3, #0
 80023d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023d4:	2302      	movs	r3, #2
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d8:	f107 031c 	add.w	r3, r7, #28
 80023dc:	4619      	mov	r1, r3
 80023de:	4812      	ldr	r0, [pc, #72]	; (8002428 <HAL_TIM_Base_MspInit+0x124>)
 80023e0:	f000 fa50 	bl	8002884 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80023e4:	2200      	movs	r2, #0
 80023e6:	2105      	movs	r1, #5
 80023e8:	201d      	movs	r0, #29
 80023ea:	f000 fa21 	bl	8002830 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80023ee:	201d      	movs	r0, #29
 80023f0:	f000 fa3a 	bl	8002868 <HAL_NVIC_EnableIRQ>
}
 80023f4:	e010      	b.n	8002418 <HAL_TIM_Base_MspInit+0x114>
  else if(tim_baseHandle->Instance==TIM4)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a0c      	ldr	r2, [pc, #48]	; (800242c <HAL_TIM_Base_MspInit+0x128>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d10b      	bne.n	8002418 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002400:	4b07      	ldr	r3, [pc, #28]	; (8002420 <HAL_TIM_Base_MspInit+0x11c>)
 8002402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002404:	4a06      	ldr	r2, [pc, #24]	; (8002420 <HAL_TIM_Base_MspInit+0x11c>)
 8002406:	f043 0304 	orr.w	r3, r3, #4
 800240a:	6593      	str	r3, [r2, #88]	; 0x58
 800240c:	4b04      	ldr	r3, [pc, #16]	; (8002420 <HAL_TIM_Base_MspInit+0x11c>)
 800240e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	68bb      	ldr	r3, [r7, #8]
}
 8002418:	bf00      	nop
 800241a:	3730      	adds	r7, #48	; 0x30
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40021000 	.word	0x40021000
 8002424:	40000400 	.word	0x40000400
 8002428:	48000400 	.word	0x48000400
 800242c:	40000800 	.word	0x40000800

08002430 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08a      	sub	sp, #40	; 0x28
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002438:	f107 0314 	add.w	r3, r7, #20
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	60da      	str	r2, [r3, #12]
 8002446:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002450:	d11d      	bne.n	800248e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002452:	4b21      	ldr	r3, [pc, #132]	; (80024d8 <HAL_TIM_MspPostInit+0xa8>)
 8002454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002456:	4a20      	ldr	r2, [pc, #128]	; (80024d8 <HAL_TIM_MspPostInit+0xa8>)
 8002458:	f043 0302 	orr.w	r3, r3, #2
 800245c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800245e:	4b1e      	ldr	r3, [pc, #120]	; (80024d8 <HAL_TIM_MspPostInit+0xa8>)
 8002460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	613b      	str	r3, [r7, #16]
 8002468:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800246a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800246e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002470:	2302      	movs	r3, #2
 8002472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002478:	2300      	movs	r3, #0
 800247a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800247c:	2301      	movs	r3, #1
 800247e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002480:	f107 0314 	add.w	r3, r7, #20
 8002484:	4619      	mov	r1, r3
 8002486:	4815      	ldr	r0, [pc, #84]	; (80024dc <HAL_TIM_MspPostInit+0xac>)
 8002488:	f000 f9fc 	bl	8002884 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800248c:	e020      	b.n	80024d0 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM4)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a13      	ldr	r2, [pc, #76]	; (80024e0 <HAL_TIM_MspPostInit+0xb0>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d11b      	bne.n	80024d0 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002498:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <HAL_TIM_MspPostInit+0xa8>)
 800249a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249c:	4a0e      	ldr	r2, [pc, #56]	; (80024d8 <HAL_TIM_MspPostInit+0xa8>)
 800249e:	f043 0302 	orr.w	r3, r3, #2
 80024a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <HAL_TIM_MspPostInit+0xa8>)
 80024a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024b0:	23c0      	movs	r3, #192	; 0xc0
 80024b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b4:	2302      	movs	r3, #2
 80024b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024bc:	2300      	movs	r3, #0
 80024be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80024c0:	2302      	movs	r3, #2
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024c4:	f107 0314 	add.w	r3, r7, #20
 80024c8:	4619      	mov	r1, r3
 80024ca:	4804      	ldr	r0, [pc, #16]	; (80024dc <HAL_TIM_MspPostInit+0xac>)
 80024cc:	f000 f9da 	bl	8002884 <HAL_GPIO_Init>
}
 80024d0:	bf00      	nop
 80024d2:	3728      	adds	r7, #40	; 0x28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40021000 	.word	0x40021000
 80024dc:	48000400 	.word	0x48000400
 80024e0:	40000800 	.word	0x40000800

080024e4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024e8:	4b14      	ldr	r3, [pc, #80]	; (800253c <MX_USART2_UART_Init+0x58>)
 80024ea:	4a15      	ldr	r2, [pc, #84]	; (8002540 <MX_USART2_UART_Init+0x5c>)
 80024ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80024ee:	4b13      	ldr	r3, [pc, #76]	; (800253c <MX_USART2_UART_Init+0x58>)
 80024f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024f6:	4b11      	ldr	r3, [pc, #68]	; (800253c <MX_USART2_UART_Init+0x58>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024fc:	4b0f      	ldr	r3, [pc, #60]	; (800253c <MX_USART2_UART_Init+0x58>)
 80024fe:	2200      	movs	r2, #0
 8002500:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002502:	4b0e      	ldr	r3, [pc, #56]	; (800253c <MX_USART2_UART_Init+0x58>)
 8002504:	2200      	movs	r2, #0
 8002506:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002508:	4b0c      	ldr	r3, [pc, #48]	; (800253c <MX_USART2_UART_Init+0x58>)
 800250a:	220c      	movs	r2, #12
 800250c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800250e:	4b0b      	ldr	r3, [pc, #44]	; (800253c <MX_USART2_UART_Init+0x58>)
 8002510:	2200      	movs	r2, #0
 8002512:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002514:	4b09      	ldr	r3, [pc, #36]	; (800253c <MX_USART2_UART_Init+0x58>)
 8002516:	2200      	movs	r2, #0
 8002518:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800251a:	4b08      	ldr	r3, [pc, #32]	; (800253c <MX_USART2_UART_Init+0x58>)
 800251c:	2200      	movs	r2, #0
 800251e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <MX_USART2_UART_Init+0x58>)
 8002522:	2200      	movs	r2, #0
 8002524:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002526:	4805      	ldr	r0, [pc, #20]	; (800253c <MX_USART2_UART_Init+0x58>)
 8002528:	f003 ffec 	bl	8006504 <HAL_UART_Init>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002532:	f7ff fb7b 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	200003fc 	.word	0x200003fc
 8002540:	40004400 	.word	0x40004400

08002544 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b0ac      	sub	sp, #176	; 0xb0
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800254c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	60da      	str	r2, [r3, #12]
 800255a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800255c:	f107 0314 	add.w	r3, r7, #20
 8002560:	2288      	movs	r2, #136	; 0x88
 8002562:	2100      	movs	r1, #0
 8002564:	4618      	mov	r0, r3
 8002566:	f009 fa7e 	bl	800ba66 <memset>
  if(uartHandle->Instance==USART2)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a21      	ldr	r2, [pc, #132]	; (80025f4 <HAL_UART_MspInit+0xb0>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d13b      	bne.n	80025ec <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002574:	2302      	movs	r3, #2
 8002576:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002578:	2300      	movs	r3, #0
 800257a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800257c:	f107 0314 	add.w	r3, r7, #20
 8002580:	4618      	mov	r0, r3
 8002582:	f001 fb09 	bl	8003b98 <HAL_RCCEx_PeriphCLKConfig>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800258c:	f7ff fb4e 	bl	8001c2c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002590:	4b19      	ldr	r3, [pc, #100]	; (80025f8 <HAL_UART_MspInit+0xb4>)
 8002592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002594:	4a18      	ldr	r2, [pc, #96]	; (80025f8 <HAL_UART_MspInit+0xb4>)
 8002596:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800259a:	6593      	str	r3, [r2, #88]	; 0x58
 800259c:	4b16      	ldr	r3, [pc, #88]	; (80025f8 <HAL_UART_MspInit+0xb4>)
 800259e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a4:	613b      	str	r3, [r7, #16]
 80025a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a8:	4b13      	ldr	r3, [pc, #76]	; (80025f8 <HAL_UART_MspInit+0xb4>)
 80025aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ac:	4a12      	ldr	r2, [pc, #72]	; (80025f8 <HAL_UART_MspInit+0xb4>)
 80025ae:	f043 0301 	orr.w	r3, r3, #1
 80025b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025b4:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <HAL_UART_MspInit+0xb4>)
 80025b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025c0:	230c      	movs	r3, #12
 80025c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c6:	2302      	movs	r3, #2
 80025c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d2:	2303      	movs	r3, #3
 80025d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025d8:	2307      	movs	r3, #7
 80025da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80025e2:	4619      	mov	r1, r3
 80025e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025e8:	f000 f94c 	bl	8002884 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80025ec:	bf00      	nop
 80025ee:	37b0      	adds	r7, #176	; 0xb0
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40004400 	.word	0x40004400
 80025f8:	40021000 	.word	0x40021000

080025fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80025fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002634 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002600:	f7ff fcb6 	bl	8001f70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002604:	480c      	ldr	r0, [pc, #48]	; (8002638 <LoopForever+0x6>)
  ldr r1, =_edata
 8002606:	490d      	ldr	r1, [pc, #52]	; (800263c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002608:	4a0d      	ldr	r2, [pc, #52]	; (8002640 <LoopForever+0xe>)
  movs r3, #0
 800260a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800260c:	e002      	b.n	8002614 <LoopCopyDataInit>

0800260e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800260e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002612:	3304      	adds	r3, #4

08002614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002618:	d3f9      	bcc.n	800260e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800261a:	4a0a      	ldr	r2, [pc, #40]	; (8002644 <LoopForever+0x12>)
  ldr r4, =_ebss
 800261c:	4c0a      	ldr	r4, [pc, #40]	; (8002648 <LoopForever+0x16>)
  movs r3, #0
 800261e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002620:	e001      	b.n	8002626 <LoopFillZerobss>

08002622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002624:	3204      	adds	r2, #4

08002626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002628:	d3fb      	bcc.n	8002622 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800262a:	f009 fadd 	bl	800bbe8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800262e:	f7ff fa7b 	bl	8001b28 <main>

08002632 <LoopForever>:

LoopForever:
    b LoopForever
 8002632:	e7fe      	b.n	8002632 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002634:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800263c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002640:	0800e0d4 	.word	0x0800e0d4
  ldr r2, =_sbss
 8002644:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002648:	200061fc 	.word	0x200061fc

0800264c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800264c:	e7fe      	b.n	800264c <ADC1_2_IRQHandler>

0800264e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b082      	sub	sp, #8
 8002652:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002654:	2300      	movs	r3, #0
 8002656:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002658:	2003      	movs	r0, #3
 800265a:	f000 f8de 	bl	800281a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800265e:	200f      	movs	r0, #15
 8002660:	f7ff fb12 	bl	8001c88 <HAL_InitTick>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d002      	beq.n	8002670 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	71fb      	strb	r3, [r7, #7]
 800266e:	e001      	b.n	8002674 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002670:	f7ff fae2 	bl	8001c38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002674:	79fb      	ldrb	r3, [r7, #7]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
	...

08002680 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002684:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <HAL_IncTick+0x20>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	461a      	mov	r2, r3
 800268a:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <HAL_IncTick+0x24>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4413      	add	r3, r2
 8002690:	4a04      	ldr	r2, [pc, #16]	; (80026a4 <HAL_IncTick+0x24>)
 8002692:	6013      	str	r3, [r2, #0]
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	2000000c 	.word	0x2000000c
 80026a4:	20000484 	.word	0x20000484

080026a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  return uwTick;
 80026ac:	4b03      	ldr	r3, [pc, #12]	; (80026bc <HAL_GetTick+0x14>)
 80026ae:	681b      	ldr	r3, [r3, #0]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	20000484 	.word	0x20000484

080026c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026d0:	4b0c      	ldr	r3, [pc, #48]	; (8002704 <__NVIC_SetPriorityGrouping+0x44>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026dc:	4013      	ands	r3, r2
 80026de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026f2:	4a04      	ldr	r2, [pc, #16]	; (8002704 <__NVIC_SetPriorityGrouping+0x44>)
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	60d3      	str	r3, [r2, #12]
}
 80026f8:	bf00      	nop
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800270c:	4b04      	ldr	r3, [pc, #16]	; (8002720 <__NVIC_GetPriorityGrouping+0x18>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	0a1b      	lsrs	r3, r3, #8
 8002712:	f003 0307 	and.w	r3, r3, #7
}
 8002716:	4618      	mov	r0, r3
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800272e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002732:	2b00      	cmp	r3, #0
 8002734:	db0b      	blt.n	800274e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002736:	79fb      	ldrb	r3, [r7, #7]
 8002738:	f003 021f 	and.w	r2, r3, #31
 800273c:	4907      	ldr	r1, [pc, #28]	; (800275c <__NVIC_EnableIRQ+0x38>)
 800273e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002742:	095b      	lsrs	r3, r3, #5
 8002744:	2001      	movs	r0, #1
 8002746:	fa00 f202 	lsl.w	r2, r0, r2
 800274a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	e000e100 	.word	0xe000e100

08002760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	6039      	str	r1, [r7, #0]
 800276a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800276c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002770:	2b00      	cmp	r3, #0
 8002772:	db0a      	blt.n	800278a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	b2da      	uxtb	r2, r3
 8002778:	490c      	ldr	r1, [pc, #48]	; (80027ac <__NVIC_SetPriority+0x4c>)
 800277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277e:	0112      	lsls	r2, r2, #4
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	440b      	add	r3, r1
 8002784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002788:	e00a      	b.n	80027a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	b2da      	uxtb	r2, r3
 800278e:	4908      	ldr	r1, [pc, #32]	; (80027b0 <__NVIC_SetPriority+0x50>)
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	3b04      	subs	r3, #4
 8002798:	0112      	lsls	r2, r2, #4
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	440b      	add	r3, r1
 800279e:	761a      	strb	r2, [r3, #24]
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	e000e100 	.word	0xe000e100
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b089      	sub	sp, #36	; 0x24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f1c3 0307 	rsb	r3, r3, #7
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	bf28      	it	cs
 80027d2:	2304      	movcs	r3, #4
 80027d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	3304      	adds	r3, #4
 80027da:	2b06      	cmp	r3, #6
 80027dc:	d902      	bls.n	80027e4 <NVIC_EncodePriority+0x30>
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	3b03      	subs	r3, #3
 80027e2:	e000      	b.n	80027e6 <NVIC_EncodePriority+0x32>
 80027e4:	2300      	movs	r3, #0
 80027e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e8:	f04f 32ff 	mov.w	r2, #4294967295
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43da      	mvns	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	401a      	ands	r2, r3
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	fa01 f303 	lsl.w	r3, r1, r3
 8002806:	43d9      	mvns	r1, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800280c:	4313      	orrs	r3, r2
         );
}
 800280e:	4618      	mov	r0, r3
 8002810:	3724      	adds	r7, #36	; 0x24
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b082      	sub	sp, #8
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7ff ff4c 	bl	80026c0 <__NVIC_SetPriorityGrouping>
}
 8002828:	bf00      	nop
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
 800283c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800283e:	2300      	movs	r3, #0
 8002840:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002842:	f7ff ff61 	bl	8002708 <__NVIC_GetPriorityGrouping>
 8002846:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	68b9      	ldr	r1, [r7, #8]
 800284c:	6978      	ldr	r0, [r7, #20]
 800284e:	f7ff ffb1 	bl	80027b4 <NVIC_EncodePriority>
 8002852:	4602      	mov	r2, r0
 8002854:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002858:	4611      	mov	r1, r2
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff ff80 	bl	8002760 <__NVIC_SetPriority>
}
 8002860:	bf00      	nop
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff ff54 	bl	8002724 <__NVIC_EnableIRQ>
}
 800287c:	bf00      	nop
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002884:	b480      	push	{r7}
 8002886:	b087      	sub	sp, #28
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002892:	e17f      	b.n	8002b94 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	2101      	movs	r1, #1
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	fa01 f303 	lsl.w	r3, r1, r3
 80028a0:	4013      	ands	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 8171 	beq.w	8002b8e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 0303 	and.w	r3, r3, #3
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d005      	beq.n	80028c4 <HAL_GPIO_Init+0x40>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 0303 	and.w	r3, r3, #3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d130      	bne.n	8002926 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	2203      	movs	r2, #3
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4013      	ands	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	68da      	ldr	r2, [r3, #12]
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028fa:	2201      	movs	r2, #1
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	43db      	mvns	r3, r3
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	4013      	ands	r3, r2
 8002908:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	091b      	lsrs	r3, r3, #4
 8002910:	f003 0201 	and.w	r2, r3, #1
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	4313      	orrs	r3, r2
 800291e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	2b03      	cmp	r3, #3
 8002930:	d118      	bne.n	8002964 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002936:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002938:	2201      	movs	r2, #1
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4013      	ands	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	08db      	lsrs	r3, r3, #3
 800294e:	f003 0201 	and.w	r2, r3, #1
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	4313      	orrs	r3, r2
 800295c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f003 0303 	and.w	r3, r3, #3
 800296c:	2b03      	cmp	r3, #3
 800296e:	d017      	beq.n	80029a0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	2203      	movs	r2, #3
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4013      	ands	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	4313      	orrs	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 0303 	and.w	r3, r3, #3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d123      	bne.n	80029f4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	08da      	lsrs	r2, r3, #3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3208      	adds	r2, #8
 80029b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	220f      	movs	r2, #15
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	4013      	ands	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	691a      	ldr	r2, [r3, #16]
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	08da      	lsrs	r2, r3, #3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	3208      	adds	r2, #8
 80029ee:	6939      	ldr	r1, [r7, #16]
 80029f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	2203      	movs	r2, #3
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 0203 	and.w	r2, r3, #3
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 80ac 	beq.w	8002b8e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a36:	4b5f      	ldr	r3, [pc, #380]	; (8002bb4 <HAL_GPIO_Init+0x330>)
 8002a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a3a:	4a5e      	ldr	r2, [pc, #376]	; (8002bb4 <HAL_GPIO_Init+0x330>)
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	6613      	str	r3, [r2, #96]	; 0x60
 8002a42:	4b5c      	ldr	r3, [pc, #368]	; (8002bb4 <HAL_GPIO_Init+0x330>)
 8002a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a4e:	4a5a      	ldr	r2, [pc, #360]	; (8002bb8 <HAL_GPIO_Init+0x334>)
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	089b      	lsrs	r3, r3, #2
 8002a54:	3302      	adds	r3, #2
 8002a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	220f      	movs	r2, #15
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a78:	d025      	beq.n	8002ac6 <HAL_GPIO_Init+0x242>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a4f      	ldr	r2, [pc, #316]	; (8002bbc <HAL_GPIO_Init+0x338>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d01f      	beq.n	8002ac2 <HAL_GPIO_Init+0x23e>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a4e      	ldr	r2, [pc, #312]	; (8002bc0 <HAL_GPIO_Init+0x33c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d019      	beq.n	8002abe <HAL_GPIO_Init+0x23a>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a4d      	ldr	r2, [pc, #308]	; (8002bc4 <HAL_GPIO_Init+0x340>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d013      	beq.n	8002aba <HAL_GPIO_Init+0x236>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a4c      	ldr	r2, [pc, #304]	; (8002bc8 <HAL_GPIO_Init+0x344>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d00d      	beq.n	8002ab6 <HAL_GPIO_Init+0x232>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a4b      	ldr	r2, [pc, #300]	; (8002bcc <HAL_GPIO_Init+0x348>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d007      	beq.n	8002ab2 <HAL_GPIO_Init+0x22e>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a4a      	ldr	r2, [pc, #296]	; (8002bd0 <HAL_GPIO_Init+0x34c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d101      	bne.n	8002aae <HAL_GPIO_Init+0x22a>
 8002aaa:	2306      	movs	r3, #6
 8002aac:	e00c      	b.n	8002ac8 <HAL_GPIO_Init+0x244>
 8002aae:	2307      	movs	r3, #7
 8002ab0:	e00a      	b.n	8002ac8 <HAL_GPIO_Init+0x244>
 8002ab2:	2305      	movs	r3, #5
 8002ab4:	e008      	b.n	8002ac8 <HAL_GPIO_Init+0x244>
 8002ab6:	2304      	movs	r3, #4
 8002ab8:	e006      	b.n	8002ac8 <HAL_GPIO_Init+0x244>
 8002aba:	2303      	movs	r3, #3
 8002abc:	e004      	b.n	8002ac8 <HAL_GPIO_Init+0x244>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e002      	b.n	8002ac8 <HAL_GPIO_Init+0x244>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e000      	b.n	8002ac8 <HAL_GPIO_Init+0x244>
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	f002 0203 	and.w	r2, r2, #3
 8002ace:	0092      	lsls	r2, r2, #2
 8002ad0:	4093      	lsls	r3, r2
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ad8:	4937      	ldr	r1, [pc, #220]	; (8002bb8 <HAL_GPIO_Init+0x334>)
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	089b      	lsrs	r3, r3, #2
 8002ade:	3302      	adds	r3, #2
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ae6:	4b3b      	ldr	r3, [pc, #236]	; (8002bd4 <HAL_GPIO_Init+0x350>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	43db      	mvns	r3, r3
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4013      	ands	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b0a:	4a32      	ldr	r2, [pc, #200]	; (8002bd4 <HAL_GPIO_Init+0x350>)
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b10:	4b30      	ldr	r3, [pc, #192]	; (8002bd4 <HAL_GPIO_Init+0x350>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b34:	4a27      	ldr	r2, [pc, #156]	; (8002bd4 <HAL_GPIO_Init+0x350>)
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b3a:	4b26      	ldr	r3, [pc, #152]	; (8002bd4 <HAL_GPIO_Init+0x350>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	43db      	mvns	r3, r3
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	4013      	ands	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b5e:	4a1d      	ldr	r2, [pc, #116]	; (8002bd4 <HAL_GPIO_Init+0x350>)
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002b64:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <HAL_GPIO_Init+0x350>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	4013      	ands	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b88:	4a12      	ldr	r2, [pc, #72]	; (8002bd4 <HAL_GPIO_Init+0x350>)
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	3301      	adds	r3, #1
 8002b92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f47f ae78 	bne.w	8002894 <HAL_GPIO_Init+0x10>
  }
}
 8002ba4:	bf00      	nop
 8002ba6:	bf00      	nop
 8002ba8:	371c      	adds	r7, #28
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	40010000 	.word	0x40010000
 8002bbc:	48000400 	.word	0x48000400
 8002bc0:	48000800 	.word	0x48000800
 8002bc4:	48000c00 	.word	0x48000c00
 8002bc8:	48001000 	.word	0x48001000
 8002bcc:	48001400 	.word	0x48001400
 8002bd0:	48001800 	.word	0x48001800
 8002bd4:	40010400 	.word	0x40010400

08002bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	807b      	strh	r3, [r7, #2]
 8002be4:	4613      	mov	r3, r2
 8002be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002be8:	787b      	ldrb	r3, [r7, #1]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bee:	887a      	ldrh	r2, [r7, #2]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bf4:	e002      	b.n	8002bfc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bf6:	887a      	ldrh	r2, [r7, #2]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e08d      	b.n	8002d36 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d106      	bne.n	8002c34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7fe fe48 	bl	80018c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2224      	movs	r2, #36	; 0x24
 8002c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0201 	bic.w	r2, r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c58:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c68:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d107      	bne.n	8002c82 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	e006      	b.n	8002c90 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c8e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d108      	bne.n	8002caa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ca6:	605a      	str	r2, [r3, #4]
 8002ca8:	e007      	b.n	8002cba <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cb8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ccc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68da      	ldr	r2, [r3, #12]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cdc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691a      	ldr	r2, [r3, #16]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69d9      	ldr	r1, [r3, #28]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a1a      	ldr	r2, [r3, #32]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0201 	orr.w	r2, r2, #1
 8002d16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2220      	movs	r2, #32
 8002d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
 8002d46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b20      	cmp	r3, #32
 8002d52:	d138      	bne.n	8002dc6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e032      	b.n	8002dc8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2224      	movs	r2, #36	; 0x24
 8002d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0201 	bic.w	r2, r2, #1
 8002d80:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d90:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6819      	ldr	r1, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f042 0201 	orr.w	r2, r2, #1
 8002db0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2220      	movs	r2, #32
 8002db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	e000      	b.n	8002dc8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002dc6:	2302      	movs	r3, #2
  }
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b20      	cmp	r3, #32
 8002de8:	d139      	bne.n	8002e5e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d101      	bne.n	8002df8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002df4:	2302      	movs	r3, #2
 8002df6:	e033      	b.n	8002e60 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2224      	movs	r2, #36	; 0x24
 8002e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0201 	bic.w	r2, r2, #1
 8002e16:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e26:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	021b      	lsls	r3, r3, #8
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f042 0201 	orr.w	r2, r2, #1
 8002e48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	e000      	b.n	8002e60 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e5e:	2302      	movs	r3, #2
  }
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e70:	4b04      	ldr	r3, [pc, #16]	; (8002e84 <HAL_PWREx_GetVoltageRange+0x18>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40007000 	.word	0x40007000

08002e88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e96:	d130      	bne.n	8002efa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e98:	4b23      	ldr	r3, [pc, #140]	; (8002f28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ea4:	d038      	beq.n	8002f18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ea6:	4b20      	ldr	r3, [pc, #128]	; (8002f28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002eae:	4a1e      	ldr	r2, [pc, #120]	; (8002f28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eb4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002eb6:	4b1d      	ldr	r3, [pc, #116]	; (8002f2c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2232      	movs	r2, #50	; 0x32
 8002ebc:	fb02 f303 	mul.w	r3, r2, r3
 8002ec0:	4a1b      	ldr	r2, [pc, #108]	; (8002f30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec6:	0c9b      	lsrs	r3, r3, #18
 8002ec8:	3301      	adds	r3, #1
 8002eca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ecc:	e002      	b.n	8002ed4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ed4:	4b14      	ldr	r3, [pc, #80]	; (8002f28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ee0:	d102      	bne.n	8002ee8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1f2      	bne.n	8002ece <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ee8:	4b0f      	ldr	r3, [pc, #60]	; (8002f28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef4:	d110      	bne.n	8002f18 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e00f      	b.n	8002f1a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002efa:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f06:	d007      	beq.n	8002f18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f08:	4b07      	ldr	r3, [pc, #28]	; (8002f28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f10:	4a05      	ldr	r2, [pc, #20]	; (8002f28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f16:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40007000 	.word	0x40007000
 8002f2c:	20000004 	.word	0x20000004
 8002f30:	431bde83 	.word	0x431bde83

08002f34 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b088      	sub	sp, #32
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e3ca      	b.n	80036dc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f46:	4b97      	ldr	r3, [pc, #604]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 030c 	and.w	r3, r3, #12
 8002f4e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f50:	4b94      	ldr	r3, [pc, #592]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f003 0303 	and.w	r3, r3, #3
 8002f58:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0310 	and.w	r3, r3, #16
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 80e4 	beq.w	8003130 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d007      	beq.n	8002f7e <HAL_RCC_OscConfig+0x4a>
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	2b0c      	cmp	r3, #12
 8002f72:	f040 808b 	bne.w	800308c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	f040 8087 	bne.w	800308c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f7e:	4b89      	ldr	r3, [pc, #548]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d005      	beq.n	8002f96 <HAL_RCC_OscConfig+0x62>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e3a2      	b.n	80036dc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1a      	ldr	r2, [r3, #32]
 8002f9a:	4b82      	ldr	r3, [pc, #520]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d004      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x7c>
 8002fa6:	4b7f      	ldr	r3, [pc, #508]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fae:	e005      	b.n	8002fbc <HAL_RCC_OscConfig+0x88>
 8002fb0:	4b7c      	ldr	r3, [pc, #496]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8002fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fb6:	091b      	lsrs	r3, r3, #4
 8002fb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d223      	bcs.n	8003008 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 fd87 	bl	8003ad8 <RCC_SetFlashLatencyFromMSIRange>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e383      	b.n	80036dc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fd4:	4b73      	ldr	r3, [pc, #460]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a72      	ldr	r2, [pc, #456]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8002fda:	f043 0308 	orr.w	r3, r3, #8
 8002fde:	6013      	str	r3, [r2, #0]
 8002fe0:	4b70      	ldr	r3, [pc, #448]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	496d      	ldr	r1, [pc, #436]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ff2:	4b6c      	ldr	r3, [pc, #432]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	021b      	lsls	r3, r3, #8
 8003000:	4968      	ldr	r1, [pc, #416]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8003002:	4313      	orrs	r3, r2
 8003004:	604b      	str	r3, [r1, #4]
 8003006:	e025      	b.n	8003054 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003008:	4b66      	ldr	r3, [pc, #408]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a65      	ldr	r2, [pc, #404]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 800300e:	f043 0308 	orr.w	r3, r3, #8
 8003012:	6013      	str	r3, [r2, #0]
 8003014:	4b63      	ldr	r3, [pc, #396]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	4960      	ldr	r1, [pc, #384]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8003022:	4313      	orrs	r3, r2
 8003024:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003026:	4b5f      	ldr	r3, [pc, #380]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	021b      	lsls	r3, r3, #8
 8003034:	495b      	ldr	r1, [pc, #364]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8003036:	4313      	orrs	r3, r2
 8003038:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d109      	bne.n	8003054 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	4618      	mov	r0, r3
 8003046:	f000 fd47 	bl	8003ad8 <RCC_SetFlashLatencyFromMSIRange>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e343      	b.n	80036dc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003054:	f000 fc4a 	bl	80038ec <HAL_RCC_GetSysClockFreq>
 8003058:	4602      	mov	r2, r0
 800305a:	4b52      	ldr	r3, [pc, #328]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	091b      	lsrs	r3, r3, #4
 8003060:	f003 030f 	and.w	r3, r3, #15
 8003064:	4950      	ldr	r1, [pc, #320]	; (80031a8 <HAL_RCC_OscConfig+0x274>)
 8003066:	5ccb      	ldrb	r3, [r1, r3]
 8003068:	f003 031f 	and.w	r3, r3, #31
 800306c:	fa22 f303 	lsr.w	r3, r2, r3
 8003070:	4a4e      	ldr	r2, [pc, #312]	; (80031ac <HAL_RCC_OscConfig+0x278>)
 8003072:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003074:	4b4e      	ldr	r3, [pc, #312]	; (80031b0 <HAL_RCC_OscConfig+0x27c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f7fe fe05 	bl	8001c88 <HAL_InitTick>
 800307e:	4603      	mov	r3, r0
 8003080:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003082:	7bfb      	ldrb	r3, [r7, #15]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d052      	beq.n	800312e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003088:	7bfb      	ldrb	r3, [r7, #15]
 800308a:	e327      	b.n	80036dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d032      	beq.n	80030fa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003094:	4b43      	ldr	r3, [pc, #268]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a42      	ldr	r2, [pc, #264]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 800309a:	f043 0301 	orr.w	r3, r3, #1
 800309e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030a0:	f7ff fb02 	bl	80026a8 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030a8:	f7ff fafe 	bl	80026a8 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e310      	b.n	80036dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030ba:	4b3a      	ldr	r3, [pc, #232]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0f0      	beq.n	80030a8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030c6:	4b37      	ldr	r3, [pc, #220]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a36      	ldr	r2, [pc, #216]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 80030cc:	f043 0308 	orr.w	r3, r3, #8
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	4b34      	ldr	r3, [pc, #208]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	4931      	ldr	r1, [pc, #196]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030e4:	4b2f      	ldr	r3, [pc, #188]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	021b      	lsls	r3, r3, #8
 80030f2:	492c      	ldr	r1, [pc, #176]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	604b      	str	r3, [r1, #4]
 80030f8:	e01a      	b.n	8003130 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030fa:	4b2a      	ldr	r3, [pc, #168]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a29      	ldr	r2, [pc, #164]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8003100:	f023 0301 	bic.w	r3, r3, #1
 8003104:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003106:	f7ff facf 	bl	80026a8 <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800310c:	e008      	b.n	8003120 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800310e:	f7ff facb 	bl	80026a8 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e2dd      	b.n	80036dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003120:	4b20      	ldr	r3, [pc, #128]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1f0      	bne.n	800310e <HAL_RCC_OscConfig+0x1da>
 800312c:	e000      	b.n	8003130 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800312e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b00      	cmp	r3, #0
 800313a:	d074      	beq.n	8003226 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	2b08      	cmp	r3, #8
 8003140:	d005      	beq.n	800314e <HAL_RCC_OscConfig+0x21a>
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	2b0c      	cmp	r3, #12
 8003146:	d10e      	bne.n	8003166 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	2b03      	cmp	r3, #3
 800314c:	d10b      	bne.n	8003166 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800314e:	4b15      	ldr	r3, [pc, #84]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d064      	beq.n	8003224 <HAL_RCC_OscConfig+0x2f0>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d160      	bne.n	8003224 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e2ba      	b.n	80036dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800316e:	d106      	bne.n	800317e <HAL_RCC_OscConfig+0x24a>
 8003170:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a0b      	ldr	r2, [pc, #44]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8003176:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800317a:	6013      	str	r3, [r2, #0]
 800317c:	e026      	b.n	80031cc <HAL_RCC_OscConfig+0x298>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003186:	d115      	bne.n	80031b4 <HAL_RCC_OscConfig+0x280>
 8003188:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a05      	ldr	r2, [pc, #20]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 800318e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003192:	6013      	str	r3, [r2, #0]
 8003194:	4b03      	ldr	r3, [pc, #12]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a02      	ldr	r2, [pc, #8]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 800319a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	e014      	b.n	80031cc <HAL_RCC_OscConfig+0x298>
 80031a2:	bf00      	nop
 80031a4:	40021000 	.word	0x40021000
 80031a8:	0800dd0c 	.word	0x0800dd0c
 80031ac:	20000004 	.word	0x20000004
 80031b0:	20000008 	.word	0x20000008
 80031b4:	4ba0      	ldr	r3, [pc, #640]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a9f      	ldr	r2, [pc, #636]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 80031ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031be:	6013      	str	r3, [r2, #0]
 80031c0:	4b9d      	ldr	r3, [pc, #628]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a9c      	ldr	r2, [pc, #624]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 80031c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d013      	beq.n	80031fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d4:	f7ff fa68 	bl	80026a8 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031dc:	f7ff fa64 	bl	80026a8 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b64      	cmp	r3, #100	; 0x64
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e276      	b.n	80036dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031ee:	4b92      	ldr	r3, [pc, #584]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f0      	beq.n	80031dc <HAL_RCC_OscConfig+0x2a8>
 80031fa:	e014      	b.n	8003226 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fc:	f7ff fa54 	bl	80026a8 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003204:	f7ff fa50 	bl	80026a8 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b64      	cmp	r3, #100	; 0x64
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e262      	b.n	80036dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003216:	4b88      	ldr	r3, [pc, #544]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f0      	bne.n	8003204 <HAL_RCC_OscConfig+0x2d0>
 8003222:	e000      	b.n	8003226 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d060      	beq.n	80032f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	2b04      	cmp	r3, #4
 8003236:	d005      	beq.n	8003244 <HAL_RCC_OscConfig+0x310>
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	2b0c      	cmp	r3, #12
 800323c:	d119      	bne.n	8003272 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	2b02      	cmp	r3, #2
 8003242:	d116      	bne.n	8003272 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003244:	4b7c      	ldr	r3, [pc, #496]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800324c:	2b00      	cmp	r3, #0
 800324e:	d005      	beq.n	800325c <HAL_RCC_OscConfig+0x328>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e23f      	b.n	80036dc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800325c:	4b76      	ldr	r3, [pc, #472]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	061b      	lsls	r3, r3, #24
 800326a:	4973      	ldr	r1, [pc, #460]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 800326c:	4313      	orrs	r3, r2
 800326e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003270:	e040      	b.n	80032f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d023      	beq.n	80032c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800327a:	4b6f      	ldr	r3, [pc, #444]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a6e      	ldr	r2, [pc, #440]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 8003280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003284:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003286:	f7ff fa0f 	bl	80026a8 <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800328c:	e008      	b.n	80032a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800328e:	f7ff fa0b 	bl	80026a8 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e21d      	b.n	80036dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032a0:	4b65      	ldr	r3, [pc, #404]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0f0      	beq.n	800328e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ac:	4b62      	ldr	r3, [pc, #392]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	061b      	lsls	r3, r3, #24
 80032ba:	495f      	ldr	r1, [pc, #380]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	604b      	str	r3, [r1, #4]
 80032c0:	e018      	b.n	80032f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032c2:	4b5d      	ldr	r3, [pc, #372]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a5c      	ldr	r2, [pc, #368]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 80032c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ce:	f7ff f9eb 	bl	80026a8 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032d6:	f7ff f9e7 	bl	80026a8 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e1f9      	b.n	80036dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032e8:	4b53      	ldr	r3, [pc, #332]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1f0      	bne.n	80032d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0308 	and.w	r3, r3, #8
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d03c      	beq.n	800337a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d01c      	beq.n	8003342 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003308:	4b4b      	ldr	r3, [pc, #300]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 800330a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800330e:	4a4a      	ldr	r2, [pc, #296]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003318:	f7ff f9c6 	bl	80026a8 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003320:	f7ff f9c2 	bl	80026a8 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e1d4      	b.n	80036dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003332:	4b41      	ldr	r3, [pc, #260]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 8003334:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0ef      	beq.n	8003320 <HAL_RCC_OscConfig+0x3ec>
 8003340:	e01b      	b.n	800337a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003342:	4b3d      	ldr	r3, [pc, #244]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 8003344:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003348:	4a3b      	ldr	r2, [pc, #236]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 800334a:	f023 0301 	bic.w	r3, r3, #1
 800334e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003352:	f7ff f9a9 	bl	80026a8 <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800335a:	f7ff f9a5 	bl	80026a8 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e1b7      	b.n	80036dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800336c:	4b32      	ldr	r3, [pc, #200]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 800336e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1ef      	bne.n	800335a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0304 	and.w	r3, r3, #4
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 80a6 	beq.w	80034d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003388:	2300      	movs	r3, #0
 800338a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800338c:	4b2a      	ldr	r3, [pc, #168]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 800338e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10d      	bne.n	80033b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003398:	4b27      	ldr	r3, [pc, #156]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 800339a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339c:	4a26      	ldr	r2, [pc, #152]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 800339e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a2:	6593      	str	r3, [r2, #88]	; 0x58
 80033a4:	4b24      	ldr	r3, [pc, #144]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 80033a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ac:	60bb      	str	r3, [r7, #8]
 80033ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033b0:	2301      	movs	r3, #1
 80033b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033b4:	4b21      	ldr	r3, [pc, #132]	; (800343c <HAL_RCC_OscConfig+0x508>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d118      	bne.n	80033f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033c0:	4b1e      	ldr	r3, [pc, #120]	; (800343c <HAL_RCC_OscConfig+0x508>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a1d      	ldr	r2, [pc, #116]	; (800343c <HAL_RCC_OscConfig+0x508>)
 80033c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033cc:	f7ff f96c 	bl	80026a8 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d4:	f7ff f968 	bl	80026a8 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e17a      	b.n	80036dc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033e6:	4b15      	ldr	r3, [pc, #84]	; (800343c <HAL_RCC_OscConfig+0x508>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0f0      	beq.n	80033d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d108      	bne.n	800340c <HAL_RCC_OscConfig+0x4d8>
 80033fa:	4b0f      	ldr	r3, [pc, #60]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 80033fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003400:	4a0d      	ldr	r2, [pc, #52]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 8003402:	f043 0301 	orr.w	r3, r3, #1
 8003406:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800340a:	e029      	b.n	8003460 <HAL_RCC_OscConfig+0x52c>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	2b05      	cmp	r3, #5
 8003412:	d115      	bne.n	8003440 <HAL_RCC_OscConfig+0x50c>
 8003414:	4b08      	ldr	r3, [pc, #32]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 8003416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341a:	4a07      	ldr	r2, [pc, #28]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 800341c:	f043 0304 	orr.w	r3, r3, #4
 8003420:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003424:	4b04      	ldr	r3, [pc, #16]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 8003426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342a:	4a03      	ldr	r2, [pc, #12]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 800342c:	f043 0301 	orr.w	r3, r3, #1
 8003430:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003434:	e014      	b.n	8003460 <HAL_RCC_OscConfig+0x52c>
 8003436:	bf00      	nop
 8003438:	40021000 	.word	0x40021000
 800343c:	40007000 	.word	0x40007000
 8003440:	4b9c      	ldr	r3, [pc, #624]	; (80036b4 <HAL_RCC_OscConfig+0x780>)
 8003442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003446:	4a9b      	ldr	r2, [pc, #620]	; (80036b4 <HAL_RCC_OscConfig+0x780>)
 8003448:	f023 0301 	bic.w	r3, r3, #1
 800344c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003450:	4b98      	ldr	r3, [pc, #608]	; (80036b4 <HAL_RCC_OscConfig+0x780>)
 8003452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003456:	4a97      	ldr	r2, [pc, #604]	; (80036b4 <HAL_RCC_OscConfig+0x780>)
 8003458:	f023 0304 	bic.w	r3, r3, #4
 800345c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d016      	beq.n	8003496 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003468:	f7ff f91e 	bl	80026a8 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800346e:	e00a      	b.n	8003486 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003470:	f7ff f91a 	bl	80026a8 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	f241 3288 	movw	r2, #5000	; 0x1388
 800347e:	4293      	cmp	r3, r2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e12a      	b.n	80036dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003486:	4b8b      	ldr	r3, [pc, #556]	; (80036b4 <HAL_RCC_OscConfig+0x780>)
 8003488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0ed      	beq.n	8003470 <HAL_RCC_OscConfig+0x53c>
 8003494:	e015      	b.n	80034c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003496:	f7ff f907 	bl	80026a8 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800349c:	e00a      	b.n	80034b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800349e:	f7ff f903 	bl	80026a8 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e113      	b.n	80036dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034b4:	4b7f      	ldr	r3, [pc, #508]	; (80036b4 <HAL_RCC_OscConfig+0x780>)
 80034b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1ed      	bne.n	800349e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034c2:	7ffb      	ldrb	r3, [r7, #31]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d105      	bne.n	80034d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c8:	4b7a      	ldr	r3, [pc, #488]	; (80036b4 <HAL_RCC_OscConfig+0x780>)
 80034ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034cc:	4a79      	ldr	r2, [pc, #484]	; (80036b4 <HAL_RCC_OscConfig+0x780>)
 80034ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034d2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 80fe 	beq.w	80036da <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	f040 80d0 	bne.w	8003688 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80034e8:	4b72      	ldr	r3, [pc, #456]	; (80036b4 <HAL_RCC_OscConfig+0x780>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f003 0203 	and.w	r2, r3, #3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d130      	bne.n	800355e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	3b01      	subs	r3, #1
 8003508:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800350a:	429a      	cmp	r2, r3
 800350c:	d127      	bne.n	800355e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003518:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800351a:	429a      	cmp	r2, r3
 800351c:	d11f      	bne.n	800355e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003528:	2a07      	cmp	r2, #7
 800352a:	bf14      	ite	ne
 800352c:	2201      	movne	r2, #1
 800352e:	2200      	moveq	r2, #0
 8003530:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003532:	4293      	cmp	r3, r2
 8003534:	d113      	bne.n	800355e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003540:	085b      	lsrs	r3, r3, #1
 8003542:	3b01      	subs	r3, #1
 8003544:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003546:	429a      	cmp	r2, r3
 8003548:	d109      	bne.n	800355e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	085b      	lsrs	r3, r3, #1
 8003556:	3b01      	subs	r3, #1
 8003558:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800355a:	429a      	cmp	r2, r3
 800355c:	d06e      	beq.n	800363c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	2b0c      	cmp	r3, #12
 8003562:	d069      	beq.n	8003638 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003564:	4b53      	ldr	r3, [pc, #332]	; (80036b4 <HAL_RCC_OscConfig+0x780>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d105      	bne.n	800357c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003570:	4b50      	ldr	r3, [pc, #320]	; (80036b4 <HAL_RCC_OscConfig+0x780>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e0ad      	b.n	80036dc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003580:	4b4c      	ldr	r3, [pc, #304]	; (80036b4 <HAL_RCC_OscConfig+0x780>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a4b      	ldr	r2, [pc, #300]	; (80036b4 <HAL_RCC_OscConfig+0x780>)
 8003586:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800358a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800358c:	f7ff f88c 	bl	80026a8 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003594:	f7ff f888 	bl	80026a8 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e09a      	b.n	80036dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035a6:	4b43      	ldr	r3, [pc, #268]	; (80036b4 <HAL_RCC_OscConfig+0x780>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1f0      	bne.n	8003594 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035b2:	4b40      	ldr	r3, [pc, #256]	; (80036b4 <HAL_RCC_OscConfig+0x780>)
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	4b40      	ldr	r3, [pc, #256]	; (80036b8 <HAL_RCC_OscConfig+0x784>)
 80035b8:	4013      	ands	r3, r2
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035c2:	3a01      	subs	r2, #1
 80035c4:	0112      	lsls	r2, r2, #4
 80035c6:	4311      	orrs	r1, r2
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035cc:	0212      	lsls	r2, r2, #8
 80035ce:	4311      	orrs	r1, r2
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035d4:	0852      	lsrs	r2, r2, #1
 80035d6:	3a01      	subs	r2, #1
 80035d8:	0552      	lsls	r2, r2, #21
 80035da:	4311      	orrs	r1, r2
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80035e0:	0852      	lsrs	r2, r2, #1
 80035e2:	3a01      	subs	r2, #1
 80035e4:	0652      	lsls	r2, r2, #25
 80035e6:	4311      	orrs	r1, r2
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035ec:	0912      	lsrs	r2, r2, #4
 80035ee:	0452      	lsls	r2, r2, #17
 80035f0:	430a      	orrs	r2, r1
 80035f2:	4930      	ldr	r1, [pc, #192]	; (80036b4 <HAL_RCC_OscConfig+0x780>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80035f8:	4b2e      	ldr	r3, [pc, #184]	; (80036b4 <HAL_RCC_OscConfig+0x780>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a2d      	ldr	r2, [pc, #180]	; (80036b4 <HAL_RCC_OscConfig+0x780>)
 80035fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003602:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003604:	4b2b      	ldr	r3, [pc, #172]	; (80036b4 <HAL_RCC_OscConfig+0x780>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	4a2a      	ldr	r2, [pc, #168]	; (80036b4 <HAL_RCC_OscConfig+0x780>)
 800360a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800360e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003610:	f7ff f84a 	bl	80026a8 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003618:	f7ff f846 	bl	80026a8 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e058      	b.n	80036dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800362a:	4b22      	ldr	r3, [pc, #136]	; (80036b4 <HAL_RCC_OscConfig+0x780>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0f0      	beq.n	8003618 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003636:	e050      	b.n	80036da <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e04f      	b.n	80036dc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800363c:	4b1d      	ldr	r3, [pc, #116]	; (80036b4 <HAL_RCC_OscConfig+0x780>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d148      	bne.n	80036da <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003648:	4b1a      	ldr	r3, [pc, #104]	; (80036b4 <HAL_RCC_OscConfig+0x780>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a19      	ldr	r2, [pc, #100]	; (80036b4 <HAL_RCC_OscConfig+0x780>)
 800364e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003652:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003654:	4b17      	ldr	r3, [pc, #92]	; (80036b4 <HAL_RCC_OscConfig+0x780>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	4a16      	ldr	r2, [pc, #88]	; (80036b4 <HAL_RCC_OscConfig+0x780>)
 800365a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800365e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003660:	f7ff f822 	bl	80026a8 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003668:	f7ff f81e 	bl	80026a8 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e030      	b.n	80036dc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800367a:	4b0e      	ldr	r3, [pc, #56]	; (80036b4 <HAL_RCC_OscConfig+0x780>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d0f0      	beq.n	8003668 <HAL_RCC_OscConfig+0x734>
 8003686:	e028      	b.n	80036da <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	2b0c      	cmp	r3, #12
 800368c:	d023      	beq.n	80036d6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800368e:	4b09      	ldr	r3, [pc, #36]	; (80036b4 <HAL_RCC_OscConfig+0x780>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a08      	ldr	r2, [pc, #32]	; (80036b4 <HAL_RCC_OscConfig+0x780>)
 8003694:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369a:	f7ff f805 	bl	80026a8 <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036a0:	e00c      	b.n	80036bc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a2:	f7ff f801 	bl	80026a8 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d905      	bls.n	80036bc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e013      	b.n	80036dc <HAL_RCC_OscConfig+0x7a8>
 80036b4:	40021000 	.word	0x40021000
 80036b8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036bc:	4b09      	ldr	r3, [pc, #36]	; (80036e4 <HAL_RCC_OscConfig+0x7b0>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1ec      	bne.n	80036a2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036c8:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <HAL_RCC_OscConfig+0x7b0>)
 80036ca:	68da      	ldr	r2, [r3, #12]
 80036cc:	4905      	ldr	r1, [pc, #20]	; (80036e4 <HAL_RCC_OscConfig+0x7b0>)
 80036ce:	4b06      	ldr	r3, [pc, #24]	; (80036e8 <HAL_RCC_OscConfig+0x7b4>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	60cb      	str	r3, [r1, #12]
 80036d4:	e001      	b.n	80036da <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e000      	b.n	80036dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3720      	adds	r7, #32
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40021000 	.word	0x40021000
 80036e8:	feeefffc 	.word	0xfeeefffc

080036ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e0e7      	b.n	80038d0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003700:	4b75      	ldr	r3, [pc, #468]	; (80038d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	d910      	bls.n	8003730 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370e:	4b72      	ldr	r3, [pc, #456]	; (80038d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f023 0207 	bic.w	r2, r3, #7
 8003716:	4970      	ldr	r1, [pc, #448]	; (80038d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	4313      	orrs	r3, r2
 800371c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800371e:	4b6e      	ldr	r3, [pc, #440]	; (80038d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	429a      	cmp	r2, r3
 800372a:	d001      	beq.n	8003730 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e0cf      	b.n	80038d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d010      	beq.n	800375e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	4b66      	ldr	r3, [pc, #408]	; (80038dc <HAL_RCC_ClockConfig+0x1f0>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003748:	429a      	cmp	r2, r3
 800374a:	d908      	bls.n	800375e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800374c:	4b63      	ldr	r3, [pc, #396]	; (80038dc <HAL_RCC_ClockConfig+0x1f0>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	4960      	ldr	r1, [pc, #384]	; (80038dc <HAL_RCC_ClockConfig+0x1f0>)
 800375a:	4313      	orrs	r3, r2
 800375c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d04c      	beq.n	8003804 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	2b03      	cmp	r3, #3
 8003770:	d107      	bne.n	8003782 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003772:	4b5a      	ldr	r3, [pc, #360]	; (80038dc <HAL_RCC_ClockConfig+0x1f0>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d121      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e0a6      	b.n	80038d0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b02      	cmp	r3, #2
 8003788:	d107      	bne.n	800379a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800378a:	4b54      	ldr	r3, [pc, #336]	; (80038dc <HAL_RCC_ClockConfig+0x1f0>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d115      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e09a      	b.n	80038d0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d107      	bne.n	80037b2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037a2:	4b4e      	ldr	r3, [pc, #312]	; (80038dc <HAL_RCC_ClockConfig+0x1f0>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d109      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e08e      	b.n	80038d0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037b2:	4b4a      	ldr	r3, [pc, #296]	; (80038dc <HAL_RCC_ClockConfig+0x1f0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e086      	b.n	80038d0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037c2:	4b46      	ldr	r3, [pc, #280]	; (80038dc <HAL_RCC_ClockConfig+0x1f0>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f023 0203 	bic.w	r2, r3, #3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	4943      	ldr	r1, [pc, #268]	; (80038dc <HAL_RCC_ClockConfig+0x1f0>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037d4:	f7fe ff68 	bl	80026a8 <HAL_GetTick>
 80037d8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037da:	e00a      	b.n	80037f2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037dc:	f7fe ff64 	bl	80026a8 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e06e      	b.n	80038d0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f2:	4b3a      	ldr	r3, [pc, #232]	; (80038dc <HAL_RCC_ClockConfig+0x1f0>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 020c 	and.w	r2, r3, #12
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	429a      	cmp	r2, r3
 8003802:	d1eb      	bne.n	80037dc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d010      	beq.n	8003832 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	4b31      	ldr	r3, [pc, #196]	; (80038dc <HAL_RCC_ClockConfig+0x1f0>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800381c:	429a      	cmp	r2, r3
 800381e:	d208      	bcs.n	8003832 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003820:	4b2e      	ldr	r3, [pc, #184]	; (80038dc <HAL_RCC_ClockConfig+0x1f0>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	492b      	ldr	r1, [pc, #172]	; (80038dc <HAL_RCC_ClockConfig+0x1f0>)
 800382e:	4313      	orrs	r3, r2
 8003830:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003832:	4b29      	ldr	r3, [pc, #164]	; (80038d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	429a      	cmp	r2, r3
 800383e:	d210      	bcs.n	8003862 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003840:	4b25      	ldr	r3, [pc, #148]	; (80038d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f023 0207 	bic.w	r2, r3, #7
 8003848:	4923      	ldr	r1, [pc, #140]	; (80038d8 <HAL_RCC_ClockConfig+0x1ec>)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	4313      	orrs	r3, r2
 800384e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003850:	4b21      	ldr	r3, [pc, #132]	; (80038d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	429a      	cmp	r2, r3
 800385c:	d001      	beq.n	8003862 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e036      	b.n	80038d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0304 	and.w	r3, r3, #4
 800386a:	2b00      	cmp	r3, #0
 800386c:	d008      	beq.n	8003880 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800386e:	4b1b      	ldr	r3, [pc, #108]	; (80038dc <HAL_RCC_ClockConfig+0x1f0>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	4918      	ldr	r1, [pc, #96]	; (80038dc <HAL_RCC_ClockConfig+0x1f0>)
 800387c:	4313      	orrs	r3, r2
 800387e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0308 	and.w	r3, r3, #8
 8003888:	2b00      	cmp	r3, #0
 800388a:	d009      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800388c:	4b13      	ldr	r3, [pc, #76]	; (80038dc <HAL_RCC_ClockConfig+0x1f0>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	4910      	ldr	r1, [pc, #64]	; (80038dc <HAL_RCC_ClockConfig+0x1f0>)
 800389c:	4313      	orrs	r3, r2
 800389e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038a0:	f000 f824 	bl	80038ec <HAL_RCC_GetSysClockFreq>
 80038a4:	4602      	mov	r2, r0
 80038a6:	4b0d      	ldr	r3, [pc, #52]	; (80038dc <HAL_RCC_ClockConfig+0x1f0>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	091b      	lsrs	r3, r3, #4
 80038ac:	f003 030f 	and.w	r3, r3, #15
 80038b0:	490b      	ldr	r1, [pc, #44]	; (80038e0 <HAL_RCC_ClockConfig+0x1f4>)
 80038b2:	5ccb      	ldrb	r3, [r1, r3]
 80038b4:	f003 031f 	and.w	r3, r3, #31
 80038b8:	fa22 f303 	lsr.w	r3, r2, r3
 80038bc:	4a09      	ldr	r2, [pc, #36]	; (80038e4 <HAL_RCC_ClockConfig+0x1f8>)
 80038be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038c0:	4b09      	ldr	r3, [pc, #36]	; (80038e8 <HAL_RCC_ClockConfig+0x1fc>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fe f9df 	bl	8001c88 <HAL_InitTick>
 80038ca:	4603      	mov	r3, r0
 80038cc:	72fb      	strb	r3, [r7, #11]

  return status;
 80038ce:	7afb      	ldrb	r3, [r7, #11]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40022000 	.word	0x40022000
 80038dc:	40021000 	.word	0x40021000
 80038e0:	0800dd0c 	.word	0x0800dd0c
 80038e4:	20000004 	.word	0x20000004
 80038e8:	20000008 	.word	0x20000008

080038ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b089      	sub	sp, #36	; 0x24
 80038f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	61fb      	str	r3, [r7, #28]
 80038f6:	2300      	movs	r3, #0
 80038f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038fa:	4b3e      	ldr	r3, [pc, #248]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 030c 	and.w	r3, r3, #12
 8003902:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003904:	4b3b      	ldr	r3, [pc, #236]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f003 0303 	and.w	r3, r3, #3
 800390c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d005      	beq.n	8003920 <HAL_RCC_GetSysClockFreq+0x34>
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	2b0c      	cmp	r3, #12
 8003918:	d121      	bne.n	800395e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d11e      	bne.n	800395e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003920:	4b34      	ldr	r3, [pc, #208]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0308 	and.w	r3, r3, #8
 8003928:	2b00      	cmp	r3, #0
 800392a:	d107      	bne.n	800393c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800392c:	4b31      	ldr	r3, [pc, #196]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800392e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003932:	0a1b      	lsrs	r3, r3, #8
 8003934:	f003 030f 	and.w	r3, r3, #15
 8003938:	61fb      	str	r3, [r7, #28]
 800393a:	e005      	b.n	8003948 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800393c:	4b2d      	ldr	r3, [pc, #180]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	091b      	lsrs	r3, r3, #4
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003948:	4a2b      	ldr	r2, [pc, #172]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003950:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10d      	bne.n	8003974 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800395c:	e00a      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	2b04      	cmp	r3, #4
 8003962:	d102      	bne.n	800396a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003964:	4b25      	ldr	r3, [pc, #148]	; (80039fc <HAL_RCC_GetSysClockFreq+0x110>)
 8003966:	61bb      	str	r3, [r7, #24]
 8003968:	e004      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	2b08      	cmp	r3, #8
 800396e:	d101      	bne.n	8003974 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003970:	4b23      	ldr	r3, [pc, #140]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x114>)
 8003972:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	2b0c      	cmp	r3, #12
 8003978:	d134      	bne.n	80039e4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800397a:	4b1e      	ldr	r3, [pc, #120]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f003 0303 	and.w	r3, r3, #3
 8003982:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	2b02      	cmp	r3, #2
 8003988:	d003      	beq.n	8003992 <HAL_RCC_GetSysClockFreq+0xa6>
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	2b03      	cmp	r3, #3
 800398e:	d003      	beq.n	8003998 <HAL_RCC_GetSysClockFreq+0xac>
 8003990:	e005      	b.n	800399e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003992:	4b1a      	ldr	r3, [pc, #104]	; (80039fc <HAL_RCC_GetSysClockFreq+0x110>)
 8003994:	617b      	str	r3, [r7, #20]
      break;
 8003996:	e005      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003998:	4b19      	ldr	r3, [pc, #100]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x114>)
 800399a:	617b      	str	r3, [r7, #20]
      break;
 800399c:	e002      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	617b      	str	r3, [r7, #20]
      break;
 80039a2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039a4:	4b13      	ldr	r3, [pc, #76]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	091b      	lsrs	r3, r3, #4
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	3301      	adds	r3, #1
 80039b0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039b2:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	0a1b      	lsrs	r3, r3, #8
 80039b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	fb03 f202 	mul.w	r2, r3, r2
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039ca:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	0e5b      	lsrs	r3, r3, #25
 80039d0:	f003 0303 	and.w	r3, r3, #3
 80039d4:	3301      	adds	r3, #1
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039e4:	69bb      	ldr	r3, [r7, #24]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3724      	adds	r7, #36	; 0x24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	40021000 	.word	0x40021000
 80039f8:	0800dd24 	.word	0x0800dd24
 80039fc:	00f42400 	.word	0x00f42400
 8003a00:	007a1200 	.word	0x007a1200

08003a04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a08:	4b03      	ldr	r3, [pc, #12]	; (8003a18 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	20000004 	.word	0x20000004

08003a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a20:	f7ff fff0 	bl	8003a04 <HAL_RCC_GetHCLKFreq>
 8003a24:	4602      	mov	r2, r0
 8003a26:	4b06      	ldr	r3, [pc, #24]	; (8003a40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	0a1b      	lsrs	r3, r3, #8
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	4904      	ldr	r1, [pc, #16]	; (8003a44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a32:	5ccb      	ldrb	r3, [r1, r3]
 8003a34:	f003 031f 	and.w	r3, r3, #31
 8003a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40021000 	.word	0x40021000
 8003a44:	0800dd1c 	.word	0x0800dd1c

08003a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a4c:	f7ff ffda 	bl	8003a04 <HAL_RCC_GetHCLKFreq>
 8003a50:	4602      	mov	r2, r0
 8003a52:	4b06      	ldr	r3, [pc, #24]	; (8003a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	0adb      	lsrs	r3, r3, #11
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	4904      	ldr	r1, [pc, #16]	; (8003a70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a5e:	5ccb      	ldrb	r3, [r1, r3]
 8003a60:	f003 031f 	and.w	r3, r3, #31
 8003a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	0800dd1c 	.word	0x0800dd1c

08003a74 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	220f      	movs	r2, #15
 8003a82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003a84:	4b12      	ldr	r3, [pc, #72]	; (8003ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f003 0203 	and.w	r2, r3, #3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003a90:	4b0f      	ldr	r3, [pc, #60]	; (8003ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003a9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003aa8:	4b09      	ldr	r3, [pc, #36]	; (8003ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	08db      	lsrs	r3, r3, #3
 8003aae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003ab6:	4b07      	ldr	r3, [pc, #28]	; (8003ad4 <HAL_RCC_GetClockConfig+0x60>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0207 	and.w	r2, r3, #7
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	601a      	str	r2, [r3, #0]
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	40022000 	.word	0x40022000

08003ad8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ae4:	4b2a      	ldr	r3, [pc, #168]	; (8003b90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003af0:	f7ff f9bc 	bl	8002e6c <HAL_PWREx_GetVoltageRange>
 8003af4:	6178      	str	r0, [r7, #20]
 8003af6:	e014      	b.n	8003b22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003af8:	4b25      	ldr	r3, [pc, #148]	; (8003b90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afc:	4a24      	ldr	r2, [pc, #144]	; (8003b90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b02:	6593      	str	r3, [r2, #88]	; 0x58
 8003b04:	4b22      	ldr	r3, [pc, #136]	; (8003b90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b0c:	60fb      	str	r3, [r7, #12]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b10:	f7ff f9ac 	bl	8002e6c <HAL_PWREx_GetVoltageRange>
 8003b14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b16:	4b1e      	ldr	r3, [pc, #120]	; (8003b90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1a:	4a1d      	ldr	r2, [pc, #116]	; (8003b90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b20:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b28:	d10b      	bne.n	8003b42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b80      	cmp	r3, #128	; 0x80
 8003b2e:	d919      	bls.n	8003b64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2ba0      	cmp	r3, #160	; 0xa0
 8003b34:	d902      	bls.n	8003b3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b36:	2302      	movs	r3, #2
 8003b38:	613b      	str	r3, [r7, #16]
 8003b3a:	e013      	b.n	8003b64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	613b      	str	r3, [r7, #16]
 8003b40:	e010      	b.n	8003b64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b80      	cmp	r3, #128	; 0x80
 8003b46:	d902      	bls.n	8003b4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b48:	2303      	movs	r3, #3
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	e00a      	b.n	8003b64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b80      	cmp	r3, #128	; 0x80
 8003b52:	d102      	bne.n	8003b5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b54:	2302      	movs	r3, #2
 8003b56:	613b      	str	r3, [r7, #16]
 8003b58:	e004      	b.n	8003b64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b70      	cmp	r3, #112	; 0x70
 8003b5e:	d101      	bne.n	8003b64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b60:	2301      	movs	r3, #1
 8003b62:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b64:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f023 0207 	bic.w	r2, r3, #7
 8003b6c:	4909      	ldr	r1, [pc, #36]	; (8003b94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b74:	4b07      	ldr	r3, [pc, #28]	; (8003b94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d001      	beq.n	8003b86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e000      	b.n	8003b88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3718      	adds	r7, #24
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40021000 	.word	0x40021000
 8003b94:	40022000 	.word	0x40022000

08003b98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d041      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bb8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003bbc:	d02a      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003bbe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003bc2:	d824      	bhi.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bc8:	d008      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003bca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bce:	d81e      	bhi.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00a      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003bd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bd8:	d010      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003bda:	e018      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bdc:	4b86      	ldr	r3, [pc, #536]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	4a85      	ldr	r2, [pc, #532]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003be8:	e015      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	3304      	adds	r3, #4
 8003bee:	2100      	movs	r1, #0
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 fabb 	bl	800416c <RCCEx_PLLSAI1_Config>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bfa:	e00c      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3320      	adds	r3, #32
 8003c00:	2100      	movs	r1, #0
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 fba6 	bl	8004354 <RCCEx_PLLSAI2_Config>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c0c:	e003      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	74fb      	strb	r3, [r7, #19]
      break;
 8003c12:	e000      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003c14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c16:	7cfb      	ldrb	r3, [r7, #19]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10b      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c1c:	4b76      	ldr	r3, [pc, #472]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c2a:	4973      	ldr	r1, [pc, #460]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c32:	e001      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c34:	7cfb      	ldrb	r3, [r7, #19]
 8003c36:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d041      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c48:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c4c:	d02a      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003c4e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c52:	d824      	bhi.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c58:	d008      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c5e:	d81e      	bhi.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00a      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003c64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c68:	d010      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c6a:	e018      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c6c:	4b62      	ldr	r3, [pc, #392]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	4a61      	ldr	r2, [pc, #388]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c76:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c78:	e015      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	2100      	movs	r1, #0
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 fa73 	bl	800416c <RCCEx_PLLSAI1_Config>
 8003c86:	4603      	mov	r3, r0
 8003c88:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c8a:	e00c      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3320      	adds	r3, #32
 8003c90:	2100      	movs	r1, #0
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fb5e 	bl	8004354 <RCCEx_PLLSAI2_Config>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c9c:	e003      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	74fb      	strb	r3, [r7, #19]
      break;
 8003ca2:	e000      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003ca4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ca6:	7cfb      	ldrb	r3, [r7, #19]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10b      	bne.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003cac:	4b52      	ldr	r3, [pc, #328]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cba:	494f      	ldr	r1, [pc, #316]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003cc2:	e001      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc4:	7cfb      	ldrb	r3, [r7, #19]
 8003cc6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 80a0 	beq.w	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003cda:	4b47      	ldr	r3, [pc, #284]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e000      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003cea:	2300      	movs	r3, #0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00d      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf0:	4b41      	ldr	r3, [pc, #260]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf4:	4a40      	ldr	r2, [pc, #256]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cfa:	6593      	str	r3, [r2, #88]	; 0x58
 8003cfc:	4b3e      	ldr	r3, [pc, #248]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d04:	60bb      	str	r3, [r7, #8]
 8003d06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d0c:	4b3b      	ldr	r3, [pc, #236]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a3a      	ldr	r2, [pc, #232]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d18:	f7fe fcc6 	bl	80026a8 <HAL_GetTick>
 8003d1c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d1e:	e009      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d20:	f7fe fcc2 	bl	80026a8 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d902      	bls.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	74fb      	strb	r3, [r7, #19]
        break;
 8003d32:	e005      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d34:	4b31      	ldr	r3, [pc, #196]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0ef      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003d40:	7cfb      	ldrb	r3, [r7, #19]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d15c      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d46:	4b2c      	ldr	r3, [pc, #176]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d50:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d01f      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d019      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d64:	4b24      	ldr	r3, [pc, #144]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d70:	4b21      	ldr	r3, [pc, #132]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d76:	4a20      	ldr	r2, [pc, #128]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d80:	4b1d      	ldr	r3, [pc, #116]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d86:	4a1c      	ldr	r2, [pc, #112]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d90:	4a19      	ldr	r2, [pc, #100]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d016      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da2:	f7fe fc81 	bl	80026a8 <HAL_GetTick>
 8003da6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003da8:	e00b      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003daa:	f7fe fc7d 	bl	80026a8 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d902      	bls.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	74fb      	strb	r3, [r7, #19]
            break;
 8003dc0:	e006      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dc2:	4b0d      	ldr	r3, [pc, #52]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0ec      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003dd0:	7cfb      	ldrb	r3, [r7, #19]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10c      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dd6:	4b08      	ldr	r3, [pc, #32]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ddc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003de6:	4904      	ldr	r1, [pc, #16]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003dee:	e009      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003df0:	7cfb      	ldrb	r3, [r7, #19]
 8003df2:	74bb      	strb	r3, [r7, #18]
 8003df4:	e006      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003df6:	bf00      	nop
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e00:	7cfb      	ldrb	r3, [r7, #19]
 8003e02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e04:	7c7b      	ldrb	r3, [r7, #17]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d105      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e0a:	4b9e      	ldr	r3, [pc, #632]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0e:	4a9d      	ldr	r2, [pc, #628]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00a      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e22:	4b98      	ldr	r3, [pc, #608]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e28:	f023 0203 	bic.w	r2, r3, #3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e30:	4994      	ldr	r1, [pc, #592]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00a      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e44:	4b8f      	ldr	r3, [pc, #572]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e4a:	f023 020c 	bic.w	r2, r3, #12
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e52:	498c      	ldr	r1, [pc, #560]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0304 	and.w	r3, r3, #4
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e66:	4b87      	ldr	r3, [pc, #540]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	4983      	ldr	r1, [pc, #524]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0308 	and.w	r3, r3, #8
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00a      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e88:	4b7e      	ldr	r3, [pc, #504]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e96:	497b      	ldr	r1, [pc, #492]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0310 	and.w	r3, r3, #16
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003eaa:	4b76      	ldr	r3, [pc, #472]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eb8:	4972      	ldr	r1, [pc, #456]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0320 	and.w	r3, r3, #32
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00a      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ecc:	4b6d      	ldr	r3, [pc, #436]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eda:	496a      	ldr	r1, [pc, #424]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eee:	4b65      	ldr	r3, [pc, #404]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efc:	4961      	ldr	r1, [pc, #388]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00a      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f10:	4b5c      	ldr	r3, [pc, #368]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f1e:	4959      	ldr	r1, [pc, #356]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00a      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f32:	4b54      	ldr	r3, [pc, #336]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f38:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f40:	4950      	ldr	r1, [pc, #320]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00a      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f54:	4b4b      	ldr	r3, [pc, #300]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f62:	4948      	ldr	r1, [pc, #288]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f76:	4b43      	ldr	r3, [pc, #268]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f84:	493f      	ldr	r1, [pc, #252]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d028      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f98:	4b3a      	ldr	r3, [pc, #232]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fa6:	4937      	ldr	r1, [pc, #220]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fb6:	d106      	bne.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fb8:	4b32      	ldr	r3, [pc, #200]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	4a31      	ldr	r2, [pc, #196]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fc2:	60d3      	str	r3, [r2, #12]
 8003fc4:	e011      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fce:	d10c      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 f8c8 	bl	800416c <RCCEx_PLLSAI1_Config>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003fe0:	7cfb      	ldrb	r3, [r7, #19]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003fe6:	7cfb      	ldrb	r3, [r7, #19]
 8003fe8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d028      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ff6:	4b23      	ldr	r3, [pc, #140]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004004:	491f      	ldr	r1, [pc, #124]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004006:	4313      	orrs	r3, r2
 8004008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004010:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004014:	d106      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004016:	4b1b      	ldr	r3, [pc, #108]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	4a1a      	ldr	r2, [pc, #104]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800401c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004020:	60d3      	str	r3, [r2, #12]
 8004022:	e011      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004028:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800402c:	d10c      	bne.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	3304      	adds	r3, #4
 8004032:	2101      	movs	r1, #1
 8004034:	4618      	mov	r0, r3
 8004036:	f000 f899 	bl	800416c <RCCEx_PLLSAI1_Config>
 800403a:	4603      	mov	r3, r0
 800403c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800403e:	7cfb      	ldrb	r3, [r7, #19]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004044:	7cfb      	ldrb	r3, [r7, #19]
 8004046:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d02b      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004054:	4b0b      	ldr	r3, [pc, #44]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004062:	4908      	ldr	r1, [pc, #32]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004064:	4313      	orrs	r3, r2
 8004066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800406e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004072:	d109      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004074:	4b03      	ldr	r3, [pc, #12]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	4a02      	ldr	r2, [pc, #8]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800407a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800407e:	60d3      	str	r3, [r2, #12]
 8004080:	e014      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004082:	bf00      	nop
 8004084:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800408c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004090:	d10c      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	3304      	adds	r3, #4
 8004096:	2101      	movs	r1, #1
 8004098:	4618      	mov	r0, r3
 800409a:	f000 f867 	bl	800416c <RCCEx_PLLSAI1_Config>
 800409e:	4603      	mov	r3, r0
 80040a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040a2:	7cfb      	ldrb	r3, [r7, #19]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80040a8:	7cfb      	ldrb	r3, [r7, #19]
 80040aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d02f      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040b8:	4b2b      	ldr	r3, [pc, #172]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040c6:	4928      	ldr	r1, [pc, #160]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040d6:	d10d      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	3304      	adds	r3, #4
 80040dc:	2102      	movs	r1, #2
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 f844 	bl	800416c <RCCEx_PLLSAI1_Config>
 80040e4:	4603      	mov	r3, r0
 80040e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040e8:	7cfb      	ldrb	r3, [r7, #19]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d014      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040ee:	7cfb      	ldrb	r3, [r7, #19]
 80040f0:	74bb      	strb	r3, [r7, #18]
 80040f2:	e011      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040fc:	d10c      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	3320      	adds	r3, #32
 8004102:	2102      	movs	r1, #2
 8004104:	4618      	mov	r0, r3
 8004106:	f000 f925 	bl	8004354 <RCCEx_PLLSAI2_Config>
 800410a:	4603      	mov	r3, r0
 800410c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800410e:	7cfb      	ldrb	r3, [r7, #19]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004114:	7cfb      	ldrb	r3, [r7, #19]
 8004116:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00a      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004124:	4b10      	ldr	r3, [pc, #64]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004132:	490d      	ldr	r1, [pc, #52]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004134:	4313      	orrs	r3, r2
 8004136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00b      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004146:	4b08      	ldr	r3, [pc, #32]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004156:	4904      	ldr	r1, [pc, #16]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004158:	4313      	orrs	r3, r2
 800415a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800415e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3718      	adds	r7, #24
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40021000 	.word	0x40021000

0800416c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004176:	2300      	movs	r3, #0
 8004178:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800417a:	4b75      	ldr	r3, [pc, #468]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f003 0303 	and.w	r3, r3, #3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d018      	beq.n	80041b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004186:	4b72      	ldr	r3, [pc, #456]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f003 0203 	and.w	r2, r3, #3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d10d      	bne.n	80041b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
       ||
 800419a:	2b00      	cmp	r3, #0
 800419c:	d009      	beq.n	80041b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800419e:	4b6c      	ldr	r3, [pc, #432]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	091b      	lsrs	r3, r3, #4
 80041a4:	f003 0307 	and.w	r3, r3, #7
 80041a8:	1c5a      	adds	r2, r3, #1
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
       ||
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d047      	beq.n	8004242 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	73fb      	strb	r3, [r7, #15]
 80041b6:	e044      	b.n	8004242 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2b03      	cmp	r3, #3
 80041be:	d018      	beq.n	80041f2 <RCCEx_PLLSAI1_Config+0x86>
 80041c0:	2b03      	cmp	r3, #3
 80041c2:	d825      	bhi.n	8004210 <RCCEx_PLLSAI1_Config+0xa4>
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d002      	beq.n	80041ce <RCCEx_PLLSAI1_Config+0x62>
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d009      	beq.n	80041e0 <RCCEx_PLLSAI1_Config+0x74>
 80041cc:	e020      	b.n	8004210 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041ce:	4b60      	ldr	r3, [pc, #384]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d11d      	bne.n	8004216 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041de:	e01a      	b.n	8004216 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041e0:	4b5b      	ldr	r3, [pc, #364]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d116      	bne.n	800421a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041f0:	e013      	b.n	800421a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041f2:	4b57      	ldr	r3, [pc, #348]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10f      	bne.n	800421e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041fe:	4b54      	ldr	r3, [pc, #336]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d109      	bne.n	800421e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800420e:	e006      	b.n	800421e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	73fb      	strb	r3, [r7, #15]
      break;
 8004214:	e004      	b.n	8004220 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004216:	bf00      	nop
 8004218:	e002      	b.n	8004220 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800421a:	bf00      	nop
 800421c:	e000      	b.n	8004220 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800421e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004220:	7bfb      	ldrb	r3, [r7, #15]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10d      	bne.n	8004242 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004226:	4b4a      	ldr	r3, [pc, #296]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6819      	ldr	r1, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	3b01      	subs	r3, #1
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	430b      	orrs	r3, r1
 800423c:	4944      	ldr	r1, [pc, #272]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 800423e:	4313      	orrs	r3, r2
 8004240:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004242:	7bfb      	ldrb	r3, [r7, #15]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d17d      	bne.n	8004344 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004248:	4b41      	ldr	r3, [pc, #260]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a40      	ldr	r2, [pc, #256]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 800424e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004252:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004254:	f7fe fa28 	bl	80026a8 <HAL_GetTick>
 8004258:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800425a:	e009      	b.n	8004270 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800425c:	f7fe fa24 	bl	80026a8 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d902      	bls.n	8004270 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	73fb      	strb	r3, [r7, #15]
        break;
 800426e:	e005      	b.n	800427c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004270:	4b37      	ldr	r3, [pc, #220]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1ef      	bne.n	800425c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800427c:	7bfb      	ldrb	r3, [r7, #15]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d160      	bne.n	8004344 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d111      	bne.n	80042ac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004288:	4b31      	ldr	r3, [pc, #196]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6892      	ldr	r2, [r2, #8]
 8004298:	0211      	lsls	r1, r2, #8
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	68d2      	ldr	r2, [r2, #12]
 800429e:	0912      	lsrs	r2, r2, #4
 80042a0:	0452      	lsls	r2, r2, #17
 80042a2:	430a      	orrs	r2, r1
 80042a4:	492a      	ldr	r1, [pc, #168]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	610b      	str	r3, [r1, #16]
 80042aa:	e027      	b.n	80042fc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d112      	bne.n	80042d8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042b2:	4b27      	ldr	r3, [pc, #156]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80042ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6892      	ldr	r2, [r2, #8]
 80042c2:	0211      	lsls	r1, r2, #8
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6912      	ldr	r2, [r2, #16]
 80042c8:	0852      	lsrs	r2, r2, #1
 80042ca:	3a01      	subs	r2, #1
 80042cc:	0552      	lsls	r2, r2, #21
 80042ce:	430a      	orrs	r2, r1
 80042d0:	491f      	ldr	r1, [pc, #124]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	610b      	str	r3, [r1, #16]
 80042d6:	e011      	b.n	80042fc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042d8:	4b1d      	ldr	r3, [pc, #116]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80042e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6892      	ldr	r2, [r2, #8]
 80042e8:	0211      	lsls	r1, r2, #8
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6952      	ldr	r2, [r2, #20]
 80042ee:	0852      	lsrs	r2, r2, #1
 80042f0:	3a01      	subs	r2, #1
 80042f2:	0652      	lsls	r2, r2, #25
 80042f4:	430a      	orrs	r2, r1
 80042f6:	4916      	ldr	r1, [pc, #88]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80042fc:	4b14      	ldr	r3, [pc, #80]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a13      	ldr	r2, [pc, #76]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004302:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004306:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004308:	f7fe f9ce 	bl	80026a8 <HAL_GetTick>
 800430c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800430e:	e009      	b.n	8004324 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004310:	f7fe f9ca 	bl	80026a8 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d902      	bls.n	8004324 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	73fb      	strb	r3, [r7, #15]
          break;
 8004322:	e005      	b.n	8004330 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004324:	4b0a      	ldr	r3, [pc, #40]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0ef      	beq.n	8004310 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004330:	7bfb      	ldrb	r3, [r7, #15]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d106      	bne.n	8004344 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004336:	4b06      	ldr	r3, [pc, #24]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004338:	691a      	ldr	r2, [r3, #16]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	4904      	ldr	r1, [pc, #16]	; (8004350 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004340:	4313      	orrs	r3, r2
 8004342:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004344:	7bfb      	ldrb	r3, [r7, #15]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	40021000 	.word	0x40021000

08004354 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800435e:	2300      	movs	r3, #0
 8004360:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004362:	4b6a      	ldr	r3, [pc, #424]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	f003 0303 	and.w	r3, r3, #3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d018      	beq.n	80043a0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800436e:	4b67      	ldr	r3, [pc, #412]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f003 0203 	and.w	r2, r3, #3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	429a      	cmp	r2, r3
 800437c:	d10d      	bne.n	800439a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
       ||
 8004382:	2b00      	cmp	r3, #0
 8004384:	d009      	beq.n	800439a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004386:	4b61      	ldr	r3, [pc, #388]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	091b      	lsrs	r3, r3, #4
 800438c:	f003 0307 	and.w	r3, r3, #7
 8004390:	1c5a      	adds	r2, r3, #1
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
       ||
 8004396:	429a      	cmp	r2, r3
 8004398:	d047      	beq.n	800442a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	73fb      	strb	r3, [r7, #15]
 800439e:	e044      	b.n	800442a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b03      	cmp	r3, #3
 80043a6:	d018      	beq.n	80043da <RCCEx_PLLSAI2_Config+0x86>
 80043a8:	2b03      	cmp	r3, #3
 80043aa:	d825      	bhi.n	80043f8 <RCCEx_PLLSAI2_Config+0xa4>
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d002      	beq.n	80043b6 <RCCEx_PLLSAI2_Config+0x62>
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d009      	beq.n	80043c8 <RCCEx_PLLSAI2_Config+0x74>
 80043b4:	e020      	b.n	80043f8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043b6:	4b55      	ldr	r3, [pc, #340]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d11d      	bne.n	80043fe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043c6:	e01a      	b.n	80043fe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043c8:	4b50      	ldr	r3, [pc, #320]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d116      	bne.n	8004402 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043d8:	e013      	b.n	8004402 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043da:	4b4c      	ldr	r3, [pc, #304]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10f      	bne.n	8004406 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043e6:	4b49      	ldr	r3, [pc, #292]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d109      	bne.n	8004406 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043f6:	e006      	b.n	8004406 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	73fb      	strb	r3, [r7, #15]
      break;
 80043fc:	e004      	b.n	8004408 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043fe:	bf00      	nop
 8004400:	e002      	b.n	8004408 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004402:	bf00      	nop
 8004404:	e000      	b.n	8004408 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004406:	bf00      	nop
    }

    if(status == HAL_OK)
 8004408:	7bfb      	ldrb	r3, [r7, #15]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10d      	bne.n	800442a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800440e:	4b3f      	ldr	r3, [pc, #252]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6819      	ldr	r1, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	3b01      	subs	r3, #1
 8004420:	011b      	lsls	r3, r3, #4
 8004422:	430b      	orrs	r3, r1
 8004424:	4939      	ldr	r1, [pc, #228]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004426:	4313      	orrs	r3, r2
 8004428:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800442a:	7bfb      	ldrb	r3, [r7, #15]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d167      	bne.n	8004500 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004430:	4b36      	ldr	r3, [pc, #216]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a35      	ldr	r2, [pc, #212]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004436:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800443a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800443c:	f7fe f934 	bl	80026a8 <HAL_GetTick>
 8004440:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004442:	e009      	b.n	8004458 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004444:	f7fe f930 	bl	80026a8 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d902      	bls.n	8004458 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	73fb      	strb	r3, [r7, #15]
        break;
 8004456:	e005      	b.n	8004464 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004458:	4b2c      	ldr	r3, [pc, #176]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1ef      	bne.n	8004444 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004464:	7bfb      	ldrb	r3, [r7, #15]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d14a      	bne.n	8004500 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d111      	bne.n	8004494 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004470:	4b26      	ldr	r3, [pc, #152]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	6892      	ldr	r2, [r2, #8]
 8004480:	0211      	lsls	r1, r2, #8
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	68d2      	ldr	r2, [r2, #12]
 8004486:	0912      	lsrs	r2, r2, #4
 8004488:	0452      	lsls	r2, r2, #17
 800448a:	430a      	orrs	r2, r1
 800448c:	491f      	ldr	r1, [pc, #124]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 800448e:	4313      	orrs	r3, r2
 8004490:	614b      	str	r3, [r1, #20]
 8004492:	e011      	b.n	80044b8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004494:	4b1d      	ldr	r3, [pc, #116]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800449c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6892      	ldr	r2, [r2, #8]
 80044a4:	0211      	lsls	r1, r2, #8
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6912      	ldr	r2, [r2, #16]
 80044aa:	0852      	lsrs	r2, r2, #1
 80044ac:	3a01      	subs	r2, #1
 80044ae:	0652      	lsls	r2, r2, #25
 80044b0:	430a      	orrs	r2, r1
 80044b2:	4916      	ldr	r1, [pc, #88]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80044b8:	4b14      	ldr	r3, [pc, #80]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a13      	ldr	r2, [pc, #76]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c4:	f7fe f8f0 	bl	80026a8 <HAL_GetTick>
 80044c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044ca:	e009      	b.n	80044e0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044cc:	f7fe f8ec 	bl	80026a8 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d902      	bls.n	80044e0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	73fb      	strb	r3, [r7, #15]
          break;
 80044de:	e005      	b.n	80044ec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044e0:	4b0a      	ldr	r3, [pc, #40]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0ef      	beq.n	80044cc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d106      	bne.n	8004500 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80044f2:	4b06      	ldr	r3, [pc, #24]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044f4:	695a      	ldr	r2, [r3, #20]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	4904      	ldr	r1, [pc, #16]	; (800450c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004500:	7bfb      	ldrb	r3, [r7, #15]
}
 8004502:	4618      	mov	r0, r3
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	40021000 	.word	0x40021000

08004510 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e049      	b.n	80045b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d106      	bne.n	800453c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7fd fee4 	bl	8002304 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	3304      	adds	r3, #4
 800454c:	4619      	mov	r1, r3
 800454e:	4610      	mov	r0, r2
 8004550:	f001 f94a 	bl	80057e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3708      	adds	r7, #8
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
	...

080045c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d001      	beq.n	80045d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e047      	b.n	8004668 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2202      	movs	r2, #2
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a23      	ldr	r2, [pc, #140]	; (8004674 <HAL_TIM_Base_Start+0xb4>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d01d      	beq.n	8004626 <HAL_TIM_Base_Start+0x66>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f2:	d018      	beq.n	8004626 <HAL_TIM_Base_Start+0x66>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a1f      	ldr	r2, [pc, #124]	; (8004678 <HAL_TIM_Base_Start+0xb8>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d013      	beq.n	8004626 <HAL_TIM_Base_Start+0x66>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a1e      	ldr	r2, [pc, #120]	; (800467c <HAL_TIM_Base_Start+0xbc>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d00e      	beq.n	8004626 <HAL_TIM_Base_Start+0x66>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a1c      	ldr	r2, [pc, #112]	; (8004680 <HAL_TIM_Base_Start+0xc0>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d009      	beq.n	8004626 <HAL_TIM_Base_Start+0x66>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a1b      	ldr	r2, [pc, #108]	; (8004684 <HAL_TIM_Base_Start+0xc4>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d004      	beq.n	8004626 <HAL_TIM_Base_Start+0x66>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a19      	ldr	r2, [pc, #100]	; (8004688 <HAL_TIM_Base_Start+0xc8>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d115      	bne.n	8004652 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	4b17      	ldr	r3, [pc, #92]	; (800468c <HAL_TIM_Base_Start+0xcc>)
 800462e:	4013      	ands	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2b06      	cmp	r3, #6
 8004636:	d015      	beq.n	8004664 <HAL_TIM_Base_Start+0xa4>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800463e:	d011      	beq.n	8004664 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0201 	orr.w	r2, r2, #1
 800464e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004650:	e008      	b.n	8004664 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f042 0201 	orr.w	r2, r2, #1
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	e000      	b.n	8004666 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004664:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3714      	adds	r7, #20
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	40012c00 	.word	0x40012c00
 8004678:	40000400 	.word	0x40000400
 800467c:	40000800 	.word	0x40000800
 8004680:	40000c00 	.word	0x40000c00
 8004684:	40013400 	.word	0x40013400
 8004688:	40014000 	.word	0x40014000
 800468c:	00010007 	.word	0x00010007

08004690 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d001      	beq.n	80046a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e04f      	b.n	8004748 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68da      	ldr	r2, [r3, #12]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0201 	orr.w	r2, r2, #1
 80046be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a23      	ldr	r2, [pc, #140]	; (8004754 <HAL_TIM_Base_Start_IT+0xc4>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d01d      	beq.n	8004706 <HAL_TIM_Base_Start_IT+0x76>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d2:	d018      	beq.n	8004706 <HAL_TIM_Base_Start_IT+0x76>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a1f      	ldr	r2, [pc, #124]	; (8004758 <HAL_TIM_Base_Start_IT+0xc8>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d013      	beq.n	8004706 <HAL_TIM_Base_Start_IT+0x76>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a1e      	ldr	r2, [pc, #120]	; (800475c <HAL_TIM_Base_Start_IT+0xcc>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00e      	beq.n	8004706 <HAL_TIM_Base_Start_IT+0x76>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a1c      	ldr	r2, [pc, #112]	; (8004760 <HAL_TIM_Base_Start_IT+0xd0>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d009      	beq.n	8004706 <HAL_TIM_Base_Start_IT+0x76>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a1b      	ldr	r2, [pc, #108]	; (8004764 <HAL_TIM_Base_Start_IT+0xd4>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d004      	beq.n	8004706 <HAL_TIM_Base_Start_IT+0x76>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a19      	ldr	r2, [pc, #100]	; (8004768 <HAL_TIM_Base_Start_IT+0xd8>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d115      	bne.n	8004732 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	4b17      	ldr	r3, [pc, #92]	; (800476c <HAL_TIM_Base_Start_IT+0xdc>)
 800470e:	4013      	ands	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2b06      	cmp	r3, #6
 8004716:	d015      	beq.n	8004744 <HAL_TIM_Base_Start_IT+0xb4>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800471e:	d011      	beq.n	8004744 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f042 0201 	orr.w	r2, r2, #1
 800472e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004730:	e008      	b.n	8004744 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f042 0201 	orr.w	r2, r2, #1
 8004740:	601a      	str	r2, [r3, #0]
 8004742:	e000      	b.n	8004746 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004744:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr
 8004754:	40012c00 	.word	0x40012c00
 8004758:	40000400 	.word	0x40000400
 800475c:	40000800 	.word	0x40000800
 8004760:	40000c00 	.word	0x40000c00
 8004764:	40013400 	.word	0x40013400
 8004768:	40014000 	.word	0x40014000
 800476c:	00010007 	.word	0x00010007

08004770 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e049      	b.n	8004816 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d106      	bne.n	800479c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f841 	bl	800481e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2202      	movs	r2, #2
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	3304      	adds	r3, #4
 80047ac:	4619      	mov	r1, r3
 80047ae:	4610      	mov	r0, r2
 80047b0:	f001 f81a 	bl	80057e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
	...

08004834 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d109      	bne.n	8004858 <HAL_TIM_PWM_Start+0x24>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b01      	cmp	r3, #1
 800484e:	bf14      	ite	ne
 8004850:	2301      	movne	r3, #1
 8004852:	2300      	moveq	r3, #0
 8004854:	b2db      	uxtb	r3, r3
 8004856:	e03c      	b.n	80048d2 <HAL_TIM_PWM_Start+0x9e>
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	2b04      	cmp	r3, #4
 800485c:	d109      	bne.n	8004872 <HAL_TIM_PWM_Start+0x3e>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b01      	cmp	r3, #1
 8004868:	bf14      	ite	ne
 800486a:	2301      	movne	r3, #1
 800486c:	2300      	moveq	r3, #0
 800486e:	b2db      	uxtb	r3, r3
 8004870:	e02f      	b.n	80048d2 <HAL_TIM_PWM_Start+0x9e>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b08      	cmp	r3, #8
 8004876:	d109      	bne.n	800488c <HAL_TIM_PWM_Start+0x58>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b01      	cmp	r3, #1
 8004882:	bf14      	ite	ne
 8004884:	2301      	movne	r3, #1
 8004886:	2300      	moveq	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	e022      	b.n	80048d2 <HAL_TIM_PWM_Start+0x9e>
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	2b0c      	cmp	r3, #12
 8004890:	d109      	bne.n	80048a6 <HAL_TIM_PWM_Start+0x72>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b01      	cmp	r3, #1
 800489c:	bf14      	ite	ne
 800489e:	2301      	movne	r3, #1
 80048a0:	2300      	moveq	r3, #0
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	e015      	b.n	80048d2 <HAL_TIM_PWM_Start+0x9e>
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	2b10      	cmp	r3, #16
 80048aa:	d109      	bne.n	80048c0 <HAL_TIM_PWM_Start+0x8c>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	bf14      	ite	ne
 80048b8:	2301      	movne	r3, #1
 80048ba:	2300      	moveq	r3, #0
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	e008      	b.n	80048d2 <HAL_TIM_PWM_Start+0x9e>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	bf14      	ite	ne
 80048cc:	2301      	movne	r3, #1
 80048ce:	2300      	moveq	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e09c      	b.n	8004a14 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d104      	bne.n	80048ea <HAL_TIM_PWM_Start+0xb6>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2202      	movs	r2, #2
 80048e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048e8:	e023      	b.n	8004932 <HAL_TIM_PWM_Start+0xfe>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b04      	cmp	r3, #4
 80048ee:	d104      	bne.n	80048fa <HAL_TIM_PWM_Start+0xc6>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048f8:	e01b      	b.n	8004932 <HAL_TIM_PWM_Start+0xfe>
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d104      	bne.n	800490a <HAL_TIM_PWM_Start+0xd6>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004908:	e013      	b.n	8004932 <HAL_TIM_PWM_Start+0xfe>
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b0c      	cmp	r3, #12
 800490e:	d104      	bne.n	800491a <HAL_TIM_PWM_Start+0xe6>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004918:	e00b      	b.n	8004932 <HAL_TIM_PWM_Start+0xfe>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b10      	cmp	r3, #16
 800491e:	d104      	bne.n	800492a <HAL_TIM_PWM_Start+0xf6>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004928:	e003      	b.n	8004932 <HAL_TIM_PWM_Start+0xfe>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2202      	movs	r2, #2
 800492e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2201      	movs	r2, #1
 8004938:	6839      	ldr	r1, [r7, #0]
 800493a:	4618      	mov	r0, r3
 800493c:	f001 fd16 	bl	800636c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a35      	ldr	r2, [pc, #212]	; (8004a1c <HAL_TIM_PWM_Start+0x1e8>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d013      	beq.n	8004972 <HAL_TIM_PWM_Start+0x13e>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a34      	ldr	r2, [pc, #208]	; (8004a20 <HAL_TIM_PWM_Start+0x1ec>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d00e      	beq.n	8004972 <HAL_TIM_PWM_Start+0x13e>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a32      	ldr	r2, [pc, #200]	; (8004a24 <HAL_TIM_PWM_Start+0x1f0>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d009      	beq.n	8004972 <HAL_TIM_PWM_Start+0x13e>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a31      	ldr	r2, [pc, #196]	; (8004a28 <HAL_TIM_PWM_Start+0x1f4>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d004      	beq.n	8004972 <HAL_TIM_PWM_Start+0x13e>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a2f      	ldr	r2, [pc, #188]	; (8004a2c <HAL_TIM_PWM_Start+0x1f8>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d101      	bne.n	8004976 <HAL_TIM_PWM_Start+0x142>
 8004972:	2301      	movs	r3, #1
 8004974:	e000      	b.n	8004978 <HAL_TIM_PWM_Start+0x144>
 8004976:	2300      	movs	r3, #0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d007      	beq.n	800498c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800498a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a22      	ldr	r2, [pc, #136]	; (8004a1c <HAL_TIM_PWM_Start+0x1e8>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d01d      	beq.n	80049d2 <HAL_TIM_PWM_Start+0x19e>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800499e:	d018      	beq.n	80049d2 <HAL_TIM_PWM_Start+0x19e>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a22      	ldr	r2, [pc, #136]	; (8004a30 <HAL_TIM_PWM_Start+0x1fc>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d013      	beq.n	80049d2 <HAL_TIM_PWM_Start+0x19e>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a21      	ldr	r2, [pc, #132]	; (8004a34 <HAL_TIM_PWM_Start+0x200>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d00e      	beq.n	80049d2 <HAL_TIM_PWM_Start+0x19e>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a1f      	ldr	r2, [pc, #124]	; (8004a38 <HAL_TIM_PWM_Start+0x204>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d009      	beq.n	80049d2 <HAL_TIM_PWM_Start+0x19e>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a17      	ldr	r2, [pc, #92]	; (8004a20 <HAL_TIM_PWM_Start+0x1ec>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d004      	beq.n	80049d2 <HAL_TIM_PWM_Start+0x19e>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a15      	ldr	r2, [pc, #84]	; (8004a24 <HAL_TIM_PWM_Start+0x1f0>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d115      	bne.n	80049fe <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	4b18      	ldr	r3, [pc, #96]	; (8004a3c <HAL_TIM_PWM_Start+0x208>)
 80049da:	4013      	ands	r3, r2
 80049dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2b06      	cmp	r3, #6
 80049e2:	d015      	beq.n	8004a10 <HAL_TIM_PWM_Start+0x1dc>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ea:	d011      	beq.n	8004a10 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f042 0201 	orr.w	r2, r2, #1
 80049fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049fc:	e008      	b.n	8004a10 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f042 0201 	orr.w	r2, r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]
 8004a0e:	e000      	b.n	8004a12 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a10:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	40012c00 	.word	0x40012c00
 8004a20:	40013400 	.word	0x40013400
 8004a24:	40014000 	.word	0x40014000
 8004a28:	40014400 	.word	0x40014400
 8004a2c:	40014800 	.word	0x40014800
 8004a30:	40000400 	.word	0x40000400
 8004a34:	40000800 	.word	0x40000800
 8004a38:	40000c00 	.word	0x40000c00
 8004a3c:	00010007 	.word	0x00010007

08004a40 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e049      	b.n	8004ae6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d106      	bne.n	8004a6c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f841 	bl	8004aee <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	3304      	adds	r3, #4
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	4610      	mov	r0, r2
 8004a80:	f000 feb2 	bl	80057e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3708      	adds	r7, #8
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
	...

08004b04 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d104      	bne.n	8004b1e <HAL_TIM_IC_Start+0x1a>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	e023      	b.n	8004b66 <HAL_TIM_IC_Start+0x62>
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2b04      	cmp	r3, #4
 8004b22:	d104      	bne.n	8004b2e <HAL_TIM_IC_Start+0x2a>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	e01b      	b.n	8004b66 <HAL_TIM_IC_Start+0x62>
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b08      	cmp	r3, #8
 8004b32:	d104      	bne.n	8004b3e <HAL_TIM_IC_Start+0x3a>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	e013      	b.n	8004b66 <HAL_TIM_IC_Start+0x62>
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	2b0c      	cmp	r3, #12
 8004b42:	d104      	bne.n	8004b4e <HAL_TIM_IC_Start+0x4a>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	e00b      	b.n	8004b66 <HAL_TIM_IC_Start+0x62>
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	2b10      	cmp	r3, #16
 8004b52:	d104      	bne.n	8004b5e <HAL_TIM_IC_Start+0x5a>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	e003      	b.n	8004b66 <HAL_TIM_IC_Start+0x62>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d104      	bne.n	8004b78 <HAL_TIM_IC_Start+0x74>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	e013      	b.n	8004ba0 <HAL_TIM_IC_Start+0x9c>
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	2b04      	cmp	r3, #4
 8004b7c:	d104      	bne.n	8004b88 <HAL_TIM_IC_Start+0x84>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	e00b      	b.n	8004ba0 <HAL_TIM_IC_Start+0x9c>
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	2b08      	cmp	r3, #8
 8004b8c:	d104      	bne.n	8004b98 <HAL_TIM_IC_Start+0x94>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	e003      	b.n	8004ba0 <HAL_TIM_IC_Start+0x9c>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ba2:	7bfb      	ldrb	r3, [r7, #15]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d102      	bne.n	8004bae <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ba8:	7bbb      	ldrb	r3, [r7, #14]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d001      	beq.n	8004bb2 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e092      	b.n	8004cd8 <HAL_TIM_IC_Start+0x1d4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d104      	bne.n	8004bc2 <HAL_TIM_IC_Start+0xbe>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bc0:	e023      	b.n	8004c0a <HAL_TIM_IC_Start+0x106>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b04      	cmp	r3, #4
 8004bc6:	d104      	bne.n	8004bd2 <HAL_TIM_IC_Start+0xce>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bd0:	e01b      	b.n	8004c0a <HAL_TIM_IC_Start+0x106>
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	2b08      	cmp	r3, #8
 8004bd6:	d104      	bne.n	8004be2 <HAL_TIM_IC_Start+0xde>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004be0:	e013      	b.n	8004c0a <HAL_TIM_IC_Start+0x106>
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	2b0c      	cmp	r3, #12
 8004be6:	d104      	bne.n	8004bf2 <HAL_TIM_IC_Start+0xee>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2202      	movs	r2, #2
 8004bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bf0:	e00b      	b.n	8004c0a <HAL_TIM_IC_Start+0x106>
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	2b10      	cmp	r3, #16
 8004bf6:	d104      	bne.n	8004c02 <HAL_TIM_IC_Start+0xfe>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c00:	e003      	b.n	8004c0a <HAL_TIM_IC_Start+0x106>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2202      	movs	r2, #2
 8004c06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d104      	bne.n	8004c1a <HAL_TIM_IC_Start+0x116>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2202      	movs	r2, #2
 8004c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c18:	e013      	b.n	8004c42 <HAL_TIM_IC_Start+0x13e>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d104      	bne.n	8004c2a <HAL_TIM_IC_Start+0x126>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c28:	e00b      	b.n	8004c42 <HAL_TIM_IC_Start+0x13e>
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	d104      	bne.n	8004c3a <HAL_TIM_IC_Start+0x136>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2202      	movs	r2, #2
 8004c34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c38:	e003      	b.n	8004c42 <HAL_TIM_IC_Start+0x13e>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2201      	movs	r2, #1
 8004c48:	6839      	ldr	r1, [r7, #0]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f001 fb8e 	bl	800636c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a22      	ldr	r2, [pc, #136]	; (8004ce0 <HAL_TIM_IC_Start+0x1dc>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d01d      	beq.n	8004c96 <HAL_TIM_IC_Start+0x192>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c62:	d018      	beq.n	8004c96 <HAL_TIM_IC_Start+0x192>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a1e      	ldr	r2, [pc, #120]	; (8004ce4 <HAL_TIM_IC_Start+0x1e0>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d013      	beq.n	8004c96 <HAL_TIM_IC_Start+0x192>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a1d      	ldr	r2, [pc, #116]	; (8004ce8 <HAL_TIM_IC_Start+0x1e4>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d00e      	beq.n	8004c96 <HAL_TIM_IC_Start+0x192>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a1b      	ldr	r2, [pc, #108]	; (8004cec <HAL_TIM_IC_Start+0x1e8>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d009      	beq.n	8004c96 <HAL_TIM_IC_Start+0x192>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a1a      	ldr	r2, [pc, #104]	; (8004cf0 <HAL_TIM_IC_Start+0x1ec>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d004      	beq.n	8004c96 <HAL_TIM_IC_Start+0x192>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a18      	ldr	r2, [pc, #96]	; (8004cf4 <HAL_TIM_IC_Start+0x1f0>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d115      	bne.n	8004cc2 <HAL_TIM_IC_Start+0x1be>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	4b16      	ldr	r3, [pc, #88]	; (8004cf8 <HAL_TIM_IC_Start+0x1f4>)
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	2b06      	cmp	r3, #6
 8004ca6:	d015      	beq.n	8004cd4 <HAL_TIM_IC_Start+0x1d0>
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cae:	d011      	beq.n	8004cd4 <HAL_TIM_IC_Start+0x1d0>
    {
      __HAL_TIM_ENABLE(htim);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0201 	orr.w	r2, r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cc0:	e008      	b.n	8004cd4 <HAL_TIM_IC_Start+0x1d0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f042 0201 	orr.w	r2, r2, #1
 8004cd0:	601a      	str	r2, [r3, #0]
 8004cd2:	e000      	b.n	8004cd6 <HAL_TIM_IC_Start+0x1d2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	40012c00 	.word	0x40012c00
 8004ce4:	40000400 	.word	0x40000400
 8004ce8:	40000800 	.word	0x40000800
 8004cec:	40000c00 	.word	0x40000c00
 8004cf0:	40013400 	.word	0x40013400
 8004cf4:	40014000 	.word	0x40014000
 8004cf8:	00010007 	.word	0x00010007

08004cfc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d06:	2300      	movs	r3, #0
 8004d08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d104      	bne.n	8004d1a <HAL_TIM_IC_Start_IT+0x1e>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	e023      	b.n	8004d62 <HAL_TIM_IC_Start_IT+0x66>
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	2b04      	cmp	r3, #4
 8004d1e:	d104      	bne.n	8004d2a <HAL_TIM_IC_Start_IT+0x2e>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	e01b      	b.n	8004d62 <HAL_TIM_IC_Start_IT+0x66>
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2b08      	cmp	r3, #8
 8004d2e:	d104      	bne.n	8004d3a <HAL_TIM_IC_Start_IT+0x3e>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	e013      	b.n	8004d62 <HAL_TIM_IC_Start_IT+0x66>
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	2b0c      	cmp	r3, #12
 8004d3e:	d104      	bne.n	8004d4a <HAL_TIM_IC_Start_IT+0x4e>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	e00b      	b.n	8004d62 <HAL_TIM_IC_Start_IT+0x66>
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	2b10      	cmp	r3, #16
 8004d4e:	d104      	bne.n	8004d5a <HAL_TIM_IC_Start_IT+0x5e>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	e003      	b.n	8004d62 <HAL_TIM_IC_Start_IT+0x66>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d104      	bne.n	8004d74 <HAL_TIM_IC_Start_IT+0x78>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	e013      	b.n	8004d9c <HAL_TIM_IC_Start_IT+0xa0>
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d104      	bne.n	8004d84 <HAL_TIM_IC_Start_IT+0x88>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	e00b      	b.n	8004d9c <HAL_TIM_IC_Start_IT+0xa0>
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	2b08      	cmp	r3, #8
 8004d88:	d104      	bne.n	8004d94 <HAL_TIM_IC_Start_IT+0x98>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	e003      	b.n	8004d9c <HAL_TIM_IC_Start_IT+0xa0>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d9e:	7bbb      	ldrb	r3, [r7, #14]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d102      	bne.n	8004daa <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004da4:	7b7b      	ldrb	r3, [r7, #13]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d001      	beq.n	8004dae <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e0dd      	b.n	8004f6a <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d104      	bne.n	8004dbe <HAL_TIM_IC_Start_IT+0xc2>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dbc:	e023      	b.n	8004e06 <HAL_TIM_IC_Start_IT+0x10a>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b04      	cmp	r3, #4
 8004dc2:	d104      	bne.n	8004dce <HAL_TIM_IC_Start_IT+0xd2>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dcc:	e01b      	b.n	8004e06 <HAL_TIM_IC_Start_IT+0x10a>
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d104      	bne.n	8004dde <HAL_TIM_IC_Start_IT+0xe2>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ddc:	e013      	b.n	8004e06 <HAL_TIM_IC_Start_IT+0x10a>
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	2b0c      	cmp	r3, #12
 8004de2:	d104      	bne.n	8004dee <HAL_TIM_IC_Start_IT+0xf2>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004dec:	e00b      	b.n	8004e06 <HAL_TIM_IC_Start_IT+0x10a>
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	2b10      	cmp	r3, #16
 8004df2:	d104      	bne.n	8004dfe <HAL_TIM_IC_Start_IT+0x102>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2202      	movs	r2, #2
 8004df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dfc:	e003      	b.n	8004e06 <HAL_TIM_IC_Start_IT+0x10a>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2202      	movs	r2, #2
 8004e02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d104      	bne.n	8004e16 <HAL_TIM_IC_Start_IT+0x11a>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e14:	e013      	b.n	8004e3e <HAL_TIM_IC_Start_IT+0x142>
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b04      	cmp	r3, #4
 8004e1a:	d104      	bne.n	8004e26 <HAL_TIM_IC_Start_IT+0x12a>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e24:	e00b      	b.n	8004e3e <HAL_TIM_IC_Start_IT+0x142>
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2b08      	cmp	r3, #8
 8004e2a:	d104      	bne.n	8004e36 <HAL_TIM_IC_Start_IT+0x13a>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e34:	e003      	b.n	8004e3e <HAL_TIM_IC_Start_IT+0x142>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2202      	movs	r2, #2
 8004e3a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b0c      	cmp	r3, #12
 8004e42:	d841      	bhi.n	8004ec8 <HAL_TIM_IC_Start_IT+0x1cc>
 8004e44:	a201      	add	r2, pc, #4	; (adr r2, 8004e4c <HAL_TIM_IC_Start_IT+0x150>)
 8004e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4a:	bf00      	nop
 8004e4c:	08004e81 	.word	0x08004e81
 8004e50:	08004ec9 	.word	0x08004ec9
 8004e54:	08004ec9 	.word	0x08004ec9
 8004e58:	08004ec9 	.word	0x08004ec9
 8004e5c:	08004e93 	.word	0x08004e93
 8004e60:	08004ec9 	.word	0x08004ec9
 8004e64:	08004ec9 	.word	0x08004ec9
 8004e68:	08004ec9 	.word	0x08004ec9
 8004e6c:	08004ea5 	.word	0x08004ea5
 8004e70:	08004ec9 	.word	0x08004ec9
 8004e74:	08004ec9 	.word	0x08004ec9
 8004e78:	08004ec9 	.word	0x08004ec9
 8004e7c:	08004eb7 	.word	0x08004eb7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68da      	ldr	r2, [r3, #12]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0202 	orr.w	r2, r2, #2
 8004e8e:	60da      	str	r2, [r3, #12]
      break;
 8004e90:	e01d      	b.n	8004ece <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68da      	ldr	r2, [r3, #12]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f042 0204 	orr.w	r2, r2, #4
 8004ea0:	60da      	str	r2, [r3, #12]
      break;
 8004ea2:	e014      	b.n	8004ece <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68da      	ldr	r2, [r3, #12]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0208 	orr.w	r2, r2, #8
 8004eb2:	60da      	str	r2, [r3, #12]
      break;
 8004eb4:	e00b      	b.n	8004ece <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68da      	ldr	r2, [r3, #12]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f042 0210 	orr.w	r2, r2, #16
 8004ec4:	60da      	str	r2, [r3, #12]
      break;
 8004ec6:	e002      	b.n	8004ece <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	73fb      	strb	r3, [r7, #15]
      break;
 8004ecc:	bf00      	nop
  }

  if (status == HAL_OK)
 8004ece:	7bfb      	ldrb	r3, [r7, #15]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d149      	bne.n	8004f68 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	6839      	ldr	r1, [r7, #0]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f001 fa45 	bl	800636c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a23      	ldr	r2, [pc, #140]	; (8004f74 <HAL_TIM_IC_Start_IT+0x278>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d01d      	beq.n	8004f28 <HAL_TIM_IC_Start_IT+0x22c>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef4:	d018      	beq.n	8004f28 <HAL_TIM_IC_Start_IT+0x22c>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a1f      	ldr	r2, [pc, #124]	; (8004f78 <HAL_TIM_IC_Start_IT+0x27c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d013      	beq.n	8004f28 <HAL_TIM_IC_Start_IT+0x22c>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a1d      	ldr	r2, [pc, #116]	; (8004f7c <HAL_TIM_IC_Start_IT+0x280>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d00e      	beq.n	8004f28 <HAL_TIM_IC_Start_IT+0x22c>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a1c      	ldr	r2, [pc, #112]	; (8004f80 <HAL_TIM_IC_Start_IT+0x284>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d009      	beq.n	8004f28 <HAL_TIM_IC_Start_IT+0x22c>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a1a      	ldr	r2, [pc, #104]	; (8004f84 <HAL_TIM_IC_Start_IT+0x288>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d004      	beq.n	8004f28 <HAL_TIM_IC_Start_IT+0x22c>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a19      	ldr	r2, [pc, #100]	; (8004f88 <HAL_TIM_IC_Start_IT+0x28c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d115      	bne.n	8004f54 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	689a      	ldr	r2, [r3, #8]
 8004f2e:	4b17      	ldr	r3, [pc, #92]	; (8004f8c <HAL_TIM_IC_Start_IT+0x290>)
 8004f30:	4013      	ands	r3, r2
 8004f32:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	2b06      	cmp	r3, #6
 8004f38:	d015      	beq.n	8004f66 <HAL_TIM_IC_Start_IT+0x26a>
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f40:	d011      	beq.n	8004f66 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f042 0201 	orr.w	r2, r2, #1
 8004f50:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f52:	e008      	b.n	8004f66 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	e000      	b.n	8004f68 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f66:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	40012c00 	.word	0x40012c00
 8004f78:	40000400 	.word	0x40000400
 8004f7c:	40000800 	.word	0x40000800
 8004f80:	40000c00 	.word	0x40000c00
 8004f84:	40013400 	.word	0x40013400
 8004f88:	40014000 	.word	0x40014000
 8004f8c:	00010007 	.word	0x00010007

08004f90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d020      	beq.n	8004ff4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d01b      	beq.n	8004ff4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f06f 0202 	mvn.w	r2, #2
 8004fc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	f003 0303 	and.w	r3, r3, #3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7fc f8b0 	bl	8001140 <HAL_TIM_IC_CaptureCallback>
 8004fe0:	e005      	b.n	8004fee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 fbd6 	bl	8005794 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 fbdd 	bl	80057a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	f003 0304 	and.w	r3, r3, #4
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d020      	beq.n	8005040 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f003 0304 	and.w	r3, r3, #4
 8005004:	2b00      	cmp	r3, #0
 8005006:	d01b      	beq.n	8005040 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f06f 0204 	mvn.w	r2, #4
 8005010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2202      	movs	r2, #2
 8005016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7fc f88a 	bl	8001140 <HAL_TIM_IC_CaptureCallback>
 800502c:	e005      	b.n	800503a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 fbb0 	bl	8005794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 fbb7 	bl	80057a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	f003 0308 	and.w	r3, r3, #8
 8005046:	2b00      	cmp	r3, #0
 8005048:	d020      	beq.n	800508c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f003 0308 	and.w	r3, r3, #8
 8005050:	2b00      	cmp	r3, #0
 8005052:	d01b      	beq.n	800508c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f06f 0208 	mvn.w	r2, #8
 800505c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2204      	movs	r2, #4
 8005062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	f003 0303 	and.w	r3, r3, #3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d003      	beq.n	800507a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f7fc f864 	bl	8001140 <HAL_TIM_IC_CaptureCallback>
 8005078:	e005      	b.n	8005086 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 fb8a 	bl	8005794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 fb91 	bl	80057a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	f003 0310 	and.w	r3, r3, #16
 8005092:	2b00      	cmp	r3, #0
 8005094:	d020      	beq.n	80050d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f003 0310 	and.w	r3, r3, #16
 800509c:	2b00      	cmp	r3, #0
 800509e:	d01b      	beq.n	80050d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f06f 0210 	mvn.w	r2, #16
 80050a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2208      	movs	r2, #8
 80050ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7fc f83e 	bl	8001140 <HAL_TIM_IC_CaptureCallback>
 80050c4:	e005      	b.n	80050d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 fb64 	bl	8005794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 fb6b 	bl	80057a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00c      	beq.n	80050fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d007      	beq.n	80050fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f06f 0201 	mvn.w	r2, #1
 80050f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7fc fd86 	bl	8001c08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00c      	beq.n	8005120 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800510c:	2b00      	cmp	r3, #0
 800510e:	d007      	beq.n	8005120 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f001 f9de 	bl	80064dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00c      	beq.n	8005144 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005130:	2b00      	cmp	r3, #0
 8005132:	d007      	beq.n	8005144 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800513c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f001 f9d6 	bl	80064f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00c      	beq.n	8005168 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005154:	2b00      	cmp	r3, #0
 8005156:	d007      	beq.n	8005168 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 fb2a 	bl	80057bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	f003 0320 	and.w	r3, r3, #32
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00c      	beq.n	800518c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f003 0320 	and.w	r3, r3, #32
 8005178:	2b00      	cmp	r3, #0
 800517a:	d007      	beq.n	800518c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f06f 0220 	mvn.w	r2, #32
 8005184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f001 f99e 	bl	80064c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800518c:	bf00      	nop
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051a0:	2300      	movs	r3, #0
 80051a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d101      	bne.n	80051b2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80051ae:	2302      	movs	r3, #2
 80051b0:	e088      	b.n	80052c4 <HAL_TIM_IC_ConfigChannel+0x130>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d11b      	bne.n	80051f8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80051d0:	f000 ff0e 	bl	8005ff0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	699a      	ldr	r2, [r3, #24]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 020c 	bic.w	r2, r2, #12
 80051e2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6999      	ldr	r1, [r3, #24]
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	689a      	ldr	r2, [r3, #8]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	619a      	str	r2, [r3, #24]
 80051f6:	e060      	b.n	80052ba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b04      	cmp	r3, #4
 80051fc:	d11c      	bne.n	8005238 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800520e:	f000 ff8c 	bl	800612a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	699a      	ldr	r2, [r3, #24]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005220:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6999      	ldr	r1, [r3, #24]
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	021a      	lsls	r2, r3, #8
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	619a      	str	r2, [r3, #24]
 8005236:	e040      	b.n	80052ba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b08      	cmp	r3, #8
 800523c:	d11b      	bne.n	8005276 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800524e:	f000 ffd9 	bl	8006204 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	69da      	ldr	r2, [r3, #28]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 020c 	bic.w	r2, r2, #12
 8005260:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	69d9      	ldr	r1, [r3, #28]
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	430a      	orrs	r2, r1
 8005272:	61da      	str	r2, [r3, #28]
 8005274:	e021      	b.n	80052ba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b0c      	cmp	r3, #12
 800527a:	d11c      	bne.n	80052b6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800528c:	f000 fff6 	bl	800627c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	69da      	ldr	r2, [r3, #28]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800529e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	69d9      	ldr	r1, [r3, #28]
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	021a      	lsls	r2, r3, #8
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	430a      	orrs	r2, r1
 80052b2:	61da      	str	r2, [r3, #28]
 80052b4:	e001      	b.n	80052ba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3718      	adds	r7, #24
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052d8:	2300      	movs	r3, #0
 80052da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d101      	bne.n	80052ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80052e6:	2302      	movs	r3, #2
 80052e8:	e0ff      	b.n	80054ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2b14      	cmp	r3, #20
 80052f6:	f200 80f0 	bhi.w	80054da <HAL_TIM_PWM_ConfigChannel+0x20e>
 80052fa:	a201      	add	r2, pc, #4	; (adr r2, 8005300 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80052fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005300:	08005355 	.word	0x08005355
 8005304:	080054db 	.word	0x080054db
 8005308:	080054db 	.word	0x080054db
 800530c:	080054db 	.word	0x080054db
 8005310:	08005395 	.word	0x08005395
 8005314:	080054db 	.word	0x080054db
 8005318:	080054db 	.word	0x080054db
 800531c:	080054db 	.word	0x080054db
 8005320:	080053d7 	.word	0x080053d7
 8005324:	080054db 	.word	0x080054db
 8005328:	080054db 	.word	0x080054db
 800532c:	080054db 	.word	0x080054db
 8005330:	08005417 	.word	0x08005417
 8005334:	080054db 	.word	0x080054db
 8005338:	080054db 	.word	0x080054db
 800533c:	080054db 	.word	0x080054db
 8005340:	08005459 	.word	0x08005459
 8005344:	080054db 	.word	0x080054db
 8005348:	080054db 	.word	0x080054db
 800534c:	080054db 	.word	0x080054db
 8005350:	08005499 	.word	0x08005499
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68b9      	ldr	r1, [r7, #8]
 800535a:	4618      	mov	r0, r3
 800535c:	f000 fade 	bl	800591c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	699a      	ldr	r2, [r3, #24]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 0208 	orr.w	r2, r2, #8
 800536e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699a      	ldr	r2, [r3, #24]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 0204 	bic.w	r2, r2, #4
 800537e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6999      	ldr	r1, [r3, #24]
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	691a      	ldr	r2, [r3, #16]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	430a      	orrs	r2, r1
 8005390:	619a      	str	r2, [r3, #24]
      break;
 8005392:	e0a5      	b.n	80054e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68b9      	ldr	r1, [r7, #8]
 800539a:	4618      	mov	r0, r3
 800539c:	f000 fb4e 	bl	8005a3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	699a      	ldr	r2, [r3, #24]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699a      	ldr	r2, [r3, #24]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6999      	ldr	r1, [r3, #24]
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	021a      	lsls	r2, r3, #8
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	430a      	orrs	r2, r1
 80053d2:	619a      	str	r2, [r3, #24]
      break;
 80053d4:	e084      	b.n	80054e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68b9      	ldr	r1, [r7, #8]
 80053dc:	4618      	mov	r0, r3
 80053de:	f000 fbb7 	bl	8005b50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	69da      	ldr	r2, [r3, #28]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f042 0208 	orr.w	r2, r2, #8
 80053f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	69da      	ldr	r2, [r3, #28]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f022 0204 	bic.w	r2, r2, #4
 8005400:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	69d9      	ldr	r1, [r3, #28]
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	691a      	ldr	r2, [r3, #16]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	61da      	str	r2, [r3, #28]
      break;
 8005414:	e064      	b.n	80054e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68b9      	ldr	r1, [r7, #8]
 800541c:	4618      	mov	r0, r3
 800541e:	f000 fc1f 	bl	8005c60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	69da      	ldr	r2, [r3, #28]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005430:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	69da      	ldr	r2, [r3, #28]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005440:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	69d9      	ldr	r1, [r3, #28]
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	021a      	lsls	r2, r3, #8
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	61da      	str	r2, [r3, #28]
      break;
 8005456:	e043      	b.n	80054e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68b9      	ldr	r1, [r7, #8]
 800545e:	4618      	mov	r0, r3
 8005460:	f000 fc68 	bl	8005d34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f042 0208 	orr.w	r2, r2, #8
 8005472:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f022 0204 	bic.w	r2, r2, #4
 8005482:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	691a      	ldr	r2, [r3, #16]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005496:	e023      	b.n	80054e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68b9      	ldr	r1, [r7, #8]
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 fcac 	bl	8005dfc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	021a      	lsls	r2, r3, #8
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80054d8:	e002      	b.n	80054e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	75fb      	strb	r3, [r7, #23]
      break;
 80054de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3718      	adds	r7, #24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop

080054f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054fe:	2300      	movs	r3, #0
 8005500:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005508:	2b01      	cmp	r3, #1
 800550a:	d101      	bne.n	8005510 <HAL_TIM_ConfigClockSource+0x1c>
 800550c:	2302      	movs	r3, #2
 800550e:	e0b6      	b.n	800567e <HAL_TIM_ConfigClockSource+0x18a>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2202      	movs	r2, #2
 800551c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800552e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005532:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800553a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800554c:	d03e      	beq.n	80055cc <HAL_TIM_ConfigClockSource+0xd8>
 800554e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005552:	f200 8087 	bhi.w	8005664 <HAL_TIM_ConfigClockSource+0x170>
 8005556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800555a:	f000 8086 	beq.w	800566a <HAL_TIM_ConfigClockSource+0x176>
 800555e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005562:	d87f      	bhi.n	8005664 <HAL_TIM_ConfigClockSource+0x170>
 8005564:	2b70      	cmp	r3, #112	; 0x70
 8005566:	d01a      	beq.n	800559e <HAL_TIM_ConfigClockSource+0xaa>
 8005568:	2b70      	cmp	r3, #112	; 0x70
 800556a:	d87b      	bhi.n	8005664 <HAL_TIM_ConfigClockSource+0x170>
 800556c:	2b60      	cmp	r3, #96	; 0x60
 800556e:	d050      	beq.n	8005612 <HAL_TIM_ConfigClockSource+0x11e>
 8005570:	2b60      	cmp	r3, #96	; 0x60
 8005572:	d877      	bhi.n	8005664 <HAL_TIM_ConfigClockSource+0x170>
 8005574:	2b50      	cmp	r3, #80	; 0x50
 8005576:	d03c      	beq.n	80055f2 <HAL_TIM_ConfigClockSource+0xfe>
 8005578:	2b50      	cmp	r3, #80	; 0x50
 800557a:	d873      	bhi.n	8005664 <HAL_TIM_ConfigClockSource+0x170>
 800557c:	2b40      	cmp	r3, #64	; 0x40
 800557e:	d058      	beq.n	8005632 <HAL_TIM_ConfigClockSource+0x13e>
 8005580:	2b40      	cmp	r3, #64	; 0x40
 8005582:	d86f      	bhi.n	8005664 <HAL_TIM_ConfigClockSource+0x170>
 8005584:	2b30      	cmp	r3, #48	; 0x30
 8005586:	d064      	beq.n	8005652 <HAL_TIM_ConfigClockSource+0x15e>
 8005588:	2b30      	cmp	r3, #48	; 0x30
 800558a:	d86b      	bhi.n	8005664 <HAL_TIM_ConfigClockSource+0x170>
 800558c:	2b20      	cmp	r3, #32
 800558e:	d060      	beq.n	8005652 <HAL_TIM_ConfigClockSource+0x15e>
 8005590:	2b20      	cmp	r3, #32
 8005592:	d867      	bhi.n	8005664 <HAL_TIM_ConfigClockSource+0x170>
 8005594:	2b00      	cmp	r3, #0
 8005596:	d05c      	beq.n	8005652 <HAL_TIM_ConfigClockSource+0x15e>
 8005598:	2b10      	cmp	r3, #16
 800559a:	d05a      	beq.n	8005652 <HAL_TIM_ConfigClockSource+0x15e>
 800559c:	e062      	b.n	8005664 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055ae:	f000 febd 	bl	800632c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	609a      	str	r2, [r3, #8]
      break;
 80055ca:	e04f      	b.n	800566c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055dc:	f000 fea6 	bl	800632c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689a      	ldr	r2, [r3, #8]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055ee:	609a      	str	r2, [r3, #8]
      break;
 80055f0:	e03c      	b.n	800566c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055fe:	461a      	mov	r2, r3
 8005600:	f000 fd64 	bl	80060cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2150      	movs	r1, #80	; 0x50
 800560a:	4618      	mov	r0, r3
 800560c:	f000 fe73 	bl	80062f6 <TIM_ITRx_SetConfig>
      break;
 8005610:	e02c      	b.n	800566c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800561e:	461a      	mov	r2, r3
 8005620:	f000 fdc0 	bl	80061a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2160      	movs	r1, #96	; 0x60
 800562a:	4618      	mov	r0, r3
 800562c:	f000 fe63 	bl	80062f6 <TIM_ITRx_SetConfig>
      break;
 8005630:	e01c      	b.n	800566c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800563e:	461a      	mov	r2, r3
 8005640:	f000 fd44 	bl	80060cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2140      	movs	r1, #64	; 0x40
 800564a:	4618      	mov	r0, r3
 800564c:	f000 fe53 	bl	80062f6 <TIM_ITRx_SetConfig>
      break;
 8005650:	e00c      	b.n	800566c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4619      	mov	r1, r3
 800565c:	4610      	mov	r0, r2
 800565e:	f000 fe4a 	bl	80062f6 <TIM_ITRx_SetConfig>
      break;
 8005662:	e003      	b.n	800566c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	73fb      	strb	r3, [r7, #15]
      break;
 8005668:	e000      	b.n	800566c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800566a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800567c:	7bfb      	ldrb	r3, [r7, #15]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b082      	sub	sp, #8
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
 800568e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005696:	2b01      	cmp	r3, #1
 8005698:	d101      	bne.n	800569e <HAL_TIM_SlaveConfigSynchro+0x18>
 800569a:	2302      	movs	r3, #2
 800569c:	e031      	b.n	8005702 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2202      	movs	r2, #2
 80056aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80056ae:	6839      	ldr	r1, [r7, #0]
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 fc09 	bl	8005ec8 <TIM_SlaveTimer_SetConfig>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d009      	beq.n	80056d0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e018      	b.n	8005702 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056de:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68da      	ldr	r2, [r3, #12]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80056ee:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
	...

0800570c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005716:	2300      	movs	r3, #0
 8005718:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	2b0c      	cmp	r3, #12
 800571e:	d831      	bhi.n	8005784 <HAL_TIM_ReadCapturedValue+0x78>
 8005720:	a201      	add	r2, pc, #4	; (adr r2, 8005728 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005726:	bf00      	nop
 8005728:	0800575d 	.word	0x0800575d
 800572c:	08005785 	.word	0x08005785
 8005730:	08005785 	.word	0x08005785
 8005734:	08005785 	.word	0x08005785
 8005738:	08005767 	.word	0x08005767
 800573c:	08005785 	.word	0x08005785
 8005740:	08005785 	.word	0x08005785
 8005744:	08005785 	.word	0x08005785
 8005748:	08005771 	.word	0x08005771
 800574c:	08005785 	.word	0x08005785
 8005750:	08005785 	.word	0x08005785
 8005754:	08005785 	.word	0x08005785
 8005758:	0800577b 	.word	0x0800577b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005762:	60fb      	str	r3, [r7, #12]

      break;
 8005764:	e00f      	b.n	8005786 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576c:	60fb      	str	r3, [r7, #12]

      break;
 800576e:	e00a      	b.n	8005786 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005776:	60fb      	str	r3, [r7, #12]

      break;
 8005778:	e005      	b.n	8005786 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005780:	60fb      	str	r3, [r7, #12]

      break;
 8005782:	e000      	b.n	8005786 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005784:	bf00      	nop
  }

  return tmpreg;
 8005786:	68fb      	ldr	r3, [r7, #12]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3714      	adds	r7, #20
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(const TIM_HandleTypeDef *htim)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	7f1b      	ldrb	r3, [r3, #28]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a40      	ldr	r2, [pc, #256]	; (80058fc <TIM_Base_SetConfig+0x114>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d013      	beq.n	8005828 <TIM_Base_SetConfig+0x40>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005806:	d00f      	beq.n	8005828 <TIM_Base_SetConfig+0x40>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a3d      	ldr	r2, [pc, #244]	; (8005900 <TIM_Base_SetConfig+0x118>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d00b      	beq.n	8005828 <TIM_Base_SetConfig+0x40>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a3c      	ldr	r2, [pc, #240]	; (8005904 <TIM_Base_SetConfig+0x11c>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d007      	beq.n	8005828 <TIM_Base_SetConfig+0x40>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a3b      	ldr	r2, [pc, #236]	; (8005908 <TIM_Base_SetConfig+0x120>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d003      	beq.n	8005828 <TIM_Base_SetConfig+0x40>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a3a      	ldr	r2, [pc, #232]	; (800590c <TIM_Base_SetConfig+0x124>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d108      	bne.n	800583a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800582e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	4313      	orrs	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a2f      	ldr	r2, [pc, #188]	; (80058fc <TIM_Base_SetConfig+0x114>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d01f      	beq.n	8005882 <TIM_Base_SetConfig+0x9a>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005848:	d01b      	beq.n	8005882 <TIM_Base_SetConfig+0x9a>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a2c      	ldr	r2, [pc, #176]	; (8005900 <TIM_Base_SetConfig+0x118>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d017      	beq.n	8005882 <TIM_Base_SetConfig+0x9a>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a2b      	ldr	r2, [pc, #172]	; (8005904 <TIM_Base_SetConfig+0x11c>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d013      	beq.n	8005882 <TIM_Base_SetConfig+0x9a>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a2a      	ldr	r2, [pc, #168]	; (8005908 <TIM_Base_SetConfig+0x120>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d00f      	beq.n	8005882 <TIM_Base_SetConfig+0x9a>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a29      	ldr	r2, [pc, #164]	; (800590c <TIM_Base_SetConfig+0x124>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d00b      	beq.n	8005882 <TIM_Base_SetConfig+0x9a>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a28      	ldr	r2, [pc, #160]	; (8005910 <TIM_Base_SetConfig+0x128>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d007      	beq.n	8005882 <TIM_Base_SetConfig+0x9a>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a27      	ldr	r2, [pc, #156]	; (8005914 <TIM_Base_SetConfig+0x12c>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d003      	beq.n	8005882 <TIM_Base_SetConfig+0x9a>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a26      	ldr	r2, [pc, #152]	; (8005918 <TIM_Base_SetConfig+0x130>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d108      	bne.n	8005894 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005888:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	4313      	orrs	r3, r2
 8005892:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	4313      	orrs	r3, r2
 80058a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	689a      	ldr	r2, [r3, #8]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a10      	ldr	r2, [pc, #64]	; (80058fc <TIM_Base_SetConfig+0x114>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d00f      	beq.n	80058e0 <TIM_Base_SetConfig+0xf8>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a12      	ldr	r2, [pc, #72]	; (800590c <TIM_Base_SetConfig+0x124>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d00b      	beq.n	80058e0 <TIM_Base_SetConfig+0xf8>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a11      	ldr	r2, [pc, #68]	; (8005910 <TIM_Base_SetConfig+0x128>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d007      	beq.n	80058e0 <TIM_Base_SetConfig+0xf8>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a10      	ldr	r2, [pc, #64]	; (8005914 <TIM_Base_SetConfig+0x12c>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d003      	beq.n	80058e0 <TIM_Base_SetConfig+0xf8>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a0f      	ldr	r2, [pc, #60]	; (8005918 <TIM_Base_SetConfig+0x130>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d103      	bne.n	80058e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	691a      	ldr	r2, [r3, #16]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	615a      	str	r2, [r3, #20]
}
 80058ee:	bf00      	nop
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	40012c00 	.word	0x40012c00
 8005900:	40000400 	.word	0x40000400
 8005904:	40000800 	.word	0x40000800
 8005908:	40000c00 	.word	0x40000c00
 800590c:	40013400 	.word	0x40013400
 8005910:	40014000 	.word	0x40014000
 8005914:	40014400 	.word	0x40014400
 8005918:	40014800 	.word	0x40014800

0800591c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800591c:	b480      	push	{r7}
 800591e:	b087      	sub	sp, #28
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	f023 0201 	bic.w	r2, r3, #1
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800594a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800594e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f023 0303 	bic.w	r3, r3, #3
 8005956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	4313      	orrs	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	f023 0302 	bic.w	r3, r3, #2
 8005968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	4313      	orrs	r3, r2
 8005972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a2c      	ldr	r2, [pc, #176]	; (8005a28 <TIM_OC1_SetConfig+0x10c>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d00f      	beq.n	800599c <TIM_OC1_SetConfig+0x80>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a2b      	ldr	r2, [pc, #172]	; (8005a2c <TIM_OC1_SetConfig+0x110>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d00b      	beq.n	800599c <TIM_OC1_SetConfig+0x80>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a2a      	ldr	r2, [pc, #168]	; (8005a30 <TIM_OC1_SetConfig+0x114>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d007      	beq.n	800599c <TIM_OC1_SetConfig+0x80>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a29      	ldr	r2, [pc, #164]	; (8005a34 <TIM_OC1_SetConfig+0x118>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d003      	beq.n	800599c <TIM_OC1_SetConfig+0x80>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a28      	ldr	r2, [pc, #160]	; (8005a38 <TIM_OC1_SetConfig+0x11c>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d10c      	bne.n	80059b6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f023 0308 	bic.w	r3, r3, #8
 80059a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	f023 0304 	bic.w	r3, r3, #4
 80059b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a1b      	ldr	r2, [pc, #108]	; (8005a28 <TIM_OC1_SetConfig+0x10c>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d00f      	beq.n	80059de <TIM_OC1_SetConfig+0xc2>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a1a      	ldr	r2, [pc, #104]	; (8005a2c <TIM_OC1_SetConfig+0x110>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d00b      	beq.n	80059de <TIM_OC1_SetConfig+0xc2>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a19      	ldr	r2, [pc, #100]	; (8005a30 <TIM_OC1_SetConfig+0x114>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d007      	beq.n	80059de <TIM_OC1_SetConfig+0xc2>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a18      	ldr	r2, [pc, #96]	; (8005a34 <TIM_OC1_SetConfig+0x118>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d003      	beq.n	80059de <TIM_OC1_SetConfig+0xc2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a17      	ldr	r2, [pc, #92]	; (8005a38 <TIM_OC1_SetConfig+0x11c>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d111      	bne.n	8005a02 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	621a      	str	r2, [r3, #32]
}
 8005a1c:	bf00      	nop
 8005a1e:	371c      	adds	r7, #28
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr
 8005a28:	40012c00 	.word	0x40012c00
 8005a2c:	40013400 	.word	0x40013400
 8005a30:	40014000 	.word	0x40014000
 8005a34:	40014400 	.word	0x40014400
 8005a38:	40014800 	.word	0x40014800

08005a3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b087      	sub	sp, #28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	f023 0210 	bic.w	r2, r3, #16
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	021b      	lsls	r3, r3, #8
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	f023 0320 	bic.w	r3, r3, #32
 8005a8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	011b      	lsls	r3, r3, #4
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a28      	ldr	r2, [pc, #160]	; (8005b3c <TIM_OC2_SetConfig+0x100>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d003      	beq.n	8005aa8 <TIM_OC2_SetConfig+0x6c>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a27      	ldr	r2, [pc, #156]	; (8005b40 <TIM_OC2_SetConfig+0x104>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d10d      	bne.n	8005ac4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	011b      	lsls	r3, r3, #4
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ac2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a1d      	ldr	r2, [pc, #116]	; (8005b3c <TIM_OC2_SetConfig+0x100>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d00f      	beq.n	8005aec <TIM_OC2_SetConfig+0xb0>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a1c      	ldr	r2, [pc, #112]	; (8005b40 <TIM_OC2_SetConfig+0x104>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d00b      	beq.n	8005aec <TIM_OC2_SetConfig+0xb0>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a1b      	ldr	r2, [pc, #108]	; (8005b44 <TIM_OC2_SetConfig+0x108>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d007      	beq.n	8005aec <TIM_OC2_SetConfig+0xb0>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a1a      	ldr	r2, [pc, #104]	; (8005b48 <TIM_OC2_SetConfig+0x10c>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d003      	beq.n	8005aec <TIM_OC2_SetConfig+0xb0>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a19      	ldr	r2, [pc, #100]	; (8005b4c <TIM_OC2_SetConfig+0x110>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d113      	bne.n	8005b14 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005af2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005afa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	695b      	ldr	r3, [r3, #20]
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	621a      	str	r2, [r3, #32]
}
 8005b2e:	bf00      	nop
 8005b30:	371c      	adds	r7, #28
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	40012c00 	.word	0x40012c00
 8005b40:	40013400 	.word	0x40013400
 8005b44:	40014000 	.word	0x40014000
 8005b48:	40014400 	.word	0x40014400
 8005b4c:	40014800 	.word	0x40014800

08005b50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b087      	sub	sp, #28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f023 0303 	bic.w	r3, r3, #3
 8005b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	021b      	lsls	r3, r3, #8
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a27      	ldr	r2, [pc, #156]	; (8005c4c <TIM_OC3_SetConfig+0xfc>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d003      	beq.n	8005bba <TIM_OC3_SetConfig+0x6a>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a26      	ldr	r2, [pc, #152]	; (8005c50 <TIM_OC3_SetConfig+0x100>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d10d      	bne.n	8005bd6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	021b      	lsls	r3, r3, #8
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a1c      	ldr	r2, [pc, #112]	; (8005c4c <TIM_OC3_SetConfig+0xfc>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d00f      	beq.n	8005bfe <TIM_OC3_SetConfig+0xae>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a1b      	ldr	r2, [pc, #108]	; (8005c50 <TIM_OC3_SetConfig+0x100>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d00b      	beq.n	8005bfe <TIM_OC3_SetConfig+0xae>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a1a      	ldr	r2, [pc, #104]	; (8005c54 <TIM_OC3_SetConfig+0x104>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d007      	beq.n	8005bfe <TIM_OC3_SetConfig+0xae>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a19      	ldr	r2, [pc, #100]	; (8005c58 <TIM_OC3_SetConfig+0x108>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d003      	beq.n	8005bfe <TIM_OC3_SetConfig+0xae>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a18      	ldr	r2, [pc, #96]	; (8005c5c <TIM_OC3_SetConfig+0x10c>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d113      	bne.n	8005c26 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	011b      	lsls	r3, r3, #4
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	011b      	lsls	r3, r3, #4
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	621a      	str	r2, [r3, #32]
}
 8005c40:	bf00      	nop
 8005c42:	371c      	adds	r7, #28
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr
 8005c4c:	40012c00 	.word	0x40012c00
 8005c50:	40013400 	.word	0x40013400
 8005c54:	40014000 	.word	0x40014000
 8005c58:	40014400 	.word	0x40014400
 8005c5c:	40014800 	.word	0x40014800

08005c60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a1b      	ldr	r3, [r3, #32]
 8005c74:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	021b      	lsls	r3, r3, #8
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	031b      	lsls	r3, r3, #12
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a18      	ldr	r2, [pc, #96]	; (8005d20 <TIM_OC4_SetConfig+0xc0>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d00f      	beq.n	8005ce4 <TIM_OC4_SetConfig+0x84>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a17      	ldr	r2, [pc, #92]	; (8005d24 <TIM_OC4_SetConfig+0xc4>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d00b      	beq.n	8005ce4 <TIM_OC4_SetConfig+0x84>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a16      	ldr	r2, [pc, #88]	; (8005d28 <TIM_OC4_SetConfig+0xc8>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d007      	beq.n	8005ce4 <TIM_OC4_SetConfig+0x84>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a15      	ldr	r2, [pc, #84]	; (8005d2c <TIM_OC4_SetConfig+0xcc>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d003      	beq.n	8005ce4 <TIM_OC4_SetConfig+0x84>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a14      	ldr	r2, [pc, #80]	; (8005d30 <TIM_OC4_SetConfig+0xd0>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d109      	bne.n	8005cf8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	019b      	lsls	r3, r3, #6
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	621a      	str	r2, [r3, #32]
}
 8005d12:	bf00      	nop
 8005d14:	371c      	adds	r7, #28
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	40012c00 	.word	0x40012c00
 8005d24:	40013400 	.word	0x40013400
 8005d28:	40014000 	.word	0x40014000
 8005d2c:	40014400 	.word	0x40014400
 8005d30:	40014800 	.word	0x40014800

08005d34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b087      	sub	sp, #28
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a1b      	ldr	r3, [r3, #32]
 8005d48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005d78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	041b      	lsls	r3, r3, #16
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a17      	ldr	r2, [pc, #92]	; (8005de8 <TIM_OC5_SetConfig+0xb4>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d00f      	beq.n	8005dae <TIM_OC5_SetConfig+0x7a>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a16      	ldr	r2, [pc, #88]	; (8005dec <TIM_OC5_SetConfig+0xb8>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d00b      	beq.n	8005dae <TIM_OC5_SetConfig+0x7a>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a15      	ldr	r2, [pc, #84]	; (8005df0 <TIM_OC5_SetConfig+0xbc>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d007      	beq.n	8005dae <TIM_OC5_SetConfig+0x7a>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a14      	ldr	r2, [pc, #80]	; (8005df4 <TIM_OC5_SetConfig+0xc0>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d003      	beq.n	8005dae <TIM_OC5_SetConfig+0x7a>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a13      	ldr	r2, [pc, #76]	; (8005df8 <TIM_OC5_SetConfig+0xc4>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d109      	bne.n	8005dc2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005db4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	021b      	lsls	r3, r3, #8
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	621a      	str	r2, [r3, #32]
}
 8005ddc:	bf00      	nop
 8005dde:	371c      	adds	r7, #28
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr
 8005de8:	40012c00 	.word	0x40012c00
 8005dec:	40013400 	.word	0x40013400
 8005df0:	40014000 	.word	0x40014000
 8005df4:	40014400 	.word	0x40014400
 8005df8:	40014800 	.word	0x40014800

08005dfc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a1b      	ldr	r3, [r3, #32]
 8005e10:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	021b      	lsls	r3, r3, #8
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	051b      	lsls	r3, r3, #20
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a18      	ldr	r2, [pc, #96]	; (8005eb4 <TIM_OC6_SetConfig+0xb8>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d00f      	beq.n	8005e78 <TIM_OC6_SetConfig+0x7c>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a17      	ldr	r2, [pc, #92]	; (8005eb8 <TIM_OC6_SetConfig+0xbc>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d00b      	beq.n	8005e78 <TIM_OC6_SetConfig+0x7c>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a16      	ldr	r2, [pc, #88]	; (8005ebc <TIM_OC6_SetConfig+0xc0>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d007      	beq.n	8005e78 <TIM_OC6_SetConfig+0x7c>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a15      	ldr	r2, [pc, #84]	; (8005ec0 <TIM_OC6_SetConfig+0xc4>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d003      	beq.n	8005e78 <TIM_OC6_SetConfig+0x7c>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a14      	ldr	r2, [pc, #80]	; (8005ec4 <TIM_OC6_SetConfig+0xc8>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d109      	bne.n	8005e8c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	029b      	lsls	r3, r3, #10
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	621a      	str	r2, [r3, #32]
}
 8005ea6:	bf00      	nop
 8005ea8:	371c      	adds	r7, #28
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	40012c00 	.word	0x40012c00
 8005eb8:	40013400 	.word	0x40013400
 8005ebc:	40014000 	.word	0x40014000
 8005ec0:	40014400 	.word	0x40014400
 8005ec4:	40014800 	.word	0x40014800

08005ec8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b086      	sub	sp, #24
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ef6:	f023 0307 	bic.w	r3, r3, #7
 8005efa:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	2b70      	cmp	r3, #112	; 0x70
 8005f14:	d01a      	beq.n	8005f4c <TIM_SlaveTimer_SetConfig+0x84>
 8005f16:	2b70      	cmp	r3, #112	; 0x70
 8005f18:	d860      	bhi.n	8005fdc <TIM_SlaveTimer_SetConfig+0x114>
 8005f1a:	2b60      	cmp	r3, #96	; 0x60
 8005f1c:	d054      	beq.n	8005fc8 <TIM_SlaveTimer_SetConfig+0x100>
 8005f1e:	2b60      	cmp	r3, #96	; 0x60
 8005f20:	d85c      	bhi.n	8005fdc <TIM_SlaveTimer_SetConfig+0x114>
 8005f22:	2b50      	cmp	r3, #80	; 0x50
 8005f24:	d046      	beq.n	8005fb4 <TIM_SlaveTimer_SetConfig+0xec>
 8005f26:	2b50      	cmp	r3, #80	; 0x50
 8005f28:	d858      	bhi.n	8005fdc <TIM_SlaveTimer_SetConfig+0x114>
 8005f2a:	2b40      	cmp	r3, #64	; 0x40
 8005f2c:	d019      	beq.n	8005f62 <TIM_SlaveTimer_SetConfig+0x9a>
 8005f2e:	2b40      	cmp	r3, #64	; 0x40
 8005f30:	d854      	bhi.n	8005fdc <TIM_SlaveTimer_SetConfig+0x114>
 8005f32:	2b30      	cmp	r3, #48	; 0x30
 8005f34:	d055      	beq.n	8005fe2 <TIM_SlaveTimer_SetConfig+0x11a>
 8005f36:	2b30      	cmp	r3, #48	; 0x30
 8005f38:	d850      	bhi.n	8005fdc <TIM_SlaveTimer_SetConfig+0x114>
 8005f3a:	2b20      	cmp	r3, #32
 8005f3c:	d051      	beq.n	8005fe2 <TIM_SlaveTimer_SetConfig+0x11a>
 8005f3e:	2b20      	cmp	r3, #32
 8005f40:	d84c      	bhi.n	8005fdc <TIM_SlaveTimer_SetConfig+0x114>
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d04d      	beq.n	8005fe2 <TIM_SlaveTimer_SetConfig+0x11a>
 8005f46:	2b10      	cmp	r3, #16
 8005f48:	d04b      	beq.n	8005fe2 <TIM_SlaveTimer_SetConfig+0x11a>
 8005f4a:	e047      	b.n	8005fdc <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005f5c:	f000 f9e6 	bl	800632c <TIM_ETR_SetConfig>
      break;
 8005f60:	e040      	b.n	8005fe4 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2b05      	cmp	r3, #5
 8005f68:	d101      	bne.n	8005f6e <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e03b      	b.n	8005fe6 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	6a1b      	ldr	r3, [r3, #32]
 8005f74:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	6a1a      	ldr	r2, [r3, #32]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f022 0201 	bic.w	r2, r2, #1
 8005f84:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	699b      	ldr	r3, [r3, #24]
 8005f8c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f94:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	011b      	lsls	r3, r3, #4
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	621a      	str	r2, [r3, #32]
      break;
 8005fb2:	e017      	b.n	8005fe4 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	f000 f883 	bl	80060cc <TIM_TI1_ConfigInputStage>
      break;
 8005fc6:	e00d      	b.n	8005fe4 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	f000 f8e5 	bl	80061a4 <TIM_TI2_ConfigInputStage>
      break;
 8005fda:	e003      	b.n	8005fe4 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	75fb      	strb	r3, [r7, #23]
      break;
 8005fe0:	e000      	b.n	8005fe4 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8005fe2:	bf00      	nop
  }

  return status;
 8005fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3718      	adds	r7, #24
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
	...

08005ff0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b087      	sub	sp, #28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	607a      	str	r2, [r7, #4]
 8005ffc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6a1b      	ldr	r3, [r3, #32]
 8006008:	f023 0201 	bic.w	r2, r3, #1
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	4a26      	ldr	r2, [pc, #152]	; (80060b4 <TIM_TI1_SetConfig+0xc4>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d017      	beq.n	800604e <TIM_TI1_SetConfig+0x5e>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006024:	d013      	beq.n	800604e <TIM_TI1_SetConfig+0x5e>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	4a23      	ldr	r2, [pc, #140]	; (80060b8 <TIM_TI1_SetConfig+0xc8>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d00f      	beq.n	800604e <TIM_TI1_SetConfig+0x5e>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	4a22      	ldr	r2, [pc, #136]	; (80060bc <TIM_TI1_SetConfig+0xcc>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d00b      	beq.n	800604e <TIM_TI1_SetConfig+0x5e>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	4a21      	ldr	r2, [pc, #132]	; (80060c0 <TIM_TI1_SetConfig+0xd0>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d007      	beq.n	800604e <TIM_TI1_SetConfig+0x5e>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	4a20      	ldr	r2, [pc, #128]	; (80060c4 <TIM_TI1_SetConfig+0xd4>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d003      	beq.n	800604e <TIM_TI1_SetConfig+0x5e>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	4a1f      	ldr	r2, [pc, #124]	; (80060c8 <TIM_TI1_SetConfig+0xd8>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d101      	bne.n	8006052 <TIM_TI1_SetConfig+0x62>
 800604e:	2301      	movs	r3, #1
 8006050:	e000      	b.n	8006054 <TIM_TI1_SetConfig+0x64>
 8006052:	2300      	movs	r3, #0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d008      	beq.n	800606a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	f023 0303 	bic.w	r3, r3, #3
 800605e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006060:	697a      	ldr	r2, [r7, #20]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4313      	orrs	r3, r2
 8006066:	617b      	str	r3, [r7, #20]
 8006068:	e003      	b.n	8006072 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f043 0301 	orr.w	r3, r3, #1
 8006070:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006078:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	011b      	lsls	r3, r3, #4
 800607e:	b2db      	uxtb	r3, r3
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	4313      	orrs	r3, r2
 8006084:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	f023 030a 	bic.w	r3, r3, #10
 800608c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	f003 030a 	and.w	r3, r3, #10
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	4313      	orrs	r3, r2
 8006098:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	621a      	str	r2, [r3, #32]
}
 80060a6:	bf00      	nop
 80060a8:	371c      	adds	r7, #28
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	40012c00 	.word	0x40012c00
 80060b8:	40000400 	.word	0x40000400
 80060bc:	40000800 	.word	0x40000800
 80060c0:	40000c00 	.word	0x40000c00
 80060c4:	40013400 	.word	0x40013400
 80060c8:	40014000 	.word	0x40014000

080060cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b087      	sub	sp, #28
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	f023 0201 	bic.w	r2, r3, #1
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	011b      	lsls	r3, r3, #4
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	4313      	orrs	r3, r2
 8006100:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f023 030a 	bic.w	r3, r3, #10
 8006108:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	4313      	orrs	r3, r2
 8006110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	621a      	str	r2, [r3, #32]
}
 800611e:	bf00      	nop
 8006120:	371c      	adds	r7, #28
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800612a:	b480      	push	{r7}
 800612c:	b087      	sub	sp, #28
 800612e:	af00      	add	r7, sp, #0
 8006130:	60f8      	str	r0, [r7, #12]
 8006132:	60b9      	str	r1, [r7, #8]
 8006134:	607a      	str	r2, [r7, #4]
 8006136:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6a1b      	ldr	r3, [r3, #32]
 800613c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	f023 0210 	bic.w	r2, r3, #16
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	021b      	lsls	r3, r3, #8
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	4313      	orrs	r3, r2
 8006160:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006168:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	031b      	lsls	r3, r3, #12
 800616e:	b29b      	uxth	r3, r3
 8006170:	693a      	ldr	r2, [r7, #16]
 8006172:	4313      	orrs	r3, r2
 8006174:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800617c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	011b      	lsls	r3, r3, #4
 8006182:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	4313      	orrs	r3, r2
 800618a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	621a      	str	r2, [r3, #32]
}
 8006198:	bf00      	nop
 800619a:	371c      	adds	r7, #28
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b087      	sub	sp, #28
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6a1b      	ldr	r3, [r3, #32]
 80061b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	f023 0210 	bic.w	r2, r3, #16
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	031b      	lsls	r3, r3, #12
 80061d4:	693a      	ldr	r2, [r7, #16]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061e0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	011b      	lsls	r3, r3, #4
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	621a      	str	r2, [r3, #32]
}
 80061f8:	bf00      	nop
 80061fa:	371c      	adds	r7, #28
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006204:	b480      	push	{r7}
 8006206:	b087      	sub	sp, #28
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
 8006210:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6a1b      	ldr	r3, [r3, #32]
 800621c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	69db      	ldr	r3, [r3, #28]
 8006228:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	f023 0303 	bic.w	r3, r3, #3
 8006230:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4313      	orrs	r3, r2
 8006238:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006240:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	011b      	lsls	r3, r3, #4
 8006246:	b2db      	uxtb	r3, r3
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	4313      	orrs	r3, r2
 800624c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006254:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	021b      	lsls	r3, r3, #8
 800625a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	4313      	orrs	r3, r2
 8006262:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	621a      	str	r2, [r3, #32]
}
 8006270:	bf00      	nop
 8006272:	371c      	adds	r7, #28
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800627c:	b480      	push	{r7}
 800627e:	b087      	sub	sp, #28
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
 8006288:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6a1b      	ldr	r3, [r3, #32]
 8006294:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	69db      	ldr	r3, [r3, #28]
 80062a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062a8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	021b      	lsls	r3, r3, #8
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062ba:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	031b      	lsls	r3, r3, #12
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80062ce:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	031b      	lsls	r3, r3, #12
 80062d4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	4313      	orrs	r3, r2
 80062dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	621a      	str	r2, [r3, #32]
}
 80062ea:	bf00      	nop
 80062ec:	371c      	adds	r7, #28
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062f6:	b480      	push	{r7}
 80062f8:	b085      	sub	sp, #20
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
 80062fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800630c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800630e:	683a      	ldr	r2, [r7, #0]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	4313      	orrs	r3, r2
 8006314:	f043 0307 	orr.w	r3, r3, #7
 8006318:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	609a      	str	r2, [r3, #8]
}
 8006320:	bf00      	nop
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800632c:	b480      	push	{r7}
 800632e:	b087      	sub	sp, #28
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
 8006338:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006346:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	021a      	lsls	r2, r3, #8
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	431a      	orrs	r2, r3
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	4313      	orrs	r3, r2
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	4313      	orrs	r3, r2
 8006358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	609a      	str	r2, [r3, #8]
}
 8006360:	bf00      	nop
 8006362:	371c      	adds	r7, #28
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800636c:	b480      	push	{r7}
 800636e:	b087      	sub	sp, #28
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f003 031f 	and.w	r3, r3, #31
 800637e:	2201      	movs	r2, #1
 8006380:	fa02 f303 	lsl.w	r3, r2, r3
 8006384:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6a1a      	ldr	r2, [r3, #32]
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	43db      	mvns	r3, r3
 800638e:	401a      	ands	r2, r3
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6a1a      	ldr	r2, [r3, #32]
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	f003 031f 	and.w	r3, r3, #31
 800639e:	6879      	ldr	r1, [r7, #4]
 80063a0:	fa01 f303 	lsl.w	r3, r1, r3
 80063a4:	431a      	orrs	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	621a      	str	r2, [r3, #32]
}
 80063aa:	bf00      	nop
 80063ac:	371c      	adds	r7, #28
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
	...

080063b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d101      	bne.n	80063d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063cc:	2302      	movs	r3, #2
 80063ce:	e068      	b.n	80064a2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2202      	movs	r2, #2
 80063dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a2e      	ldr	r2, [pc, #184]	; (80064b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d004      	beq.n	8006404 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a2d      	ldr	r2, [pc, #180]	; (80064b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d108      	bne.n	8006416 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800640a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	4313      	orrs	r3, r2
 8006414:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800641c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	4313      	orrs	r3, r2
 8006426:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a1e      	ldr	r2, [pc, #120]	; (80064b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d01d      	beq.n	8006476 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006442:	d018      	beq.n	8006476 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a1b      	ldr	r2, [pc, #108]	; (80064b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d013      	beq.n	8006476 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a1a      	ldr	r2, [pc, #104]	; (80064bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d00e      	beq.n	8006476 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a18      	ldr	r2, [pc, #96]	; (80064c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d009      	beq.n	8006476 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a13      	ldr	r2, [pc, #76]	; (80064b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d004      	beq.n	8006476 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a14      	ldr	r2, [pc, #80]	; (80064c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d10c      	bne.n	8006490 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800647c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	4313      	orrs	r3, r2
 8006486:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3714      	adds	r7, #20
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	40012c00 	.word	0x40012c00
 80064b4:	40013400 	.word	0x40013400
 80064b8:	40000400 	.word	0x40000400
 80064bc:	40000800 	.word	0x40000800
 80064c0:	40000c00 	.word	0x40000c00
 80064c4:	40014000 	.word	0x40014000

080064c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e040      	b.n	8006598 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800651a:	2b00      	cmp	r3, #0
 800651c:	d106      	bne.n	800652c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f7fc f80c 	bl	8002544 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2224      	movs	r2, #36	; 0x24
 8006530:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f022 0201 	bic.w	r2, r2, #1
 8006540:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006546:	2b00      	cmp	r3, #0
 8006548:	d002      	beq.n	8006550 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 fc34 	bl	8006db8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 f979 	bl	8006848 <UART_SetConfig>
 8006556:	4603      	mov	r3, r0
 8006558:	2b01      	cmp	r3, #1
 800655a:	d101      	bne.n	8006560 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e01b      	b.n	8006598 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	685a      	ldr	r2, [r3, #4]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800656e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689a      	ldr	r2, [r3, #8]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800657e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f042 0201 	orr.w	r2, r2, #1
 800658e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 fcb3 	bl	8006efc <UART_CheckIdleState>
 8006596:	4603      	mov	r3, r0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3708      	adds	r7, #8
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b08a      	sub	sp, #40	; 0x28
 80065a4:	af02      	add	r7, sp, #8
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	603b      	str	r3, [r7, #0]
 80065ac:	4613      	mov	r3, r2
 80065ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065b4:	2b20      	cmp	r3, #32
 80065b6:	d178      	bne.n	80066aa <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d002      	beq.n	80065c4 <HAL_UART_Transmit+0x24>
 80065be:	88fb      	ldrh	r3, [r7, #6]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d101      	bne.n	80065c8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e071      	b.n	80066ac <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2221      	movs	r2, #33	; 0x21
 80065d4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065d6:	f7fc f867 	bl	80026a8 <HAL_GetTick>
 80065da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	88fa      	ldrh	r2, [r7, #6]
 80065e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	88fa      	ldrh	r2, [r7, #6]
 80065e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065f4:	d108      	bne.n	8006608 <HAL_UART_Transmit+0x68>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d104      	bne.n	8006608 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80065fe:	2300      	movs	r3, #0
 8006600:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	61bb      	str	r3, [r7, #24]
 8006606:	e003      	b.n	8006610 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800660c:	2300      	movs	r3, #0
 800660e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006610:	e030      	b.n	8006674 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	2200      	movs	r2, #0
 800661a:	2180      	movs	r1, #128	; 0x80
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f000 fd15 	bl	800704c <UART_WaitOnFlagUntilTimeout>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d004      	beq.n	8006632 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2220      	movs	r2, #32
 800662c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e03c      	b.n	80066ac <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d10b      	bne.n	8006650 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	881a      	ldrh	r2, [r3, #0]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006644:	b292      	uxth	r2, r2
 8006646:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	3302      	adds	r3, #2
 800664c:	61bb      	str	r3, [r7, #24]
 800664e:	e008      	b.n	8006662 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	781a      	ldrb	r2, [r3, #0]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	b292      	uxth	r2, r2
 800665a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	3301      	adds	r3, #1
 8006660:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006668:	b29b      	uxth	r3, r3
 800666a:	3b01      	subs	r3, #1
 800666c:	b29a      	uxth	r2, r3
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800667a:	b29b      	uxth	r3, r3
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1c8      	bne.n	8006612 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	2200      	movs	r2, #0
 8006688:	2140      	movs	r1, #64	; 0x40
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f000 fcde 	bl	800704c <UART_WaitOnFlagUntilTimeout>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d004      	beq.n	80066a0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2220      	movs	r2, #32
 800669a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e005      	b.n	80066ac <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2220      	movs	r2, #32
 80066a4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	e000      	b.n	80066ac <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80066aa:	2302      	movs	r3, #2
  }
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3720      	adds	r7, #32
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b08a      	sub	sp, #40	; 0x28
 80066b8:	af02      	add	r7, sp, #8
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	603b      	str	r3, [r7, #0]
 80066c0:	4613      	mov	r3, r2
 80066c2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066ca:	2b20      	cmp	r3, #32
 80066cc:	f040 80b6 	bne.w	800683c <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d002      	beq.n	80066dc <HAL_UART_Receive+0x28>
 80066d6:	88fb      	ldrh	r3, [r7, #6]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d101      	bne.n	80066e0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e0ae      	b.n	800683e <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2222      	movs	r2, #34	; 0x22
 80066ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066f6:	f7fb ffd7 	bl	80026a8 <HAL_GetTick>
 80066fa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	88fa      	ldrh	r2, [r7, #6]
 8006700:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	88fa      	ldrh	r2, [r7, #6]
 8006708:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006714:	d10e      	bne.n	8006734 <HAL_UART_Receive+0x80>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d105      	bne.n	800672a <HAL_UART_Receive+0x76>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006724:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006728:	e02d      	b.n	8006786 <HAL_UART_Receive+0xd2>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	22ff      	movs	r2, #255	; 0xff
 800672e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006732:	e028      	b.n	8006786 <HAL_UART_Receive+0xd2>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d10d      	bne.n	8006758 <HAL_UART_Receive+0xa4>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d104      	bne.n	800674e <HAL_UART_Receive+0x9a>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	22ff      	movs	r2, #255	; 0xff
 8006748:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800674c:	e01b      	b.n	8006786 <HAL_UART_Receive+0xd2>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	227f      	movs	r2, #127	; 0x7f
 8006752:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006756:	e016      	b.n	8006786 <HAL_UART_Receive+0xd2>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006760:	d10d      	bne.n	800677e <HAL_UART_Receive+0xca>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d104      	bne.n	8006774 <HAL_UART_Receive+0xc0>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	227f      	movs	r2, #127	; 0x7f
 800676e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006772:	e008      	b.n	8006786 <HAL_UART_Receive+0xd2>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	223f      	movs	r2, #63	; 0x3f
 8006778:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800677c:	e003      	b.n	8006786 <HAL_UART_Receive+0xd2>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800678c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006796:	d108      	bne.n	80067aa <HAL_UART_Receive+0xf6>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d104      	bne.n	80067aa <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80067a0:	2300      	movs	r3, #0
 80067a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	61bb      	str	r3, [r7, #24]
 80067a8:	e003      	b.n	80067b2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067ae:	2300      	movs	r3, #0
 80067b0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80067b2:	e037      	b.n	8006824 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	9300      	str	r3, [sp, #0]
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	2200      	movs	r2, #0
 80067bc:	2120      	movs	r1, #32
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f000 fc44 	bl	800704c <UART_WaitOnFlagUntilTimeout>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d005      	beq.n	80067d6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2220      	movs	r2, #32
 80067ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e033      	b.n	800683e <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10c      	bne.n	80067f6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	8a7b      	ldrh	r3, [r7, #18]
 80067e6:	4013      	ands	r3, r2
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	3302      	adds	r3, #2
 80067f2:	61bb      	str	r3, [r7, #24]
 80067f4:	e00d      	b.n	8006812 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	8a7b      	ldrh	r3, [r7, #18]
 8006802:	b2db      	uxtb	r3, r3
 8006804:	4013      	ands	r3, r2
 8006806:	b2da      	uxtb	r2, r3
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	3301      	adds	r3, #1
 8006810:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006818:	b29b      	uxth	r3, r3
 800681a:	3b01      	subs	r3, #1
 800681c:	b29a      	uxth	r2, r3
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800682a:	b29b      	uxth	r3, r3
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1c1      	bne.n	80067b4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2220      	movs	r2, #32
 8006834:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8006838:	2300      	movs	r3, #0
 800683a:	e000      	b.n	800683e <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800683c:	2302      	movs	r3, #2
  }
}
 800683e:	4618      	mov	r0, r3
 8006840:	3720      	adds	r7, #32
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
	...

08006848 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800684c:	b08a      	sub	sp, #40	; 0x28
 800684e:	af00      	add	r7, sp, #0
 8006850:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006852:	2300      	movs	r3, #0
 8006854:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	689a      	ldr	r2, [r3, #8]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	431a      	orrs	r2, r3
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	431a      	orrs	r2, r3
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	69db      	ldr	r3, [r3, #28]
 800686c:	4313      	orrs	r3, r2
 800686e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	4ba4      	ldr	r3, [pc, #656]	; (8006b08 <UART_SetConfig+0x2c0>)
 8006878:	4013      	ands	r3, r2
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	6812      	ldr	r2, [r2, #0]
 800687e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006880:	430b      	orrs	r3, r1
 8006882:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	68da      	ldr	r2, [r3, #12]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	430a      	orrs	r2, r1
 8006898:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a99      	ldr	r2, [pc, #612]	; (8006b0c <UART_SetConfig+0x2c4>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d004      	beq.n	80068b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6a1b      	ldr	r3, [r3, #32]
 80068ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068b0:	4313      	orrs	r3, r2
 80068b2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068c4:	430a      	orrs	r2, r1
 80068c6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a90      	ldr	r2, [pc, #576]	; (8006b10 <UART_SetConfig+0x2c8>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d126      	bne.n	8006920 <UART_SetConfig+0xd8>
 80068d2:	4b90      	ldr	r3, [pc, #576]	; (8006b14 <UART_SetConfig+0x2cc>)
 80068d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d8:	f003 0303 	and.w	r3, r3, #3
 80068dc:	2b03      	cmp	r3, #3
 80068de:	d81b      	bhi.n	8006918 <UART_SetConfig+0xd0>
 80068e0:	a201      	add	r2, pc, #4	; (adr r2, 80068e8 <UART_SetConfig+0xa0>)
 80068e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e6:	bf00      	nop
 80068e8:	080068f9 	.word	0x080068f9
 80068ec:	08006909 	.word	0x08006909
 80068f0:	08006901 	.word	0x08006901
 80068f4:	08006911 	.word	0x08006911
 80068f8:	2301      	movs	r3, #1
 80068fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068fe:	e116      	b.n	8006b2e <UART_SetConfig+0x2e6>
 8006900:	2302      	movs	r3, #2
 8006902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006906:	e112      	b.n	8006b2e <UART_SetConfig+0x2e6>
 8006908:	2304      	movs	r3, #4
 800690a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800690e:	e10e      	b.n	8006b2e <UART_SetConfig+0x2e6>
 8006910:	2308      	movs	r3, #8
 8006912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006916:	e10a      	b.n	8006b2e <UART_SetConfig+0x2e6>
 8006918:	2310      	movs	r3, #16
 800691a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800691e:	e106      	b.n	8006b2e <UART_SetConfig+0x2e6>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a7c      	ldr	r2, [pc, #496]	; (8006b18 <UART_SetConfig+0x2d0>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d138      	bne.n	800699c <UART_SetConfig+0x154>
 800692a:	4b7a      	ldr	r3, [pc, #488]	; (8006b14 <UART_SetConfig+0x2cc>)
 800692c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006930:	f003 030c 	and.w	r3, r3, #12
 8006934:	2b0c      	cmp	r3, #12
 8006936:	d82d      	bhi.n	8006994 <UART_SetConfig+0x14c>
 8006938:	a201      	add	r2, pc, #4	; (adr r2, 8006940 <UART_SetConfig+0xf8>)
 800693a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693e:	bf00      	nop
 8006940:	08006975 	.word	0x08006975
 8006944:	08006995 	.word	0x08006995
 8006948:	08006995 	.word	0x08006995
 800694c:	08006995 	.word	0x08006995
 8006950:	08006985 	.word	0x08006985
 8006954:	08006995 	.word	0x08006995
 8006958:	08006995 	.word	0x08006995
 800695c:	08006995 	.word	0x08006995
 8006960:	0800697d 	.word	0x0800697d
 8006964:	08006995 	.word	0x08006995
 8006968:	08006995 	.word	0x08006995
 800696c:	08006995 	.word	0x08006995
 8006970:	0800698d 	.word	0x0800698d
 8006974:	2300      	movs	r3, #0
 8006976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800697a:	e0d8      	b.n	8006b2e <UART_SetConfig+0x2e6>
 800697c:	2302      	movs	r3, #2
 800697e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006982:	e0d4      	b.n	8006b2e <UART_SetConfig+0x2e6>
 8006984:	2304      	movs	r3, #4
 8006986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800698a:	e0d0      	b.n	8006b2e <UART_SetConfig+0x2e6>
 800698c:	2308      	movs	r3, #8
 800698e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006992:	e0cc      	b.n	8006b2e <UART_SetConfig+0x2e6>
 8006994:	2310      	movs	r3, #16
 8006996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800699a:	e0c8      	b.n	8006b2e <UART_SetConfig+0x2e6>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a5e      	ldr	r2, [pc, #376]	; (8006b1c <UART_SetConfig+0x2d4>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d125      	bne.n	80069f2 <UART_SetConfig+0x1aa>
 80069a6:	4b5b      	ldr	r3, [pc, #364]	; (8006b14 <UART_SetConfig+0x2cc>)
 80069a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80069b0:	2b30      	cmp	r3, #48	; 0x30
 80069b2:	d016      	beq.n	80069e2 <UART_SetConfig+0x19a>
 80069b4:	2b30      	cmp	r3, #48	; 0x30
 80069b6:	d818      	bhi.n	80069ea <UART_SetConfig+0x1a2>
 80069b8:	2b20      	cmp	r3, #32
 80069ba:	d00a      	beq.n	80069d2 <UART_SetConfig+0x18a>
 80069bc:	2b20      	cmp	r3, #32
 80069be:	d814      	bhi.n	80069ea <UART_SetConfig+0x1a2>
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d002      	beq.n	80069ca <UART_SetConfig+0x182>
 80069c4:	2b10      	cmp	r3, #16
 80069c6:	d008      	beq.n	80069da <UART_SetConfig+0x192>
 80069c8:	e00f      	b.n	80069ea <UART_SetConfig+0x1a2>
 80069ca:	2300      	movs	r3, #0
 80069cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069d0:	e0ad      	b.n	8006b2e <UART_SetConfig+0x2e6>
 80069d2:	2302      	movs	r3, #2
 80069d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069d8:	e0a9      	b.n	8006b2e <UART_SetConfig+0x2e6>
 80069da:	2304      	movs	r3, #4
 80069dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069e0:	e0a5      	b.n	8006b2e <UART_SetConfig+0x2e6>
 80069e2:	2308      	movs	r3, #8
 80069e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069e8:	e0a1      	b.n	8006b2e <UART_SetConfig+0x2e6>
 80069ea:	2310      	movs	r3, #16
 80069ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069f0:	e09d      	b.n	8006b2e <UART_SetConfig+0x2e6>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a4a      	ldr	r2, [pc, #296]	; (8006b20 <UART_SetConfig+0x2d8>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d125      	bne.n	8006a48 <UART_SetConfig+0x200>
 80069fc:	4b45      	ldr	r3, [pc, #276]	; (8006b14 <UART_SetConfig+0x2cc>)
 80069fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006a06:	2bc0      	cmp	r3, #192	; 0xc0
 8006a08:	d016      	beq.n	8006a38 <UART_SetConfig+0x1f0>
 8006a0a:	2bc0      	cmp	r3, #192	; 0xc0
 8006a0c:	d818      	bhi.n	8006a40 <UART_SetConfig+0x1f8>
 8006a0e:	2b80      	cmp	r3, #128	; 0x80
 8006a10:	d00a      	beq.n	8006a28 <UART_SetConfig+0x1e0>
 8006a12:	2b80      	cmp	r3, #128	; 0x80
 8006a14:	d814      	bhi.n	8006a40 <UART_SetConfig+0x1f8>
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d002      	beq.n	8006a20 <UART_SetConfig+0x1d8>
 8006a1a:	2b40      	cmp	r3, #64	; 0x40
 8006a1c:	d008      	beq.n	8006a30 <UART_SetConfig+0x1e8>
 8006a1e:	e00f      	b.n	8006a40 <UART_SetConfig+0x1f8>
 8006a20:	2300      	movs	r3, #0
 8006a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a26:	e082      	b.n	8006b2e <UART_SetConfig+0x2e6>
 8006a28:	2302      	movs	r3, #2
 8006a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a2e:	e07e      	b.n	8006b2e <UART_SetConfig+0x2e6>
 8006a30:	2304      	movs	r3, #4
 8006a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a36:	e07a      	b.n	8006b2e <UART_SetConfig+0x2e6>
 8006a38:	2308      	movs	r3, #8
 8006a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a3e:	e076      	b.n	8006b2e <UART_SetConfig+0x2e6>
 8006a40:	2310      	movs	r3, #16
 8006a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a46:	e072      	b.n	8006b2e <UART_SetConfig+0x2e6>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a35      	ldr	r2, [pc, #212]	; (8006b24 <UART_SetConfig+0x2dc>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d12a      	bne.n	8006aa8 <UART_SetConfig+0x260>
 8006a52:	4b30      	ldr	r3, [pc, #192]	; (8006b14 <UART_SetConfig+0x2cc>)
 8006a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a60:	d01a      	beq.n	8006a98 <UART_SetConfig+0x250>
 8006a62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a66:	d81b      	bhi.n	8006aa0 <UART_SetConfig+0x258>
 8006a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a6c:	d00c      	beq.n	8006a88 <UART_SetConfig+0x240>
 8006a6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a72:	d815      	bhi.n	8006aa0 <UART_SetConfig+0x258>
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d003      	beq.n	8006a80 <UART_SetConfig+0x238>
 8006a78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a7c:	d008      	beq.n	8006a90 <UART_SetConfig+0x248>
 8006a7e:	e00f      	b.n	8006aa0 <UART_SetConfig+0x258>
 8006a80:	2300      	movs	r3, #0
 8006a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a86:	e052      	b.n	8006b2e <UART_SetConfig+0x2e6>
 8006a88:	2302      	movs	r3, #2
 8006a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a8e:	e04e      	b.n	8006b2e <UART_SetConfig+0x2e6>
 8006a90:	2304      	movs	r3, #4
 8006a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a96:	e04a      	b.n	8006b2e <UART_SetConfig+0x2e6>
 8006a98:	2308      	movs	r3, #8
 8006a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a9e:	e046      	b.n	8006b2e <UART_SetConfig+0x2e6>
 8006aa0:	2310      	movs	r3, #16
 8006aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aa6:	e042      	b.n	8006b2e <UART_SetConfig+0x2e6>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a17      	ldr	r2, [pc, #92]	; (8006b0c <UART_SetConfig+0x2c4>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d13a      	bne.n	8006b28 <UART_SetConfig+0x2e0>
 8006ab2:	4b18      	ldr	r3, [pc, #96]	; (8006b14 <UART_SetConfig+0x2cc>)
 8006ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006abc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ac0:	d01a      	beq.n	8006af8 <UART_SetConfig+0x2b0>
 8006ac2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ac6:	d81b      	bhi.n	8006b00 <UART_SetConfig+0x2b8>
 8006ac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006acc:	d00c      	beq.n	8006ae8 <UART_SetConfig+0x2a0>
 8006ace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ad2:	d815      	bhi.n	8006b00 <UART_SetConfig+0x2b8>
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d003      	beq.n	8006ae0 <UART_SetConfig+0x298>
 8006ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006adc:	d008      	beq.n	8006af0 <UART_SetConfig+0x2a8>
 8006ade:	e00f      	b.n	8006b00 <UART_SetConfig+0x2b8>
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ae6:	e022      	b.n	8006b2e <UART_SetConfig+0x2e6>
 8006ae8:	2302      	movs	r3, #2
 8006aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aee:	e01e      	b.n	8006b2e <UART_SetConfig+0x2e6>
 8006af0:	2304      	movs	r3, #4
 8006af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006af6:	e01a      	b.n	8006b2e <UART_SetConfig+0x2e6>
 8006af8:	2308      	movs	r3, #8
 8006afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006afe:	e016      	b.n	8006b2e <UART_SetConfig+0x2e6>
 8006b00:	2310      	movs	r3, #16
 8006b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b06:	e012      	b.n	8006b2e <UART_SetConfig+0x2e6>
 8006b08:	efff69f3 	.word	0xefff69f3
 8006b0c:	40008000 	.word	0x40008000
 8006b10:	40013800 	.word	0x40013800
 8006b14:	40021000 	.word	0x40021000
 8006b18:	40004400 	.word	0x40004400
 8006b1c:	40004800 	.word	0x40004800
 8006b20:	40004c00 	.word	0x40004c00
 8006b24:	40005000 	.word	0x40005000
 8006b28:	2310      	movs	r3, #16
 8006b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a9f      	ldr	r2, [pc, #636]	; (8006db0 <UART_SetConfig+0x568>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d17a      	bne.n	8006c2e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b3c:	2b08      	cmp	r3, #8
 8006b3e:	d824      	bhi.n	8006b8a <UART_SetConfig+0x342>
 8006b40:	a201      	add	r2, pc, #4	; (adr r2, 8006b48 <UART_SetConfig+0x300>)
 8006b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b46:	bf00      	nop
 8006b48:	08006b6d 	.word	0x08006b6d
 8006b4c:	08006b8b 	.word	0x08006b8b
 8006b50:	08006b75 	.word	0x08006b75
 8006b54:	08006b8b 	.word	0x08006b8b
 8006b58:	08006b7b 	.word	0x08006b7b
 8006b5c:	08006b8b 	.word	0x08006b8b
 8006b60:	08006b8b 	.word	0x08006b8b
 8006b64:	08006b8b 	.word	0x08006b8b
 8006b68:	08006b83 	.word	0x08006b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b6c:	f7fc ff56 	bl	8003a1c <HAL_RCC_GetPCLK1Freq>
 8006b70:	61f8      	str	r0, [r7, #28]
        break;
 8006b72:	e010      	b.n	8006b96 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b74:	4b8f      	ldr	r3, [pc, #572]	; (8006db4 <UART_SetConfig+0x56c>)
 8006b76:	61fb      	str	r3, [r7, #28]
        break;
 8006b78:	e00d      	b.n	8006b96 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b7a:	f7fc feb7 	bl	80038ec <HAL_RCC_GetSysClockFreq>
 8006b7e:	61f8      	str	r0, [r7, #28]
        break;
 8006b80:	e009      	b.n	8006b96 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b86:	61fb      	str	r3, [r7, #28]
        break;
 8006b88:	e005      	b.n	8006b96 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006b94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f000 80fb 	beq.w	8006d94 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	685a      	ldr	r2, [r3, #4]
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	005b      	lsls	r3, r3, #1
 8006ba6:	4413      	add	r3, r2
 8006ba8:	69fa      	ldr	r2, [r7, #28]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d305      	bcc.n	8006bba <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006bb4:	69fa      	ldr	r2, [r7, #28]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d903      	bls.n	8006bc2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006bc0:	e0e8      	b.n	8006d94 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	461c      	mov	r4, r3
 8006bc8:	4615      	mov	r5, r2
 8006bca:	f04f 0200 	mov.w	r2, #0
 8006bce:	f04f 0300 	mov.w	r3, #0
 8006bd2:	022b      	lsls	r3, r5, #8
 8006bd4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006bd8:	0222      	lsls	r2, r4, #8
 8006bda:	68f9      	ldr	r1, [r7, #12]
 8006bdc:	6849      	ldr	r1, [r1, #4]
 8006bde:	0849      	lsrs	r1, r1, #1
 8006be0:	2000      	movs	r0, #0
 8006be2:	4688      	mov	r8, r1
 8006be4:	4681      	mov	r9, r0
 8006be6:	eb12 0a08 	adds.w	sl, r2, r8
 8006bea:	eb43 0b09 	adc.w	fp, r3, r9
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	603b      	str	r3, [r7, #0]
 8006bf6:	607a      	str	r2, [r7, #4]
 8006bf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bfc:	4650      	mov	r0, sl
 8006bfe:	4659      	mov	r1, fp
 8006c00:	f7f9 ffe2 	bl	8000bc8 <__aeabi_uldivmod>
 8006c04:	4602      	mov	r2, r0
 8006c06:	460b      	mov	r3, r1
 8006c08:	4613      	mov	r3, r2
 8006c0a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c12:	d308      	bcc.n	8006c26 <UART_SetConfig+0x3de>
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c1a:	d204      	bcs.n	8006c26 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	69ba      	ldr	r2, [r7, #24]
 8006c22:	60da      	str	r2, [r3, #12]
 8006c24:	e0b6      	b.n	8006d94 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c2c:	e0b2      	b.n	8006d94 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	69db      	ldr	r3, [r3, #28]
 8006c32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c36:	d15e      	bne.n	8006cf6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006c38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c3c:	2b08      	cmp	r3, #8
 8006c3e:	d828      	bhi.n	8006c92 <UART_SetConfig+0x44a>
 8006c40:	a201      	add	r2, pc, #4	; (adr r2, 8006c48 <UART_SetConfig+0x400>)
 8006c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c46:	bf00      	nop
 8006c48:	08006c6d 	.word	0x08006c6d
 8006c4c:	08006c75 	.word	0x08006c75
 8006c50:	08006c7d 	.word	0x08006c7d
 8006c54:	08006c93 	.word	0x08006c93
 8006c58:	08006c83 	.word	0x08006c83
 8006c5c:	08006c93 	.word	0x08006c93
 8006c60:	08006c93 	.word	0x08006c93
 8006c64:	08006c93 	.word	0x08006c93
 8006c68:	08006c8b 	.word	0x08006c8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c6c:	f7fc fed6 	bl	8003a1c <HAL_RCC_GetPCLK1Freq>
 8006c70:	61f8      	str	r0, [r7, #28]
        break;
 8006c72:	e014      	b.n	8006c9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c74:	f7fc fee8 	bl	8003a48 <HAL_RCC_GetPCLK2Freq>
 8006c78:	61f8      	str	r0, [r7, #28]
        break;
 8006c7a:	e010      	b.n	8006c9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c7c:	4b4d      	ldr	r3, [pc, #308]	; (8006db4 <UART_SetConfig+0x56c>)
 8006c7e:	61fb      	str	r3, [r7, #28]
        break;
 8006c80:	e00d      	b.n	8006c9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c82:	f7fc fe33 	bl	80038ec <HAL_RCC_GetSysClockFreq>
 8006c86:	61f8      	str	r0, [r7, #28]
        break;
 8006c88:	e009      	b.n	8006c9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c8e:	61fb      	str	r3, [r7, #28]
        break;
 8006c90:	e005      	b.n	8006c9e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006c92:	2300      	movs	r3, #0
 8006c94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d077      	beq.n	8006d94 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	005a      	lsls	r2, r3, #1
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	085b      	lsrs	r3, r3, #1
 8006cae:	441a      	add	r2, r3
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cb8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	2b0f      	cmp	r3, #15
 8006cbe:	d916      	bls.n	8006cee <UART_SetConfig+0x4a6>
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cc6:	d212      	bcs.n	8006cee <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	f023 030f 	bic.w	r3, r3, #15
 8006cd0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	085b      	lsrs	r3, r3, #1
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	f003 0307 	and.w	r3, r3, #7
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	8afb      	ldrh	r3, [r7, #22]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	8afa      	ldrh	r2, [r7, #22]
 8006cea:	60da      	str	r2, [r3, #12]
 8006cec:	e052      	b.n	8006d94 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006cf4:	e04e      	b.n	8006d94 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006cf6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006cfa:	2b08      	cmp	r3, #8
 8006cfc:	d827      	bhi.n	8006d4e <UART_SetConfig+0x506>
 8006cfe:	a201      	add	r2, pc, #4	; (adr r2, 8006d04 <UART_SetConfig+0x4bc>)
 8006d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d04:	08006d29 	.word	0x08006d29
 8006d08:	08006d31 	.word	0x08006d31
 8006d0c:	08006d39 	.word	0x08006d39
 8006d10:	08006d4f 	.word	0x08006d4f
 8006d14:	08006d3f 	.word	0x08006d3f
 8006d18:	08006d4f 	.word	0x08006d4f
 8006d1c:	08006d4f 	.word	0x08006d4f
 8006d20:	08006d4f 	.word	0x08006d4f
 8006d24:	08006d47 	.word	0x08006d47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d28:	f7fc fe78 	bl	8003a1c <HAL_RCC_GetPCLK1Freq>
 8006d2c:	61f8      	str	r0, [r7, #28]
        break;
 8006d2e:	e014      	b.n	8006d5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d30:	f7fc fe8a 	bl	8003a48 <HAL_RCC_GetPCLK2Freq>
 8006d34:	61f8      	str	r0, [r7, #28]
        break;
 8006d36:	e010      	b.n	8006d5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d38:	4b1e      	ldr	r3, [pc, #120]	; (8006db4 <UART_SetConfig+0x56c>)
 8006d3a:	61fb      	str	r3, [r7, #28]
        break;
 8006d3c:	e00d      	b.n	8006d5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d3e:	f7fc fdd5 	bl	80038ec <HAL_RCC_GetSysClockFreq>
 8006d42:	61f8      	str	r0, [r7, #28]
        break;
 8006d44:	e009      	b.n	8006d5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d4a:	61fb      	str	r3, [r7, #28]
        break;
 8006d4c:	e005      	b.n	8006d5a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d58:	bf00      	nop
    }

    if (pclk != 0U)
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d019      	beq.n	8006d94 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	085a      	lsrs	r2, r3, #1
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	441a      	add	r2, r3
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d72:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	2b0f      	cmp	r3, #15
 8006d78:	d909      	bls.n	8006d8e <UART_SetConfig+0x546>
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d80:	d205      	bcs.n	8006d8e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	b29a      	uxth	r2, r3
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	60da      	str	r2, [r3, #12]
 8006d8c:	e002      	b.n	8006d94 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006da0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3728      	adds	r7, #40	; 0x28
 8006da8:	46bd      	mov	sp, r7
 8006daa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dae:	bf00      	nop
 8006db0:	40008000 	.word	0x40008000
 8006db4:	00f42400 	.word	0x00f42400

08006db8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc4:	f003 0308 	and.w	r3, r3, #8
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00a      	beq.n	8006de2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	430a      	orrs	r2, r1
 8006de0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00a      	beq.n	8006e04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	430a      	orrs	r2, r1
 8006e02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e08:	f003 0302 	and.w	r3, r3, #2
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00a      	beq.n	8006e26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	430a      	orrs	r2, r1
 8006e24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2a:	f003 0304 	and.w	r3, r3, #4
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00a      	beq.n	8006e48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	430a      	orrs	r2, r1
 8006e46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4c:	f003 0310 	and.w	r3, r3, #16
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00a      	beq.n	8006e6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	430a      	orrs	r2, r1
 8006e68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6e:	f003 0320 	and.w	r3, r3, #32
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00a      	beq.n	8006e8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	430a      	orrs	r2, r1
 8006e8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d01a      	beq.n	8006ece <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	430a      	orrs	r2, r1
 8006eac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eb6:	d10a      	bne.n	8006ece <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	430a      	orrs	r2, r1
 8006ecc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00a      	beq.n	8006ef0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	430a      	orrs	r2, r1
 8006eee:	605a      	str	r2, [r3, #4]
  }
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b098      	sub	sp, #96	; 0x60
 8006f00:	af02      	add	r7, sp, #8
 8006f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f0c:	f7fb fbcc 	bl	80026a8 <HAL_GetTick>
 8006f10:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0308 	and.w	r3, r3, #8
 8006f1c:	2b08      	cmp	r3, #8
 8006f1e:	d12e      	bne.n	8006f7e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f88c 	bl	800704c <UART_WaitOnFlagUntilTimeout>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d021      	beq.n	8006f7e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f42:	e853 3f00 	ldrex	r3, [r3]
 8006f46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f4e:	653b      	str	r3, [r7, #80]	; 0x50
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	461a      	mov	r2, r3
 8006f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f58:	647b      	str	r3, [r7, #68]	; 0x44
 8006f5a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f60:	e841 2300 	strex	r3, r2, [r1]
 8006f64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d1e6      	bne.n	8006f3a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2220      	movs	r2, #32
 8006f70:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e062      	b.n	8007044 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 0304 	and.w	r3, r3, #4
 8006f88:	2b04      	cmp	r3, #4
 8006f8a:	d149      	bne.n	8007020 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f94:	2200      	movs	r2, #0
 8006f96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 f856 	bl	800704c <UART_WaitOnFlagUntilTimeout>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d03c      	beq.n	8007020 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fae:	e853 3f00 	ldrex	r3, [r3]
 8006fb2:	623b      	str	r3, [r7, #32]
   return(result);
 8006fb4:	6a3b      	ldr	r3, [r7, #32]
 8006fb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fc4:	633b      	str	r3, [r7, #48]	; 0x30
 8006fc6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fcc:	e841 2300 	strex	r3, r2, [r1]
 8006fd0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d1e6      	bne.n	8006fa6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	3308      	adds	r3, #8
 8006fde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	e853 3f00 	ldrex	r3, [r3]
 8006fe6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f023 0301 	bic.w	r3, r3, #1
 8006fee:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	3308      	adds	r3, #8
 8006ff6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ff8:	61fa      	str	r2, [r7, #28]
 8006ffa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffc:	69b9      	ldr	r1, [r7, #24]
 8006ffe:	69fa      	ldr	r2, [r7, #28]
 8007000:	e841 2300 	strex	r3, r2, [r1]
 8007004:	617b      	str	r3, [r7, #20]
   return(result);
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1e5      	bne.n	8006fd8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2220      	movs	r2, #32
 8007010:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	e011      	b.n	8007044 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2220      	movs	r2, #32
 8007024:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2220      	movs	r2, #32
 800702a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3758      	adds	r7, #88	; 0x58
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	603b      	str	r3, [r7, #0]
 8007058:	4613      	mov	r3, r2
 800705a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800705c:	e049      	b.n	80070f2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007064:	d045      	beq.n	80070f2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007066:	f7fb fb1f 	bl	80026a8 <HAL_GetTick>
 800706a:	4602      	mov	r2, r0
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	69ba      	ldr	r2, [r7, #24]
 8007072:	429a      	cmp	r2, r3
 8007074:	d302      	bcc.n	800707c <UART_WaitOnFlagUntilTimeout+0x30>
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d101      	bne.n	8007080 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800707c:	2303      	movs	r3, #3
 800707e:	e048      	b.n	8007112 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0304 	and.w	r3, r3, #4
 800708a:	2b00      	cmp	r3, #0
 800708c:	d031      	beq.n	80070f2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	69db      	ldr	r3, [r3, #28]
 8007094:	f003 0308 	and.w	r3, r3, #8
 8007098:	2b08      	cmp	r3, #8
 800709a:	d110      	bne.n	80070be <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2208      	movs	r2, #8
 80070a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	f000 f838 	bl	800711a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2208      	movs	r2, #8
 80070ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e029      	b.n	8007112 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	69db      	ldr	r3, [r3, #28]
 80070c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070cc:	d111      	bne.n	80070f2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	f000 f81e 	bl	800711a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2220      	movs	r2, #32
 80070e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	e00f      	b.n	8007112 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	69da      	ldr	r2, [r3, #28]
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	4013      	ands	r3, r2
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	429a      	cmp	r2, r3
 8007100:	bf0c      	ite	eq
 8007102:	2301      	moveq	r3, #1
 8007104:	2300      	movne	r3, #0
 8007106:	b2db      	uxtb	r3, r3
 8007108:	461a      	mov	r2, r3
 800710a:	79fb      	ldrb	r3, [r7, #7]
 800710c:	429a      	cmp	r2, r3
 800710e:	d0a6      	beq.n	800705e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800711a:	b480      	push	{r7}
 800711c:	b095      	sub	sp, #84	; 0x54
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800712a:	e853 3f00 	ldrex	r3, [r3]
 800712e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007132:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007136:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	461a      	mov	r2, r3
 800713e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007140:	643b      	str	r3, [r7, #64]	; 0x40
 8007142:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007144:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007146:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007148:	e841 2300 	strex	r3, r2, [r1]
 800714c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800714e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1e6      	bne.n	8007122 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	3308      	adds	r3, #8
 800715a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715c:	6a3b      	ldr	r3, [r7, #32]
 800715e:	e853 3f00 	ldrex	r3, [r3]
 8007162:	61fb      	str	r3, [r7, #28]
   return(result);
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	f023 0301 	bic.w	r3, r3, #1
 800716a:	64bb      	str	r3, [r7, #72]	; 0x48
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	3308      	adds	r3, #8
 8007172:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007174:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007176:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007178:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800717a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800717c:	e841 2300 	strex	r3, r2, [r1]
 8007180:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1e5      	bne.n	8007154 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800718c:	2b01      	cmp	r3, #1
 800718e:	d118      	bne.n	80071c2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	e853 3f00 	ldrex	r3, [r3]
 800719c:	60bb      	str	r3, [r7, #8]
   return(result);
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	f023 0310 	bic.w	r3, r3, #16
 80071a4:	647b      	str	r3, [r7, #68]	; 0x44
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	461a      	mov	r2, r3
 80071ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071ae:	61bb      	str	r3, [r7, #24]
 80071b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b2:	6979      	ldr	r1, [r7, #20]
 80071b4:	69ba      	ldr	r2, [r7, #24]
 80071b6:	e841 2300 	strex	r3, r2, [r1]
 80071ba:	613b      	str	r3, [r7, #16]
   return(result);
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1e6      	bne.n	8007190 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2220      	movs	r2, #32
 80071c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80071d6:	bf00      	nop
 80071d8:	3754      	adds	r7, #84	; 0x54
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
	...

080071e4 <__NVIC_SetPriority>:
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	4603      	mov	r3, r0
 80071ec:	6039      	str	r1, [r7, #0]
 80071ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	db0a      	blt.n	800720e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	b2da      	uxtb	r2, r3
 80071fc:	490c      	ldr	r1, [pc, #48]	; (8007230 <__NVIC_SetPriority+0x4c>)
 80071fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007202:	0112      	lsls	r2, r2, #4
 8007204:	b2d2      	uxtb	r2, r2
 8007206:	440b      	add	r3, r1
 8007208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800720c:	e00a      	b.n	8007224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	b2da      	uxtb	r2, r3
 8007212:	4908      	ldr	r1, [pc, #32]	; (8007234 <__NVIC_SetPriority+0x50>)
 8007214:	79fb      	ldrb	r3, [r7, #7]
 8007216:	f003 030f 	and.w	r3, r3, #15
 800721a:	3b04      	subs	r3, #4
 800721c:	0112      	lsls	r2, r2, #4
 800721e:	b2d2      	uxtb	r2, r2
 8007220:	440b      	add	r3, r1
 8007222:	761a      	strb	r2, [r3, #24]
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr
 8007230:	e000e100 	.word	0xe000e100
 8007234:	e000ed00 	.word	0xe000ed00

08007238 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007238:	b580      	push	{r7, lr}
 800723a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800723c:	4b05      	ldr	r3, [pc, #20]	; (8007254 <SysTick_Handler+0x1c>)
 800723e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007240:	f002 fc48 	bl	8009ad4 <xTaskGetSchedulerState>
 8007244:	4603      	mov	r3, r0
 8007246:	2b01      	cmp	r3, #1
 8007248:	d001      	beq.n	800724e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800724a:	f003 fc15 	bl	800aa78 <xPortSysTickHandler>
  }
}
 800724e:	bf00      	nop
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	e000e010 	.word	0xe000e010

08007258 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007258:	b580      	push	{r7, lr}
 800725a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800725c:	2100      	movs	r1, #0
 800725e:	f06f 0004 	mvn.w	r0, #4
 8007262:	f7ff ffbf 	bl	80071e4 <__NVIC_SetPriority>
#endif
}
 8007266:	bf00      	nop
 8007268:	bd80      	pop	{r7, pc}
	...

0800726c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007272:	f3ef 8305 	mrs	r3, IPSR
 8007276:	603b      	str	r3, [r7, #0]
  return(result);
 8007278:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800727a:	2b00      	cmp	r3, #0
 800727c:	d003      	beq.n	8007286 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800727e:	f06f 0305 	mvn.w	r3, #5
 8007282:	607b      	str	r3, [r7, #4]
 8007284:	e00c      	b.n	80072a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007286:	4b0a      	ldr	r3, [pc, #40]	; (80072b0 <osKernelInitialize+0x44>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d105      	bne.n	800729a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800728e:	4b08      	ldr	r3, [pc, #32]	; (80072b0 <osKernelInitialize+0x44>)
 8007290:	2201      	movs	r2, #1
 8007292:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007294:	2300      	movs	r3, #0
 8007296:	607b      	str	r3, [r7, #4]
 8007298:	e002      	b.n	80072a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800729a:	f04f 33ff 	mov.w	r3, #4294967295
 800729e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80072a0:	687b      	ldr	r3, [r7, #4]
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	370c      	adds	r7, #12
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	20000488 	.word	0x20000488

080072b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072ba:	f3ef 8305 	mrs	r3, IPSR
 80072be:	603b      	str	r3, [r7, #0]
  return(result);
 80072c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d003      	beq.n	80072ce <osKernelStart+0x1a>
    stat = osErrorISR;
 80072c6:	f06f 0305 	mvn.w	r3, #5
 80072ca:	607b      	str	r3, [r7, #4]
 80072cc:	e010      	b.n	80072f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80072ce:	4b0b      	ldr	r3, [pc, #44]	; (80072fc <osKernelStart+0x48>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d109      	bne.n	80072ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80072d6:	f7ff ffbf 	bl	8007258 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80072da:	4b08      	ldr	r3, [pc, #32]	; (80072fc <osKernelStart+0x48>)
 80072dc:	2202      	movs	r2, #2
 80072de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80072e0:	f001 ff9c 	bl	800921c <vTaskStartScheduler>
      stat = osOK;
 80072e4:	2300      	movs	r3, #0
 80072e6:	607b      	str	r3, [r7, #4]
 80072e8:	e002      	b.n	80072f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80072ea:	f04f 33ff 	mov.w	r3, #4294967295
 80072ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80072f0:	687b      	ldr	r3, [r7, #4]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3708      	adds	r7, #8
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	20000488 	.word	0x20000488

08007300 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007300:	b580      	push	{r7, lr}
 8007302:	b08e      	sub	sp, #56	; 0x38
 8007304:	af04      	add	r7, sp, #16
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800730c:	2300      	movs	r3, #0
 800730e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007310:	f3ef 8305 	mrs	r3, IPSR
 8007314:	617b      	str	r3, [r7, #20]
  return(result);
 8007316:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007318:	2b00      	cmp	r3, #0
 800731a:	d17e      	bne.n	800741a <osThreadNew+0x11a>
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d07b      	beq.n	800741a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007322:	2380      	movs	r3, #128	; 0x80
 8007324:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007326:	2318      	movs	r3, #24
 8007328:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800732a:	2300      	movs	r3, #0
 800732c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800732e:	f04f 33ff 	mov.w	r3, #4294967295
 8007332:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d045      	beq.n	80073c6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d002      	beq.n	8007348 <osThreadNew+0x48>
        name = attr->name;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d002      	beq.n	8007356 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d008      	beq.n	800736e <osThreadNew+0x6e>
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	2b38      	cmp	r3, #56	; 0x38
 8007360:	d805      	bhi.n	800736e <osThreadNew+0x6e>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	f003 0301 	and.w	r3, r3, #1
 800736a:	2b00      	cmp	r3, #0
 800736c:	d001      	beq.n	8007372 <osThreadNew+0x72>
        return (NULL);
 800736e:	2300      	movs	r3, #0
 8007370:	e054      	b.n	800741c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	695b      	ldr	r3, [r3, #20]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d003      	beq.n	8007382 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	695b      	ldr	r3, [r3, #20]
 800737e:	089b      	lsrs	r3, r3, #2
 8007380:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00e      	beq.n	80073a8 <osThreadNew+0xa8>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	2bb7      	cmp	r3, #183	; 0xb7
 8007390:	d90a      	bls.n	80073a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007396:	2b00      	cmp	r3, #0
 8007398:	d006      	beq.n	80073a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	695b      	ldr	r3, [r3, #20]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d002      	beq.n	80073a8 <osThreadNew+0xa8>
        mem = 1;
 80073a2:	2301      	movs	r3, #1
 80073a4:	61bb      	str	r3, [r7, #24]
 80073a6:	e010      	b.n	80073ca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d10c      	bne.n	80073ca <osThreadNew+0xca>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d108      	bne.n	80073ca <osThreadNew+0xca>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d104      	bne.n	80073ca <osThreadNew+0xca>
          mem = 0;
 80073c0:	2300      	movs	r3, #0
 80073c2:	61bb      	str	r3, [r7, #24]
 80073c4:	e001      	b.n	80073ca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80073c6:	2300      	movs	r3, #0
 80073c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d110      	bne.n	80073f2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80073d8:	9202      	str	r2, [sp, #8]
 80073da:	9301      	str	r3, [sp, #4]
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	9300      	str	r3, [sp, #0]
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	6a3a      	ldr	r2, [r7, #32]
 80073e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f001 fd2c 	bl	8008e44 <xTaskCreateStatic>
 80073ec:	4603      	mov	r3, r0
 80073ee:	613b      	str	r3, [r7, #16]
 80073f0:	e013      	b.n	800741a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d110      	bne.n	800741a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80073f8:	6a3b      	ldr	r3, [r7, #32]
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	f107 0310 	add.w	r3, r7, #16
 8007400:	9301      	str	r3, [sp, #4]
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f001 fd77 	bl	8008efe <xTaskCreate>
 8007410:	4603      	mov	r3, r0
 8007412:	2b01      	cmp	r3, #1
 8007414:	d001      	beq.n	800741a <osThreadNew+0x11a>
            hTask = NULL;
 8007416:	2300      	movs	r3, #0
 8007418:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800741a:	693b      	ldr	r3, [r7, #16]
}
 800741c:	4618      	mov	r0, r3
 800741e:	3728      	adds	r7, #40	; 0x28
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800742c:	f3ef 8305 	mrs	r3, IPSR
 8007430:	60bb      	str	r3, [r7, #8]
  return(result);
 8007432:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007434:	2b00      	cmp	r3, #0
 8007436:	d003      	beq.n	8007440 <osDelay+0x1c>
    stat = osErrorISR;
 8007438:	f06f 0305 	mvn.w	r3, #5
 800743c:	60fb      	str	r3, [r7, #12]
 800743e:	e007      	b.n	8007450 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007440:	2300      	movs	r3, #0
 8007442:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d002      	beq.n	8007450 <osDelay+0x2c>
      vTaskDelay(ticks);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f001 feb2 	bl	80091b4 <vTaskDelay>
    }
  }

  return (stat);
 8007450:	68fb      	ldr	r3, [r7, #12]
}
 8007452:	4618      	mov	r0, r3
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800745a:	b580      	push	{r7, lr}
 800745c:	b084      	sub	sp, #16
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f003 f925 	bl	800a6b2 <pvTimerGetTimerID>
 8007468:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d005      	beq.n	800747c <TimerCallback+0x22>
    callb->func (callb->arg);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	6852      	ldr	r2, [r2, #4]
 8007478:	4610      	mov	r0, r2
 800747a:	4798      	blx	r3
  }
}
 800747c:	bf00      	nop
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8007484:	b580      	push	{r7, lr}
 8007486:	b08c      	sub	sp, #48	; 0x30
 8007488:	af02      	add	r7, sp, #8
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	607a      	str	r2, [r7, #4]
 800748e:	603b      	str	r3, [r7, #0]
 8007490:	460b      	mov	r3, r1
 8007492:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8007494:	2300      	movs	r3, #0
 8007496:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007498:	f3ef 8305 	mrs	r3, IPSR
 800749c:	613b      	str	r3, [r7, #16]
  return(result);
 800749e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d163      	bne.n	800756c <osTimerNew+0xe8>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d060      	beq.n	800756c <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80074aa:	2008      	movs	r0, #8
 80074ac:	f003 fb74 	bl	800ab98 <pvPortMalloc>
 80074b0:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d059      	beq.n	800756c <osTimerNew+0xe8>
      callb->func = func;
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80074c4:	7afb      	ldrb	r3, [r7, #11]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d102      	bne.n	80074d0 <osTimerNew+0x4c>
        reload = pdFALSE;
 80074ca:	2300      	movs	r3, #0
 80074cc:	61fb      	str	r3, [r7, #28]
 80074ce:	e001      	b.n	80074d4 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80074d0:	2301      	movs	r3, #1
 80074d2:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80074d4:	f04f 33ff 	mov.w	r3, #4294967295
 80074d8:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80074da:	2300      	movs	r3, #0
 80074dc:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d01c      	beq.n	800751e <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d002      	beq.n	80074f2 <osTimerNew+0x6e>
          name = attr->name;
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d006      	beq.n	8007508 <osTimerNew+0x84>
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	2b2b      	cmp	r3, #43	; 0x2b
 8007500:	d902      	bls.n	8007508 <osTimerNew+0x84>
          mem = 1;
 8007502:	2301      	movs	r3, #1
 8007504:	61bb      	str	r3, [r7, #24]
 8007506:	e00c      	b.n	8007522 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d108      	bne.n	8007522 <osTimerNew+0x9e>
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d104      	bne.n	8007522 <osTimerNew+0x9e>
            mem = 0;
 8007518:	2300      	movs	r3, #0
 800751a:	61bb      	str	r3, [r7, #24]
 800751c:	e001      	b.n	8007522 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800751e:	2300      	movs	r3, #0
 8007520:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d10c      	bne.n	8007542 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	9301      	str	r3, [sp, #4]
 800752e:	4b12      	ldr	r3, [pc, #72]	; (8007578 <osTimerNew+0xf4>)
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	69fa      	ldr	r2, [r7, #28]
 8007536:	2101      	movs	r1, #1
 8007538:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800753a:	f002 fd12 	bl	8009f62 <xTimerCreateStatic>
 800753e:	6238      	str	r0, [r7, #32]
 8007540:	e00b      	b.n	800755a <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d108      	bne.n	800755a <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8007548:	4b0b      	ldr	r3, [pc, #44]	; (8007578 <osTimerNew+0xf4>)
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	69fa      	ldr	r2, [r7, #28]
 8007550:	2101      	movs	r1, #1
 8007552:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007554:	f002 fce4 	bl	8009f20 <xTimerCreate>
 8007558:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800755a:	6a3b      	ldr	r3, [r7, #32]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d105      	bne.n	800756c <osTimerNew+0xe8>
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d002      	beq.n	800756c <osTimerNew+0xe8>
        vPortFree (callb);
 8007566:	6978      	ldr	r0, [r7, #20]
 8007568:	f003 fbe2 	bl	800ad30 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800756c:	6a3b      	ldr	r3, [r7, #32]
}
 800756e:	4618      	mov	r0, r3
 8007570:	3728      	adds	r7, #40	; 0x28
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	0800745b 	.word	0x0800745b

0800757c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800757c:	b580      	push	{r7, lr}
 800757e:	b088      	sub	sp, #32
 8007580:	af02      	add	r7, sp, #8
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800758a:	f3ef 8305 	mrs	r3, IPSR
 800758e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007590:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007592:	2b00      	cmp	r3, #0
 8007594:	d003      	beq.n	800759e <osTimerStart+0x22>
    stat = osErrorISR;
 8007596:	f06f 0305 	mvn.w	r3, #5
 800759a:	617b      	str	r3, [r7, #20]
 800759c:	e017      	b.n	80075ce <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d103      	bne.n	80075ac <osTimerStart+0x30>
    stat = osErrorParameter;
 80075a4:	f06f 0303 	mvn.w	r3, #3
 80075a8:	617b      	str	r3, [r7, #20]
 80075aa:	e010      	b.n	80075ce <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80075ac:	2300      	movs	r3, #0
 80075ae:	9300      	str	r3, [sp, #0]
 80075b0:	2300      	movs	r3, #0
 80075b2:	683a      	ldr	r2, [r7, #0]
 80075b4:	2104      	movs	r1, #4
 80075b6:	6938      	ldr	r0, [r7, #16]
 80075b8:	f002 fd4c 	bl	800a054 <xTimerGenericCommand>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d102      	bne.n	80075c8 <osTimerStart+0x4c>
      stat = osOK;
 80075c2:	2300      	movs	r3, #0
 80075c4:	617b      	str	r3, [r7, #20]
 80075c6:	e002      	b.n	80075ce <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 80075c8:	f06f 0302 	mvn.w	r3, #2
 80075cc:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80075ce:	697b      	ldr	r3, [r7, #20]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3718      	adds	r7, #24
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <osTimerIsRunning>:
  }

  return (stat);
}

uint32_t osTimerIsRunning (osTimerId_t timer_id) {
 80075d8:	b580      	push	{r7, lr}
 80075da:	b086      	sub	sp, #24
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075e4:	f3ef 8305 	mrs	r3, IPSR
 80075e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80075ea:	68fb      	ldr	r3, [r7, #12]
  uint32_t running;

  if (IS_IRQ() || (hTimer == NULL)) {
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d102      	bne.n	80075f6 <osTimerIsRunning+0x1e>
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d102      	bne.n	80075fc <osTimerIsRunning+0x24>
    running = 0U;
 80075f6:	2300      	movs	r3, #0
 80075f8:	617b      	str	r3, [r7, #20]
 80075fa:	e004      	b.n	8007606 <osTimerIsRunning+0x2e>
  } else {
    running = (uint32_t)xTimerIsTimerActive (hTimer);
 80075fc:	6938      	ldr	r0, [r7, #16]
 80075fe:	f003 f82f 	bl	800a660 <xTimerIsTimerActive>
 8007602:	4603      	mov	r3, r0
 8007604:	617b      	str	r3, [r7, #20]
  }

  return (running);
 8007606:	697b      	ldr	r3, [r7, #20]
}
 8007608:	4618      	mov	r0, r3
 800760a:	3718      	adds	r7, #24
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007610:	b580      	push	{r7, lr}
 8007612:	b088      	sub	sp, #32
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007618:	2300      	movs	r3, #0
 800761a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800761c:	f3ef 8305 	mrs	r3, IPSR
 8007620:	60bb      	str	r3, [r7, #8]
  return(result);
 8007622:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007624:	2b00      	cmp	r3, #0
 8007626:	d174      	bne.n	8007712 <osMutexNew+0x102>
    if (attr != NULL) {
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d003      	beq.n	8007636 <osMutexNew+0x26>
      type = attr->attr_bits;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	61bb      	str	r3, [r7, #24]
 8007634:	e001      	b.n	800763a <osMutexNew+0x2a>
    } else {
      type = 0U;
 8007636:	2300      	movs	r3, #0
 8007638:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	f003 0301 	and.w	r3, r3, #1
 8007640:	2b00      	cmp	r3, #0
 8007642:	d002      	beq.n	800764a <osMutexNew+0x3a>
      rmtx = 1U;
 8007644:	2301      	movs	r3, #1
 8007646:	617b      	str	r3, [r7, #20]
 8007648:	e001      	b.n	800764e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800764a:	2300      	movs	r3, #0
 800764c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	f003 0308 	and.w	r3, r3, #8
 8007654:	2b00      	cmp	r3, #0
 8007656:	d15c      	bne.n	8007712 <osMutexNew+0x102>
      mem = -1;
 8007658:	f04f 33ff 	mov.w	r3, #4294967295
 800765c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d015      	beq.n	8007690 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d006      	beq.n	800767a <osMutexNew+0x6a>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	2b4f      	cmp	r3, #79	; 0x4f
 8007672:	d902      	bls.n	800767a <osMutexNew+0x6a>
          mem = 1;
 8007674:	2301      	movs	r3, #1
 8007676:	613b      	str	r3, [r7, #16]
 8007678:	e00c      	b.n	8007694 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d108      	bne.n	8007694 <osMutexNew+0x84>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d104      	bne.n	8007694 <osMutexNew+0x84>
            mem = 0;
 800768a:	2300      	movs	r3, #0
 800768c:	613b      	str	r3, [r7, #16]
 800768e:	e001      	b.n	8007694 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8007690:	2300      	movs	r3, #0
 8007692:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	2b01      	cmp	r3, #1
 8007698:	d112      	bne.n	80076c0 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d007      	beq.n	80076b0 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	4619      	mov	r1, r3
 80076a6:	2004      	movs	r0, #4
 80076a8:	f000 fce1 	bl	800806e <xQueueCreateMutexStatic>
 80076ac:	61f8      	str	r0, [r7, #28]
 80076ae:	e016      	b.n	80076de <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	4619      	mov	r1, r3
 80076b6:	2001      	movs	r0, #1
 80076b8:	f000 fcd9 	bl	800806e <xQueueCreateMutexStatic>
 80076bc:	61f8      	str	r0, [r7, #28]
 80076be:	e00e      	b.n	80076de <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d10b      	bne.n	80076de <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d004      	beq.n	80076d6 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80076cc:	2004      	movs	r0, #4
 80076ce:	f000 fcb6 	bl	800803e <xQueueCreateMutex>
 80076d2:	61f8      	str	r0, [r7, #28]
 80076d4:	e003      	b.n	80076de <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80076d6:	2001      	movs	r0, #1
 80076d8:	f000 fcb1 	bl	800803e <xQueueCreateMutex>
 80076dc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00c      	beq.n	80076fe <osMutexNew+0xee>
        if (attr != NULL) {
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d003      	beq.n	80076f2 <osMutexNew+0xe2>
          name = attr->name;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	60fb      	str	r3, [r7, #12]
 80076f0:	e001      	b.n	80076f6 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80076f2:	2300      	movs	r3, #0
 80076f4:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80076f6:	68f9      	ldr	r1, [r7, #12]
 80076f8:	69f8      	ldr	r0, [r7, #28]
 80076fa:	f001 fb1b 	bl	8008d34 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d006      	beq.n	8007712 <osMutexNew+0x102>
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d003      	beq.n	8007712 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	f043 0301 	orr.w	r3, r3, #1
 8007710:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007712:	69fb      	ldr	r3, [r7, #28]
}
 8007714:	4618      	mov	r0, r3
 8007716:	3720      	adds	r7, #32
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800771c:	b580      	push	{r7, lr}
 800771e:	b08a      	sub	sp, #40	; 0x28
 8007720:	af02      	add	r7, sp, #8
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007728:	2300      	movs	r3, #0
 800772a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800772c:	f3ef 8305 	mrs	r3, IPSR
 8007730:	613b      	str	r3, [r7, #16]
  return(result);
 8007732:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007734:	2b00      	cmp	r3, #0
 8007736:	d175      	bne.n	8007824 <osSemaphoreNew+0x108>
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d072      	beq.n	8007824 <osSemaphoreNew+0x108>
 800773e:	68ba      	ldr	r2, [r7, #8]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	429a      	cmp	r2, r3
 8007744:	d86e      	bhi.n	8007824 <osSemaphoreNew+0x108>
    mem = -1;
 8007746:	f04f 33ff 	mov.w	r3, #4294967295
 800774a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d015      	beq.n	800777e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d006      	beq.n	8007768 <osSemaphoreNew+0x4c>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	2b4f      	cmp	r3, #79	; 0x4f
 8007760:	d902      	bls.n	8007768 <osSemaphoreNew+0x4c>
        mem = 1;
 8007762:	2301      	movs	r3, #1
 8007764:	61bb      	str	r3, [r7, #24]
 8007766:	e00c      	b.n	8007782 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d108      	bne.n	8007782 <osSemaphoreNew+0x66>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d104      	bne.n	8007782 <osSemaphoreNew+0x66>
          mem = 0;
 8007778:	2300      	movs	r3, #0
 800777a:	61bb      	str	r3, [r7, #24]
 800777c:	e001      	b.n	8007782 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800777e:	2300      	movs	r3, #0
 8007780:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007788:	d04c      	beq.n	8007824 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2b01      	cmp	r3, #1
 800778e:	d128      	bne.n	80077e2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	2b01      	cmp	r3, #1
 8007794:	d10a      	bne.n	80077ac <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	2203      	movs	r2, #3
 800779c:	9200      	str	r2, [sp, #0]
 800779e:	2200      	movs	r2, #0
 80077a0:	2100      	movs	r1, #0
 80077a2:	2001      	movs	r0, #1
 80077a4:	f000 fb5c 	bl	8007e60 <xQueueGenericCreateStatic>
 80077a8:	61f8      	str	r0, [r7, #28]
 80077aa:	e005      	b.n	80077b8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80077ac:	2203      	movs	r2, #3
 80077ae:	2100      	movs	r1, #0
 80077b0:	2001      	movs	r0, #1
 80077b2:	f000 fbcd 	bl	8007f50 <xQueueGenericCreate>
 80077b6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d022      	beq.n	8007804 <osSemaphoreNew+0xe8>
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d01f      	beq.n	8007804 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80077c4:	2300      	movs	r3, #0
 80077c6:	2200      	movs	r2, #0
 80077c8:	2100      	movs	r1, #0
 80077ca:	69f8      	ldr	r0, [r7, #28]
 80077cc:	f000 fcd4 	bl	8008178 <xQueueGenericSend>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d016      	beq.n	8007804 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80077d6:	69f8      	ldr	r0, [r7, #28]
 80077d8:	f001 f960 	bl	8008a9c <vQueueDelete>
            hSemaphore = NULL;
 80077dc:	2300      	movs	r3, #0
 80077de:	61fb      	str	r3, [r7, #28]
 80077e0:	e010      	b.n	8007804 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d108      	bne.n	80077fa <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	461a      	mov	r2, r3
 80077ee:	68b9      	ldr	r1, [r7, #8]
 80077f0:	68f8      	ldr	r0, [r7, #12]
 80077f2:	f000 fc57 	bl	80080a4 <xQueueCreateCountingSemaphoreStatic>
 80077f6:	61f8      	str	r0, [r7, #28]
 80077f8:	e004      	b.n	8007804 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80077fa:	68b9      	ldr	r1, [r7, #8]
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f000 fc88 	bl	8008112 <xQueueCreateCountingSemaphore>
 8007802:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00c      	beq.n	8007824 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d003      	beq.n	8007818 <osSemaphoreNew+0xfc>
          name = attr->name;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	617b      	str	r3, [r7, #20]
 8007816:	e001      	b.n	800781c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8007818:	2300      	movs	r3, #0
 800781a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800781c:	6979      	ldr	r1, [r7, #20]
 800781e:	69f8      	ldr	r0, [r7, #28]
 8007820:	f001 fa88 	bl	8008d34 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007824:	69fb      	ldr	r3, [r7, #28]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3720      	adds	r7, #32
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
	...

08007830 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800783e:	2300      	movs	r3, #0
 8007840:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d103      	bne.n	8007850 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007848:	f06f 0303 	mvn.w	r3, #3
 800784c:	617b      	str	r3, [r7, #20]
 800784e:	e039      	b.n	80078c4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007850:	f3ef 8305 	mrs	r3, IPSR
 8007854:	60fb      	str	r3, [r7, #12]
  return(result);
 8007856:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007858:	2b00      	cmp	r3, #0
 800785a:	d022      	beq.n	80078a2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d003      	beq.n	800786a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8007862:	f06f 0303 	mvn.w	r3, #3
 8007866:	617b      	str	r3, [r7, #20]
 8007868:	e02c      	b.n	80078c4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800786a:	2300      	movs	r3, #0
 800786c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800786e:	f107 0308 	add.w	r3, r7, #8
 8007872:	461a      	mov	r2, r3
 8007874:	2100      	movs	r1, #0
 8007876:	6938      	ldr	r0, [r7, #16]
 8007878:	f001 f890 	bl	800899c <xQueueReceiveFromISR>
 800787c:	4603      	mov	r3, r0
 800787e:	2b01      	cmp	r3, #1
 8007880:	d003      	beq.n	800788a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8007882:	f06f 0302 	mvn.w	r3, #2
 8007886:	617b      	str	r3, [r7, #20]
 8007888:	e01c      	b.n	80078c4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d019      	beq.n	80078c4 <osSemaphoreAcquire+0x94>
 8007890:	4b0f      	ldr	r3, [pc, #60]	; (80078d0 <osSemaphoreAcquire+0xa0>)
 8007892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007896:	601a      	str	r2, [r3, #0]
 8007898:	f3bf 8f4f 	dsb	sy
 800789c:	f3bf 8f6f 	isb	sy
 80078a0:	e010      	b.n	80078c4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80078a2:	6839      	ldr	r1, [r7, #0]
 80078a4:	6938      	ldr	r0, [r7, #16]
 80078a6:	f000 ff6d 	bl	8008784 <xQueueSemaphoreTake>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d009      	beq.n	80078c4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d003      	beq.n	80078be <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80078b6:	f06f 0301 	mvn.w	r3, #1
 80078ba:	617b      	str	r3, [r7, #20]
 80078bc:	e002      	b.n	80078c4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80078be:	f06f 0302 	mvn.w	r3, #2
 80078c2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80078c4:	697b      	ldr	r3, [r7, #20]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3718      	adds	r7, #24
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	e000ed04 	.word	0xe000ed04

080078d4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b086      	sub	sp, #24
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80078e0:	2300      	movs	r3, #0
 80078e2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d103      	bne.n	80078f2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80078ea:	f06f 0303 	mvn.w	r3, #3
 80078ee:	617b      	str	r3, [r7, #20]
 80078f0:	e02c      	b.n	800794c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078f2:	f3ef 8305 	mrs	r3, IPSR
 80078f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80078f8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d01a      	beq.n	8007934 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80078fe:	2300      	movs	r3, #0
 8007900:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007902:	f107 0308 	add.w	r3, r7, #8
 8007906:	4619      	mov	r1, r3
 8007908:	6938      	ldr	r0, [r7, #16]
 800790a:	f000 fdce 	bl	80084aa <xQueueGiveFromISR>
 800790e:	4603      	mov	r3, r0
 8007910:	2b01      	cmp	r3, #1
 8007912:	d003      	beq.n	800791c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8007914:	f06f 0302 	mvn.w	r3, #2
 8007918:	617b      	str	r3, [r7, #20]
 800791a:	e017      	b.n	800794c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d014      	beq.n	800794c <osSemaphoreRelease+0x78>
 8007922:	4b0d      	ldr	r3, [pc, #52]	; (8007958 <osSemaphoreRelease+0x84>)
 8007924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007928:	601a      	str	r2, [r3, #0]
 800792a:	f3bf 8f4f 	dsb	sy
 800792e:	f3bf 8f6f 	isb	sy
 8007932:	e00b      	b.n	800794c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007934:	2300      	movs	r3, #0
 8007936:	2200      	movs	r2, #0
 8007938:	2100      	movs	r1, #0
 800793a:	6938      	ldr	r0, [r7, #16]
 800793c:	f000 fc1c 	bl	8008178 <xQueueGenericSend>
 8007940:	4603      	mov	r3, r0
 8007942:	2b01      	cmp	r3, #1
 8007944:	d002      	beq.n	800794c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8007946:	f06f 0302 	mvn.w	r3, #2
 800794a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800794c:	697b      	ldr	r3, [r7, #20]
}
 800794e:	4618      	mov	r0, r3
 8007950:	3718      	adds	r7, #24
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	e000ed04 	.word	0xe000ed04

0800795c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800795c:	b580      	push	{r7, lr}
 800795e:	b08a      	sub	sp, #40	; 0x28
 8007960:	af02      	add	r7, sp, #8
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007968:	2300      	movs	r3, #0
 800796a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800796c:	f3ef 8305 	mrs	r3, IPSR
 8007970:	613b      	str	r3, [r7, #16]
  return(result);
 8007972:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007974:	2b00      	cmp	r3, #0
 8007976:	d15f      	bne.n	8007a38 <osMessageQueueNew+0xdc>
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d05c      	beq.n	8007a38 <osMessageQueueNew+0xdc>
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d059      	beq.n	8007a38 <osMessageQueueNew+0xdc>
    mem = -1;
 8007984:	f04f 33ff 	mov.w	r3, #4294967295
 8007988:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d029      	beq.n	80079e4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d012      	beq.n	80079be <osMessageQueueNew+0x62>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	2b4f      	cmp	r3, #79	; 0x4f
 800799e:	d90e      	bls.n	80079be <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d00a      	beq.n	80079be <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	695a      	ldr	r2, [r3, #20]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	68b9      	ldr	r1, [r7, #8]
 80079b0:	fb01 f303 	mul.w	r3, r1, r3
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d302      	bcc.n	80079be <osMessageQueueNew+0x62>
        mem = 1;
 80079b8:	2301      	movs	r3, #1
 80079ba:	61bb      	str	r3, [r7, #24]
 80079bc:	e014      	b.n	80079e8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d110      	bne.n	80079e8 <osMessageQueueNew+0x8c>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10c      	bne.n	80079e8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d108      	bne.n	80079e8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d104      	bne.n	80079e8 <osMessageQueueNew+0x8c>
          mem = 0;
 80079de:	2300      	movs	r3, #0
 80079e0:	61bb      	str	r3, [r7, #24]
 80079e2:	e001      	b.n	80079e8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80079e4:	2300      	movs	r3, #0
 80079e6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d10b      	bne.n	8007a06 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	691a      	ldr	r2, [r3, #16]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	2100      	movs	r1, #0
 80079f8:	9100      	str	r1, [sp, #0]
 80079fa:	68b9      	ldr	r1, [r7, #8]
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	f000 fa2f 	bl	8007e60 <xQueueGenericCreateStatic>
 8007a02:	61f8      	str	r0, [r7, #28]
 8007a04:	e008      	b.n	8007a18 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d105      	bne.n	8007a18 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	68b9      	ldr	r1, [r7, #8]
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f000 fa9d 	bl	8007f50 <xQueueGenericCreate>
 8007a16:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00c      	beq.n	8007a38 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d003      	beq.n	8007a2c <osMessageQueueNew+0xd0>
        name = attr->name;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	617b      	str	r3, [r7, #20]
 8007a2a:	e001      	b.n	8007a30 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007a30:	6979      	ldr	r1, [r7, #20]
 8007a32:	69f8      	ldr	r0, [r7, #28]
 8007a34:	f001 f97e 	bl	8008d34 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007a38:	69fb      	ldr	r3, [r7, #28]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3720      	adds	r7, #32
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
	...

08007a44 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b088      	sub	sp, #32
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	603b      	str	r3, [r7, #0]
 8007a50:	4613      	mov	r3, r2
 8007a52:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a5c:	f3ef 8305 	mrs	r3, IPSR
 8007a60:	617b      	str	r3, [r7, #20]
  return(result);
 8007a62:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d028      	beq.n	8007aba <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d005      	beq.n	8007a7a <osMessageQueuePut+0x36>
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d002      	beq.n	8007a7a <osMessageQueuePut+0x36>
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d003      	beq.n	8007a82 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8007a7a:	f06f 0303 	mvn.w	r3, #3
 8007a7e:	61fb      	str	r3, [r7, #28]
 8007a80:	e038      	b.n	8007af4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8007a82:	2300      	movs	r3, #0
 8007a84:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007a86:	f107 0210 	add.w	r2, r7, #16
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	68b9      	ldr	r1, [r7, #8]
 8007a8e:	69b8      	ldr	r0, [r7, #24]
 8007a90:	f000 fc70 	bl	8008374 <xQueueGenericSendFromISR>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d003      	beq.n	8007aa2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8007a9a:	f06f 0302 	mvn.w	r3, #2
 8007a9e:	61fb      	str	r3, [r7, #28]
 8007aa0:	e028      	b.n	8007af4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d025      	beq.n	8007af4 <osMessageQueuePut+0xb0>
 8007aa8:	4b15      	ldr	r3, [pc, #84]	; (8007b00 <osMessageQueuePut+0xbc>)
 8007aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aae:	601a      	str	r2, [r3, #0]
 8007ab0:	f3bf 8f4f 	dsb	sy
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	e01c      	b.n	8007af4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d002      	beq.n	8007ac6 <osMessageQueuePut+0x82>
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d103      	bne.n	8007ace <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8007ac6:	f06f 0303 	mvn.w	r3, #3
 8007aca:	61fb      	str	r3, [r7, #28]
 8007acc:	e012      	b.n	8007af4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007ace:	2300      	movs	r3, #0
 8007ad0:	683a      	ldr	r2, [r7, #0]
 8007ad2:	68b9      	ldr	r1, [r7, #8]
 8007ad4:	69b8      	ldr	r0, [r7, #24]
 8007ad6:	f000 fb4f 	bl	8008178 <xQueueGenericSend>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d009      	beq.n	8007af4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d003      	beq.n	8007aee <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8007ae6:	f06f 0301 	mvn.w	r3, #1
 8007aea:	61fb      	str	r3, [r7, #28]
 8007aec:	e002      	b.n	8007af4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8007aee:	f06f 0302 	mvn.w	r3, #2
 8007af2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007af4:	69fb      	ldr	r3, [r7, #28]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3720      	adds	r7, #32
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	e000ed04 	.word	0xe000ed04

08007b04 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b088      	sub	sp, #32
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	607a      	str	r2, [r7, #4]
 8007b10:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007b16:	2300      	movs	r3, #0
 8007b18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b1a:	f3ef 8305 	mrs	r3, IPSR
 8007b1e:	617b      	str	r3, [r7, #20]
  return(result);
 8007b20:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d028      	beq.n	8007b78 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d005      	beq.n	8007b38 <osMessageQueueGet+0x34>
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d002      	beq.n	8007b38 <osMessageQueueGet+0x34>
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d003      	beq.n	8007b40 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007b38:	f06f 0303 	mvn.w	r3, #3
 8007b3c:	61fb      	str	r3, [r7, #28]
 8007b3e:	e037      	b.n	8007bb0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007b40:	2300      	movs	r3, #0
 8007b42:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007b44:	f107 0310 	add.w	r3, r7, #16
 8007b48:	461a      	mov	r2, r3
 8007b4a:	68b9      	ldr	r1, [r7, #8]
 8007b4c:	69b8      	ldr	r0, [r7, #24]
 8007b4e:	f000 ff25 	bl	800899c <xQueueReceiveFromISR>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d003      	beq.n	8007b60 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007b58:	f06f 0302 	mvn.w	r3, #2
 8007b5c:	61fb      	str	r3, [r7, #28]
 8007b5e:	e027      	b.n	8007bb0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d024      	beq.n	8007bb0 <osMessageQueueGet+0xac>
 8007b66:	4b15      	ldr	r3, [pc, #84]	; (8007bbc <osMessageQueueGet+0xb8>)
 8007b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b6c:	601a      	str	r2, [r3, #0]
 8007b6e:	f3bf 8f4f 	dsb	sy
 8007b72:	f3bf 8f6f 	isb	sy
 8007b76:	e01b      	b.n	8007bb0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d002      	beq.n	8007b84 <osMessageQueueGet+0x80>
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d103      	bne.n	8007b8c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007b84:	f06f 0303 	mvn.w	r3, #3
 8007b88:	61fb      	str	r3, [r7, #28]
 8007b8a:	e011      	b.n	8007bb0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007b8c:	683a      	ldr	r2, [r7, #0]
 8007b8e:	68b9      	ldr	r1, [r7, #8]
 8007b90:	69b8      	ldr	r0, [r7, #24]
 8007b92:	f000 fd17 	bl	80085c4 <xQueueReceive>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d009      	beq.n	8007bb0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d003      	beq.n	8007baa <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8007ba2:	f06f 0301 	mvn.w	r3, #1
 8007ba6:	61fb      	str	r3, [r7, #28]
 8007ba8:	e002      	b.n	8007bb0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8007baa:	f06f 0302 	mvn.w	r3, #2
 8007bae:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007bb0:	69fb      	ldr	r3, [r7, #28]
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3720      	adds	r7, #32
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	e000ed04 	.word	0xe000ed04

08007bc0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	4a07      	ldr	r2, [pc, #28]	; (8007bec <vApplicationGetIdleTaskMemory+0x2c>)
 8007bd0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	4a06      	ldr	r2, [pc, #24]	; (8007bf0 <vApplicationGetIdleTaskMemory+0x30>)
 8007bd6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2280      	movs	r2, #128	; 0x80
 8007bdc:	601a      	str	r2, [r3, #0]
}
 8007bde:	bf00      	nop
 8007be0:	3714      	adds	r7, #20
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	2000048c 	.word	0x2000048c
 8007bf0:	20000544 	.word	0x20000544

08007bf4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	4a07      	ldr	r2, [pc, #28]	; (8007c20 <vApplicationGetTimerTaskMemory+0x2c>)
 8007c04:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	4a06      	ldr	r2, [pc, #24]	; (8007c24 <vApplicationGetTimerTaskMemory+0x30>)
 8007c0a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c12:	601a      	str	r2, [r3, #0]
}
 8007c14:	bf00      	nop
 8007c16:	3714      	adds	r7, #20
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	20000744 	.word	0x20000744
 8007c24:	200007fc 	.word	0x200007fc

08007c28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f103 0208 	add.w	r2, r3, #8
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f103 0208 	add.w	r2, r3, #8
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f103 0208 	add.w	r2, r3, #8
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007c5c:	bf00      	nop
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007c76:	bf00      	nop
 8007c78:	370c      	adds	r7, #12
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr

08007c82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c82:	b480      	push	{r7}
 8007c84:	b085      	sub	sp, #20
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
 8007c8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	689a      	ldr	r2, [r3, #8]
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	683a      	ldr	r2, [r7, #0]
 8007ca6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	683a      	ldr	r2, [r7, #0]
 8007cac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	1c5a      	adds	r2, r3, #1
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	601a      	str	r2, [r3, #0]
}
 8007cbe:	bf00      	nop
 8007cc0:	3714      	adds	r7, #20
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007cca:	b480      	push	{r7}
 8007ccc:	b085      	sub	sp, #20
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
 8007cd2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce0:	d103      	bne.n	8007cea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	60fb      	str	r3, [r7, #12]
 8007ce8:	e00c      	b.n	8007d04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	3308      	adds	r3, #8
 8007cee:	60fb      	str	r3, [r7, #12]
 8007cf0:	e002      	b.n	8007cf8 <vListInsert+0x2e>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	60fb      	str	r3, [r7, #12]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68ba      	ldr	r2, [r7, #8]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d2f6      	bcs.n	8007cf2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	685a      	ldr	r2, [r3, #4]
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	683a      	ldr	r2, [r7, #0]
 8007d12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	683a      	ldr	r2, [r7, #0]
 8007d1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	1c5a      	adds	r2, r3, #1
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	601a      	str	r2, [r3, #0]
}
 8007d30:	bf00      	nop
 8007d32:	3714      	adds	r7, #20
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	6892      	ldr	r2, [r2, #8]
 8007d52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	6852      	ldr	r2, [r2, #4]
 8007d5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d103      	bne.n	8007d70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	689a      	ldr	r2, [r3, #8]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	1e5a      	subs	r2, r3, #1
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3714      	adds	r7, #20
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d10a      	bne.n	8007dba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da8:	f383 8811 	msr	BASEPRI, r3
 8007dac:	f3bf 8f6f 	isb	sy
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007db6:	bf00      	nop
 8007db8:	e7fe      	b.n	8007db8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007dba:	f002 fdcb 	bl	800a954 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dc6:	68f9      	ldr	r1, [r7, #12]
 8007dc8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007dca:	fb01 f303 	mul.w	r3, r1, r3
 8007dce:	441a      	add	r2, r3
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dea:	3b01      	subs	r3, #1
 8007dec:	68f9      	ldr	r1, [r7, #12]
 8007dee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007df0:	fb01 f303 	mul.w	r3, r1, r3
 8007df4:	441a      	add	r2, r3
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	22ff      	movs	r2, #255	; 0xff
 8007dfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	22ff      	movs	r2, #255	; 0xff
 8007e06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d114      	bne.n	8007e3a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d01a      	beq.n	8007e4e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	3310      	adds	r3, #16
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f001 fc97 	bl	8009750 <xTaskRemoveFromEventList>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d012      	beq.n	8007e4e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007e28:	4b0c      	ldr	r3, [pc, #48]	; (8007e5c <xQueueGenericReset+0xcc>)
 8007e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e2e:	601a      	str	r2, [r3, #0]
 8007e30:	f3bf 8f4f 	dsb	sy
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	e009      	b.n	8007e4e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	3310      	adds	r3, #16
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7ff fef2 	bl	8007c28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	3324      	adds	r3, #36	; 0x24
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7ff feed 	bl	8007c28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007e4e:	f002 fdb1 	bl	800a9b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007e52:	2301      	movs	r3, #1
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3710      	adds	r7, #16
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	e000ed04 	.word	0xe000ed04

08007e60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b08e      	sub	sp, #56	; 0x38
 8007e64:	af02      	add	r7, sp, #8
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
 8007e6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d10a      	bne.n	8007e8a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e78:	f383 8811 	msr	BASEPRI, r3
 8007e7c:	f3bf 8f6f 	isb	sy
 8007e80:	f3bf 8f4f 	dsb	sy
 8007e84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007e86:	bf00      	nop
 8007e88:	e7fe      	b.n	8007e88 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d10a      	bne.n	8007ea6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e94:	f383 8811 	msr	BASEPRI, r3
 8007e98:	f3bf 8f6f 	isb	sy
 8007e9c:	f3bf 8f4f 	dsb	sy
 8007ea0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ea2:	bf00      	nop
 8007ea4:	e7fe      	b.n	8007ea4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d002      	beq.n	8007eb2 <xQueueGenericCreateStatic+0x52>
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d001      	beq.n	8007eb6 <xQueueGenericCreateStatic+0x56>
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e000      	b.n	8007eb8 <xQueueGenericCreateStatic+0x58>
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d10a      	bne.n	8007ed2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec0:	f383 8811 	msr	BASEPRI, r3
 8007ec4:	f3bf 8f6f 	isb	sy
 8007ec8:	f3bf 8f4f 	dsb	sy
 8007ecc:	623b      	str	r3, [r7, #32]
}
 8007ece:	bf00      	nop
 8007ed0:	e7fe      	b.n	8007ed0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d102      	bne.n	8007ede <xQueueGenericCreateStatic+0x7e>
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d101      	bne.n	8007ee2 <xQueueGenericCreateStatic+0x82>
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e000      	b.n	8007ee4 <xQueueGenericCreateStatic+0x84>
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d10a      	bne.n	8007efe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eec:	f383 8811 	msr	BASEPRI, r3
 8007ef0:	f3bf 8f6f 	isb	sy
 8007ef4:	f3bf 8f4f 	dsb	sy
 8007ef8:	61fb      	str	r3, [r7, #28]
}
 8007efa:	bf00      	nop
 8007efc:	e7fe      	b.n	8007efc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007efe:	2350      	movs	r3, #80	; 0x50
 8007f00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	2b50      	cmp	r3, #80	; 0x50
 8007f06:	d00a      	beq.n	8007f1e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0c:	f383 8811 	msr	BASEPRI, r3
 8007f10:	f3bf 8f6f 	isb	sy
 8007f14:	f3bf 8f4f 	dsb	sy
 8007f18:	61bb      	str	r3, [r7, #24]
}
 8007f1a:	bf00      	nop
 8007f1c:	e7fe      	b.n	8007f1c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007f1e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00d      	beq.n	8007f46 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f32:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f38:	9300      	str	r3, [sp, #0]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	68b9      	ldr	r1, [r7, #8]
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f000 f83f 	bl	8007fc4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3730      	adds	r7, #48	; 0x30
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b08a      	sub	sp, #40	; 0x28
 8007f54:	af02      	add	r7, sp, #8
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d10a      	bne.n	8007f7a <xQueueGenericCreate+0x2a>
	__asm volatile
 8007f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f68:	f383 8811 	msr	BASEPRI, r3
 8007f6c:	f3bf 8f6f 	isb	sy
 8007f70:	f3bf 8f4f 	dsb	sy
 8007f74:	613b      	str	r3, [r7, #16]
}
 8007f76:	bf00      	nop
 8007f78:	e7fe      	b.n	8007f78 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	68ba      	ldr	r2, [r7, #8]
 8007f7e:	fb02 f303 	mul.w	r3, r2, r3
 8007f82:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	3350      	adds	r3, #80	; 0x50
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f002 fe05 	bl	800ab98 <pvPortMalloc>
 8007f8e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d011      	beq.n	8007fba <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	3350      	adds	r3, #80	; 0x50
 8007f9e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007fa8:	79fa      	ldrb	r2, [r7, #7]
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	9300      	str	r3, [sp, #0]
 8007fae:	4613      	mov	r3, r2
 8007fb0:	697a      	ldr	r2, [r7, #20]
 8007fb2:	68b9      	ldr	r1, [r7, #8]
 8007fb4:	68f8      	ldr	r0, [r7, #12]
 8007fb6:	f000 f805 	bl	8007fc4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007fba:	69bb      	ldr	r3, [r7, #24]
	}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3720      	adds	r7, #32
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	607a      	str	r2, [r7, #4]
 8007fd0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d103      	bne.n	8007fe0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	69ba      	ldr	r2, [r7, #24]
 8007fdc:	601a      	str	r2, [r3, #0]
 8007fde:	e002      	b.n	8007fe6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	68ba      	ldr	r2, [r7, #8]
 8007ff0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007ff2:	2101      	movs	r1, #1
 8007ff4:	69b8      	ldr	r0, [r7, #24]
 8007ff6:	f7ff fecb 	bl	8007d90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	78fa      	ldrb	r2, [r7, #3]
 8007ffe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008002:	bf00      	nop
 8008004:	3710      	adds	r7, #16
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800800a:	b580      	push	{r7, lr}
 800800c:	b082      	sub	sp, #8
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d00e      	beq.n	8008036 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800802a:	2300      	movs	r3, #0
 800802c:	2200      	movs	r2, #0
 800802e:	2100      	movs	r1, #0
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 f8a1 	bl	8008178 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008036:	bf00      	nop
 8008038:	3708      	adds	r7, #8
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800803e:	b580      	push	{r7, lr}
 8008040:	b086      	sub	sp, #24
 8008042:	af00      	add	r7, sp, #0
 8008044:	4603      	mov	r3, r0
 8008046:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008048:	2301      	movs	r3, #1
 800804a:	617b      	str	r3, [r7, #20]
 800804c:	2300      	movs	r3, #0
 800804e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008050:	79fb      	ldrb	r3, [r7, #7]
 8008052:	461a      	mov	r2, r3
 8008054:	6939      	ldr	r1, [r7, #16]
 8008056:	6978      	ldr	r0, [r7, #20]
 8008058:	f7ff ff7a 	bl	8007f50 <xQueueGenericCreate>
 800805c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	f7ff ffd3 	bl	800800a <prvInitialiseMutex>

		return xNewQueue;
 8008064:	68fb      	ldr	r3, [r7, #12]
	}
 8008066:	4618      	mov	r0, r3
 8008068:	3718      	adds	r7, #24
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800806e:	b580      	push	{r7, lr}
 8008070:	b088      	sub	sp, #32
 8008072:	af02      	add	r7, sp, #8
 8008074:	4603      	mov	r3, r0
 8008076:	6039      	str	r1, [r7, #0]
 8008078:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800807a:	2301      	movs	r3, #1
 800807c:	617b      	str	r3, [r7, #20]
 800807e:	2300      	movs	r3, #0
 8008080:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008082:	79fb      	ldrb	r3, [r7, #7]
 8008084:	9300      	str	r3, [sp, #0]
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	2200      	movs	r2, #0
 800808a:	6939      	ldr	r1, [r7, #16]
 800808c:	6978      	ldr	r0, [r7, #20]
 800808e:	f7ff fee7 	bl	8007e60 <xQueueGenericCreateStatic>
 8008092:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008094:	68f8      	ldr	r0, [r7, #12]
 8008096:	f7ff ffb8 	bl	800800a <prvInitialiseMutex>

		return xNewQueue;
 800809a:	68fb      	ldr	r3, [r7, #12]
	}
 800809c:	4618      	mov	r0, r3
 800809e:	3718      	adds	r7, #24
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b08a      	sub	sp, #40	; 0x28
 80080a8:	af02      	add	r7, sp, #8
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d10a      	bne.n	80080cc <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80080b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ba:	f383 8811 	msr	BASEPRI, r3
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	f3bf 8f4f 	dsb	sy
 80080c6:	61bb      	str	r3, [r7, #24]
}
 80080c8:	bf00      	nop
 80080ca:	e7fe      	b.n	80080ca <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80080cc:	68ba      	ldr	r2, [r7, #8]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d90a      	bls.n	80080ea <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80080d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d8:	f383 8811 	msr	BASEPRI, r3
 80080dc:	f3bf 8f6f 	isb	sy
 80080e0:	f3bf 8f4f 	dsb	sy
 80080e4:	617b      	str	r3, [r7, #20]
}
 80080e6:	bf00      	nop
 80080e8:	e7fe      	b.n	80080e8 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80080ea:	2302      	movs	r3, #2
 80080ec:	9300      	str	r3, [sp, #0]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	2100      	movs	r1, #0
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	f7ff feb3 	bl	8007e60 <xQueueGenericCreateStatic>
 80080fa:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d002      	beq.n	8008108 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	68ba      	ldr	r2, [r7, #8]
 8008106:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008108:	69fb      	ldr	r3, [r7, #28]
	}
 800810a:	4618      	mov	r0, r3
 800810c:	3720      	adds	r7, #32
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}

08008112 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008112:	b580      	push	{r7, lr}
 8008114:	b086      	sub	sp, #24
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
 800811a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d10a      	bne.n	8008138 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008126:	f383 8811 	msr	BASEPRI, r3
 800812a:	f3bf 8f6f 	isb	sy
 800812e:	f3bf 8f4f 	dsb	sy
 8008132:	613b      	str	r3, [r7, #16]
}
 8008134:	bf00      	nop
 8008136:	e7fe      	b.n	8008136 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008138:	683a      	ldr	r2, [r7, #0]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	429a      	cmp	r2, r3
 800813e:	d90a      	bls.n	8008156 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8008140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008144:	f383 8811 	msr	BASEPRI, r3
 8008148:	f3bf 8f6f 	isb	sy
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	60fb      	str	r3, [r7, #12]
}
 8008152:	bf00      	nop
 8008154:	e7fe      	b.n	8008154 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008156:	2202      	movs	r2, #2
 8008158:	2100      	movs	r1, #0
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f7ff fef8 	bl	8007f50 <xQueueGenericCreate>
 8008160:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d002      	beq.n	800816e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	683a      	ldr	r2, [r7, #0]
 800816c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800816e:	697b      	ldr	r3, [r7, #20]
	}
 8008170:	4618      	mov	r0, r3
 8008172:	3718      	adds	r7, #24
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b08e      	sub	sp, #56	; 0x38
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	607a      	str	r2, [r7, #4]
 8008184:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008186:	2300      	movs	r3, #0
 8008188:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800818e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008190:	2b00      	cmp	r3, #0
 8008192:	d10a      	bne.n	80081aa <xQueueGenericSend+0x32>
	__asm volatile
 8008194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008198:	f383 8811 	msr	BASEPRI, r3
 800819c:	f3bf 8f6f 	isb	sy
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80081a6:	bf00      	nop
 80081a8:	e7fe      	b.n	80081a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d103      	bne.n	80081b8 <xQueueGenericSend+0x40>
 80081b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d101      	bne.n	80081bc <xQueueGenericSend+0x44>
 80081b8:	2301      	movs	r3, #1
 80081ba:	e000      	b.n	80081be <xQueueGenericSend+0x46>
 80081bc:	2300      	movs	r3, #0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d10a      	bne.n	80081d8 <xQueueGenericSend+0x60>
	__asm volatile
 80081c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c6:	f383 8811 	msr	BASEPRI, r3
 80081ca:	f3bf 8f6f 	isb	sy
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80081d4:	bf00      	nop
 80081d6:	e7fe      	b.n	80081d6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	2b02      	cmp	r3, #2
 80081dc:	d103      	bne.n	80081e6 <xQueueGenericSend+0x6e>
 80081de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d101      	bne.n	80081ea <xQueueGenericSend+0x72>
 80081e6:	2301      	movs	r3, #1
 80081e8:	e000      	b.n	80081ec <xQueueGenericSend+0x74>
 80081ea:	2300      	movs	r3, #0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10a      	bne.n	8008206 <xQueueGenericSend+0x8e>
	__asm volatile
 80081f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f4:	f383 8811 	msr	BASEPRI, r3
 80081f8:	f3bf 8f6f 	isb	sy
 80081fc:	f3bf 8f4f 	dsb	sy
 8008200:	623b      	str	r3, [r7, #32]
}
 8008202:	bf00      	nop
 8008204:	e7fe      	b.n	8008204 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008206:	f001 fc65 	bl	8009ad4 <xTaskGetSchedulerState>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d102      	bne.n	8008216 <xQueueGenericSend+0x9e>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d101      	bne.n	800821a <xQueueGenericSend+0xa2>
 8008216:	2301      	movs	r3, #1
 8008218:	e000      	b.n	800821c <xQueueGenericSend+0xa4>
 800821a:	2300      	movs	r3, #0
 800821c:	2b00      	cmp	r3, #0
 800821e:	d10a      	bne.n	8008236 <xQueueGenericSend+0xbe>
	__asm volatile
 8008220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008224:	f383 8811 	msr	BASEPRI, r3
 8008228:	f3bf 8f6f 	isb	sy
 800822c:	f3bf 8f4f 	dsb	sy
 8008230:	61fb      	str	r3, [r7, #28]
}
 8008232:	bf00      	nop
 8008234:	e7fe      	b.n	8008234 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008236:	f002 fb8d 	bl	800a954 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800823a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800823e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008242:	429a      	cmp	r2, r3
 8008244:	d302      	bcc.n	800824c <xQueueGenericSend+0xd4>
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	2b02      	cmp	r3, #2
 800824a:	d129      	bne.n	80082a0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800824c:	683a      	ldr	r2, [r7, #0]
 800824e:	68b9      	ldr	r1, [r7, #8]
 8008250:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008252:	f000 fc5e 	bl	8008b12 <prvCopyDataToQueue>
 8008256:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825c:	2b00      	cmp	r3, #0
 800825e:	d010      	beq.n	8008282 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008262:	3324      	adds	r3, #36	; 0x24
 8008264:	4618      	mov	r0, r3
 8008266:	f001 fa73 	bl	8009750 <xTaskRemoveFromEventList>
 800826a:	4603      	mov	r3, r0
 800826c:	2b00      	cmp	r3, #0
 800826e:	d013      	beq.n	8008298 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008270:	4b3f      	ldr	r3, [pc, #252]	; (8008370 <xQueueGenericSend+0x1f8>)
 8008272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008276:	601a      	str	r2, [r3, #0]
 8008278:	f3bf 8f4f 	dsb	sy
 800827c:	f3bf 8f6f 	isb	sy
 8008280:	e00a      	b.n	8008298 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008284:	2b00      	cmp	r3, #0
 8008286:	d007      	beq.n	8008298 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008288:	4b39      	ldr	r3, [pc, #228]	; (8008370 <xQueueGenericSend+0x1f8>)
 800828a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800828e:	601a      	str	r2, [r3, #0]
 8008290:	f3bf 8f4f 	dsb	sy
 8008294:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008298:	f002 fb8c 	bl	800a9b4 <vPortExitCritical>
				return pdPASS;
 800829c:	2301      	movs	r3, #1
 800829e:	e063      	b.n	8008368 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d103      	bne.n	80082ae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80082a6:	f002 fb85 	bl	800a9b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80082aa:	2300      	movs	r3, #0
 80082ac:	e05c      	b.n	8008368 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d106      	bne.n	80082c2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082b4:	f107 0314 	add.w	r3, r7, #20
 80082b8:	4618      	mov	r0, r3
 80082ba:	f001 faad 	bl	8009818 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80082be:	2301      	movs	r3, #1
 80082c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80082c2:	f002 fb77 	bl	800a9b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80082c6:	f001 f819 	bl	80092fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082ca:	f002 fb43 	bl	800a954 <vPortEnterCritical>
 80082ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082d4:	b25b      	sxtb	r3, r3
 80082d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082da:	d103      	bne.n	80082e4 <xQueueGenericSend+0x16c>
 80082dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082de:	2200      	movs	r2, #0
 80082e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082ea:	b25b      	sxtb	r3, r3
 80082ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f0:	d103      	bne.n	80082fa <xQueueGenericSend+0x182>
 80082f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082fa:	f002 fb5b 	bl	800a9b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80082fe:	1d3a      	adds	r2, r7, #4
 8008300:	f107 0314 	add.w	r3, r7, #20
 8008304:	4611      	mov	r1, r2
 8008306:	4618      	mov	r0, r3
 8008308:	f001 fa9c 	bl	8009844 <xTaskCheckForTimeOut>
 800830c:	4603      	mov	r3, r0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d124      	bne.n	800835c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008312:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008314:	f000 fcf5 	bl	8008d02 <prvIsQueueFull>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d018      	beq.n	8008350 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800831e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008320:	3310      	adds	r3, #16
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	4611      	mov	r1, r2
 8008326:	4618      	mov	r0, r3
 8008328:	f001 f9c2 	bl	80096b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800832c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800832e:	f000 fc80 	bl	8008c32 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008332:	f000 fff1 	bl	8009318 <xTaskResumeAll>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	f47f af7c 	bne.w	8008236 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800833e:	4b0c      	ldr	r3, [pc, #48]	; (8008370 <xQueueGenericSend+0x1f8>)
 8008340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008344:	601a      	str	r2, [r3, #0]
 8008346:	f3bf 8f4f 	dsb	sy
 800834a:	f3bf 8f6f 	isb	sy
 800834e:	e772      	b.n	8008236 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008350:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008352:	f000 fc6e 	bl	8008c32 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008356:	f000 ffdf 	bl	8009318 <xTaskResumeAll>
 800835a:	e76c      	b.n	8008236 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800835c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800835e:	f000 fc68 	bl	8008c32 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008362:	f000 ffd9 	bl	8009318 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008366:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008368:	4618      	mov	r0, r3
 800836a:	3738      	adds	r7, #56	; 0x38
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	e000ed04 	.word	0xe000ed04

08008374 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b090      	sub	sp, #64	; 0x40
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	607a      	str	r2, [r7, #4]
 8008380:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008388:	2b00      	cmp	r3, #0
 800838a:	d10a      	bne.n	80083a2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800838c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008390:	f383 8811 	msr	BASEPRI, r3
 8008394:	f3bf 8f6f 	isb	sy
 8008398:	f3bf 8f4f 	dsb	sy
 800839c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800839e:	bf00      	nop
 80083a0:	e7fe      	b.n	80083a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d103      	bne.n	80083b0 <xQueueGenericSendFromISR+0x3c>
 80083a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d101      	bne.n	80083b4 <xQueueGenericSendFromISR+0x40>
 80083b0:	2301      	movs	r3, #1
 80083b2:	e000      	b.n	80083b6 <xQueueGenericSendFromISR+0x42>
 80083b4:	2300      	movs	r3, #0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d10a      	bne.n	80083d0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80083ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083be:	f383 8811 	msr	BASEPRI, r3
 80083c2:	f3bf 8f6f 	isb	sy
 80083c6:	f3bf 8f4f 	dsb	sy
 80083ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80083cc:	bf00      	nop
 80083ce:	e7fe      	b.n	80083ce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d103      	bne.n	80083de <xQueueGenericSendFromISR+0x6a>
 80083d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d101      	bne.n	80083e2 <xQueueGenericSendFromISR+0x6e>
 80083de:	2301      	movs	r3, #1
 80083e0:	e000      	b.n	80083e4 <xQueueGenericSendFromISR+0x70>
 80083e2:	2300      	movs	r3, #0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d10a      	bne.n	80083fe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80083e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ec:	f383 8811 	msr	BASEPRI, r3
 80083f0:	f3bf 8f6f 	isb	sy
 80083f4:	f3bf 8f4f 	dsb	sy
 80083f8:	623b      	str	r3, [r7, #32]
}
 80083fa:	bf00      	nop
 80083fc:	e7fe      	b.n	80083fc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80083fe:	f002 fb8b 	bl	800ab18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008402:	f3ef 8211 	mrs	r2, BASEPRI
 8008406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840a:	f383 8811 	msr	BASEPRI, r3
 800840e:	f3bf 8f6f 	isb	sy
 8008412:	f3bf 8f4f 	dsb	sy
 8008416:	61fa      	str	r2, [r7, #28]
 8008418:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800841a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800841c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800841e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008426:	429a      	cmp	r2, r3
 8008428:	d302      	bcc.n	8008430 <xQueueGenericSendFromISR+0xbc>
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	2b02      	cmp	r3, #2
 800842e:	d12f      	bne.n	8008490 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008432:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800843a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800843e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008440:	683a      	ldr	r2, [r7, #0]
 8008442:	68b9      	ldr	r1, [r7, #8]
 8008444:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008446:	f000 fb64 	bl	8008b12 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800844a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800844e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008452:	d112      	bne.n	800847a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008458:	2b00      	cmp	r3, #0
 800845a:	d016      	beq.n	800848a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800845c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845e:	3324      	adds	r3, #36	; 0x24
 8008460:	4618      	mov	r0, r3
 8008462:	f001 f975 	bl	8009750 <xTaskRemoveFromEventList>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d00e      	beq.n	800848a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d00b      	beq.n	800848a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2201      	movs	r2, #1
 8008476:	601a      	str	r2, [r3, #0]
 8008478:	e007      	b.n	800848a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800847a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800847e:	3301      	adds	r3, #1
 8008480:	b2db      	uxtb	r3, r3
 8008482:	b25a      	sxtb	r2, r3
 8008484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008486:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800848a:	2301      	movs	r3, #1
 800848c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800848e:	e001      	b.n	8008494 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008490:	2300      	movs	r3, #0
 8008492:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008496:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800849e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80084a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3740      	adds	r7, #64	; 0x40
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b08e      	sub	sp, #56	; 0x38
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
 80084b2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80084b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d10a      	bne.n	80084d4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80084be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c2:	f383 8811 	msr	BASEPRI, r3
 80084c6:	f3bf 8f6f 	isb	sy
 80084ca:	f3bf 8f4f 	dsb	sy
 80084ce:	623b      	str	r3, [r7, #32]
}
 80084d0:	bf00      	nop
 80084d2:	e7fe      	b.n	80084d2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80084d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00a      	beq.n	80084f2 <xQueueGiveFromISR+0x48>
	__asm volatile
 80084dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e0:	f383 8811 	msr	BASEPRI, r3
 80084e4:	f3bf 8f6f 	isb	sy
 80084e8:	f3bf 8f4f 	dsb	sy
 80084ec:	61fb      	str	r3, [r7, #28]
}
 80084ee:	bf00      	nop
 80084f0:	e7fe      	b.n	80084f0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80084f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d103      	bne.n	8008502 <xQueueGiveFromISR+0x58>
 80084fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d101      	bne.n	8008506 <xQueueGiveFromISR+0x5c>
 8008502:	2301      	movs	r3, #1
 8008504:	e000      	b.n	8008508 <xQueueGiveFromISR+0x5e>
 8008506:	2300      	movs	r3, #0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d10a      	bne.n	8008522 <xQueueGiveFromISR+0x78>
	__asm volatile
 800850c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008510:	f383 8811 	msr	BASEPRI, r3
 8008514:	f3bf 8f6f 	isb	sy
 8008518:	f3bf 8f4f 	dsb	sy
 800851c:	61bb      	str	r3, [r7, #24]
}
 800851e:	bf00      	nop
 8008520:	e7fe      	b.n	8008520 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008522:	f002 faf9 	bl	800ab18 <vPortValidateInterruptPriority>
	__asm volatile
 8008526:	f3ef 8211 	mrs	r2, BASEPRI
 800852a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800852e:	f383 8811 	msr	BASEPRI, r3
 8008532:	f3bf 8f6f 	isb	sy
 8008536:	f3bf 8f4f 	dsb	sy
 800853a:	617a      	str	r2, [r7, #20]
 800853c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800853e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008540:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008546:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800854c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800854e:	429a      	cmp	r2, r3
 8008550:	d22b      	bcs.n	80085aa <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008554:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008558:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800855c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855e:	1c5a      	adds	r2, r3, #1
 8008560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008562:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008564:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800856c:	d112      	bne.n	8008594 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800856e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008572:	2b00      	cmp	r3, #0
 8008574:	d016      	beq.n	80085a4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008578:	3324      	adds	r3, #36	; 0x24
 800857a:	4618      	mov	r0, r3
 800857c:	f001 f8e8 	bl	8009750 <xTaskRemoveFromEventList>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00e      	beq.n	80085a4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00b      	beq.n	80085a4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	2201      	movs	r2, #1
 8008590:	601a      	str	r2, [r3, #0]
 8008592:	e007      	b.n	80085a4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008594:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008598:	3301      	adds	r3, #1
 800859a:	b2db      	uxtb	r3, r3
 800859c:	b25a      	sxtb	r2, r3
 800859e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80085a4:	2301      	movs	r3, #1
 80085a6:	637b      	str	r3, [r7, #52]	; 0x34
 80085a8:	e001      	b.n	80085ae <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80085aa:	2300      	movs	r3, #0
 80085ac:	637b      	str	r3, [r7, #52]	; 0x34
 80085ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f383 8811 	msr	BASEPRI, r3
}
 80085b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80085ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3738      	adds	r7, #56	; 0x38
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b08c      	sub	sp, #48	; 0x30
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80085d0:	2300      	movs	r3, #0
 80085d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80085d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d10a      	bne.n	80085f4 <xQueueReceive+0x30>
	__asm volatile
 80085de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e2:	f383 8811 	msr	BASEPRI, r3
 80085e6:	f3bf 8f6f 	isb	sy
 80085ea:	f3bf 8f4f 	dsb	sy
 80085ee:	623b      	str	r3, [r7, #32]
}
 80085f0:	bf00      	nop
 80085f2:	e7fe      	b.n	80085f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d103      	bne.n	8008602 <xQueueReceive+0x3e>
 80085fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d101      	bne.n	8008606 <xQueueReceive+0x42>
 8008602:	2301      	movs	r3, #1
 8008604:	e000      	b.n	8008608 <xQueueReceive+0x44>
 8008606:	2300      	movs	r3, #0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d10a      	bne.n	8008622 <xQueueReceive+0x5e>
	__asm volatile
 800860c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008610:	f383 8811 	msr	BASEPRI, r3
 8008614:	f3bf 8f6f 	isb	sy
 8008618:	f3bf 8f4f 	dsb	sy
 800861c:	61fb      	str	r3, [r7, #28]
}
 800861e:	bf00      	nop
 8008620:	e7fe      	b.n	8008620 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008622:	f001 fa57 	bl	8009ad4 <xTaskGetSchedulerState>
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d102      	bne.n	8008632 <xQueueReceive+0x6e>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d101      	bne.n	8008636 <xQueueReceive+0x72>
 8008632:	2301      	movs	r3, #1
 8008634:	e000      	b.n	8008638 <xQueueReceive+0x74>
 8008636:	2300      	movs	r3, #0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d10a      	bne.n	8008652 <xQueueReceive+0x8e>
	__asm volatile
 800863c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008640:	f383 8811 	msr	BASEPRI, r3
 8008644:	f3bf 8f6f 	isb	sy
 8008648:	f3bf 8f4f 	dsb	sy
 800864c:	61bb      	str	r3, [r7, #24]
}
 800864e:	bf00      	nop
 8008650:	e7fe      	b.n	8008650 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008652:	f002 f97f 	bl	800a954 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800865a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800865c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865e:	2b00      	cmp	r3, #0
 8008660:	d01f      	beq.n	80086a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008662:	68b9      	ldr	r1, [r7, #8]
 8008664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008666:	f000 fabe 	bl	8008be6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800866a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866c:	1e5a      	subs	r2, r3, #1
 800866e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008670:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008674:	691b      	ldr	r3, [r3, #16]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00f      	beq.n	800869a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800867a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800867c:	3310      	adds	r3, #16
 800867e:	4618      	mov	r0, r3
 8008680:	f001 f866 	bl	8009750 <xTaskRemoveFromEventList>
 8008684:	4603      	mov	r3, r0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d007      	beq.n	800869a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800868a:	4b3d      	ldr	r3, [pc, #244]	; (8008780 <xQueueReceive+0x1bc>)
 800868c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008690:	601a      	str	r2, [r3, #0]
 8008692:	f3bf 8f4f 	dsb	sy
 8008696:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800869a:	f002 f98b 	bl	800a9b4 <vPortExitCritical>
				return pdPASS;
 800869e:	2301      	movs	r3, #1
 80086a0:	e069      	b.n	8008776 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d103      	bne.n	80086b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80086a8:	f002 f984 	bl	800a9b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80086ac:	2300      	movs	r3, #0
 80086ae:	e062      	b.n	8008776 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80086b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d106      	bne.n	80086c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80086b6:	f107 0310 	add.w	r3, r7, #16
 80086ba:	4618      	mov	r0, r3
 80086bc:	f001 f8ac 	bl	8009818 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80086c0:	2301      	movs	r3, #1
 80086c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80086c4:	f002 f976 	bl	800a9b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80086c8:	f000 fe18 	bl	80092fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086cc:	f002 f942 	bl	800a954 <vPortEnterCritical>
 80086d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086d6:	b25b      	sxtb	r3, r3
 80086d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086dc:	d103      	bne.n	80086e6 <xQueueReceive+0x122>
 80086de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e0:	2200      	movs	r2, #0
 80086e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086ec:	b25b      	sxtb	r3, r3
 80086ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086f2:	d103      	bne.n	80086fc <xQueueReceive+0x138>
 80086f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f6:	2200      	movs	r2, #0
 80086f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086fc:	f002 f95a 	bl	800a9b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008700:	1d3a      	adds	r2, r7, #4
 8008702:	f107 0310 	add.w	r3, r7, #16
 8008706:	4611      	mov	r1, r2
 8008708:	4618      	mov	r0, r3
 800870a:	f001 f89b 	bl	8009844 <xTaskCheckForTimeOut>
 800870e:	4603      	mov	r3, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d123      	bne.n	800875c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008714:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008716:	f000 fade 	bl	8008cd6 <prvIsQueueEmpty>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d017      	beq.n	8008750 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008722:	3324      	adds	r3, #36	; 0x24
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	4611      	mov	r1, r2
 8008728:	4618      	mov	r0, r3
 800872a:	f000 ffc1 	bl	80096b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800872e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008730:	f000 fa7f 	bl	8008c32 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008734:	f000 fdf0 	bl	8009318 <xTaskResumeAll>
 8008738:	4603      	mov	r3, r0
 800873a:	2b00      	cmp	r3, #0
 800873c:	d189      	bne.n	8008652 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800873e:	4b10      	ldr	r3, [pc, #64]	; (8008780 <xQueueReceive+0x1bc>)
 8008740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008744:	601a      	str	r2, [r3, #0]
 8008746:	f3bf 8f4f 	dsb	sy
 800874a:	f3bf 8f6f 	isb	sy
 800874e:	e780      	b.n	8008652 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008752:	f000 fa6e 	bl	8008c32 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008756:	f000 fddf 	bl	8009318 <xTaskResumeAll>
 800875a:	e77a      	b.n	8008652 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800875c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800875e:	f000 fa68 	bl	8008c32 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008762:	f000 fdd9 	bl	8009318 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008766:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008768:	f000 fab5 	bl	8008cd6 <prvIsQueueEmpty>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	f43f af6f 	beq.w	8008652 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008774:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008776:	4618      	mov	r0, r3
 8008778:	3730      	adds	r7, #48	; 0x30
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	e000ed04 	.word	0xe000ed04

08008784 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b08e      	sub	sp, #56	; 0x38
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800878e:	2300      	movs	r3, #0
 8008790:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008796:	2300      	movs	r3, #0
 8008798:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800879a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800879c:	2b00      	cmp	r3, #0
 800879e:	d10a      	bne.n	80087b6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80087a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a4:	f383 8811 	msr	BASEPRI, r3
 80087a8:	f3bf 8f6f 	isb	sy
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	623b      	str	r3, [r7, #32]
}
 80087b2:	bf00      	nop
 80087b4:	e7fe      	b.n	80087b4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80087b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00a      	beq.n	80087d4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80087be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	61fb      	str	r3, [r7, #28]
}
 80087d0:	bf00      	nop
 80087d2:	e7fe      	b.n	80087d2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087d4:	f001 f97e 	bl	8009ad4 <xTaskGetSchedulerState>
 80087d8:	4603      	mov	r3, r0
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d102      	bne.n	80087e4 <xQueueSemaphoreTake+0x60>
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d101      	bne.n	80087e8 <xQueueSemaphoreTake+0x64>
 80087e4:	2301      	movs	r3, #1
 80087e6:	e000      	b.n	80087ea <xQueueSemaphoreTake+0x66>
 80087e8:	2300      	movs	r3, #0
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d10a      	bne.n	8008804 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80087ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f2:	f383 8811 	msr	BASEPRI, r3
 80087f6:	f3bf 8f6f 	isb	sy
 80087fa:	f3bf 8f4f 	dsb	sy
 80087fe:	61bb      	str	r3, [r7, #24]
}
 8008800:	bf00      	nop
 8008802:	e7fe      	b.n	8008802 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008804:	f002 f8a6 	bl	800a954 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800880a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800880c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800880e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008810:	2b00      	cmp	r3, #0
 8008812:	d024      	beq.n	800885e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008816:	1e5a      	subs	r2, r3, #1
 8008818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800881a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800881c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d104      	bne.n	800882e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008824:	f001 facc 	bl	8009dc0 <pvTaskIncrementMutexHeldCount>
 8008828:	4602      	mov	r2, r0
 800882a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800882c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800882e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008830:	691b      	ldr	r3, [r3, #16]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00f      	beq.n	8008856 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008838:	3310      	adds	r3, #16
 800883a:	4618      	mov	r0, r3
 800883c:	f000 ff88 	bl	8009750 <xTaskRemoveFromEventList>
 8008840:	4603      	mov	r3, r0
 8008842:	2b00      	cmp	r3, #0
 8008844:	d007      	beq.n	8008856 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008846:	4b54      	ldr	r3, [pc, #336]	; (8008998 <xQueueSemaphoreTake+0x214>)
 8008848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800884c:	601a      	str	r2, [r3, #0]
 800884e:	f3bf 8f4f 	dsb	sy
 8008852:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008856:	f002 f8ad 	bl	800a9b4 <vPortExitCritical>
				return pdPASS;
 800885a:	2301      	movs	r3, #1
 800885c:	e097      	b.n	800898e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d111      	bne.n	8008888 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008866:	2b00      	cmp	r3, #0
 8008868:	d00a      	beq.n	8008880 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800886a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886e:	f383 8811 	msr	BASEPRI, r3
 8008872:	f3bf 8f6f 	isb	sy
 8008876:	f3bf 8f4f 	dsb	sy
 800887a:	617b      	str	r3, [r7, #20]
}
 800887c:	bf00      	nop
 800887e:	e7fe      	b.n	800887e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008880:	f002 f898 	bl	800a9b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008884:	2300      	movs	r3, #0
 8008886:	e082      	b.n	800898e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800888a:	2b00      	cmp	r3, #0
 800888c:	d106      	bne.n	800889c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800888e:	f107 030c 	add.w	r3, r7, #12
 8008892:	4618      	mov	r0, r3
 8008894:	f000 ffc0 	bl	8009818 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008898:	2301      	movs	r3, #1
 800889a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800889c:	f002 f88a 	bl	800a9b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80088a0:	f000 fd2c 	bl	80092fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80088a4:	f002 f856 	bl	800a954 <vPortEnterCritical>
 80088a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088ae:	b25b      	sxtb	r3, r3
 80088b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b4:	d103      	bne.n	80088be <xQueueSemaphoreTake+0x13a>
 80088b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088c4:	b25b      	sxtb	r3, r3
 80088c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ca:	d103      	bne.n	80088d4 <xQueueSemaphoreTake+0x150>
 80088cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088d4:	f002 f86e 	bl	800a9b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088d8:	463a      	mov	r2, r7
 80088da:	f107 030c 	add.w	r3, r7, #12
 80088de:	4611      	mov	r1, r2
 80088e0:	4618      	mov	r0, r3
 80088e2:	f000 ffaf 	bl	8009844 <xTaskCheckForTimeOut>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d132      	bne.n	8008952 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80088ee:	f000 f9f2 	bl	8008cd6 <prvIsQueueEmpty>
 80088f2:	4603      	mov	r3, r0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d026      	beq.n	8008946 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80088f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d109      	bne.n	8008914 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008900:	f002 f828 	bl	800a954 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	4618      	mov	r0, r3
 800890a:	f001 f901 	bl	8009b10 <xTaskPriorityInherit>
 800890e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008910:	f002 f850 	bl	800a9b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008916:	3324      	adds	r3, #36	; 0x24
 8008918:	683a      	ldr	r2, [r7, #0]
 800891a:	4611      	mov	r1, r2
 800891c:	4618      	mov	r0, r3
 800891e:	f000 fec7 	bl	80096b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008922:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008924:	f000 f985 	bl	8008c32 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008928:	f000 fcf6 	bl	8009318 <xTaskResumeAll>
 800892c:	4603      	mov	r3, r0
 800892e:	2b00      	cmp	r3, #0
 8008930:	f47f af68 	bne.w	8008804 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008934:	4b18      	ldr	r3, [pc, #96]	; (8008998 <xQueueSemaphoreTake+0x214>)
 8008936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800893a:	601a      	str	r2, [r3, #0]
 800893c:	f3bf 8f4f 	dsb	sy
 8008940:	f3bf 8f6f 	isb	sy
 8008944:	e75e      	b.n	8008804 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008946:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008948:	f000 f973 	bl	8008c32 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800894c:	f000 fce4 	bl	8009318 <xTaskResumeAll>
 8008950:	e758      	b.n	8008804 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008952:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008954:	f000 f96d 	bl	8008c32 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008958:	f000 fcde 	bl	8009318 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800895c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800895e:	f000 f9ba 	bl	8008cd6 <prvIsQueueEmpty>
 8008962:	4603      	mov	r3, r0
 8008964:	2b00      	cmp	r3, #0
 8008966:	f43f af4d 	beq.w	8008804 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800896a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896c:	2b00      	cmp	r3, #0
 800896e:	d00d      	beq.n	800898c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008970:	f001 fff0 	bl	800a954 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008974:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008976:	f000 f8b4 	bl	8008ae2 <prvGetDisinheritPriorityAfterTimeout>
 800897a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800897c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008982:	4618      	mov	r0, r3
 8008984:	f001 f99a 	bl	8009cbc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008988:	f002 f814 	bl	800a9b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800898c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800898e:	4618      	mov	r0, r3
 8008990:	3738      	adds	r7, #56	; 0x38
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	e000ed04 	.word	0xe000ed04

0800899c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b08e      	sub	sp, #56	; 0x38
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80089ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d10a      	bne.n	80089c8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80089b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b6:	f383 8811 	msr	BASEPRI, r3
 80089ba:	f3bf 8f6f 	isb	sy
 80089be:	f3bf 8f4f 	dsb	sy
 80089c2:	623b      	str	r3, [r7, #32]
}
 80089c4:	bf00      	nop
 80089c6:	e7fe      	b.n	80089c6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d103      	bne.n	80089d6 <xQueueReceiveFromISR+0x3a>
 80089ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d101      	bne.n	80089da <xQueueReceiveFromISR+0x3e>
 80089d6:	2301      	movs	r3, #1
 80089d8:	e000      	b.n	80089dc <xQueueReceiveFromISR+0x40>
 80089da:	2300      	movs	r3, #0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d10a      	bne.n	80089f6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80089e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e4:	f383 8811 	msr	BASEPRI, r3
 80089e8:	f3bf 8f6f 	isb	sy
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	61fb      	str	r3, [r7, #28]
}
 80089f2:	bf00      	nop
 80089f4:	e7fe      	b.n	80089f4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089f6:	f002 f88f 	bl	800ab18 <vPortValidateInterruptPriority>
	__asm volatile
 80089fa:	f3ef 8211 	mrs	r2, BASEPRI
 80089fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a02:	f383 8811 	msr	BASEPRI, r3
 8008a06:	f3bf 8f6f 	isb	sy
 8008a0a:	f3bf 8f4f 	dsb	sy
 8008a0e:	61ba      	str	r2, [r7, #24]
 8008a10:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008a12:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a14:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a1a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d02f      	beq.n	8008a82 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a2c:	68b9      	ldr	r1, [r7, #8]
 8008a2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a30:	f000 f8d9 	bl	8008be6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a36:	1e5a      	subs	r2, r3, #1
 8008a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a3a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008a3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a44:	d112      	bne.n	8008a6c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d016      	beq.n	8008a7c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a50:	3310      	adds	r3, #16
 8008a52:	4618      	mov	r0, r3
 8008a54:	f000 fe7c 	bl	8009750 <xTaskRemoveFromEventList>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d00e      	beq.n	8008a7c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d00b      	beq.n	8008a7c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	601a      	str	r2, [r3, #0]
 8008a6a:	e007      	b.n	8008a7c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a70:	3301      	adds	r3, #1
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	b25a      	sxtb	r2, r3
 8008a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	637b      	str	r3, [r7, #52]	; 0x34
 8008a80:	e001      	b.n	8008a86 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008a82:	2300      	movs	r3, #0
 8008a84:	637b      	str	r3, [r7, #52]	; 0x34
 8008a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a88:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	f383 8811 	msr	BASEPRI, r3
}
 8008a90:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3738      	adds	r7, #56	; 0x38
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d10a      	bne.n	8008ac4 <vQueueDelete+0x28>
	__asm volatile
 8008aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab2:	f383 8811 	msr	BASEPRI, r3
 8008ab6:	f3bf 8f6f 	isb	sy
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	60bb      	str	r3, [r7, #8]
}
 8008ac0:	bf00      	nop
 8008ac2:	e7fe      	b.n	8008ac2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008ac4:	68f8      	ldr	r0, [r7, #12]
 8008ac6:	f000 f95f 	bl	8008d88 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d102      	bne.n	8008ada <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008ad4:	68f8      	ldr	r0, [r7, #12]
 8008ad6:	f002 f92b 	bl	800ad30 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008ada:	bf00      	nop
 8008adc:	3710      	adds	r7, #16
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008ae2:	b480      	push	{r7}
 8008ae4:	b085      	sub	sp, #20
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d006      	beq.n	8008b00 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008afc:	60fb      	str	r3, [r7, #12]
 8008afe:	e001      	b.n	8008b04 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008b00:	2300      	movs	r3, #0
 8008b02:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008b04:	68fb      	ldr	r3, [r7, #12]
	}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3714      	adds	r7, #20
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr

08008b12 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b086      	sub	sp, #24
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	60f8      	str	r0, [r7, #12]
 8008b1a:	60b9      	str	r1, [r7, #8]
 8008b1c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b26:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d10d      	bne.n	8008b4c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d14d      	bne.n	8008bd4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f001 f84f 	bl	8009be0 <xTaskPriorityDisinherit>
 8008b42:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2200      	movs	r2, #0
 8008b48:	609a      	str	r2, [r3, #8]
 8008b4a:	e043      	b.n	8008bd4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d119      	bne.n	8008b86 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	6858      	ldr	r0, [r3, #4]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	68b9      	ldr	r1, [r7, #8]
 8008b5e:	f003 f86a 	bl	800bc36 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	685a      	ldr	r2, [r3, #4]
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b6a:	441a      	add	r2, r3
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	685a      	ldr	r2, [r3, #4]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d32b      	bcc.n	8008bd4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681a      	ldr	r2, [r3, #0]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	605a      	str	r2, [r3, #4]
 8008b84:	e026      	b.n	8008bd4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	68d8      	ldr	r0, [r3, #12]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b8e:	461a      	mov	r2, r3
 8008b90:	68b9      	ldr	r1, [r7, #8]
 8008b92:	f003 f850 	bl	800bc36 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	68da      	ldr	r2, [r3, #12]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b9e:	425b      	negs	r3, r3
 8008ba0:	441a      	add	r2, r3
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	68da      	ldr	r2, [r3, #12]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d207      	bcs.n	8008bc2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	689a      	ldr	r2, [r3, #8]
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bba:	425b      	negs	r3, r3
 8008bbc:	441a      	add	r2, r3
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2b02      	cmp	r3, #2
 8008bc6:	d105      	bne.n	8008bd4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d002      	beq.n	8008bd4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	3b01      	subs	r3, #1
 8008bd2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	1c5a      	adds	r2, r3, #1
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008bdc:	697b      	ldr	r3, [r7, #20]
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3718      	adds	r7, #24
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b082      	sub	sp, #8
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
 8008bee:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d018      	beq.n	8008c2a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	68da      	ldr	r2, [r3, #12]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c00:	441a      	add	r2, r3
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	68da      	ldr	r2, [r3, #12]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d303      	bcc.n	8008c1a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	68d9      	ldr	r1, [r3, #12]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c22:	461a      	mov	r2, r3
 8008c24:	6838      	ldr	r0, [r7, #0]
 8008c26:	f003 f806 	bl	800bc36 <memcpy>
	}
}
 8008c2a:	bf00      	nop
 8008c2c:	3708      	adds	r7, #8
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b084      	sub	sp, #16
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008c3a:	f001 fe8b 	bl	800a954 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c44:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c46:	e011      	b.n	8008c6c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d012      	beq.n	8008c76 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	3324      	adds	r3, #36	; 0x24
 8008c54:	4618      	mov	r0, r3
 8008c56:	f000 fd7b 	bl	8009750 <xTaskRemoveFromEventList>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d001      	beq.n	8008c64 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008c60:	f000 fe52 	bl	8009908 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008c64:	7bfb      	ldrb	r3, [r7, #15]
 8008c66:	3b01      	subs	r3, #1
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	dce9      	bgt.n	8008c48 <prvUnlockQueue+0x16>
 8008c74:	e000      	b.n	8008c78 <prvUnlockQueue+0x46>
					break;
 8008c76:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	22ff      	movs	r2, #255	; 0xff
 8008c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008c80:	f001 fe98 	bl	800a9b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008c84:	f001 fe66 	bl	800a954 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c8e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c90:	e011      	b.n	8008cb6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d012      	beq.n	8008cc0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	3310      	adds	r3, #16
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f000 fd56 	bl	8009750 <xTaskRemoveFromEventList>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d001      	beq.n	8008cae <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008caa:	f000 fe2d 	bl	8009908 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008cae:	7bbb      	ldrb	r3, [r7, #14]
 8008cb0:	3b01      	subs	r3, #1
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008cb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	dce9      	bgt.n	8008c92 <prvUnlockQueue+0x60>
 8008cbe:	e000      	b.n	8008cc2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008cc0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	22ff      	movs	r2, #255	; 0xff
 8008cc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008cca:	f001 fe73 	bl	800a9b4 <vPortExitCritical>
}
 8008cce:	bf00      	nop
 8008cd0:	3710      	adds	r7, #16
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b084      	sub	sp, #16
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008cde:	f001 fe39 	bl	800a954 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d102      	bne.n	8008cf0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008cea:	2301      	movs	r3, #1
 8008cec:	60fb      	str	r3, [r7, #12]
 8008cee:	e001      	b.n	8008cf4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008cf4:	f001 fe5e 	bl	800a9b4 <vPortExitCritical>

	return xReturn;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b084      	sub	sp, #16
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d0a:	f001 fe23 	bl	800a954 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d102      	bne.n	8008d20 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	60fb      	str	r3, [r7, #12]
 8008d1e:	e001      	b.n	8008d24 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008d20:	2300      	movs	r3, #0
 8008d22:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d24:	f001 fe46 	bl	800a9b4 <vPortExitCritical>

	return xReturn;
 8008d28:	68fb      	ldr	r3, [r7, #12]
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
	...

08008d34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008d34:	b480      	push	{r7}
 8008d36:	b085      	sub	sp, #20
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d3e:	2300      	movs	r3, #0
 8008d40:	60fb      	str	r3, [r7, #12]
 8008d42:	e014      	b.n	8008d6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008d44:	4a0f      	ldr	r2, [pc, #60]	; (8008d84 <vQueueAddToRegistry+0x50>)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d10b      	bne.n	8008d68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008d50:	490c      	ldr	r1, [pc, #48]	; (8008d84 <vQueueAddToRegistry+0x50>)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	683a      	ldr	r2, [r7, #0]
 8008d56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008d5a:	4a0a      	ldr	r2, [pc, #40]	; (8008d84 <vQueueAddToRegistry+0x50>)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	00db      	lsls	r3, r3, #3
 8008d60:	4413      	add	r3, r2
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008d66:	e006      	b.n	8008d76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	60fb      	str	r3, [r7, #12]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2b07      	cmp	r3, #7
 8008d72:	d9e7      	bls.n	8008d44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008d74:	bf00      	nop
 8008d76:	bf00      	nop
 8008d78:	3714      	adds	r7, #20
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr
 8008d82:	bf00      	nop
 8008d84:	20000bfc 	.word	0x20000bfc

08008d88 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008d88:	b480      	push	{r7}
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d90:	2300      	movs	r3, #0
 8008d92:	60fb      	str	r3, [r7, #12]
 8008d94:	e016      	b.n	8008dc4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008d96:	4a10      	ldr	r2, [pc, #64]	; (8008dd8 <vQueueUnregisterQueue+0x50>)
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	00db      	lsls	r3, r3, #3
 8008d9c:	4413      	add	r3, r2
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d10b      	bne.n	8008dbe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008da6:	4a0c      	ldr	r2, [pc, #48]	; (8008dd8 <vQueueUnregisterQueue+0x50>)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2100      	movs	r1, #0
 8008dac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008db0:	4a09      	ldr	r2, [pc, #36]	; (8008dd8 <vQueueUnregisterQueue+0x50>)
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	00db      	lsls	r3, r3, #3
 8008db6:	4413      	add	r3, r2
 8008db8:	2200      	movs	r2, #0
 8008dba:	605a      	str	r2, [r3, #4]
				break;
 8008dbc:	e006      	b.n	8008dcc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	60fb      	str	r3, [r7, #12]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2b07      	cmp	r3, #7
 8008dc8:	d9e5      	bls.n	8008d96 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008dca:	bf00      	nop
 8008dcc:	bf00      	nop
 8008dce:	3714      	adds	r7, #20
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr
 8008dd8:	20000bfc 	.word	0x20000bfc

08008ddc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b086      	sub	sp, #24
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	60f8      	str	r0, [r7, #12]
 8008de4:	60b9      	str	r1, [r7, #8]
 8008de6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008dec:	f001 fdb2 	bl	800a954 <vPortEnterCritical>
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008df6:	b25b      	sxtb	r3, r3
 8008df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dfc:	d103      	bne.n	8008e06 <vQueueWaitForMessageRestricted+0x2a>
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e0c:	b25b      	sxtb	r3, r3
 8008e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e12:	d103      	bne.n	8008e1c <vQueueWaitForMessageRestricted+0x40>
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	2200      	movs	r2, #0
 8008e18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e1c:	f001 fdca 	bl	800a9b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d106      	bne.n	8008e36 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	3324      	adds	r3, #36	; 0x24
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	68b9      	ldr	r1, [r7, #8]
 8008e30:	4618      	mov	r0, r3
 8008e32:	f000 fc61 	bl	80096f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008e36:	6978      	ldr	r0, [r7, #20]
 8008e38:	f7ff fefb 	bl	8008c32 <prvUnlockQueue>
	}
 8008e3c:	bf00      	nop
 8008e3e:	3718      	adds	r7, #24
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b08e      	sub	sp, #56	; 0x38
 8008e48:	af04      	add	r7, sp, #16
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	60b9      	str	r1, [r7, #8]
 8008e4e:	607a      	str	r2, [r7, #4]
 8008e50:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d10a      	bne.n	8008e6e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5c:	f383 8811 	msr	BASEPRI, r3
 8008e60:	f3bf 8f6f 	isb	sy
 8008e64:	f3bf 8f4f 	dsb	sy
 8008e68:	623b      	str	r3, [r7, #32]
}
 8008e6a:	bf00      	nop
 8008e6c:	e7fe      	b.n	8008e6c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d10a      	bne.n	8008e8a <xTaskCreateStatic+0x46>
	__asm volatile
 8008e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e78:	f383 8811 	msr	BASEPRI, r3
 8008e7c:	f3bf 8f6f 	isb	sy
 8008e80:	f3bf 8f4f 	dsb	sy
 8008e84:	61fb      	str	r3, [r7, #28]
}
 8008e86:	bf00      	nop
 8008e88:	e7fe      	b.n	8008e88 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008e8a:	23b8      	movs	r3, #184	; 0xb8
 8008e8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	2bb8      	cmp	r3, #184	; 0xb8
 8008e92:	d00a      	beq.n	8008eaa <xTaskCreateStatic+0x66>
	__asm volatile
 8008e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e98:	f383 8811 	msr	BASEPRI, r3
 8008e9c:	f3bf 8f6f 	isb	sy
 8008ea0:	f3bf 8f4f 	dsb	sy
 8008ea4:	61bb      	str	r3, [r7, #24]
}
 8008ea6:	bf00      	nop
 8008ea8:	e7fe      	b.n	8008ea8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008eaa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d01e      	beq.n	8008ef0 <xTaskCreateStatic+0xac>
 8008eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d01b      	beq.n	8008ef0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ec0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec4:	2202      	movs	r2, #2
 8008ec6:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008eca:	2300      	movs	r3, #0
 8008ecc:	9303      	str	r3, [sp, #12]
 8008ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed0:	9302      	str	r3, [sp, #8]
 8008ed2:	f107 0314 	add.w	r3, r7, #20
 8008ed6:	9301      	str	r3, [sp, #4]
 8008ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eda:	9300      	str	r3, [sp, #0]
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	68b9      	ldr	r1, [r7, #8]
 8008ee2:	68f8      	ldr	r0, [r7, #12]
 8008ee4:	f000 f850 	bl	8008f88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ee8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008eea:	f000 f8f3 	bl	80090d4 <prvAddNewTaskToReadyList>
 8008eee:	e001      	b.n	8008ef4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008ef4:	697b      	ldr	r3, [r7, #20]
	}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3728      	adds	r7, #40	; 0x28
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b08c      	sub	sp, #48	; 0x30
 8008f02:	af04      	add	r7, sp, #16
 8008f04:	60f8      	str	r0, [r7, #12]
 8008f06:	60b9      	str	r1, [r7, #8]
 8008f08:	603b      	str	r3, [r7, #0]
 8008f0a:	4613      	mov	r3, r2
 8008f0c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008f0e:	88fb      	ldrh	r3, [r7, #6]
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	4618      	mov	r0, r3
 8008f14:	f001 fe40 	bl	800ab98 <pvPortMalloc>
 8008f18:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00e      	beq.n	8008f3e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008f20:	20b8      	movs	r0, #184	; 0xb8
 8008f22:	f001 fe39 	bl	800ab98 <pvPortMalloc>
 8008f26:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008f28:	69fb      	ldr	r3, [r7, #28]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d003      	beq.n	8008f36 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	697a      	ldr	r2, [r7, #20]
 8008f32:	631a      	str	r2, [r3, #48]	; 0x30
 8008f34:	e005      	b.n	8008f42 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008f36:	6978      	ldr	r0, [r7, #20]
 8008f38:	f001 fefa 	bl	800ad30 <vPortFree>
 8008f3c:	e001      	b.n	8008f42 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d017      	beq.n	8008f78 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008f48:	69fb      	ldr	r3, [r7, #28]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008f50:	88fa      	ldrh	r2, [r7, #6]
 8008f52:	2300      	movs	r3, #0
 8008f54:	9303      	str	r3, [sp, #12]
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	9302      	str	r3, [sp, #8]
 8008f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f5c:	9301      	str	r3, [sp, #4]
 8008f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f60:	9300      	str	r3, [sp, #0]
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	68b9      	ldr	r1, [r7, #8]
 8008f66:	68f8      	ldr	r0, [r7, #12]
 8008f68:	f000 f80e 	bl	8008f88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f6c:	69f8      	ldr	r0, [r7, #28]
 8008f6e:	f000 f8b1 	bl	80090d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008f72:	2301      	movs	r3, #1
 8008f74:	61bb      	str	r3, [r7, #24]
 8008f76:	e002      	b.n	8008f7e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008f78:	f04f 33ff 	mov.w	r3, #4294967295
 8008f7c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008f7e:	69bb      	ldr	r3, [r7, #24]
	}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3720      	adds	r7, #32
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b088      	sub	sp, #32
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	607a      	str	r2, [r7, #4]
 8008f94:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f98:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	21a5      	movs	r1, #165	; 0xa5
 8008fa2:	f002 fd60 	bl	800ba66 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008fb0:	3b01      	subs	r3, #1
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	4413      	add	r3, r2
 8008fb6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	f023 0307 	bic.w	r3, r3, #7
 8008fbe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008fc0:	69bb      	ldr	r3, [r7, #24]
 8008fc2:	f003 0307 	and.w	r3, r3, #7
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d00a      	beq.n	8008fe0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fce:	f383 8811 	msr	BASEPRI, r3
 8008fd2:	f3bf 8f6f 	isb	sy
 8008fd6:	f3bf 8f4f 	dsb	sy
 8008fda:	617b      	str	r3, [r7, #20]
}
 8008fdc:	bf00      	nop
 8008fde:	e7fe      	b.n	8008fde <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d01f      	beq.n	8009026 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	61fb      	str	r3, [r7, #28]
 8008fea:	e012      	b.n	8009012 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	7819      	ldrb	r1, [r3, #0]
 8008ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	3334      	adds	r3, #52	; 0x34
 8008ffc:	460a      	mov	r2, r1
 8008ffe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009000:	68ba      	ldr	r2, [r7, #8]
 8009002:	69fb      	ldr	r3, [r7, #28]
 8009004:	4413      	add	r3, r2
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d006      	beq.n	800901a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	3301      	adds	r3, #1
 8009010:	61fb      	str	r3, [r7, #28]
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	2b1f      	cmp	r3, #31
 8009016:	d9e9      	bls.n	8008fec <prvInitialiseNewTask+0x64>
 8009018:	e000      	b.n	800901c <prvInitialiseNewTask+0x94>
			{
				break;
 800901a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800901c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901e:	2200      	movs	r2, #0
 8009020:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8009024:	e003      	b.n	800902e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009028:	2200      	movs	r2, #0
 800902a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800902e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009030:	2b37      	cmp	r3, #55	; 0x37
 8009032:	d901      	bls.n	8009038 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009034:	2337      	movs	r3, #55	; 0x37
 8009036:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800903c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800903e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009040:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009042:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8009044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009046:	2200      	movs	r2, #0
 8009048:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800904a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904c:	3304      	adds	r3, #4
 800904e:	4618      	mov	r0, r3
 8009050:	f7fe fe0a 	bl	8007c68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009056:	3318      	adds	r3, #24
 8009058:	4618      	mov	r0, r3
 800905a:	f7fe fe05 	bl	8007c68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800905e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009062:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009066:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800906a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800906e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009072:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009076:	2200      	movs	r2, #0
 8009078:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800907c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907e:	2200      	movs	r2, #0
 8009080:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009086:	3364      	adds	r3, #100	; 0x64
 8009088:	224c      	movs	r2, #76	; 0x4c
 800908a:	2100      	movs	r1, #0
 800908c:	4618      	mov	r0, r3
 800908e:	f002 fcea 	bl	800ba66 <memset>
 8009092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009094:	4a0c      	ldr	r2, [pc, #48]	; (80090c8 <prvInitialiseNewTask+0x140>)
 8009096:	669a      	str	r2, [r3, #104]	; 0x68
 8009098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909a:	4a0c      	ldr	r2, [pc, #48]	; (80090cc <prvInitialiseNewTask+0x144>)
 800909c:	66da      	str	r2, [r3, #108]	; 0x6c
 800909e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a0:	4a0b      	ldr	r2, [pc, #44]	; (80090d0 <prvInitialiseNewTask+0x148>)
 80090a2:	671a      	str	r2, [r3, #112]	; 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80090a4:	683a      	ldr	r2, [r7, #0]
 80090a6:	68f9      	ldr	r1, [r7, #12]
 80090a8:	69b8      	ldr	r0, [r7, #24]
 80090aa:	f001 fb23 	bl	800a6f4 <pxPortInitialiseStack>
 80090ae:	4602      	mov	r2, r0
 80090b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80090b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d002      	beq.n	80090c0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80090ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090be:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090c0:	bf00      	nop
 80090c2:	3720      	adds	r7, #32
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	200060b0 	.word	0x200060b0
 80090cc:	20006118 	.word	0x20006118
 80090d0:	20006180 	.word	0x20006180

080090d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b082      	sub	sp, #8
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80090dc:	f001 fc3a 	bl	800a954 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80090e0:	4b2d      	ldr	r3, [pc, #180]	; (8009198 <prvAddNewTaskToReadyList+0xc4>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	3301      	adds	r3, #1
 80090e6:	4a2c      	ldr	r2, [pc, #176]	; (8009198 <prvAddNewTaskToReadyList+0xc4>)
 80090e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80090ea:	4b2c      	ldr	r3, [pc, #176]	; (800919c <prvAddNewTaskToReadyList+0xc8>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d109      	bne.n	8009106 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80090f2:	4a2a      	ldr	r2, [pc, #168]	; (800919c <prvAddNewTaskToReadyList+0xc8>)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80090f8:	4b27      	ldr	r3, [pc, #156]	; (8009198 <prvAddNewTaskToReadyList+0xc4>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d110      	bne.n	8009122 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009100:	f000 fc26 	bl	8009950 <prvInitialiseTaskLists>
 8009104:	e00d      	b.n	8009122 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009106:	4b26      	ldr	r3, [pc, #152]	; (80091a0 <prvAddNewTaskToReadyList+0xcc>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d109      	bne.n	8009122 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800910e:	4b23      	ldr	r3, [pc, #140]	; (800919c <prvAddNewTaskToReadyList+0xc8>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009118:	429a      	cmp	r2, r3
 800911a:	d802      	bhi.n	8009122 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800911c:	4a1f      	ldr	r2, [pc, #124]	; (800919c <prvAddNewTaskToReadyList+0xc8>)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009122:	4b20      	ldr	r3, [pc, #128]	; (80091a4 <prvAddNewTaskToReadyList+0xd0>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	3301      	adds	r3, #1
 8009128:	4a1e      	ldr	r2, [pc, #120]	; (80091a4 <prvAddNewTaskToReadyList+0xd0>)
 800912a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800912c:	4b1d      	ldr	r3, [pc, #116]	; (80091a4 <prvAddNewTaskToReadyList+0xd0>)
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009138:	4b1b      	ldr	r3, [pc, #108]	; (80091a8 <prvAddNewTaskToReadyList+0xd4>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	429a      	cmp	r2, r3
 800913e:	d903      	bls.n	8009148 <prvAddNewTaskToReadyList+0x74>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009144:	4a18      	ldr	r2, [pc, #96]	; (80091a8 <prvAddNewTaskToReadyList+0xd4>)
 8009146:	6013      	str	r3, [r2, #0]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800914c:	4613      	mov	r3, r2
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	4413      	add	r3, r2
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	4a15      	ldr	r2, [pc, #84]	; (80091ac <prvAddNewTaskToReadyList+0xd8>)
 8009156:	441a      	add	r2, r3
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	3304      	adds	r3, #4
 800915c:	4619      	mov	r1, r3
 800915e:	4610      	mov	r0, r2
 8009160:	f7fe fd8f 	bl	8007c82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009164:	f001 fc26 	bl	800a9b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009168:	4b0d      	ldr	r3, [pc, #52]	; (80091a0 <prvAddNewTaskToReadyList+0xcc>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d00e      	beq.n	800918e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009170:	4b0a      	ldr	r3, [pc, #40]	; (800919c <prvAddNewTaskToReadyList+0xc8>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800917a:	429a      	cmp	r2, r3
 800917c:	d207      	bcs.n	800918e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800917e:	4b0c      	ldr	r3, [pc, #48]	; (80091b0 <prvAddNewTaskToReadyList+0xdc>)
 8009180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009184:	601a      	str	r2, [r3, #0]
 8009186:	f3bf 8f4f 	dsb	sy
 800918a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800918e:	bf00      	nop
 8009190:	3708      	adds	r7, #8
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	20001110 	.word	0x20001110
 800919c:	20000c3c 	.word	0x20000c3c
 80091a0:	2000111c 	.word	0x2000111c
 80091a4:	2000112c 	.word	0x2000112c
 80091a8:	20001118 	.word	0x20001118
 80091ac:	20000c40 	.word	0x20000c40
 80091b0:	e000ed04 	.word	0xe000ed04

080091b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80091bc:	2300      	movs	r3, #0
 80091be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d017      	beq.n	80091f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80091c6:	4b13      	ldr	r3, [pc, #76]	; (8009214 <vTaskDelay+0x60>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d00a      	beq.n	80091e4 <vTaskDelay+0x30>
	__asm volatile
 80091ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d2:	f383 8811 	msr	BASEPRI, r3
 80091d6:	f3bf 8f6f 	isb	sy
 80091da:	f3bf 8f4f 	dsb	sy
 80091de:	60bb      	str	r3, [r7, #8]
}
 80091e0:	bf00      	nop
 80091e2:	e7fe      	b.n	80091e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80091e4:	f000 f88a 	bl	80092fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80091e8:	2100      	movs	r1, #0
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 fdfc 	bl	8009de8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80091f0:	f000 f892 	bl	8009318 <xTaskResumeAll>
 80091f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d107      	bne.n	800920c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80091fc:	4b06      	ldr	r3, [pc, #24]	; (8009218 <vTaskDelay+0x64>)
 80091fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009202:	601a      	str	r2, [r3, #0]
 8009204:	f3bf 8f4f 	dsb	sy
 8009208:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800920c:	bf00      	nop
 800920e:	3710      	adds	r7, #16
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}
 8009214:	20001138 	.word	0x20001138
 8009218:	e000ed04 	.word	0xe000ed04

0800921c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b08a      	sub	sp, #40	; 0x28
 8009220:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009222:	2300      	movs	r3, #0
 8009224:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009226:	2300      	movs	r3, #0
 8009228:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800922a:	463a      	mov	r2, r7
 800922c:	1d39      	adds	r1, r7, #4
 800922e:	f107 0308 	add.w	r3, r7, #8
 8009232:	4618      	mov	r0, r3
 8009234:	f7fe fcc4 	bl	8007bc0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009238:	6839      	ldr	r1, [r7, #0]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	68ba      	ldr	r2, [r7, #8]
 800923e:	9202      	str	r2, [sp, #8]
 8009240:	9301      	str	r3, [sp, #4]
 8009242:	2300      	movs	r3, #0
 8009244:	9300      	str	r3, [sp, #0]
 8009246:	2300      	movs	r3, #0
 8009248:	460a      	mov	r2, r1
 800924a:	4924      	ldr	r1, [pc, #144]	; (80092dc <vTaskStartScheduler+0xc0>)
 800924c:	4824      	ldr	r0, [pc, #144]	; (80092e0 <vTaskStartScheduler+0xc4>)
 800924e:	f7ff fdf9 	bl	8008e44 <xTaskCreateStatic>
 8009252:	4603      	mov	r3, r0
 8009254:	4a23      	ldr	r2, [pc, #140]	; (80092e4 <vTaskStartScheduler+0xc8>)
 8009256:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009258:	4b22      	ldr	r3, [pc, #136]	; (80092e4 <vTaskStartScheduler+0xc8>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d002      	beq.n	8009266 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009260:	2301      	movs	r3, #1
 8009262:	617b      	str	r3, [r7, #20]
 8009264:	e001      	b.n	800926a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009266:	2300      	movs	r3, #0
 8009268:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	2b01      	cmp	r3, #1
 800926e:	d102      	bne.n	8009276 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009270:	f000 fe0e 	bl	8009e90 <xTimerCreateTimerTask>
 8009274:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	2b01      	cmp	r3, #1
 800927a:	d11b      	bne.n	80092b4 <vTaskStartScheduler+0x98>
	__asm volatile
 800927c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009280:	f383 8811 	msr	BASEPRI, r3
 8009284:	f3bf 8f6f 	isb	sy
 8009288:	f3bf 8f4f 	dsb	sy
 800928c:	613b      	str	r3, [r7, #16]
}
 800928e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009290:	4b15      	ldr	r3, [pc, #84]	; (80092e8 <vTaskStartScheduler+0xcc>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	3364      	adds	r3, #100	; 0x64
 8009296:	4a15      	ldr	r2, [pc, #84]	; (80092ec <vTaskStartScheduler+0xd0>)
 8009298:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800929a:	4b15      	ldr	r3, [pc, #84]	; (80092f0 <vTaskStartScheduler+0xd4>)
 800929c:	f04f 32ff 	mov.w	r2, #4294967295
 80092a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80092a2:	4b14      	ldr	r3, [pc, #80]	; (80092f4 <vTaskStartScheduler+0xd8>)
 80092a4:	2201      	movs	r2, #1
 80092a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80092a8:	4b13      	ldr	r3, [pc, #76]	; (80092f8 <vTaskStartScheduler+0xdc>)
 80092aa:	2200      	movs	r2, #0
 80092ac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80092ae:	f001 faaf 	bl	800a810 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80092b2:	e00e      	b.n	80092d2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ba:	d10a      	bne.n	80092d2 <vTaskStartScheduler+0xb6>
	__asm volatile
 80092bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c0:	f383 8811 	msr	BASEPRI, r3
 80092c4:	f3bf 8f6f 	isb	sy
 80092c8:	f3bf 8f4f 	dsb	sy
 80092cc:	60fb      	str	r3, [r7, #12]
}
 80092ce:	bf00      	nop
 80092d0:	e7fe      	b.n	80092d0 <vTaskStartScheduler+0xb4>
}
 80092d2:	bf00      	nop
 80092d4:	3718      	adds	r7, #24
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop
 80092dc:	0800db60 	.word	0x0800db60
 80092e0:	08009921 	.word	0x08009921
 80092e4:	20001134 	.word	0x20001134
 80092e8:	20000c3c 	.word	0x20000c3c
 80092ec:	2000006c 	.word	0x2000006c
 80092f0:	20001130 	.word	0x20001130
 80092f4:	2000111c 	.word	0x2000111c
 80092f8:	20001114 	.word	0x20001114

080092fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80092fc:	b480      	push	{r7}
 80092fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009300:	4b04      	ldr	r3, [pc, #16]	; (8009314 <vTaskSuspendAll+0x18>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	3301      	adds	r3, #1
 8009306:	4a03      	ldr	r2, [pc, #12]	; (8009314 <vTaskSuspendAll+0x18>)
 8009308:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800930a:	bf00      	nop
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr
 8009314:	20001138 	.word	0x20001138

08009318 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800931e:	2300      	movs	r3, #0
 8009320:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009322:	2300      	movs	r3, #0
 8009324:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009326:	4b42      	ldr	r3, [pc, #264]	; (8009430 <xTaskResumeAll+0x118>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d10a      	bne.n	8009344 <xTaskResumeAll+0x2c>
	__asm volatile
 800932e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009332:	f383 8811 	msr	BASEPRI, r3
 8009336:	f3bf 8f6f 	isb	sy
 800933a:	f3bf 8f4f 	dsb	sy
 800933e:	603b      	str	r3, [r7, #0]
}
 8009340:	bf00      	nop
 8009342:	e7fe      	b.n	8009342 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009344:	f001 fb06 	bl	800a954 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009348:	4b39      	ldr	r3, [pc, #228]	; (8009430 <xTaskResumeAll+0x118>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	3b01      	subs	r3, #1
 800934e:	4a38      	ldr	r2, [pc, #224]	; (8009430 <xTaskResumeAll+0x118>)
 8009350:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009352:	4b37      	ldr	r3, [pc, #220]	; (8009430 <xTaskResumeAll+0x118>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d162      	bne.n	8009420 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800935a:	4b36      	ldr	r3, [pc, #216]	; (8009434 <xTaskResumeAll+0x11c>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d05e      	beq.n	8009420 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009362:	e02f      	b.n	80093c4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009364:	4b34      	ldr	r3, [pc, #208]	; (8009438 <xTaskResumeAll+0x120>)
 8009366:	68db      	ldr	r3, [r3, #12]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	3318      	adds	r3, #24
 8009370:	4618      	mov	r0, r3
 8009372:	f7fe fce3 	bl	8007d3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	3304      	adds	r3, #4
 800937a:	4618      	mov	r0, r3
 800937c:	f7fe fcde 	bl	8007d3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009384:	4b2d      	ldr	r3, [pc, #180]	; (800943c <xTaskResumeAll+0x124>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	429a      	cmp	r2, r3
 800938a:	d903      	bls.n	8009394 <xTaskResumeAll+0x7c>
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009390:	4a2a      	ldr	r2, [pc, #168]	; (800943c <xTaskResumeAll+0x124>)
 8009392:	6013      	str	r3, [r2, #0]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009398:	4613      	mov	r3, r2
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	4413      	add	r3, r2
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	4a27      	ldr	r2, [pc, #156]	; (8009440 <xTaskResumeAll+0x128>)
 80093a2:	441a      	add	r2, r3
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	3304      	adds	r3, #4
 80093a8:	4619      	mov	r1, r3
 80093aa:	4610      	mov	r0, r2
 80093ac:	f7fe fc69 	bl	8007c82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093b4:	4b23      	ldr	r3, [pc, #140]	; (8009444 <xTaskResumeAll+0x12c>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d302      	bcc.n	80093c4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80093be:	4b22      	ldr	r3, [pc, #136]	; (8009448 <xTaskResumeAll+0x130>)
 80093c0:	2201      	movs	r2, #1
 80093c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093c4:	4b1c      	ldr	r3, [pc, #112]	; (8009438 <xTaskResumeAll+0x120>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d1cb      	bne.n	8009364 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d001      	beq.n	80093d6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80093d2:	f000 fb5f 	bl	8009a94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80093d6:	4b1d      	ldr	r3, [pc, #116]	; (800944c <xTaskResumeAll+0x134>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d010      	beq.n	8009404 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80093e2:	f000 f847 	bl	8009474 <xTaskIncrementTick>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d002      	beq.n	80093f2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80093ec:	4b16      	ldr	r3, [pc, #88]	; (8009448 <xTaskResumeAll+0x130>)
 80093ee:	2201      	movs	r2, #1
 80093f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	3b01      	subs	r3, #1
 80093f6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d1f1      	bne.n	80093e2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80093fe:	4b13      	ldr	r3, [pc, #76]	; (800944c <xTaskResumeAll+0x134>)
 8009400:	2200      	movs	r2, #0
 8009402:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009404:	4b10      	ldr	r3, [pc, #64]	; (8009448 <xTaskResumeAll+0x130>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d009      	beq.n	8009420 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800940c:	2301      	movs	r3, #1
 800940e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009410:	4b0f      	ldr	r3, [pc, #60]	; (8009450 <xTaskResumeAll+0x138>)
 8009412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009416:	601a      	str	r2, [r3, #0]
 8009418:	f3bf 8f4f 	dsb	sy
 800941c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009420:	f001 fac8 	bl	800a9b4 <vPortExitCritical>

	return xAlreadyYielded;
 8009424:	68bb      	ldr	r3, [r7, #8]
}
 8009426:	4618      	mov	r0, r3
 8009428:	3710      	adds	r7, #16
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop
 8009430:	20001138 	.word	0x20001138
 8009434:	20001110 	.word	0x20001110
 8009438:	200010d0 	.word	0x200010d0
 800943c:	20001118 	.word	0x20001118
 8009440:	20000c40 	.word	0x20000c40
 8009444:	20000c3c 	.word	0x20000c3c
 8009448:	20001124 	.word	0x20001124
 800944c:	20001120 	.word	0x20001120
 8009450:	e000ed04 	.word	0xe000ed04

08009454 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800945a:	4b05      	ldr	r3, [pc, #20]	; (8009470 <xTaskGetTickCount+0x1c>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009460:	687b      	ldr	r3, [r7, #4]
}
 8009462:	4618      	mov	r0, r3
 8009464:	370c      	adds	r7, #12
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr
 800946e:	bf00      	nop
 8009470:	20001114 	.word	0x20001114

08009474 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b086      	sub	sp, #24
 8009478:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800947a:	2300      	movs	r3, #0
 800947c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800947e:	4b4f      	ldr	r3, [pc, #316]	; (80095bc <xTaskIncrementTick+0x148>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	2b00      	cmp	r3, #0
 8009484:	f040 808f 	bne.w	80095a6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009488:	4b4d      	ldr	r3, [pc, #308]	; (80095c0 <xTaskIncrementTick+0x14c>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	3301      	adds	r3, #1
 800948e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009490:	4a4b      	ldr	r2, [pc, #300]	; (80095c0 <xTaskIncrementTick+0x14c>)
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d120      	bne.n	80094de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800949c:	4b49      	ldr	r3, [pc, #292]	; (80095c4 <xTaskIncrementTick+0x150>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d00a      	beq.n	80094bc <xTaskIncrementTick+0x48>
	__asm volatile
 80094a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094aa:	f383 8811 	msr	BASEPRI, r3
 80094ae:	f3bf 8f6f 	isb	sy
 80094b2:	f3bf 8f4f 	dsb	sy
 80094b6:	603b      	str	r3, [r7, #0]
}
 80094b8:	bf00      	nop
 80094ba:	e7fe      	b.n	80094ba <xTaskIncrementTick+0x46>
 80094bc:	4b41      	ldr	r3, [pc, #260]	; (80095c4 <xTaskIncrementTick+0x150>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	60fb      	str	r3, [r7, #12]
 80094c2:	4b41      	ldr	r3, [pc, #260]	; (80095c8 <xTaskIncrementTick+0x154>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a3f      	ldr	r2, [pc, #252]	; (80095c4 <xTaskIncrementTick+0x150>)
 80094c8:	6013      	str	r3, [r2, #0]
 80094ca:	4a3f      	ldr	r2, [pc, #252]	; (80095c8 <xTaskIncrementTick+0x154>)
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6013      	str	r3, [r2, #0]
 80094d0:	4b3e      	ldr	r3, [pc, #248]	; (80095cc <xTaskIncrementTick+0x158>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	3301      	adds	r3, #1
 80094d6:	4a3d      	ldr	r2, [pc, #244]	; (80095cc <xTaskIncrementTick+0x158>)
 80094d8:	6013      	str	r3, [r2, #0]
 80094da:	f000 fadb 	bl	8009a94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80094de:	4b3c      	ldr	r3, [pc, #240]	; (80095d0 <xTaskIncrementTick+0x15c>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	693a      	ldr	r2, [r7, #16]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d349      	bcc.n	800957c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094e8:	4b36      	ldr	r3, [pc, #216]	; (80095c4 <xTaskIncrementTick+0x150>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d104      	bne.n	80094fc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094f2:	4b37      	ldr	r3, [pc, #220]	; (80095d0 <xTaskIncrementTick+0x15c>)
 80094f4:	f04f 32ff 	mov.w	r2, #4294967295
 80094f8:	601a      	str	r2, [r3, #0]
					break;
 80094fa:	e03f      	b.n	800957c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094fc:	4b31      	ldr	r3, [pc, #196]	; (80095c4 <xTaskIncrementTick+0x150>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	68db      	ldr	r3, [r3, #12]
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800950c:	693a      	ldr	r2, [r7, #16]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	429a      	cmp	r2, r3
 8009512:	d203      	bcs.n	800951c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009514:	4a2e      	ldr	r2, [pc, #184]	; (80095d0 <xTaskIncrementTick+0x15c>)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800951a:	e02f      	b.n	800957c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	3304      	adds	r3, #4
 8009520:	4618      	mov	r0, r3
 8009522:	f7fe fc0b 	bl	8007d3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800952a:	2b00      	cmp	r3, #0
 800952c:	d004      	beq.n	8009538 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	3318      	adds	r3, #24
 8009532:	4618      	mov	r0, r3
 8009534:	f7fe fc02 	bl	8007d3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800953c:	4b25      	ldr	r3, [pc, #148]	; (80095d4 <xTaskIncrementTick+0x160>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	429a      	cmp	r2, r3
 8009542:	d903      	bls.n	800954c <xTaskIncrementTick+0xd8>
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009548:	4a22      	ldr	r2, [pc, #136]	; (80095d4 <xTaskIncrementTick+0x160>)
 800954a:	6013      	str	r3, [r2, #0]
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009550:	4613      	mov	r3, r2
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	4413      	add	r3, r2
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	4a1f      	ldr	r2, [pc, #124]	; (80095d8 <xTaskIncrementTick+0x164>)
 800955a:	441a      	add	r2, r3
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	3304      	adds	r3, #4
 8009560:	4619      	mov	r1, r3
 8009562:	4610      	mov	r0, r2
 8009564:	f7fe fb8d 	bl	8007c82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800956c:	4b1b      	ldr	r3, [pc, #108]	; (80095dc <xTaskIncrementTick+0x168>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009572:	429a      	cmp	r2, r3
 8009574:	d3b8      	bcc.n	80094e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009576:	2301      	movs	r3, #1
 8009578:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800957a:	e7b5      	b.n	80094e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800957c:	4b17      	ldr	r3, [pc, #92]	; (80095dc <xTaskIncrementTick+0x168>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009582:	4915      	ldr	r1, [pc, #84]	; (80095d8 <xTaskIncrementTick+0x164>)
 8009584:	4613      	mov	r3, r2
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	4413      	add	r3, r2
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	440b      	add	r3, r1
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2b01      	cmp	r3, #1
 8009592:	d901      	bls.n	8009598 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009594:	2301      	movs	r3, #1
 8009596:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009598:	4b11      	ldr	r3, [pc, #68]	; (80095e0 <xTaskIncrementTick+0x16c>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d007      	beq.n	80095b0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80095a0:	2301      	movs	r3, #1
 80095a2:	617b      	str	r3, [r7, #20]
 80095a4:	e004      	b.n	80095b0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80095a6:	4b0f      	ldr	r3, [pc, #60]	; (80095e4 <xTaskIncrementTick+0x170>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	3301      	adds	r3, #1
 80095ac:	4a0d      	ldr	r2, [pc, #52]	; (80095e4 <xTaskIncrementTick+0x170>)
 80095ae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80095b0:	697b      	ldr	r3, [r7, #20]
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3718      	adds	r7, #24
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	20001138 	.word	0x20001138
 80095c0:	20001114 	.word	0x20001114
 80095c4:	200010c8 	.word	0x200010c8
 80095c8:	200010cc 	.word	0x200010cc
 80095cc:	20001128 	.word	0x20001128
 80095d0:	20001130 	.word	0x20001130
 80095d4:	20001118 	.word	0x20001118
 80095d8:	20000c40 	.word	0x20000c40
 80095dc:	20000c3c 	.word	0x20000c3c
 80095e0:	20001124 	.word	0x20001124
 80095e4:	20001120 	.word	0x20001120

080095e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80095e8:	b480      	push	{r7}
 80095ea:	b085      	sub	sp, #20
 80095ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80095ee:	4b2a      	ldr	r3, [pc, #168]	; (8009698 <vTaskSwitchContext+0xb0>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d003      	beq.n	80095fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80095f6:	4b29      	ldr	r3, [pc, #164]	; (800969c <vTaskSwitchContext+0xb4>)
 80095f8:	2201      	movs	r2, #1
 80095fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80095fc:	e046      	b.n	800968c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80095fe:	4b27      	ldr	r3, [pc, #156]	; (800969c <vTaskSwitchContext+0xb4>)
 8009600:	2200      	movs	r2, #0
 8009602:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009604:	4b26      	ldr	r3, [pc, #152]	; (80096a0 <vTaskSwitchContext+0xb8>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	60fb      	str	r3, [r7, #12]
 800960a:	e010      	b.n	800962e <vTaskSwitchContext+0x46>
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d10a      	bne.n	8009628 <vTaskSwitchContext+0x40>
	__asm volatile
 8009612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009616:	f383 8811 	msr	BASEPRI, r3
 800961a:	f3bf 8f6f 	isb	sy
 800961e:	f3bf 8f4f 	dsb	sy
 8009622:	607b      	str	r3, [r7, #4]
}
 8009624:	bf00      	nop
 8009626:	e7fe      	b.n	8009626 <vTaskSwitchContext+0x3e>
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	3b01      	subs	r3, #1
 800962c:	60fb      	str	r3, [r7, #12]
 800962e:	491d      	ldr	r1, [pc, #116]	; (80096a4 <vTaskSwitchContext+0xbc>)
 8009630:	68fa      	ldr	r2, [r7, #12]
 8009632:	4613      	mov	r3, r2
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	4413      	add	r3, r2
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	440b      	add	r3, r1
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d0e4      	beq.n	800960c <vTaskSwitchContext+0x24>
 8009642:	68fa      	ldr	r2, [r7, #12]
 8009644:	4613      	mov	r3, r2
 8009646:	009b      	lsls	r3, r3, #2
 8009648:	4413      	add	r3, r2
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	4a15      	ldr	r2, [pc, #84]	; (80096a4 <vTaskSwitchContext+0xbc>)
 800964e:	4413      	add	r3, r2
 8009650:	60bb      	str	r3, [r7, #8]
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	685a      	ldr	r2, [r3, #4]
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	605a      	str	r2, [r3, #4]
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	685a      	ldr	r2, [r3, #4]
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	3308      	adds	r3, #8
 8009664:	429a      	cmp	r2, r3
 8009666:	d104      	bne.n	8009672 <vTaskSwitchContext+0x8a>
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	685a      	ldr	r2, [r3, #4]
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	605a      	str	r2, [r3, #4]
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	68db      	ldr	r3, [r3, #12]
 8009678:	4a0b      	ldr	r2, [pc, #44]	; (80096a8 <vTaskSwitchContext+0xc0>)
 800967a:	6013      	str	r3, [r2, #0]
 800967c:	4a08      	ldr	r2, [pc, #32]	; (80096a0 <vTaskSwitchContext+0xb8>)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009682:	4b09      	ldr	r3, [pc, #36]	; (80096a8 <vTaskSwitchContext+0xc0>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	3364      	adds	r3, #100	; 0x64
 8009688:	4a08      	ldr	r2, [pc, #32]	; (80096ac <vTaskSwitchContext+0xc4>)
 800968a:	6013      	str	r3, [r2, #0]
}
 800968c:	bf00      	nop
 800968e:	3714      	adds	r7, #20
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr
 8009698:	20001138 	.word	0x20001138
 800969c:	20001124 	.word	0x20001124
 80096a0:	20001118 	.word	0x20001118
 80096a4:	20000c40 	.word	0x20000c40
 80096a8:	20000c3c 	.word	0x20000c3c
 80096ac:	2000006c 	.word	0x2000006c

080096b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d10a      	bne.n	80096d6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80096c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c4:	f383 8811 	msr	BASEPRI, r3
 80096c8:	f3bf 8f6f 	isb	sy
 80096cc:	f3bf 8f4f 	dsb	sy
 80096d0:	60fb      	str	r3, [r7, #12]
}
 80096d2:	bf00      	nop
 80096d4:	e7fe      	b.n	80096d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096d6:	4b07      	ldr	r3, [pc, #28]	; (80096f4 <vTaskPlaceOnEventList+0x44>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	3318      	adds	r3, #24
 80096dc:	4619      	mov	r1, r3
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f7fe faf3 	bl	8007cca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80096e4:	2101      	movs	r1, #1
 80096e6:	6838      	ldr	r0, [r7, #0]
 80096e8:	f000 fb7e 	bl	8009de8 <prvAddCurrentTaskToDelayedList>
}
 80096ec:	bf00      	nop
 80096ee:	3710      	adds	r7, #16
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}
 80096f4:	20000c3c 	.word	0x20000c3c

080096f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b086      	sub	sp, #24
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	60b9      	str	r1, [r7, #8]
 8009702:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d10a      	bne.n	8009720 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800970a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970e:	f383 8811 	msr	BASEPRI, r3
 8009712:	f3bf 8f6f 	isb	sy
 8009716:	f3bf 8f4f 	dsb	sy
 800971a:	617b      	str	r3, [r7, #20]
}
 800971c:	bf00      	nop
 800971e:	e7fe      	b.n	800971e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009720:	4b0a      	ldr	r3, [pc, #40]	; (800974c <vTaskPlaceOnEventListRestricted+0x54>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	3318      	adds	r3, #24
 8009726:	4619      	mov	r1, r3
 8009728:	68f8      	ldr	r0, [r7, #12]
 800972a:	f7fe faaa 	bl	8007c82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d002      	beq.n	800973a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009734:	f04f 33ff 	mov.w	r3, #4294967295
 8009738:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800973a:	6879      	ldr	r1, [r7, #4]
 800973c:	68b8      	ldr	r0, [r7, #8]
 800973e:	f000 fb53 	bl	8009de8 <prvAddCurrentTaskToDelayedList>
	}
 8009742:	bf00      	nop
 8009744:	3718      	adds	r7, #24
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop
 800974c:	20000c3c 	.word	0x20000c3c

08009750 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b086      	sub	sp, #24
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d10a      	bne.n	800977c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976a:	f383 8811 	msr	BASEPRI, r3
 800976e:	f3bf 8f6f 	isb	sy
 8009772:	f3bf 8f4f 	dsb	sy
 8009776:	60fb      	str	r3, [r7, #12]
}
 8009778:	bf00      	nop
 800977a:	e7fe      	b.n	800977a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	3318      	adds	r3, #24
 8009780:	4618      	mov	r0, r3
 8009782:	f7fe fadb 	bl	8007d3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009786:	4b1e      	ldr	r3, [pc, #120]	; (8009800 <xTaskRemoveFromEventList+0xb0>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d11d      	bne.n	80097ca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	3304      	adds	r3, #4
 8009792:	4618      	mov	r0, r3
 8009794:	f7fe fad2 	bl	8007d3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800979c:	4b19      	ldr	r3, [pc, #100]	; (8009804 <xTaskRemoveFromEventList+0xb4>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d903      	bls.n	80097ac <xTaskRemoveFromEventList+0x5c>
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a8:	4a16      	ldr	r2, [pc, #88]	; (8009804 <xTaskRemoveFromEventList+0xb4>)
 80097aa:	6013      	str	r3, [r2, #0]
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097b0:	4613      	mov	r3, r2
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	4413      	add	r3, r2
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	4a13      	ldr	r2, [pc, #76]	; (8009808 <xTaskRemoveFromEventList+0xb8>)
 80097ba:	441a      	add	r2, r3
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	3304      	adds	r3, #4
 80097c0:	4619      	mov	r1, r3
 80097c2:	4610      	mov	r0, r2
 80097c4:	f7fe fa5d 	bl	8007c82 <vListInsertEnd>
 80097c8:	e005      	b.n	80097d6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	3318      	adds	r3, #24
 80097ce:	4619      	mov	r1, r3
 80097d0:	480e      	ldr	r0, [pc, #56]	; (800980c <xTaskRemoveFromEventList+0xbc>)
 80097d2:	f7fe fa56 	bl	8007c82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097da:	4b0d      	ldr	r3, [pc, #52]	; (8009810 <xTaskRemoveFromEventList+0xc0>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d905      	bls.n	80097f0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80097e4:	2301      	movs	r3, #1
 80097e6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80097e8:	4b0a      	ldr	r3, [pc, #40]	; (8009814 <xTaskRemoveFromEventList+0xc4>)
 80097ea:	2201      	movs	r2, #1
 80097ec:	601a      	str	r2, [r3, #0]
 80097ee:	e001      	b.n	80097f4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80097f0:	2300      	movs	r3, #0
 80097f2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80097f4:	697b      	ldr	r3, [r7, #20]
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3718      	adds	r7, #24
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop
 8009800:	20001138 	.word	0x20001138
 8009804:	20001118 	.word	0x20001118
 8009808:	20000c40 	.word	0x20000c40
 800980c:	200010d0 	.word	0x200010d0
 8009810:	20000c3c 	.word	0x20000c3c
 8009814:	20001124 	.word	0x20001124

08009818 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009820:	4b06      	ldr	r3, [pc, #24]	; (800983c <vTaskInternalSetTimeOutState+0x24>)
 8009822:	681a      	ldr	r2, [r3, #0]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009828:	4b05      	ldr	r3, [pc, #20]	; (8009840 <vTaskInternalSetTimeOutState+0x28>)
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	605a      	str	r2, [r3, #4]
}
 8009830:	bf00      	nop
 8009832:	370c      	adds	r7, #12
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr
 800983c:	20001128 	.word	0x20001128
 8009840:	20001114 	.word	0x20001114

08009844 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b088      	sub	sp, #32
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d10a      	bne.n	800986a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009858:	f383 8811 	msr	BASEPRI, r3
 800985c:	f3bf 8f6f 	isb	sy
 8009860:	f3bf 8f4f 	dsb	sy
 8009864:	613b      	str	r3, [r7, #16]
}
 8009866:	bf00      	nop
 8009868:	e7fe      	b.n	8009868 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d10a      	bne.n	8009886 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009874:	f383 8811 	msr	BASEPRI, r3
 8009878:	f3bf 8f6f 	isb	sy
 800987c:	f3bf 8f4f 	dsb	sy
 8009880:	60fb      	str	r3, [r7, #12]
}
 8009882:	bf00      	nop
 8009884:	e7fe      	b.n	8009884 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009886:	f001 f865 	bl	800a954 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800988a:	4b1d      	ldr	r3, [pc, #116]	; (8009900 <xTaskCheckForTimeOut+0xbc>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	69ba      	ldr	r2, [r7, #24]
 8009896:	1ad3      	subs	r3, r2, r3
 8009898:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098a2:	d102      	bne.n	80098aa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80098a4:	2300      	movs	r3, #0
 80098a6:	61fb      	str	r3, [r7, #28]
 80098a8:	e023      	b.n	80098f2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	4b15      	ldr	r3, [pc, #84]	; (8009904 <xTaskCheckForTimeOut+0xc0>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d007      	beq.n	80098c6 <xTaskCheckForTimeOut+0x82>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	69ba      	ldr	r2, [r7, #24]
 80098bc:	429a      	cmp	r2, r3
 80098be:	d302      	bcc.n	80098c6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80098c0:	2301      	movs	r3, #1
 80098c2:	61fb      	str	r3, [r7, #28]
 80098c4:	e015      	b.n	80098f2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	697a      	ldr	r2, [r7, #20]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d20b      	bcs.n	80098e8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	1ad2      	subs	r2, r2, r3
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f7ff ff9b 	bl	8009818 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80098e2:	2300      	movs	r3, #0
 80098e4:	61fb      	str	r3, [r7, #28]
 80098e6:	e004      	b.n	80098f2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	2200      	movs	r2, #0
 80098ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80098ee:	2301      	movs	r3, #1
 80098f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80098f2:	f001 f85f 	bl	800a9b4 <vPortExitCritical>

	return xReturn;
 80098f6:	69fb      	ldr	r3, [r7, #28]
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3720      	adds	r7, #32
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	20001114 	.word	0x20001114
 8009904:	20001128 	.word	0x20001128

08009908 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009908:	b480      	push	{r7}
 800990a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800990c:	4b03      	ldr	r3, [pc, #12]	; (800991c <vTaskMissedYield+0x14>)
 800990e:	2201      	movs	r2, #1
 8009910:	601a      	str	r2, [r3, #0]
}
 8009912:	bf00      	nop
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr
 800991c:	20001124 	.word	0x20001124

08009920 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b082      	sub	sp, #8
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009928:	f000 f852 	bl	80099d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800992c:	4b06      	ldr	r3, [pc, #24]	; (8009948 <prvIdleTask+0x28>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	2b01      	cmp	r3, #1
 8009932:	d9f9      	bls.n	8009928 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009934:	4b05      	ldr	r3, [pc, #20]	; (800994c <prvIdleTask+0x2c>)
 8009936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800993a:	601a      	str	r2, [r3, #0]
 800993c:	f3bf 8f4f 	dsb	sy
 8009940:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009944:	e7f0      	b.n	8009928 <prvIdleTask+0x8>
 8009946:	bf00      	nop
 8009948:	20000c40 	.word	0x20000c40
 800994c:	e000ed04 	.word	0xe000ed04

08009950 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009956:	2300      	movs	r3, #0
 8009958:	607b      	str	r3, [r7, #4]
 800995a:	e00c      	b.n	8009976 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	4613      	mov	r3, r2
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	4413      	add	r3, r2
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	4a12      	ldr	r2, [pc, #72]	; (80099b0 <prvInitialiseTaskLists+0x60>)
 8009968:	4413      	add	r3, r2
 800996a:	4618      	mov	r0, r3
 800996c:	f7fe f95c 	bl	8007c28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	3301      	adds	r3, #1
 8009974:	607b      	str	r3, [r7, #4]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2b37      	cmp	r3, #55	; 0x37
 800997a:	d9ef      	bls.n	800995c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800997c:	480d      	ldr	r0, [pc, #52]	; (80099b4 <prvInitialiseTaskLists+0x64>)
 800997e:	f7fe f953 	bl	8007c28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009982:	480d      	ldr	r0, [pc, #52]	; (80099b8 <prvInitialiseTaskLists+0x68>)
 8009984:	f7fe f950 	bl	8007c28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009988:	480c      	ldr	r0, [pc, #48]	; (80099bc <prvInitialiseTaskLists+0x6c>)
 800998a:	f7fe f94d 	bl	8007c28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800998e:	480c      	ldr	r0, [pc, #48]	; (80099c0 <prvInitialiseTaskLists+0x70>)
 8009990:	f7fe f94a 	bl	8007c28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009994:	480b      	ldr	r0, [pc, #44]	; (80099c4 <prvInitialiseTaskLists+0x74>)
 8009996:	f7fe f947 	bl	8007c28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800999a:	4b0b      	ldr	r3, [pc, #44]	; (80099c8 <prvInitialiseTaskLists+0x78>)
 800999c:	4a05      	ldr	r2, [pc, #20]	; (80099b4 <prvInitialiseTaskLists+0x64>)
 800999e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80099a0:	4b0a      	ldr	r3, [pc, #40]	; (80099cc <prvInitialiseTaskLists+0x7c>)
 80099a2:	4a05      	ldr	r2, [pc, #20]	; (80099b8 <prvInitialiseTaskLists+0x68>)
 80099a4:	601a      	str	r2, [r3, #0]
}
 80099a6:	bf00      	nop
 80099a8:	3708      	adds	r7, #8
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	20000c40 	.word	0x20000c40
 80099b4:	200010a0 	.word	0x200010a0
 80099b8:	200010b4 	.word	0x200010b4
 80099bc:	200010d0 	.word	0x200010d0
 80099c0:	200010e4 	.word	0x200010e4
 80099c4:	200010fc 	.word	0x200010fc
 80099c8:	200010c8 	.word	0x200010c8
 80099cc:	200010cc 	.word	0x200010cc

080099d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80099d6:	e019      	b.n	8009a0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80099d8:	f000 ffbc 	bl	800a954 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099dc:	4b10      	ldr	r3, [pc, #64]	; (8009a20 <prvCheckTasksWaitingTermination+0x50>)
 80099de:	68db      	ldr	r3, [r3, #12]
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	3304      	adds	r3, #4
 80099e8:	4618      	mov	r0, r3
 80099ea:	f7fe f9a7 	bl	8007d3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80099ee:	4b0d      	ldr	r3, [pc, #52]	; (8009a24 <prvCheckTasksWaitingTermination+0x54>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	3b01      	subs	r3, #1
 80099f4:	4a0b      	ldr	r2, [pc, #44]	; (8009a24 <prvCheckTasksWaitingTermination+0x54>)
 80099f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80099f8:	4b0b      	ldr	r3, [pc, #44]	; (8009a28 <prvCheckTasksWaitingTermination+0x58>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	3b01      	subs	r3, #1
 80099fe:	4a0a      	ldr	r2, [pc, #40]	; (8009a28 <prvCheckTasksWaitingTermination+0x58>)
 8009a00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009a02:	f000 ffd7 	bl	800a9b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 f810 	bl	8009a2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a0c:	4b06      	ldr	r3, [pc, #24]	; (8009a28 <prvCheckTasksWaitingTermination+0x58>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d1e1      	bne.n	80099d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009a14:	bf00      	nop
 8009a16:	bf00      	nop
 8009a18:	3708      	adds	r7, #8
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	200010e4 	.word	0x200010e4
 8009a24:	20001110 	.word	0x20001110
 8009a28:	200010f8 	.word	0x200010f8

08009a2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	3364      	adds	r3, #100	; 0x64
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f002 f843 	bl	800bac4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d108      	bne.n	8009a5a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f001 f96f 	bl	800ad30 <vPortFree>
				vPortFree( pxTCB );
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f001 f96c 	bl	800ad30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009a58:	e018      	b.n	8009a8c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d103      	bne.n	8009a6c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f001 f963 	bl	800ad30 <vPortFree>
	}
 8009a6a:	e00f      	b.n	8009a8c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8009a72:	2b02      	cmp	r3, #2
 8009a74:	d00a      	beq.n	8009a8c <prvDeleteTCB+0x60>
	__asm volatile
 8009a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a7a:	f383 8811 	msr	BASEPRI, r3
 8009a7e:	f3bf 8f6f 	isb	sy
 8009a82:	f3bf 8f4f 	dsb	sy
 8009a86:	60fb      	str	r3, [r7, #12]
}
 8009a88:	bf00      	nop
 8009a8a:	e7fe      	b.n	8009a8a <prvDeleteTCB+0x5e>
	}
 8009a8c:	bf00      	nop
 8009a8e:	3710      	adds	r7, #16
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a9a:	4b0c      	ldr	r3, [pc, #48]	; (8009acc <prvResetNextTaskUnblockTime+0x38>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d104      	bne.n	8009aae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009aa4:	4b0a      	ldr	r3, [pc, #40]	; (8009ad0 <prvResetNextTaskUnblockTime+0x3c>)
 8009aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8009aaa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009aac:	e008      	b.n	8009ac0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009aae:	4b07      	ldr	r3, [pc, #28]	; (8009acc <prvResetNextTaskUnblockTime+0x38>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	68db      	ldr	r3, [r3, #12]
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	4a04      	ldr	r2, [pc, #16]	; (8009ad0 <prvResetNextTaskUnblockTime+0x3c>)
 8009abe:	6013      	str	r3, [r2, #0]
}
 8009ac0:	bf00      	nop
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr
 8009acc:	200010c8 	.word	0x200010c8
 8009ad0:	20001130 	.word	0x20001130

08009ad4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009ada:	4b0b      	ldr	r3, [pc, #44]	; (8009b08 <xTaskGetSchedulerState+0x34>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d102      	bne.n	8009ae8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	607b      	str	r3, [r7, #4]
 8009ae6:	e008      	b.n	8009afa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ae8:	4b08      	ldr	r3, [pc, #32]	; (8009b0c <xTaskGetSchedulerState+0x38>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d102      	bne.n	8009af6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009af0:	2302      	movs	r3, #2
 8009af2:	607b      	str	r3, [r7, #4]
 8009af4:	e001      	b.n	8009afa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009af6:	2300      	movs	r3, #0
 8009af8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009afa:	687b      	ldr	r3, [r7, #4]
	}
 8009afc:	4618      	mov	r0, r3
 8009afe:	370c      	adds	r7, #12
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr
 8009b08:	2000111c 	.word	0x2000111c
 8009b0c:	20001138 	.word	0x20001138

08009b10 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d051      	beq.n	8009bca <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b2a:	4b2a      	ldr	r3, [pc, #168]	; (8009bd4 <xTaskPriorityInherit+0xc4>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d241      	bcs.n	8009bb8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	699b      	ldr	r3, [r3, #24]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	db06      	blt.n	8009b4a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b3c:	4b25      	ldr	r3, [pc, #148]	; (8009bd4 <xTaskPriorityInherit+0xc4>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	6959      	ldr	r1, [r3, #20]
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b52:	4613      	mov	r3, r2
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	4413      	add	r3, r2
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	4a1f      	ldr	r2, [pc, #124]	; (8009bd8 <xTaskPriorityInherit+0xc8>)
 8009b5c:	4413      	add	r3, r2
 8009b5e:	4299      	cmp	r1, r3
 8009b60:	d122      	bne.n	8009ba8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	3304      	adds	r3, #4
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7fe f8e8 	bl	8007d3c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009b6c:	4b19      	ldr	r3, [pc, #100]	; (8009bd4 <xTaskPriorityInherit+0xc4>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b7a:	4b18      	ldr	r3, [pc, #96]	; (8009bdc <xTaskPriorityInherit+0xcc>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d903      	bls.n	8009b8a <xTaskPriorityInherit+0x7a>
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b86:	4a15      	ldr	r2, [pc, #84]	; (8009bdc <xTaskPriorityInherit+0xcc>)
 8009b88:	6013      	str	r3, [r2, #0]
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b8e:	4613      	mov	r3, r2
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	4413      	add	r3, r2
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	4a10      	ldr	r2, [pc, #64]	; (8009bd8 <xTaskPriorityInherit+0xc8>)
 8009b98:	441a      	add	r2, r3
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	3304      	adds	r3, #4
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	4610      	mov	r0, r2
 8009ba2:	f7fe f86e 	bl	8007c82 <vListInsertEnd>
 8009ba6:	e004      	b.n	8009bb2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009ba8:	4b0a      	ldr	r3, [pc, #40]	; (8009bd4 <xTaskPriorityInherit+0xc4>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	60fb      	str	r3, [r7, #12]
 8009bb6:	e008      	b.n	8009bca <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009bbc:	4b05      	ldr	r3, [pc, #20]	; (8009bd4 <xTaskPriorityInherit+0xc4>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d201      	bcs.n	8009bca <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009bca:	68fb      	ldr	r3, [r7, #12]
	}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3710      	adds	r7, #16
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	20000c3c 	.word	0x20000c3c
 8009bd8:	20000c40 	.word	0x20000c40
 8009bdc:	20001118 	.word	0x20001118

08009be0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b086      	sub	sp, #24
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009bec:	2300      	movs	r3, #0
 8009bee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d056      	beq.n	8009ca4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009bf6:	4b2e      	ldr	r3, [pc, #184]	; (8009cb0 <xTaskPriorityDisinherit+0xd0>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	693a      	ldr	r2, [r7, #16]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d00a      	beq.n	8009c16 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c04:	f383 8811 	msr	BASEPRI, r3
 8009c08:	f3bf 8f6f 	isb	sy
 8009c0c:	f3bf 8f4f 	dsb	sy
 8009c10:	60fb      	str	r3, [r7, #12]
}
 8009c12:	bf00      	nop
 8009c14:	e7fe      	b.n	8009c14 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d10a      	bne.n	8009c34 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c22:	f383 8811 	msr	BASEPRI, r3
 8009c26:	f3bf 8f6f 	isb	sy
 8009c2a:	f3bf 8f4f 	dsb	sy
 8009c2e:	60bb      	str	r3, [r7, #8]
}
 8009c30:	bf00      	nop
 8009c32:	e7fe      	b.n	8009c32 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c38:	1e5a      	subs	r2, r3, #1
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d02c      	beq.n	8009ca4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d128      	bne.n	8009ca4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	3304      	adds	r3, #4
 8009c56:	4618      	mov	r0, r3
 8009c58:	f7fe f870 	bl	8007d3c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c68:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c74:	4b0f      	ldr	r3, [pc, #60]	; (8009cb4 <xTaskPriorityDisinherit+0xd4>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d903      	bls.n	8009c84 <xTaskPriorityDisinherit+0xa4>
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c80:	4a0c      	ldr	r2, [pc, #48]	; (8009cb4 <xTaskPriorityDisinherit+0xd4>)
 8009c82:	6013      	str	r3, [r2, #0]
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c88:	4613      	mov	r3, r2
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	4413      	add	r3, r2
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	4a09      	ldr	r2, [pc, #36]	; (8009cb8 <xTaskPriorityDisinherit+0xd8>)
 8009c92:	441a      	add	r2, r3
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	3304      	adds	r3, #4
 8009c98:	4619      	mov	r1, r3
 8009c9a:	4610      	mov	r0, r2
 8009c9c:	f7fd fff1 	bl	8007c82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ca4:	697b      	ldr	r3, [r7, #20]
	}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3718      	adds	r7, #24
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	20000c3c 	.word	0x20000c3c
 8009cb4:	20001118 	.word	0x20001118
 8009cb8:	20000c40 	.word	0x20000c40

08009cbc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b088      	sub	sp, #32
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d06a      	beq.n	8009daa <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009cd4:	69bb      	ldr	r3, [r7, #24]
 8009cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d10a      	bne.n	8009cf2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce0:	f383 8811 	msr	BASEPRI, r3
 8009ce4:	f3bf 8f6f 	isb	sy
 8009ce8:	f3bf 8f4f 	dsb	sy
 8009cec:	60fb      	str	r3, [r7, #12]
}
 8009cee:	bf00      	nop
 8009cf0:	e7fe      	b.n	8009cf0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cf6:	683a      	ldr	r2, [r7, #0]
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d902      	bls.n	8009d02 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	61fb      	str	r3, [r7, #28]
 8009d00:	e002      	b.n	8009d08 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d06:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009d08:	69bb      	ldr	r3, [r7, #24]
 8009d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d0c:	69fa      	ldr	r2, [r7, #28]
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	d04b      	beq.n	8009daa <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009d12:	69bb      	ldr	r3, [r7, #24]
 8009d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d16:	697a      	ldr	r2, [r7, #20]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d146      	bne.n	8009daa <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009d1c:	4b25      	ldr	r3, [pc, #148]	; (8009db4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	69ba      	ldr	r2, [r7, #24]
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d10a      	bne.n	8009d3c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d2a:	f383 8811 	msr	BASEPRI, r3
 8009d2e:	f3bf 8f6f 	isb	sy
 8009d32:	f3bf 8f4f 	dsb	sy
 8009d36:	60bb      	str	r3, [r7, #8]
}
 8009d38:	bf00      	nop
 8009d3a:	e7fe      	b.n	8009d3a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d40:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009d42:	69bb      	ldr	r3, [r7, #24]
 8009d44:	69fa      	ldr	r2, [r7, #28]
 8009d46:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009d48:	69bb      	ldr	r3, [r7, #24]
 8009d4a:	699b      	ldr	r3, [r3, #24]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	db04      	blt.n	8009d5a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d50:	69fb      	ldr	r3, [r7, #28]
 8009d52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009d56:	69bb      	ldr	r3, [r7, #24]
 8009d58:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009d5a:	69bb      	ldr	r3, [r7, #24]
 8009d5c:	6959      	ldr	r1, [r3, #20]
 8009d5e:	693a      	ldr	r2, [r7, #16]
 8009d60:	4613      	mov	r3, r2
 8009d62:	009b      	lsls	r3, r3, #2
 8009d64:	4413      	add	r3, r2
 8009d66:	009b      	lsls	r3, r3, #2
 8009d68:	4a13      	ldr	r2, [pc, #76]	; (8009db8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009d6a:	4413      	add	r3, r2
 8009d6c:	4299      	cmp	r1, r3
 8009d6e:	d11c      	bne.n	8009daa <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d70:	69bb      	ldr	r3, [r7, #24]
 8009d72:	3304      	adds	r3, #4
 8009d74:	4618      	mov	r0, r3
 8009d76:	f7fd ffe1 	bl	8007d3c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d7e:	4b0f      	ldr	r3, [pc, #60]	; (8009dbc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d903      	bls.n	8009d8e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d8a:	4a0c      	ldr	r2, [pc, #48]	; (8009dbc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009d8c:	6013      	str	r3, [r2, #0]
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d92:	4613      	mov	r3, r2
 8009d94:	009b      	lsls	r3, r3, #2
 8009d96:	4413      	add	r3, r2
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	4a07      	ldr	r2, [pc, #28]	; (8009db8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009d9c:	441a      	add	r2, r3
 8009d9e:	69bb      	ldr	r3, [r7, #24]
 8009da0:	3304      	adds	r3, #4
 8009da2:	4619      	mov	r1, r3
 8009da4:	4610      	mov	r0, r2
 8009da6:	f7fd ff6c 	bl	8007c82 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009daa:	bf00      	nop
 8009dac:	3720      	adds	r7, #32
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	bf00      	nop
 8009db4:	20000c3c 	.word	0x20000c3c
 8009db8:	20000c40 	.word	0x20000c40
 8009dbc:	20001118 	.word	0x20001118

08009dc0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009dc0:	b480      	push	{r7}
 8009dc2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009dc4:	4b07      	ldr	r3, [pc, #28]	; (8009de4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d004      	beq.n	8009dd6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009dcc:	4b05      	ldr	r3, [pc, #20]	; (8009de4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009dd2:	3201      	adds	r2, #1
 8009dd4:	661a      	str	r2, [r3, #96]	; 0x60
		}

		return pxCurrentTCB;
 8009dd6:	4b03      	ldr	r3, [pc, #12]	; (8009de4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
	}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr
 8009de4:	20000c3c 	.word	0x20000c3c

08009de8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b084      	sub	sp, #16
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009df2:	4b21      	ldr	r3, [pc, #132]	; (8009e78 <prvAddCurrentTaskToDelayedList+0x90>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009df8:	4b20      	ldr	r3, [pc, #128]	; (8009e7c <prvAddCurrentTaskToDelayedList+0x94>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	3304      	adds	r3, #4
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f7fd ff9c 	bl	8007d3c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e0a:	d10a      	bne.n	8009e22 <prvAddCurrentTaskToDelayedList+0x3a>
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d007      	beq.n	8009e22 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e12:	4b1a      	ldr	r3, [pc, #104]	; (8009e7c <prvAddCurrentTaskToDelayedList+0x94>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	3304      	adds	r3, #4
 8009e18:	4619      	mov	r1, r3
 8009e1a:	4819      	ldr	r0, [pc, #100]	; (8009e80 <prvAddCurrentTaskToDelayedList+0x98>)
 8009e1c:	f7fd ff31 	bl	8007c82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009e20:	e026      	b.n	8009e70 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009e22:	68fa      	ldr	r2, [r7, #12]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	4413      	add	r3, r2
 8009e28:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009e2a:	4b14      	ldr	r3, [pc, #80]	; (8009e7c <prvAddCurrentTaskToDelayedList+0x94>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	68ba      	ldr	r2, [r7, #8]
 8009e30:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009e32:	68ba      	ldr	r2, [r7, #8]
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d209      	bcs.n	8009e4e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e3a:	4b12      	ldr	r3, [pc, #72]	; (8009e84 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	4b0f      	ldr	r3, [pc, #60]	; (8009e7c <prvAddCurrentTaskToDelayedList+0x94>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	3304      	adds	r3, #4
 8009e44:	4619      	mov	r1, r3
 8009e46:	4610      	mov	r0, r2
 8009e48:	f7fd ff3f 	bl	8007cca <vListInsert>
}
 8009e4c:	e010      	b.n	8009e70 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e4e:	4b0e      	ldr	r3, [pc, #56]	; (8009e88 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	4b0a      	ldr	r3, [pc, #40]	; (8009e7c <prvAddCurrentTaskToDelayedList+0x94>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	3304      	adds	r3, #4
 8009e58:	4619      	mov	r1, r3
 8009e5a:	4610      	mov	r0, r2
 8009e5c:	f7fd ff35 	bl	8007cca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009e60:	4b0a      	ldr	r3, [pc, #40]	; (8009e8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	68ba      	ldr	r2, [r7, #8]
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d202      	bcs.n	8009e70 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009e6a:	4a08      	ldr	r2, [pc, #32]	; (8009e8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	6013      	str	r3, [r2, #0]
}
 8009e70:	bf00      	nop
 8009e72:	3710      	adds	r7, #16
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	20001114 	.word	0x20001114
 8009e7c:	20000c3c 	.word	0x20000c3c
 8009e80:	200010fc 	.word	0x200010fc
 8009e84:	200010cc 	.word	0x200010cc
 8009e88:	200010c8 	.word	0x200010c8
 8009e8c:	20001130 	.word	0x20001130

08009e90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b08a      	sub	sp, #40	; 0x28
 8009e94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009e96:	2300      	movs	r3, #0
 8009e98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009e9a:	f000 fba1 	bl	800a5e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009e9e:	4b1c      	ldr	r3, [pc, #112]	; (8009f10 <xTimerCreateTimerTask+0x80>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d021      	beq.n	8009eea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009eae:	1d3a      	adds	r2, r7, #4
 8009eb0:	f107 0108 	add.w	r1, r7, #8
 8009eb4:	f107 030c 	add.w	r3, r7, #12
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f7fd fe9b 	bl	8007bf4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009ebe:	6879      	ldr	r1, [r7, #4]
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	68fa      	ldr	r2, [r7, #12]
 8009ec4:	9202      	str	r2, [sp, #8]
 8009ec6:	9301      	str	r3, [sp, #4]
 8009ec8:	2302      	movs	r3, #2
 8009eca:	9300      	str	r3, [sp, #0]
 8009ecc:	2300      	movs	r3, #0
 8009ece:	460a      	mov	r2, r1
 8009ed0:	4910      	ldr	r1, [pc, #64]	; (8009f14 <xTimerCreateTimerTask+0x84>)
 8009ed2:	4811      	ldr	r0, [pc, #68]	; (8009f18 <xTimerCreateTimerTask+0x88>)
 8009ed4:	f7fe ffb6 	bl	8008e44 <xTaskCreateStatic>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	4a10      	ldr	r2, [pc, #64]	; (8009f1c <xTimerCreateTimerTask+0x8c>)
 8009edc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009ede:	4b0f      	ldr	r3, [pc, #60]	; (8009f1c <xTimerCreateTimerTask+0x8c>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d001      	beq.n	8009eea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d10a      	bne.n	8009f06 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef4:	f383 8811 	msr	BASEPRI, r3
 8009ef8:	f3bf 8f6f 	isb	sy
 8009efc:	f3bf 8f4f 	dsb	sy
 8009f00:	613b      	str	r3, [r7, #16]
}
 8009f02:	bf00      	nop
 8009f04:	e7fe      	b.n	8009f04 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009f06:	697b      	ldr	r3, [r7, #20]
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3718      	adds	r7, #24
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}
 8009f10:	2000116c 	.word	0x2000116c
 8009f14:	0800db68 	.word	0x0800db68
 8009f18:	0800a189 	.word	0x0800a189
 8009f1c:	20001170 	.word	0x20001170

08009f20 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b088      	sub	sp, #32
 8009f24:	af02      	add	r7, sp, #8
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	607a      	str	r2, [r7, #4]
 8009f2c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8009f2e:	202c      	movs	r0, #44	; 0x2c
 8009f30:	f000 fe32 	bl	800ab98 <pvPortMalloc>
 8009f34:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d00d      	beq.n	8009f58 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	9301      	str	r3, [sp, #4]
 8009f48:	6a3b      	ldr	r3, [r7, #32]
 8009f4a:	9300      	str	r3, [sp, #0]
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	68b9      	ldr	r1, [r7, #8]
 8009f52:	68f8      	ldr	r0, [r7, #12]
 8009f54:	f000 f843 	bl	8009fde <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009f58:	697b      	ldr	r3, [r7, #20]
	}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3718      	adds	r7, #24
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b08a      	sub	sp, #40	; 0x28
 8009f66:	af02      	add	r7, sp, #8
 8009f68:	60f8      	str	r0, [r7, #12]
 8009f6a:	60b9      	str	r1, [r7, #8]
 8009f6c:	607a      	str	r2, [r7, #4]
 8009f6e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009f70:	232c      	movs	r3, #44	; 0x2c
 8009f72:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	2b2c      	cmp	r3, #44	; 0x2c
 8009f78:	d00a      	beq.n	8009f90 <xTimerCreateStatic+0x2e>
	__asm volatile
 8009f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7e:	f383 8811 	msr	BASEPRI, r3
 8009f82:	f3bf 8f6f 	isb	sy
 8009f86:	f3bf 8f4f 	dsb	sy
 8009f8a:	61bb      	str	r3, [r7, #24]
}
 8009f8c:	bf00      	nop
 8009f8e:	e7fe      	b.n	8009f8e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009f90:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8009f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d10a      	bne.n	8009fae <xTimerCreateStatic+0x4c>
	__asm volatile
 8009f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9c:	f383 8811 	msr	BASEPRI, r3
 8009fa0:	f3bf 8f6f 	isb	sy
 8009fa4:	f3bf 8f4f 	dsb	sy
 8009fa8:	617b      	str	r3, [r7, #20]
}
 8009faa:	bf00      	nop
 8009fac:	e7fe      	b.n	8009fac <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8009fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fb0:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8009fb2:	69fb      	ldr	r3, [r7, #28]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d00d      	beq.n	8009fd4 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8009fb8:	69fb      	ldr	r3, [r7, #28]
 8009fba:	2202      	movs	r2, #2
 8009fbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009fc0:	69fb      	ldr	r3, [r7, #28]
 8009fc2:	9301      	str	r3, [sp, #4]
 8009fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc6:	9300      	str	r3, [sp, #0]
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	68b9      	ldr	r1, [r7, #8]
 8009fce:	68f8      	ldr	r0, [r7, #12]
 8009fd0:	f000 f805 	bl	8009fde <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009fd4:	69fb      	ldr	r3, [r7, #28]
	}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3720      	adds	r7, #32
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009fde:	b580      	push	{r7, lr}
 8009fe0:	b086      	sub	sp, #24
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	60f8      	str	r0, [r7, #12]
 8009fe6:	60b9      	str	r1, [r7, #8]
 8009fe8:	607a      	str	r2, [r7, #4]
 8009fea:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d10a      	bne.n	800a008 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8009ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff6:	f383 8811 	msr	BASEPRI, r3
 8009ffa:	f3bf 8f6f 	isb	sy
 8009ffe:	f3bf 8f4f 	dsb	sy
 800a002:	617b      	str	r3, [r7, #20]
}
 800a004:	bf00      	nop
 800a006:	e7fe      	b.n	800a006 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800a008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d01e      	beq.n	800a04c <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800a00e:	f000 fae7 	bl	800a5e0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800a012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a014:	68fa      	ldr	r2, [r7, #12]
 800a016:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01a:	68ba      	ldr	r2, [r7, #8]
 800a01c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800a01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a020:	683a      	ldr	r2, [r7, #0]
 800a022:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a026:	6a3a      	ldr	r2, [r7, #32]
 800a028:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02c:	3304      	adds	r3, #4
 800a02e:	4618      	mov	r0, r3
 800a030:	f7fd fe1a 	bl	8007c68 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d008      	beq.n	800a04c <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800a03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a040:	f043 0304 	orr.w	r3, r3, #4
 800a044:	b2da      	uxtb	r2, r3
 800a046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a048:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800a04c:	bf00      	nop
 800a04e:	3718      	adds	r7, #24
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b08a      	sub	sp, #40	; 0x28
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	607a      	str	r2, [r7, #4]
 800a060:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a062:	2300      	movs	r3, #0
 800a064:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d10a      	bne.n	800a082 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a070:	f383 8811 	msr	BASEPRI, r3
 800a074:	f3bf 8f6f 	isb	sy
 800a078:	f3bf 8f4f 	dsb	sy
 800a07c:	623b      	str	r3, [r7, #32]
}
 800a07e:	bf00      	nop
 800a080:	e7fe      	b.n	800a080 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a082:	4b1a      	ldr	r3, [pc, #104]	; (800a0ec <xTimerGenericCommand+0x98>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d02a      	beq.n	800a0e0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	2b05      	cmp	r3, #5
 800a09a:	dc18      	bgt.n	800a0ce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a09c:	f7ff fd1a 	bl	8009ad4 <xTaskGetSchedulerState>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	2b02      	cmp	r3, #2
 800a0a4:	d109      	bne.n	800a0ba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a0a6:	4b11      	ldr	r3, [pc, #68]	; (800a0ec <xTimerGenericCommand+0x98>)
 800a0a8:	6818      	ldr	r0, [r3, #0]
 800a0aa:	f107 0110 	add.w	r1, r7, #16
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0b2:	f7fe f861 	bl	8008178 <xQueueGenericSend>
 800a0b6:	6278      	str	r0, [r7, #36]	; 0x24
 800a0b8:	e012      	b.n	800a0e0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a0ba:	4b0c      	ldr	r3, [pc, #48]	; (800a0ec <xTimerGenericCommand+0x98>)
 800a0bc:	6818      	ldr	r0, [r3, #0]
 800a0be:	f107 0110 	add.w	r1, r7, #16
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	f7fe f857 	bl	8008178 <xQueueGenericSend>
 800a0ca:	6278      	str	r0, [r7, #36]	; 0x24
 800a0cc:	e008      	b.n	800a0e0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a0ce:	4b07      	ldr	r3, [pc, #28]	; (800a0ec <xTimerGenericCommand+0x98>)
 800a0d0:	6818      	ldr	r0, [r3, #0]
 800a0d2:	f107 0110 	add.w	r1, r7, #16
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	683a      	ldr	r2, [r7, #0]
 800a0da:	f7fe f94b 	bl	8008374 <xQueueGenericSendFromISR>
 800a0de:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3728      	adds	r7, #40	; 0x28
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	2000116c 	.word	0x2000116c

0800a0f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b088      	sub	sp, #32
 800a0f4:	af02      	add	r7, sp, #8
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0fa:	4b22      	ldr	r3, [pc, #136]	; (800a184 <prvProcessExpiredTimer+0x94>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	68db      	ldr	r3, [r3, #12]
 800a100:	68db      	ldr	r3, [r3, #12]
 800a102:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	3304      	adds	r3, #4
 800a108:	4618      	mov	r0, r3
 800a10a:	f7fd fe17 	bl	8007d3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a114:	f003 0304 	and.w	r3, r3, #4
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d022      	beq.n	800a162 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	699a      	ldr	r2, [r3, #24]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	18d1      	adds	r1, r2, r3
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	683a      	ldr	r2, [r7, #0]
 800a128:	6978      	ldr	r0, [r7, #20]
 800a12a:	f000 f8d1 	bl	800a2d0 <prvInsertTimerInActiveList>
 800a12e:	4603      	mov	r3, r0
 800a130:	2b00      	cmp	r3, #0
 800a132:	d01f      	beq.n	800a174 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a134:	2300      	movs	r3, #0
 800a136:	9300      	str	r3, [sp, #0]
 800a138:	2300      	movs	r3, #0
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	2100      	movs	r1, #0
 800a13e:	6978      	ldr	r0, [r7, #20]
 800a140:	f7ff ff88 	bl	800a054 <xTimerGenericCommand>
 800a144:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d113      	bne.n	800a174 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a150:	f383 8811 	msr	BASEPRI, r3
 800a154:	f3bf 8f6f 	isb	sy
 800a158:	f3bf 8f4f 	dsb	sy
 800a15c:	60fb      	str	r3, [r7, #12]
}
 800a15e:	bf00      	nop
 800a160:	e7fe      	b.n	800a160 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a168:	f023 0301 	bic.w	r3, r3, #1
 800a16c:	b2da      	uxtb	r2, r3
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	6a1b      	ldr	r3, [r3, #32]
 800a178:	6978      	ldr	r0, [r7, #20]
 800a17a:	4798      	blx	r3
}
 800a17c:	bf00      	nop
 800a17e:	3718      	adds	r7, #24
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	20001164 	.word	0x20001164

0800a188 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a190:	f107 0308 	add.w	r3, r7, #8
 800a194:	4618      	mov	r0, r3
 800a196:	f000 f857 	bl	800a248 <prvGetNextExpireTime>
 800a19a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	4619      	mov	r1, r3
 800a1a0:	68f8      	ldr	r0, [r7, #12]
 800a1a2:	f000 f803 	bl	800a1ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a1a6:	f000 f8d5 	bl	800a354 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a1aa:	e7f1      	b.n	800a190 <prvTimerTask+0x8>

0800a1ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a1b6:	f7ff f8a1 	bl	80092fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a1ba:	f107 0308 	add.w	r3, r7, #8
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f000 f866 	bl	800a290 <prvSampleTimeNow>
 800a1c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d130      	bne.n	800a22e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d10a      	bne.n	800a1e8 <prvProcessTimerOrBlockTask+0x3c>
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d806      	bhi.n	800a1e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a1da:	f7ff f89d 	bl	8009318 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a1de:	68f9      	ldr	r1, [r7, #12]
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f7ff ff85 	bl	800a0f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a1e6:	e024      	b.n	800a232 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d008      	beq.n	800a200 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a1ee:	4b13      	ldr	r3, [pc, #76]	; (800a23c <prvProcessTimerOrBlockTask+0x90>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d101      	bne.n	800a1fc <prvProcessTimerOrBlockTask+0x50>
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	e000      	b.n	800a1fe <prvProcessTimerOrBlockTask+0x52>
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a200:	4b0f      	ldr	r3, [pc, #60]	; (800a240 <prvProcessTimerOrBlockTask+0x94>)
 800a202:	6818      	ldr	r0, [r3, #0]
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	1ad3      	subs	r3, r2, r3
 800a20a:	683a      	ldr	r2, [r7, #0]
 800a20c:	4619      	mov	r1, r3
 800a20e:	f7fe fde5 	bl	8008ddc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a212:	f7ff f881 	bl	8009318 <xTaskResumeAll>
 800a216:	4603      	mov	r3, r0
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d10a      	bne.n	800a232 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a21c:	4b09      	ldr	r3, [pc, #36]	; (800a244 <prvProcessTimerOrBlockTask+0x98>)
 800a21e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a222:	601a      	str	r2, [r3, #0]
 800a224:	f3bf 8f4f 	dsb	sy
 800a228:	f3bf 8f6f 	isb	sy
}
 800a22c:	e001      	b.n	800a232 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a22e:	f7ff f873 	bl	8009318 <xTaskResumeAll>
}
 800a232:	bf00      	nop
 800a234:	3710      	adds	r7, #16
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	20001168 	.word	0x20001168
 800a240:	2000116c 	.word	0x2000116c
 800a244:	e000ed04 	.word	0xe000ed04

0800a248 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a248:	b480      	push	{r7}
 800a24a:	b085      	sub	sp, #20
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a250:	4b0e      	ldr	r3, [pc, #56]	; (800a28c <prvGetNextExpireTime+0x44>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d101      	bne.n	800a25e <prvGetNextExpireTime+0x16>
 800a25a:	2201      	movs	r2, #1
 800a25c:	e000      	b.n	800a260 <prvGetNextExpireTime+0x18>
 800a25e:	2200      	movs	r2, #0
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d105      	bne.n	800a278 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a26c:	4b07      	ldr	r3, [pc, #28]	; (800a28c <prvGetNextExpireTime+0x44>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	68db      	ldr	r3, [r3, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	60fb      	str	r3, [r7, #12]
 800a276:	e001      	b.n	800a27c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a278:	2300      	movs	r3, #0
 800a27a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a27c:	68fb      	ldr	r3, [r7, #12]
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3714      	adds	r7, #20
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr
 800a28a:	bf00      	nop
 800a28c:	20001164 	.word	0x20001164

0800a290 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a298:	f7ff f8dc 	bl	8009454 <xTaskGetTickCount>
 800a29c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a29e:	4b0b      	ldr	r3, [pc, #44]	; (800a2cc <prvSampleTimeNow+0x3c>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	68fa      	ldr	r2, [r7, #12]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d205      	bcs.n	800a2b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a2a8:	f000 f936 	bl	800a518 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	601a      	str	r2, [r3, #0]
 800a2b2:	e002      	b.n	800a2ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a2ba:	4a04      	ldr	r2, [pc, #16]	; (800a2cc <prvSampleTimeNow+0x3c>)
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3710      	adds	r7, #16
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	bf00      	nop
 800a2cc:	20001174 	.word	0x20001174

0800a2d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b086      	sub	sp, #24
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	60f8      	str	r0, [r7, #12]
 800a2d8:	60b9      	str	r1, [r7, #8]
 800a2da:	607a      	str	r2, [r7, #4]
 800a2dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	68ba      	ldr	r2, [r7, #8]
 800a2e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	68fa      	ldr	r2, [r7, #12]
 800a2ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a2ee:	68ba      	ldr	r2, [r7, #8]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d812      	bhi.n	800a31c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	1ad2      	subs	r2, r2, r3
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	699b      	ldr	r3, [r3, #24]
 800a300:	429a      	cmp	r2, r3
 800a302:	d302      	bcc.n	800a30a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a304:	2301      	movs	r3, #1
 800a306:	617b      	str	r3, [r7, #20]
 800a308:	e01b      	b.n	800a342 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a30a:	4b10      	ldr	r3, [pc, #64]	; (800a34c <prvInsertTimerInActiveList+0x7c>)
 800a30c:	681a      	ldr	r2, [r3, #0]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	3304      	adds	r3, #4
 800a312:	4619      	mov	r1, r3
 800a314:	4610      	mov	r0, r2
 800a316:	f7fd fcd8 	bl	8007cca <vListInsert>
 800a31a:	e012      	b.n	800a342 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	429a      	cmp	r2, r3
 800a322:	d206      	bcs.n	800a332 <prvInsertTimerInActiveList+0x62>
 800a324:	68ba      	ldr	r2, [r7, #8]
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	429a      	cmp	r2, r3
 800a32a:	d302      	bcc.n	800a332 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a32c:	2301      	movs	r3, #1
 800a32e:	617b      	str	r3, [r7, #20]
 800a330:	e007      	b.n	800a342 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a332:	4b07      	ldr	r3, [pc, #28]	; (800a350 <prvInsertTimerInActiveList+0x80>)
 800a334:	681a      	ldr	r2, [r3, #0]
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	3304      	adds	r3, #4
 800a33a:	4619      	mov	r1, r3
 800a33c:	4610      	mov	r0, r2
 800a33e:	f7fd fcc4 	bl	8007cca <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a342:	697b      	ldr	r3, [r7, #20]
}
 800a344:	4618      	mov	r0, r3
 800a346:	3718      	adds	r7, #24
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	20001168 	.word	0x20001168
 800a350:	20001164 	.word	0x20001164

0800a354 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b08e      	sub	sp, #56	; 0x38
 800a358:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a35a:	e0ca      	b.n	800a4f2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	da18      	bge.n	800a394 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a362:	1d3b      	adds	r3, r7, #4
 800a364:	3304      	adds	r3, #4
 800a366:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d10a      	bne.n	800a384 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a372:	f383 8811 	msr	BASEPRI, r3
 800a376:	f3bf 8f6f 	isb	sy
 800a37a:	f3bf 8f4f 	dsb	sy
 800a37e:	61fb      	str	r3, [r7, #28]
}
 800a380:	bf00      	nop
 800a382:	e7fe      	b.n	800a382 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a38a:	6850      	ldr	r0, [r2, #4]
 800a38c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a38e:	6892      	ldr	r2, [r2, #8]
 800a390:	4611      	mov	r1, r2
 800a392:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2b00      	cmp	r3, #0
 800a398:	f2c0 80ab 	blt.w	800a4f2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a2:	695b      	ldr	r3, [r3, #20]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d004      	beq.n	800a3b2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3aa:	3304      	adds	r3, #4
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f7fd fcc5 	bl	8007d3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a3b2:	463b      	mov	r3, r7
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f7ff ff6b 	bl	800a290 <prvSampleTimeNow>
 800a3ba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2b09      	cmp	r3, #9
 800a3c0:	f200 8096 	bhi.w	800a4f0 <prvProcessReceivedCommands+0x19c>
 800a3c4:	a201      	add	r2, pc, #4	; (adr r2, 800a3cc <prvProcessReceivedCommands+0x78>)
 800a3c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ca:	bf00      	nop
 800a3cc:	0800a3f5 	.word	0x0800a3f5
 800a3d0:	0800a3f5 	.word	0x0800a3f5
 800a3d4:	0800a3f5 	.word	0x0800a3f5
 800a3d8:	0800a469 	.word	0x0800a469
 800a3dc:	0800a47d 	.word	0x0800a47d
 800a3e0:	0800a4c7 	.word	0x0800a4c7
 800a3e4:	0800a3f5 	.word	0x0800a3f5
 800a3e8:	0800a3f5 	.word	0x0800a3f5
 800a3ec:	0800a469 	.word	0x0800a469
 800a3f0:	0800a47d 	.word	0x0800a47d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3fa:	f043 0301 	orr.w	r3, r3, #1
 800a3fe:	b2da      	uxtb	r2, r3
 800a400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a402:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a406:	68ba      	ldr	r2, [r7, #8]
 800a408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40a:	699b      	ldr	r3, [r3, #24]
 800a40c:	18d1      	adds	r1, r2, r3
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a414:	f7ff ff5c 	bl	800a2d0 <prvInsertTimerInActiveList>
 800a418:	4603      	mov	r3, r0
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d069      	beq.n	800a4f2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a420:	6a1b      	ldr	r3, [r3, #32]
 800a422:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a424:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a428:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a42c:	f003 0304 	and.w	r3, r3, #4
 800a430:	2b00      	cmp	r3, #0
 800a432:	d05e      	beq.n	800a4f2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a434:	68ba      	ldr	r2, [r7, #8]
 800a436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a438:	699b      	ldr	r3, [r3, #24]
 800a43a:	441a      	add	r2, r3
 800a43c:	2300      	movs	r3, #0
 800a43e:	9300      	str	r3, [sp, #0]
 800a440:	2300      	movs	r3, #0
 800a442:	2100      	movs	r1, #0
 800a444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a446:	f7ff fe05 	bl	800a054 <xTimerGenericCommand>
 800a44a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a44c:	6a3b      	ldr	r3, [r7, #32]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d14f      	bne.n	800a4f2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a456:	f383 8811 	msr	BASEPRI, r3
 800a45a:	f3bf 8f6f 	isb	sy
 800a45e:	f3bf 8f4f 	dsb	sy
 800a462:	61bb      	str	r3, [r7, #24]
}
 800a464:	bf00      	nop
 800a466:	e7fe      	b.n	800a466 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a46e:	f023 0301 	bic.w	r3, r3, #1
 800a472:	b2da      	uxtb	r2, r3
 800a474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a476:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a47a:	e03a      	b.n	800a4f2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a482:	f043 0301 	orr.w	r3, r3, #1
 800a486:	b2da      	uxtb	r2, r3
 800a488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a48e:	68ba      	ldr	r2, [r7, #8]
 800a490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a492:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a496:	699b      	ldr	r3, [r3, #24]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d10a      	bne.n	800a4b2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a0:	f383 8811 	msr	BASEPRI, r3
 800a4a4:	f3bf 8f6f 	isb	sy
 800a4a8:	f3bf 8f4f 	dsb	sy
 800a4ac:	617b      	str	r3, [r7, #20]
}
 800a4ae:	bf00      	nop
 800a4b0:	e7fe      	b.n	800a4b0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b4:	699a      	ldr	r2, [r3, #24]
 800a4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b8:	18d1      	adds	r1, r2, r3
 800a4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4c0:	f7ff ff06 	bl	800a2d0 <prvInsertTimerInActiveList>
					break;
 800a4c4:	e015      	b.n	800a4f2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4cc:	f003 0302 	and.w	r3, r3, #2
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d103      	bne.n	800a4dc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a4d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4d6:	f000 fc2b 	bl	800ad30 <vPortFree>
 800a4da:	e00a      	b.n	800a4f2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4e2:	f023 0301 	bic.w	r3, r3, #1
 800a4e6:	b2da      	uxtb	r2, r3
 800a4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a4ee:	e000      	b.n	800a4f2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800a4f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a4f2:	4b08      	ldr	r3, [pc, #32]	; (800a514 <prvProcessReceivedCommands+0x1c0>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	1d39      	adds	r1, r7, #4
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f7fe f862 	bl	80085c4 <xQueueReceive>
 800a500:	4603      	mov	r3, r0
 800a502:	2b00      	cmp	r3, #0
 800a504:	f47f af2a 	bne.w	800a35c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a508:	bf00      	nop
 800a50a:	bf00      	nop
 800a50c:	3730      	adds	r7, #48	; 0x30
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	2000116c 	.word	0x2000116c

0800a518 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b088      	sub	sp, #32
 800a51c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a51e:	e048      	b.n	800a5b2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a520:	4b2d      	ldr	r3, [pc, #180]	; (800a5d8 <prvSwitchTimerLists+0xc0>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a52a:	4b2b      	ldr	r3, [pc, #172]	; (800a5d8 <prvSwitchTimerLists+0xc0>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	68db      	ldr	r3, [r3, #12]
 800a530:	68db      	ldr	r3, [r3, #12]
 800a532:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	3304      	adds	r3, #4
 800a538:	4618      	mov	r0, r3
 800a53a:	f7fd fbff 	bl	8007d3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	6a1b      	ldr	r3, [r3, #32]
 800a542:	68f8      	ldr	r0, [r7, #12]
 800a544:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a54c:	f003 0304 	and.w	r3, r3, #4
 800a550:	2b00      	cmp	r3, #0
 800a552:	d02e      	beq.n	800a5b2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	699b      	ldr	r3, [r3, #24]
 800a558:	693a      	ldr	r2, [r7, #16]
 800a55a:	4413      	add	r3, r2
 800a55c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a55e:	68ba      	ldr	r2, [r7, #8]
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	429a      	cmp	r2, r3
 800a564:	d90e      	bls.n	800a584 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	68ba      	ldr	r2, [r7, #8]
 800a56a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	68fa      	ldr	r2, [r7, #12]
 800a570:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a572:	4b19      	ldr	r3, [pc, #100]	; (800a5d8 <prvSwitchTimerLists+0xc0>)
 800a574:	681a      	ldr	r2, [r3, #0]
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	3304      	adds	r3, #4
 800a57a:	4619      	mov	r1, r3
 800a57c:	4610      	mov	r0, r2
 800a57e:	f7fd fba4 	bl	8007cca <vListInsert>
 800a582:	e016      	b.n	800a5b2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a584:	2300      	movs	r3, #0
 800a586:	9300      	str	r3, [sp, #0]
 800a588:	2300      	movs	r3, #0
 800a58a:	693a      	ldr	r2, [r7, #16]
 800a58c:	2100      	movs	r1, #0
 800a58e:	68f8      	ldr	r0, [r7, #12]
 800a590:	f7ff fd60 	bl	800a054 <xTimerGenericCommand>
 800a594:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d10a      	bne.n	800a5b2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a0:	f383 8811 	msr	BASEPRI, r3
 800a5a4:	f3bf 8f6f 	isb	sy
 800a5a8:	f3bf 8f4f 	dsb	sy
 800a5ac:	603b      	str	r3, [r7, #0]
}
 800a5ae:	bf00      	nop
 800a5b0:	e7fe      	b.n	800a5b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a5b2:	4b09      	ldr	r3, [pc, #36]	; (800a5d8 <prvSwitchTimerLists+0xc0>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d1b1      	bne.n	800a520 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a5bc:	4b06      	ldr	r3, [pc, #24]	; (800a5d8 <prvSwitchTimerLists+0xc0>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a5c2:	4b06      	ldr	r3, [pc, #24]	; (800a5dc <prvSwitchTimerLists+0xc4>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4a04      	ldr	r2, [pc, #16]	; (800a5d8 <prvSwitchTimerLists+0xc0>)
 800a5c8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a5ca:	4a04      	ldr	r2, [pc, #16]	; (800a5dc <prvSwitchTimerLists+0xc4>)
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	6013      	str	r3, [r2, #0]
}
 800a5d0:	bf00      	nop
 800a5d2:	3718      	adds	r7, #24
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}
 800a5d8:	20001164 	.word	0x20001164
 800a5dc:	20001168 	.word	0x20001168

0800a5e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b082      	sub	sp, #8
 800a5e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a5e6:	f000 f9b5 	bl	800a954 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a5ea:	4b15      	ldr	r3, [pc, #84]	; (800a640 <prvCheckForValidListAndQueue+0x60>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d120      	bne.n	800a634 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a5f2:	4814      	ldr	r0, [pc, #80]	; (800a644 <prvCheckForValidListAndQueue+0x64>)
 800a5f4:	f7fd fb18 	bl	8007c28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a5f8:	4813      	ldr	r0, [pc, #76]	; (800a648 <prvCheckForValidListAndQueue+0x68>)
 800a5fa:	f7fd fb15 	bl	8007c28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a5fe:	4b13      	ldr	r3, [pc, #76]	; (800a64c <prvCheckForValidListAndQueue+0x6c>)
 800a600:	4a10      	ldr	r2, [pc, #64]	; (800a644 <prvCheckForValidListAndQueue+0x64>)
 800a602:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a604:	4b12      	ldr	r3, [pc, #72]	; (800a650 <prvCheckForValidListAndQueue+0x70>)
 800a606:	4a10      	ldr	r2, [pc, #64]	; (800a648 <prvCheckForValidListAndQueue+0x68>)
 800a608:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a60a:	2300      	movs	r3, #0
 800a60c:	9300      	str	r3, [sp, #0]
 800a60e:	4b11      	ldr	r3, [pc, #68]	; (800a654 <prvCheckForValidListAndQueue+0x74>)
 800a610:	4a11      	ldr	r2, [pc, #68]	; (800a658 <prvCheckForValidListAndQueue+0x78>)
 800a612:	2110      	movs	r1, #16
 800a614:	200a      	movs	r0, #10
 800a616:	f7fd fc23 	bl	8007e60 <xQueueGenericCreateStatic>
 800a61a:	4603      	mov	r3, r0
 800a61c:	4a08      	ldr	r2, [pc, #32]	; (800a640 <prvCheckForValidListAndQueue+0x60>)
 800a61e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a620:	4b07      	ldr	r3, [pc, #28]	; (800a640 <prvCheckForValidListAndQueue+0x60>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d005      	beq.n	800a634 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a628:	4b05      	ldr	r3, [pc, #20]	; (800a640 <prvCheckForValidListAndQueue+0x60>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	490b      	ldr	r1, [pc, #44]	; (800a65c <prvCheckForValidListAndQueue+0x7c>)
 800a62e:	4618      	mov	r0, r3
 800a630:	f7fe fb80 	bl	8008d34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a634:	f000 f9be 	bl	800a9b4 <vPortExitCritical>
}
 800a638:	bf00      	nop
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	2000116c 	.word	0x2000116c
 800a644:	2000113c 	.word	0x2000113c
 800a648:	20001150 	.word	0x20001150
 800a64c:	20001164 	.word	0x20001164
 800a650:	20001168 	.word	0x20001168
 800a654:	20001218 	.word	0x20001218
 800a658:	20001178 	.word	0x20001178
 800a65c:	0800db70 	.word	0x0800db70

0800a660 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b086      	sub	sp, #24
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d10a      	bne.n	800a688 <xTimerIsTimerActive+0x28>
	__asm volatile
 800a672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a676:	f383 8811 	msr	BASEPRI, r3
 800a67a:	f3bf 8f6f 	isb	sy
 800a67e:	f3bf 8f4f 	dsb	sy
 800a682:	60fb      	str	r3, [r7, #12]
}
 800a684:	bf00      	nop
 800a686:	e7fe      	b.n	800a686 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800a688:	f000 f964 	bl	800a954 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a692:	f003 0301 	and.w	r3, r3, #1
 800a696:	2b00      	cmp	r3, #0
 800a698:	d102      	bne.n	800a6a0 <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 800a69a:	2300      	movs	r3, #0
 800a69c:	617b      	str	r3, [r7, #20]
 800a69e:	e001      	b.n	800a6a4 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800a6a4:	f000 f986 	bl	800a9b4 <vPortExitCritical>

	return xReturn;
 800a6a8:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3718      	adds	r7, #24
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}

0800a6b2 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800a6b2:	b580      	push	{r7, lr}
 800a6b4:	b086      	sub	sp, #24
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d10a      	bne.n	800a6da <pvTimerGetTimerID+0x28>
	__asm volatile
 800a6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c8:	f383 8811 	msr	BASEPRI, r3
 800a6cc:	f3bf 8f6f 	isb	sy
 800a6d0:	f3bf 8f4f 	dsb	sy
 800a6d4:	60fb      	str	r3, [r7, #12]
}
 800a6d6:	bf00      	nop
 800a6d8:	e7fe      	b.n	800a6d8 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800a6da:	f000 f93b 	bl	800a954 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	69db      	ldr	r3, [r3, #28]
 800a6e2:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800a6e4:	f000 f966 	bl	800a9b4 <vPortExitCritical>

	return pvReturn;
 800a6e8:	693b      	ldr	r3, [r7, #16]
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3718      	adds	r7, #24
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
	...

0800a6f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b085      	sub	sp, #20
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	3b04      	subs	r3, #4
 800a704:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a70c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	3b04      	subs	r3, #4
 800a712:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	f023 0201 	bic.w	r2, r3, #1
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	3b04      	subs	r3, #4
 800a722:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a724:	4a0c      	ldr	r2, [pc, #48]	; (800a758 <pxPortInitialiseStack+0x64>)
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	3b14      	subs	r3, #20
 800a72e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a730:	687a      	ldr	r2, [r7, #4]
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	3b04      	subs	r3, #4
 800a73a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f06f 0202 	mvn.w	r2, #2
 800a742:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	3b20      	subs	r3, #32
 800a748:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a74a:	68fb      	ldr	r3, [r7, #12]
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3714      	adds	r7, #20
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr
 800a758:	0800a75d 	.word	0x0800a75d

0800a75c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a75c:	b480      	push	{r7}
 800a75e:	b085      	sub	sp, #20
 800a760:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a762:	2300      	movs	r3, #0
 800a764:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a766:	4b12      	ldr	r3, [pc, #72]	; (800a7b0 <prvTaskExitError+0x54>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a76e:	d00a      	beq.n	800a786 <prvTaskExitError+0x2a>
	__asm volatile
 800a770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a774:	f383 8811 	msr	BASEPRI, r3
 800a778:	f3bf 8f6f 	isb	sy
 800a77c:	f3bf 8f4f 	dsb	sy
 800a780:	60fb      	str	r3, [r7, #12]
}
 800a782:	bf00      	nop
 800a784:	e7fe      	b.n	800a784 <prvTaskExitError+0x28>
	__asm volatile
 800a786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a78a:	f383 8811 	msr	BASEPRI, r3
 800a78e:	f3bf 8f6f 	isb	sy
 800a792:	f3bf 8f4f 	dsb	sy
 800a796:	60bb      	str	r3, [r7, #8]
}
 800a798:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a79a:	bf00      	nop
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d0fc      	beq.n	800a79c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a7a2:	bf00      	nop
 800a7a4:	bf00      	nop
 800a7a6:	3714      	adds	r7, #20
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr
 800a7b0:	20000010 	.word	0x20000010
	...

0800a7c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a7c0:	4b07      	ldr	r3, [pc, #28]	; (800a7e0 <pxCurrentTCBConst2>)
 800a7c2:	6819      	ldr	r1, [r3, #0]
 800a7c4:	6808      	ldr	r0, [r1, #0]
 800a7c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ca:	f380 8809 	msr	PSP, r0
 800a7ce:	f3bf 8f6f 	isb	sy
 800a7d2:	f04f 0000 	mov.w	r0, #0
 800a7d6:	f380 8811 	msr	BASEPRI, r0
 800a7da:	4770      	bx	lr
 800a7dc:	f3af 8000 	nop.w

0800a7e0 <pxCurrentTCBConst2>:
 800a7e0:	20000c3c 	.word	0x20000c3c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a7e4:	bf00      	nop
 800a7e6:	bf00      	nop

0800a7e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a7e8:	4808      	ldr	r0, [pc, #32]	; (800a80c <prvPortStartFirstTask+0x24>)
 800a7ea:	6800      	ldr	r0, [r0, #0]
 800a7ec:	6800      	ldr	r0, [r0, #0]
 800a7ee:	f380 8808 	msr	MSP, r0
 800a7f2:	f04f 0000 	mov.w	r0, #0
 800a7f6:	f380 8814 	msr	CONTROL, r0
 800a7fa:	b662      	cpsie	i
 800a7fc:	b661      	cpsie	f
 800a7fe:	f3bf 8f4f 	dsb	sy
 800a802:	f3bf 8f6f 	isb	sy
 800a806:	df00      	svc	0
 800a808:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a80a:	bf00      	nop
 800a80c:	e000ed08 	.word	0xe000ed08

0800a810 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b086      	sub	sp, #24
 800a814:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a816:	4b46      	ldr	r3, [pc, #280]	; (800a930 <xPortStartScheduler+0x120>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a46      	ldr	r2, [pc, #280]	; (800a934 <xPortStartScheduler+0x124>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d10a      	bne.n	800a836 <xPortStartScheduler+0x26>
	__asm volatile
 800a820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a824:	f383 8811 	msr	BASEPRI, r3
 800a828:	f3bf 8f6f 	isb	sy
 800a82c:	f3bf 8f4f 	dsb	sy
 800a830:	613b      	str	r3, [r7, #16]
}
 800a832:	bf00      	nop
 800a834:	e7fe      	b.n	800a834 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a836:	4b3e      	ldr	r3, [pc, #248]	; (800a930 <xPortStartScheduler+0x120>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a3f      	ldr	r2, [pc, #252]	; (800a938 <xPortStartScheduler+0x128>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d10a      	bne.n	800a856 <xPortStartScheduler+0x46>
	__asm volatile
 800a840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a844:	f383 8811 	msr	BASEPRI, r3
 800a848:	f3bf 8f6f 	isb	sy
 800a84c:	f3bf 8f4f 	dsb	sy
 800a850:	60fb      	str	r3, [r7, #12]
}
 800a852:	bf00      	nop
 800a854:	e7fe      	b.n	800a854 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a856:	4b39      	ldr	r3, [pc, #228]	; (800a93c <xPortStartScheduler+0x12c>)
 800a858:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	781b      	ldrb	r3, [r3, #0]
 800a85e:	b2db      	uxtb	r3, r3
 800a860:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	22ff      	movs	r2, #255	; 0xff
 800a866:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	b2db      	uxtb	r3, r3
 800a86e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a870:	78fb      	ldrb	r3, [r7, #3]
 800a872:	b2db      	uxtb	r3, r3
 800a874:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a878:	b2da      	uxtb	r2, r3
 800a87a:	4b31      	ldr	r3, [pc, #196]	; (800a940 <xPortStartScheduler+0x130>)
 800a87c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a87e:	4b31      	ldr	r3, [pc, #196]	; (800a944 <xPortStartScheduler+0x134>)
 800a880:	2207      	movs	r2, #7
 800a882:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a884:	e009      	b.n	800a89a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a886:	4b2f      	ldr	r3, [pc, #188]	; (800a944 <xPortStartScheduler+0x134>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	3b01      	subs	r3, #1
 800a88c:	4a2d      	ldr	r2, [pc, #180]	; (800a944 <xPortStartScheduler+0x134>)
 800a88e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a890:	78fb      	ldrb	r3, [r7, #3]
 800a892:	b2db      	uxtb	r3, r3
 800a894:	005b      	lsls	r3, r3, #1
 800a896:	b2db      	uxtb	r3, r3
 800a898:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a89a:	78fb      	ldrb	r3, [r7, #3]
 800a89c:	b2db      	uxtb	r3, r3
 800a89e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8a2:	2b80      	cmp	r3, #128	; 0x80
 800a8a4:	d0ef      	beq.n	800a886 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a8a6:	4b27      	ldr	r3, [pc, #156]	; (800a944 <xPortStartScheduler+0x134>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f1c3 0307 	rsb	r3, r3, #7
 800a8ae:	2b04      	cmp	r3, #4
 800a8b0:	d00a      	beq.n	800a8c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b6:	f383 8811 	msr	BASEPRI, r3
 800a8ba:	f3bf 8f6f 	isb	sy
 800a8be:	f3bf 8f4f 	dsb	sy
 800a8c2:	60bb      	str	r3, [r7, #8]
}
 800a8c4:	bf00      	nop
 800a8c6:	e7fe      	b.n	800a8c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a8c8:	4b1e      	ldr	r3, [pc, #120]	; (800a944 <xPortStartScheduler+0x134>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	021b      	lsls	r3, r3, #8
 800a8ce:	4a1d      	ldr	r2, [pc, #116]	; (800a944 <xPortStartScheduler+0x134>)
 800a8d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a8d2:	4b1c      	ldr	r3, [pc, #112]	; (800a944 <xPortStartScheduler+0x134>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a8da:	4a1a      	ldr	r2, [pc, #104]	; (800a944 <xPortStartScheduler+0x134>)
 800a8dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	b2da      	uxtb	r2, r3
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a8e6:	4b18      	ldr	r3, [pc, #96]	; (800a948 <xPortStartScheduler+0x138>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	4a17      	ldr	r2, [pc, #92]	; (800a948 <xPortStartScheduler+0x138>)
 800a8ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a8f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a8f2:	4b15      	ldr	r3, [pc, #84]	; (800a948 <xPortStartScheduler+0x138>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4a14      	ldr	r2, [pc, #80]	; (800a948 <xPortStartScheduler+0x138>)
 800a8f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a8fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a8fe:	f000 f8dd 	bl	800aabc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a902:	4b12      	ldr	r3, [pc, #72]	; (800a94c <xPortStartScheduler+0x13c>)
 800a904:	2200      	movs	r2, #0
 800a906:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a908:	f000 f8fc 	bl	800ab04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a90c:	4b10      	ldr	r3, [pc, #64]	; (800a950 <xPortStartScheduler+0x140>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a0f      	ldr	r2, [pc, #60]	; (800a950 <xPortStartScheduler+0x140>)
 800a912:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a916:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a918:	f7ff ff66 	bl	800a7e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a91c:	f7fe fe64 	bl	80095e8 <vTaskSwitchContext>
	prvTaskExitError();
 800a920:	f7ff ff1c 	bl	800a75c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a924:	2300      	movs	r3, #0
}
 800a926:	4618      	mov	r0, r3
 800a928:	3718      	adds	r7, #24
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	bf00      	nop
 800a930:	e000ed00 	.word	0xe000ed00
 800a934:	410fc271 	.word	0x410fc271
 800a938:	410fc270 	.word	0x410fc270
 800a93c:	e000e400 	.word	0xe000e400
 800a940:	20001268 	.word	0x20001268
 800a944:	2000126c 	.word	0x2000126c
 800a948:	e000ed20 	.word	0xe000ed20
 800a94c:	20000010 	.word	0x20000010
 800a950:	e000ef34 	.word	0xe000ef34

0800a954 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a954:	b480      	push	{r7}
 800a956:	b083      	sub	sp, #12
 800a958:	af00      	add	r7, sp, #0
	__asm volatile
 800a95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a95e:	f383 8811 	msr	BASEPRI, r3
 800a962:	f3bf 8f6f 	isb	sy
 800a966:	f3bf 8f4f 	dsb	sy
 800a96a:	607b      	str	r3, [r7, #4]
}
 800a96c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a96e:	4b0f      	ldr	r3, [pc, #60]	; (800a9ac <vPortEnterCritical+0x58>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	3301      	adds	r3, #1
 800a974:	4a0d      	ldr	r2, [pc, #52]	; (800a9ac <vPortEnterCritical+0x58>)
 800a976:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a978:	4b0c      	ldr	r3, [pc, #48]	; (800a9ac <vPortEnterCritical+0x58>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	d10f      	bne.n	800a9a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a980:	4b0b      	ldr	r3, [pc, #44]	; (800a9b0 <vPortEnterCritical+0x5c>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	b2db      	uxtb	r3, r3
 800a986:	2b00      	cmp	r3, #0
 800a988:	d00a      	beq.n	800a9a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a98e:	f383 8811 	msr	BASEPRI, r3
 800a992:	f3bf 8f6f 	isb	sy
 800a996:	f3bf 8f4f 	dsb	sy
 800a99a:	603b      	str	r3, [r7, #0]
}
 800a99c:	bf00      	nop
 800a99e:	e7fe      	b.n	800a99e <vPortEnterCritical+0x4a>
	}
}
 800a9a0:	bf00      	nop
 800a9a2:	370c      	adds	r7, #12
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr
 800a9ac:	20000010 	.word	0x20000010
 800a9b0:	e000ed04 	.word	0xe000ed04

0800a9b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b083      	sub	sp, #12
 800a9b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a9ba:	4b12      	ldr	r3, [pc, #72]	; (800aa04 <vPortExitCritical+0x50>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d10a      	bne.n	800a9d8 <vPortExitCritical+0x24>
	__asm volatile
 800a9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c6:	f383 8811 	msr	BASEPRI, r3
 800a9ca:	f3bf 8f6f 	isb	sy
 800a9ce:	f3bf 8f4f 	dsb	sy
 800a9d2:	607b      	str	r3, [r7, #4]
}
 800a9d4:	bf00      	nop
 800a9d6:	e7fe      	b.n	800a9d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a9d8:	4b0a      	ldr	r3, [pc, #40]	; (800aa04 <vPortExitCritical+0x50>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	3b01      	subs	r3, #1
 800a9de:	4a09      	ldr	r2, [pc, #36]	; (800aa04 <vPortExitCritical+0x50>)
 800a9e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a9e2:	4b08      	ldr	r3, [pc, #32]	; (800aa04 <vPortExitCritical+0x50>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d105      	bne.n	800a9f6 <vPortExitCritical+0x42>
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	f383 8811 	msr	BASEPRI, r3
}
 800a9f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a9f6:	bf00      	nop
 800a9f8:	370c      	adds	r7, #12
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr
 800aa02:	bf00      	nop
 800aa04:	20000010 	.word	0x20000010
	...

0800aa10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aa10:	f3ef 8009 	mrs	r0, PSP
 800aa14:	f3bf 8f6f 	isb	sy
 800aa18:	4b15      	ldr	r3, [pc, #84]	; (800aa70 <pxCurrentTCBConst>)
 800aa1a:	681a      	ldr	r2, [r3, #0]
 800aa1c:	f01e 0f10 	tst.w	lr, #16
 800aa20:	bf08      	it	eq
 800aa22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aa26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa2a:	6010      	str	r0, [r2, #0]
 800aa2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aa30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aa34:	f380 8811 	msr	BASEPRI, r0
 800aa38:	f3bf 8f4f 	dsb	sy
 800aa3c:	f3bf 8f6f 	isb	sy
 800aa40:	f7fe fdd2 	bl	80095e8 <vTaskSwitchContext>
 800aa44:	f04f 0000 	mov.w	r0, #0
 800aa48:	f380 8811 	msr	BASEPRI, r0
 800aa4c:	bc09      	pop	{r0, r3}
 800aa4e:	6819      	ldr	r1, [r3, #0]
 800aa50:	6808      	ldr	r0, [r1, #0]
 800aa52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa56:	f01e 0f10 	tst.w	lr, #16
 800aa5a:	bf08      	it	eq
 800aa5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aa60:	f380 8809 	msr	PSP, r0
 800aa64:	f3bf 8f6f 	isb	sy
 800aa68:	4770      	bx	lr
 800aa6a:	bf00      	nop
 800aa6c:	f3af 8000 	nop.w

0800aa70 <pxCurrentTCBConst>:
 800aa70:	20000c3c 	.word	0x20000c3c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aa74:	bf00      	nop
 800aa76:	bf00      	nop

0800aa78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
	__asm volatile
 800aa7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa82:	f383 8811 	msr	BASEPRI, r3
 800aa86:	f3bf 8f6f 	isb	sy
 800aa8a:	f3bf 8f4f 	dsb	sy
 800aa8e:	607b      	str	r3, [r7, #4]
}
 800aa90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aa92:	f7fe fcef 	bl	8009474 <xTaskIncrementTick>
 800aa96:	4603      	mov	r3, r0
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d003      	beq.n	800aaa4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa9c:	4b06      	ldr	r3, [pc, #24]	; (800aab8 <xPortSysTickHandler+0x40>)
 800aa9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaa2:	601a      	str	r2, [r3, #0]
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	f383 8811 	msr	BASEPRI, r3
}
 800aaae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aab0:	bf00      	nop
 800aab2:	3708      	adds	r7, #8
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}
 800aab8:	e000ed04 	.word	0xe000ed04

0800aabc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aabc:	b480      	push	{r7}
 800aabe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aac0:	4b0b      	ldr	r3, [pc, #44]	; (800aaf0 <vPortSetupTimerInterrupt+0x34>)
 800aac2:	2200      	movs	r2, #0
 800aac4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aac6:	4b0b      	ldr	r3, [pc, #44]	; (800aaf4 <vPortSetupTimerInterrupt+0x38>)
 800aac8:	2200      	movs	r2, #0
 800aaca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aacc:	4b0a      	ldr	r3, [pc, #40]	; (800aaf8 <vPortSetupTimerInterrupt+0x3c>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4a0a      	ldr	r2, [pc, #40]	; (800aafc <vPortSetupTimerInterrupt+0x40>)
 800aad2:	fba2 2303 	umull	r2, r3, r2, r3
 800aad6:	099b      	lsrs	r3, r3, #6
 800aad8:	4a09      	ldr	r2, [pc, #36]	; (800ab00 <vPortSetupTimerInterrupt+0x44>)
 800aada:	3b01      	subs	r3, #1
 800aadc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aade:	4b04      	ldr	r3, [pc, #16]	; (800aaf0 <vPortSetupTimerInterrupt+0x34>)
 800aae0:	2207      	movs	r2, #7
 800aae2:	601a      	str	r2, [r3, #0]
}
 800aae4:	bf00      	nop
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr
 800aaee:	bf00      	nop
 800aaf0:	e000e010 	.word	0xe000e010
 800aaf4:	e000e018 	.word	0xe000e018
 800aaf8:	20000004 	.word	0x20000004
 800aafc:	10624dd3 	.word	0x10624dd3
 800ab00:	e000e014 	.word	0xe000e014

0800ab04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ab04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ab14 <vPortEnableVFP+0x10>
 800ab08:	6801      	ldr	r1, [r0, #0]
 800ab0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ab0e:	6001      	str	r1, [r0, #0]
 800ab10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ab12:	bf00      	nop
 800ab14:	e000ed88 	.word	0xe000ed88

0800ab18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ab18:	b480      	push	{r7}
 800ab1a:	b085      	sub	sp, #20
 800ab1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ab1e:	f3ef 8305 	mrs	r3, IPSR
 800ab22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2b0f      	cmp	r3, #15
 800ab28:	d914      	bls.n	800ab54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ab2a:	4a17      	ldr	r2, [pc, #92]	; (800ab88 <vPortValidateInterruptPriority+0x70>)
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	4413      	add	r3, r2
 800ab30:	781b      	ldrb	r3, [r3, #0]
 800ab32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ab34:	4b15      	ldr	r3, [pc, #84]	; (800ab8c <vPortValidateInterruptPriority+0x74>)
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	7afa      	ldrb	r2, [r7, #11]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d20a      	bcs.n	800ab54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ab3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab42:	f383 8811 	msr	BASEPRI, r3
 800ab46:	f3bf 8f6f 	isb	sy
 800ab4a:	f3bf 8f4f 	dsb	sy
 800ab4e:	607b      	str	r3, [r7, #4]
}
 800ab50:	bf00      	nop
 800ab52:	e7fe      	b.n	800ab52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab54:	4b0e      	ldr	r3, [pc, #56]	; (800ab90 <vPortValidateInterruptPriority+0x78>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ab5c:	4b0d      	ldr	r3, [pc, #52]	; (800ab94 <vPortValidateInterruptPriority+0x7c>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d90a      	bls.n	800ab7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ab64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab68:	f383 8811 	msr	BASEPRI, r3
 800ab6c:	f3bf 8f6f 	isb	sy
 800ab70:	f3bf 8f4f 	dsb	sy
 800ab74:	603b      	str	r3, [r7, #0]
}
 800ab76:	bf00      	nop
 800ab78:	e7fe      	b.n	800ab78 <vPortValidateInterruptPriority+0x60>
	}
 800ab7a:	bf00      	nop
 800ab7c:	3714      	adds	r7, #20
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab84:	4770      	bx	lr
 800ab86:	bf00      	nop
 800ab88:	e000e3f0 	.word	0xe000e3f0
 800ab8c:	20001268 	.word	0x20001268
 800ab90:	e000ed0c 	.word	0xe000ed0c
 800ab94:	2000126c 	.word	0x2000126c

0800ab98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b08a      	sub	sp, #40	; 0x28
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aba0:	2300      	movs	r3, #0
 800aba2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aba4:	f7fe fbaa 	bl	80092fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aba8:	4b5b      	ldr	r3, [pc, #364]	; (800ad18 <pvPortMalloc+0x180>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d101      	bne.n	800abb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800abb0:	f000 f920 	bl	800adf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800abb4:	4b59      	ldr	r3, [pc, #356]	; (800ad1c <pvPortMalloc+0x184>)
 800abb6:	681a      	ldr	r2, [r3, #0]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	4013      	ands	r3, r2
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	f040 8093 	bne.w	800ace8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d01d      	beq.n	800ac04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800abc8:	2208      	movs	r2, #8
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	4413      	add	r3, r2
 800abce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f003 0307 	and.w	r3, r3, #7
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d014      	beq.n	800ac04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f023 0307 	bic.w	r3, r3, #7
 800abe0:	3308      	adds	r3, #8
 800abe2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f003 0307 	and.w	r3, r3, #7
 800abea:	2b00      	cmp	r3, #0
 800abec:	d00a      	beq.n	800ac04 <pvPortMalloc+0x6c>
	__asm volatile
 800abee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf2:	f383 8811 	msr	BASEPRI, r3
 800abf6:	f3bf 8f6f 	isb	sy
 800abfa:	f3bf 8f4f 	dsb	sy
 800abfe:	617b      	str	r3, [r7, #20]
}
 800ac00:	bf00      	nop
 800ac02:	e7fe      	b.n	800ac02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d06e      	beq.n	800ace8 <pvPortMalloc+0x150>
 800ac0a:	4b45      	ldr	r3, [pc, #276]	; (800ad20 <pvPortMalloc+0x188>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d869      	bhi.n	800ace8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ac14:	4b43      	ldr	r3, [pc, #268]	; (800ad24 <pvPortMalloc+0x18c>)
 800ac16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ac18:	4b42      	ldr	r3, [pc, #264]	; (800ad24 <pvPortMalloc+0x18c>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac1e:	e004      	b.n	800ac2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ac20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ac24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	687a      	ldr	r2, [r7, #4]
 800ac30:	429a      	cmp	r2, r3
 800ac32:	d903      	bls.n	800ac3c <pvPortMalloc+0xa4>
 800ac34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d1f1      	bne.n	800ac20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ac3c:	4b36      	ldr	r3, [pc, #216]	; (800ad18 <pvPortMalloc+0x180>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d050      	beq.n	800ace8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ac46:	6a3b      	ldr	r3, [r7, #32]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	2208      	movs	r2, #8
 800ac4c:	4413      	add	r3, r2
 800ac4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ac50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	6a3b      	ldr	r3, [r7, #32]
 800ac56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ac58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5a:	685a      	ldr	r2, [r3, #4]
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	1ad2      	subs	r2, r2, r3
 800ac60:	2308      	movs	r3, #8
 800ac62:	005b      	lsls	r3, r3, #1
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d91f      	bls.n	800aca8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ac68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	4413      	add	r3, r2
 800ac6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac70:	69bb      	ldr	r3, [r7, #24]
 800ac72:	f003 0307 	and.w	r3, r3, #7
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d00a      	beq.n	800ac90 <pvPortMalloc+0xf8>
	__asm volatile
 800ac7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac7e:	f383 8811 	msr	BASEPRI, r3
 800ac82:	f3bf 8f6f 	isb	sy
 800ac86:	f3bf 8f4f 	dsb	sy
 800ac8a:	613b      	str	r3, [r7, #16]
}
 800ac8c:	bf00      	nop
 800ac8e:	e7fe      	b.n	800ac8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ac90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac92:	685a      	ldr	r2, [r3, #4]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	1ad2      	subs	r2, r2, r3
 800ac98:	69bb      	ldr	r3, [r7, #24]
 800ac9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ac9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aca2:	69b8      	ldr	r0, [r7, #24]
 800aca4:	f000 f908 	bl	800aeb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aca8:	4b1d      	ldr	r3, [pc, #116]	; (800ad20 <pvPortMalloc+0x188>)
 800acaa:	681a      	ldr	r2, [r3, #0]
 800acac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	1ad3      	subs	r3, r2, r3
 800acb2:	4a1b      	ldr	r2, [pc, #108]	; (800ad20 <pvPortMalloc+0x188>)
 800acb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800acb6:	4b1a      	ldr	r3, [pc, #104]	; (800ad20 <pvPortMalloc+0x188>)
 800acb8:	681a      	ldr	r2, [r3, #0]
 800acba:	4b1b      	ldr	r3, [pc, #108]	; (800ad28 <pvPortMalloc+0x190>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	429a      	cmp	r2, r3
 800acc0:	d203      	bcs.n	800acca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800acc2:	4b17      	ldr	r3, [pc, #92]	; (800ad20 <pvPortMalloc+0x188>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	4a18      	ldr	r2, [pc, #96]	; (800ad28 <pvPortMalloc+0x190>)
 800acc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800acca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800accc:	685a      	ldr	r2, [r3, #4]
 800acce:	4b13      	ldr	r3, [pc, #76]	; (800ad1c <pvPortMalloc+0x184>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	431a      	orrs	r2, r3
 800acd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800acd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acda:	2200      	movs	r2, #0
 800acdc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800acde:	4b13      	ldr	r3, [pc, #76]	; (800ad2c <pvPortMalloc+0x194>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	3301      	adds	r3, #1
 800ace4:	4a11      	ldr	r2, [pc, #68]	; (800ad2c <pvPortMalloc+0x194>)
 800ace6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ace8:	f7fe fb16 	bl	8009318 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800acec:	69fb      	ldr	r3, [r7, #28]
 800acee:	f003 0307 	and.w	r3, r3, #7
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d00a      	beq.n	800ad0c <pvPortMalloc+0x174>
	__asm volatile
 800acf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acfa:	f383 8811 	msr	BASEPRI, r3
 800acfe:	f3bf 8f6f 	isb	sy
 800ad02:	f3bf 8f4f 	dsb	sy
 800ad06:	60fb      	str	r3, [r7, #12]
}
 800ad08:	bf00      	nop
 800ad0a:	e7fe      	b.n	800ad0a <pvPortMalloc+0x172>
	return pvReturn;
 800ad0c:	69fb      	ldr	r3, [r7, #28]
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3728      	adds	r7, #40	; 0x28
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
 800ad16:	bf00      	nop
 800ad18:	20006098 	.word	0x20006098
 800ad1c:	200060ac 	.word	0x200060ac
 800ad20:	2000609c 	.word	0x2000609c
 800ad24:	20006090 	.word	0x20006090
 800ad28:	200060a0 	.word	0x200060a0
 800ad2c:	200060a4 	.word	0x200060a4

0800ad30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b086      	sub	sp, #24
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d04d      	beq.n	800adde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ad42:	2308      	movs	r3, #8
 800ad44:	425b      	negs	r3, r3
 800ad46:	697a      	ldr	r2, [r7, #20]
 800ad48:	4413      	add	r3, r2
 800ad4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	685a      	ldr	r2, [r3, #4]
 800ad54:	4b24      	ldr	r3, [pc, #144]	; (800ade8 <vPortFree+0xb8>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4013      	ands	r3, r2
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d10a      	bne.n	800ad74 <vPortFree+0x44>
	__asm volatile
 800ad5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad62:	f383 8811 	msr	BASEPRI, r3
 800ad66:	f3bf 8f6f 	isb	sy
 800ad6a:	f3bf 8f4f 	dsb	sy
 800ad6e:	60fb      	str	r3, [r7, #12]
}
 800ad70:	bf00      	nop
 800ad72:	e7fe      	b.n	800ad72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d00a      	beq.n	800ad92 <vPortFree+0x62>
	__asm volatile
 800ad7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad80:	f383 8811 	msr	BASEPRI, r3
 800ad84:	f3bf 8f6f 	isb	sy
 800ad88:	f3bf 8f4f 	dsb	sy
 800ad8c:	60bb      	str	r3, [r7, #8]
}
 800ad8e:	bf00      	nop
 800ad90:	e7fe      	b.n	800ad90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	685a      	ldr	r2, [r3, #4]
 800ad96:	4b14      	ldr	r3, [pc, #80]	; (800ade8 <vPortFree+0xb8>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4013      	ands	r3, r2
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d01e      	beq.n	800adde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d11a      	bne.n	800adde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	685a      	ldr	r2, [r3, #4]
 800adac:	4b0e      	ldr	r3, [pc, #56]	; (800ade8 <vPortFree+0xb8>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	43db      	mvns	r3, r3
 800adb2:	401a      	ands	r2, r3
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800adb8:	f7fe faa0 	bl	80092fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	685a      	ldr	r2, [r3, #4]
 800adc0:	4b0a      	ldr	r3, [pc, #40]	; (800adec <vPortFree+0xbc>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4413      	add	r3, r2
 800adc6:	4a09      	ldr	r2, [pc, #36]	; (800adec <vPortFree+0xbc>)
 800adc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800adca:	6938      	ldr	r0, [r7, #16]
 800adcc:	f000 f874 	bl	800aeb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800add0:	4b07      	ldr	r3, [pc, #28]	; (800adf0 <vPortFree+0xc0>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	3301      	adds	r3, #1
 800add6:	4a06      	ldr	r2, [pc, #24]	; (800adf0 <vPortFree+0xc0>)
 800add8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800adda:	f7fe fa9d 	bl	8009318 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800adde:	bf00      	nop
 800ade0:	3718      	adds	r7, #24
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
 800ade6:	bf00      	nop
 800ade8:	200060ac 	.word	0x200060ac
 800adec:	2000609c 	.word	0x2000609c
 800adf0:	200060a8 	.word	0x200060a8

0800adf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800adf4:	b480      	push	{r7}
 800adf6:	b085      	sub	sp, #20
 800adf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800adfa:	f644 6320 	movw	r3, #20000	; 0x4e20
 800adfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ae00:	4b27      	ldr	r3, [pc, #156]	; (800aea0 <prvHeapInit+0xac>)
 800ae02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f003 0307 	and.w	r3, r3, #7
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d00c      	beq.n	800ae28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	3307      	adds	r3, #7
 800ae12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	f023 0307 	bic.w	r3, r3, #7
 800ae1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ae1c:	68ba      	ldr	r2, [r7, #8]
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	1ad3      	subs	r3, r2, r3
 800ae22:	4a1f      	ldr	r2, [pc, #124]	; (800aea0 <prvHeapInit+0xac>)
 800ae24:	4413      	add	r3, r2
 800ae26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ae2c:	4a1d      	ldr	r2, [pc, #116]	; (800aea4 <prvHeapInit+0xb0>)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ae32:	4b1c      	ldr	r3, [pc, #112]	; (800aea4 <prvHeapInit+0xb0>)
 800ae34:	2200      	movs	r2, #0
 800ae36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	68ba      	ldr	r2, [r7, #8]
 800ae3c:	4413      	add	r3, r2
 800ae3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ae40:	2208      	movs	r2, #8
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	1a9b      	subs	r3, r3, r2
 800ae46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f023 0307 	bic.w	r3, r3, #7
 800ae4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	4a15      	ldr	r2, [pc, #84]	; (800aea8 <prvHeapInit+0xb4>)
 800ae54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ae56:	4b14      	ldr	r3, [pc, #80]	; (800aea8 <prvHeapInit+0xb4>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ae5e:	4b12      	ldr	r3, [pc, #72]	; (800aea8 <prvHeapInit+0xb4>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	2200      	movs	r2, #0
 800ae64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	68fa      	ldr	r2, [r7, #12]
 800ae6e:	1ad2      	subs	r2, r2, r3
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ae74:	4b0c      	ldr	r3, [pc, #48]	; (800aea8 <prvHeapInit+0xb4>)
 800ae76:	681a      	ldr	r2, [r3, #0]
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	685b      	ldr	r3, [r3, #4]
 800ae80:	4a0a      	ldr	r2, [pc, #40]	; (800aeac <prvHeapInit+0xb8>)
 800ae82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	4a09      	ldr	r2, [pc, #36]	; (800aeb0 <prvHeapInit+0xbc>)
 800ae8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ae8c:	4b09      	ldr	r3, [pc, #36]	; (800aeb4 <prvHeapInit+0xc0>)
 800ae8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ae92:	601a      	str	r2, [r3, #0]
}
 800ae94:	bf00      	nop
 800ae96:	3714      	adds	r7, #20
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr
 800aea0:	20001270 	.word	0x20001270
 800aea4:	20006090 	.word	0x20006090
 800aea8:	20006098 	.word	0x20006098
 800aeac:	200060a0 	.word	0x200060a0
 800aeb0:	2000609c 	.word	0x2000609c
 800aeb4:	200060ac 	.word	0x200060ac

0800aeb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b085      	sub	sp, #20
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aec0:	4b28      	ldr	r3, [pc, #160]	; (800af64 <prvInsertBlockIntoFreeList+0xac>)
 800aec2:	60fb      	str	r3, [r7, #12]
 800aec4:	e002      	b.n	800aecc <prvInsertBlockIntoFreeList+0x14>
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	60fb      	str	r3, [r7, #12]
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d8f7      	bhi.n	800aec6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	68ba      	ldr	r2, [r7, #8]
 800aee0:	4413      	add	r3, r2
 800aee2:	687a      	ldr	r2, [r7, #4]
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d108      	bne.n	800aefa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	685a      	ldr	r2, [r3, #4]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	685b      	ldr	r3, [r3, #4]
 800aef0:	441a      	add	r2, r3
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	685b      	ldr	r3, [r3, #4]
 800af02:	68ba      	ldr	r2, [r7, #8]
 800af04:	441a      	add	r2, r3
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d118      	bne.n	800af40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681a      	ldr	r2, [r3, #0]
 800af12:	4b15      	ldr	r3, [pc, #84]	; (800af68 <prvInsertBlockIntoFreeList+0xb0>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	429a      	cmp	r2, r3
 800af18:	d00d      	beq.n	800af36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	685a      	ldr	r2, [r3, #4]
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	685b      	ldr	r3, [r3, #4]
 800af24:	441a      	add	r2, r3
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	681a      	ldr	r2, [r3, #0]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	601a      	str	r2, [r3, #0]
 800af34:	e008      	b.n	800af48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800af36:	4b0c      	ldr	r3, [pc, #48]	; (800af68 <prvInsertBlockIntoFreeList+0xb0>)
 800af38:	681a      	ldr	r2, [r3, #0]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	601a      	str	r2, [r3, #0]
 800af3e:	e003      	b.n	800af48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681a      	ldr	r2, [r3, #0]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800af48:	68fa      	ldr	r2, [r7, #12]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	429a      	cmp	r2, r3
 800af4e:	d002      	beq.n	800af56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	687a      	ldr	r2, [r7, #4]
 800af54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af56:	bf00      	nop
 800af58:	3714      	adds	r7, #20
 800af5a:	46bd      	mov	sp, r7
 800af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af60:	4770      	bx	lr
 800af62:	bf00      	nop
 800af64:	20006090 	.word	0x20006090
 800af68:	20006098 	.word	0x20006098

0800af6c <__cvt>:
 800af6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af70:	ec55 4b10 	vmov	r4, r5, d0
 800af74:	2d00      	cmp	r5, #0
 800af76:	460e      	mov	r6, r1
 800af78:	4619      	mov	r1, r3
 800af7a:	462b      	mov	r3, r5
 800af7c:	bfbb      	ittet	lt
 800af7e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800af82:	461d      	movlt	r5, r3
 800af84:	2300      	movge	r3, #0
 800af86:	232d      	movlt	r3, #45	; 0x2d
 800af88:	700b      	strb	r3, [r1, #0]
 800af8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af8c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800af90:	4691      	mov	r9, r2
 800af92:	f023 0820 	bic.w	r8, r3, #32
 800af96:	bfbc      	itt	lt
 800af98:	4622      	movlt	r2, r4
 800af9a:	4614      	movlt	r4, r2
 800af9c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800afa0:	d005      	beq.n	800afae <__cvt+0x42>
 800afa2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800afa6:	d100      	bne.n	800afaa <__cvt+0x3e>
 800afa8:	3601      	adds	r6, #1
 800afaa:	2102      	movs	r1, #2
 800afac:	e000      	b.n	800afb0 <__cvt+0x44>
 800afae:	2103      	movs	r1, #3
 800afb0:	ab03      	add	r3, sp, #12
 800afb2:	9301      	str	r3, [sp, #4]
 800afb4:	ab02      	add	r3, sp, #8
 800afb6:	9300      	str	r3, [sp, #0]
 800afb8:	ec45 4b10 	vmov	d0, r4, r5
 800afbc:	4653      	mov	r3, sl
 800afbe:	4632      	mov	r2, r6
 800afc0:	f000 fed2 	bl	800bd68 <_dtoa_r>
 800afc4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800afc8:	4607      	mov	r7, r0
 800afca:	d102      	bne.n	800afd2 <__cvt+0x66>
 800afcc:	f019 0f01 	tst.w	r9, #1
 800afd0:	d022      	beq.n	800b018 <__cvt+0xac>
 800afd2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800afd6:	eb07 0906 	add.w	r9, r7, r6
 800afda:	d110      	bne.n	800affe <__cvt+0x92>
 800afdc:	783b      	ldrb	r3, [r7, #0]
 800afde:	2b30      	cmp	r3, #48	; 0x30
 800afe0:	d10a      	bne.n	800aff8 <__cvt+0x8c>
 800afe2:	2200      	movs	r2, #0
 800afe4:	2300      	movs	r3, #0
 800afe6:	4620      	mov	r0, r4
 800afe8:	4629      	mov	r1, r5
 800afea:	f7f5 fd7d 	bl	8000ae8 <__aeabi_dcmpeq>
 800afee:	b918      	cbnz	r0, 800aff8 <__cvt+0x8c>
 800aff0:	f1c6 0601 	rsb	r6, r6, #1
 800aff4:	f8ca 6000 	str.w	r6, [sl]
 800aff8:	f8da 3000 	ldr.w	r3, [sl]
 800affc:	4499      	add	r9, r3
 800affe:	2200      	movs	r2, #0
 800b000:	2300      	movs	r3, #0
 800b002:	4620      	mov	r0, r4
 800b004:	4629      	mov	r1, r5
 800b006:	f7f5 fd6f 	bl	8000ae8 <__aeabi_dcmpeq>
 800b00a:	b108      	cbz	r0, 800b010 <__cvt+0xa4>
 800b00c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b010:	2230      	movs	r2, #48	; 0x30
 800b012:	9b03      	ldr	r3, [sp, #12]
 800b014:	454b      	cmp	r3, r9
 800b016:	d307      	bcc.n	800b028 <__cvt+0xbc>
 800b018:	9b03      	ldr	r3, [sp, #12]
 800b01a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b01c:	1bdb      	subs	r3, r3, r7
 800b01e:	4638      	mov	r0, r7
 800b020:	6013      	str	r3, [r2, #0]
 800b022:	b004      	add	sp, #16
 800b024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b028:	1c59      	adds	r1, r3, #1
 800b02a:	9103      	str	r1, [sp, #12]
 800b02c:	701a      	strb	r2, [r3, #0]
 800b02e:	e7f0      	b.n	800b012 <__cvt+0xa6>

0800b030 <__exponent>:
 800b030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b032:	4603      	mov	r3, r0
 800b034:	2900      	cmp	r1, #0
 800b036:	bfb8      	it	lt
 800b038:	4249      	neglt	r1, r1
 800b03a:	f803 2b02 	strb.w	r2, [r3], #2
 800b03e:	bfb4      	ite	lt
 800b040:	222d      	movlt	r2, #45	; 0x2d
 800b042:	222b      	movge	r2, #43	; 0x2b
 800b044:	2909      	cmp	r1, #9
 800b046:	7042      	strb	r2, [r0, #1]
 800b048:	dd2a      	ble.n	800b0a0 <__exponent+0x70>
 800b04a:	f10d 0207 	add.w	r2, sp, #7
 800b04e:	4617      	mov	r7, r2
 800b050:	260a      	movs	r6, #10
 800b052:	4694      	mov	ip, r2
 800b054:	fb91 f5f6 	sdiv	r5, r1, r6
 800b058:	fb06 1415 	mls	r4, r6, r5, r1
 800b05c:	3430      	adds	r4, #48	; 0x30
 800b05e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b062:	460c      	mov	r4, r1
 800b064:	2c63      	cmp	r4, #99	; 0x63
 800b066:	f102 32ff 	add.w	r2, r2, #4294967295
 800b06a:	4629      	mov	r1, r5
 800b06c:	dcf1      	bgt.n	800b052 <__exponent+0x22>
 800b06e:	3130      	adds	r1, #48	; 0x30
 800b070:	f1ac 0402 	sub.w	r4, ip, #2
 800b074:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b078:	1c41      	adds	r1, r0, #1
 800b07a:	4622      	mov	r2, r4
 800b07c:	42ba      	cmp	r2, r7
 800b07e:	d30a      	bcc.n	800b096 <__exponent+0x66>
 800b080:	f10d 0209 	add.w	r2, sp, #9
 800b084:	eba2 020c 	sub.w	r2, r2, ip
 800b088:	42bc      	cmp	r4, r7
 800b08a:	bf88      	it	hi
 800b08c:	2200      	movhi	r2, #0
 800b08e:	4413      	add	r3, r2
 800b090:	1a18      	subs	r0, r3, r0
 800b092:	b003      	add	sp, #12
 800b094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b096:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b09a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b09e:	e7ed      	b.n	800b07c <__exponent+0x4c>
 800b0a0:	2330      	movs	r3, #48	; 0x30
 800b0a2:	3130      	adds	r1, #48	; 0x30
 800b0a4:	7083      	strb	r3, [r0, #2]
 800b0a6:	70c1      	strb	r1, [r0, #3]
 800b0a8:	1d03      	adds	r3, r0, #4
 800b0aa:	e7f1      	b.n	800b090 <__exponent+0x60>

0800b0ac <_printf_float>:
 800b0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0b0:	ed2d 8b02 	vpush	{d8}
 800b0b4:	b08d      	sub	sp, #52	; 0x34
 800b0b6:	460c      	mov	r4, r1
 800b0b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b0bc:	4616      	mov	r6, r2
 800b0be:	461f      	mov	r7, r3
 800b0c0:	4605      	mov	r5, r0
 800b0c2:	f000 fceb 	bl	800ba9c <_localeconv_r>
 800b0c6:	f8d0 a000 	ldr.w	sl, [r0]
 800b0ca:	4650      	mov	r0, sl
 800b0cc:	f7f5 f8e0 	bl	8000290 <strlen>
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	930a      	str	r3, [sp, #40]	; 0x28
 800b0d4:	6823      	ldr	r3, [r4, #0]
 800b0d6:	9305      	str	r3, [sp, #20]
 800b0d8:	f8d8 3000 	ldr.w	r3, [r8]
 800b0dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b0e0:	3307      	adds	r3, #7
 800b0e2:	f023 0307 	bic.w	r3, r3, #7
 800b0e6:	f103 0208 	add.w	r2, r3, #8
 800b0ea:	f8c8 2000 	str.w	r2, [r8]
 800b0ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b0f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b0f6:	9307      	str	r3, [sp, #28]
 800b0f8:	f8cd 8018 	str.w	r8, [sp, #24]
 800b0fc:	ee08 0a10 	vmov	s16, r0
 800b100:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b104:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b108:	4b9e      	ldr	r3, [pc, #632]	; (800b384 <_printf_float+0x2d8>)
 800b10a:	f04f 32ff 	mov.w	r2, #4294967295
 800b10e:	f7f5 fd1d 	bl	8000b4c <__aeabi_dcmpun>
 800b112:	bb88      	cbnz	r0, 800b178 <_printf_float+0xcc>
 800b114:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b118:	4b9a      	ldr	r3, [pc, #616]	; (800b384 <_printf_float+0x2d8>)
 800b11a:	f04f 32ff 	mov.w	r2, #4294967295
 800b11e:	f7f5 fcf7 	bl	8000b10 <__aeabi_dcmple>
 800b122:	bb48      	cbnz	r0, 800b178 <_printf_float+0xcc>
 800b124:	2200      	movs	r2, #0
 800b126:	2300      	movs	r3, #0
 800b128:	4640      	mov	r0, r8
 800b12a:	4649      	mov	r1, r9
 800b12c:	f7f5 fce6 	bl	8000afc <__aeabi_dcmplt>
 800b130:	b110      	cbz	r0, 800b138 <_printf_float+0x8c>
 800b132:	232d      	movs	r3, #45	; 0x2d
 800b134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b138:	4a93      	ldr	r2, [pc, #588]	; (800b388 <_printf_float+0x2dc>)
 800b13a:	4b94      	ldr	r3, [pc, #592]	; (800b38c <_printf_float+0x2e0>)
 800b13c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b140:	bf94      	ite	ls
 800b142:	4690      	movls	r8, r2
 800b144:	4698      	movhi	r8, r3
 800b146:	2303      	movs	r3, #3
 800b148:	6123      	str	r3, [r4, #16]
 800b14a:	9b05      	ldr	r3, [sp, #20]
 800b14c:	f023 0304 	bic.w	r3, r3, #4
 800b150:	6023      	str	r3, [r4, #0]
 800b152:	f04f 0900 	mov.w	r9, #0
 800b156:	9700      	str	r7, [sp, #0]
 800b158:	4633      	mov	r3, r6
 800b15a:	aa0b      	add	r2, sp, #44	; 0x2c
 800b15c:	4621      	mov	r1, r4
 800b15e:	4628      	mov	r0, r5
 800b160:	f000 f9da 	bl	800b518 <_printf_common>
 800b164:	3001      	adds	r0, #1
 800b166:	f040 8090 	bne.w	800b28a <_printf_float+0x1de>
 800b16a:	f04f 30ff 	mov.w	r0, #4294967295
 800b16e:	b00d      	add	sp, #52	; 0x34
 800b170:	ecbd 8b02 	vpop	{d8}
 800b174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b178:	4642      	mov	r2, r8
 800b17a:	464b      	mov	r3, r9
 800b17c:	4640      	mov	r0, r8
 800b17e:	4649      	mov	r1, r9
 800b180:	f7f5 fce4 	bl	8000b4c <__aeabi_dcmpun>
 800b184:	b140      	cbz	r0, 800b198 <_printf_float+0xec>
 800b186:	464b      	mov	r3, r9
 800b188:	2b00      	cmp	r3, #0
 800b18a:	bfbc      	itt	lt
 800b18c:	232d      	movlt	r3, #45	; 0x2d
 800b18e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b192:	4a7f      	ldr	r2, [pc, #508]	; (800b390 <_printf_float+0x2e4>)
 800b194:	4b7f      	ldr	r3, [pc, #508]	; (800b394 <_printf_float+0x2e8>)
 800b196:	e7d1      	b.n	800b13c <_printf_float+0x90>
 800b198:	6863      	ldr	r3, [r4, #4]
 800b19a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b19e:	9206      	str	r2, [sp, #24]
 800b1a0:	1c5a      	adds	r2, r3, #1
 800b1a2:	d13f      	bne.n	800b224 <_printf_float+0x178>
 800b1a4:	2306      	movs	r3, #6
 800b1a6:	6063      	str	r3, [r4, #4]
 800b1a8:	9b05      	ldr	r3, [sp, #20]
 800b1aa:	6861      	ldr	r1, [r4, #4]
 800b1ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	9303      	str	r3, [sp, #12]
 800b1b4:	ab0a      	add	r3, sp, #40	; 0x28
 800b1b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b1ba:	ab09      	add	r3, sp, #36	; 0x24
 800b1bc:	ec49 8b10 	vmov	d0, r8, r9
 800b1c0:	9300      	str	r3, [sp, #0]
 800b1c2:	6022      	str	r2, [r4, #0]
 800b1c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b1c8:	4628      	mov	r0, r5
 800b1ca:	f7ff fecf 	bl	800af6c <__cvt>
 800b1ce:	9b06      	ldr	r3, [sp, #24]
 800b1d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b1d2:	2b47      	cmp	r3, #71	; 0x47
 800b1d4:	4680      	mov	r8, r0
 800b1d6:	d108      	bne.n	800b1ea <_printf_float+0x13e>
 800b1d8:	1cc8      	adds	r0, r1, #3
 800b1da:	db02      	blt.n	800b1e2 <_printf_float+0x136>
 800b1dc:	6863      	ldr	r3, [r4, #4]
 800b1de:	4299      	cmp	r1, r3
 800b1e0:	dd41      	ble.n	800b266 <_printf_float+0x1ba>
 800b1e2:	f1ab 0302 	sub.w	r3, fp, #2
 800b1e6:	fa5f fb83 	uxtb.w	fp, r3
 800b1ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b1ee:	d820      	bhi.n	800b232 <_printf_float+0x186>
 800b1f0:	3901      	subs	r1, #1
 800b1f2:	465a      	mov	r2, fp
 800b1f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b1f8:	9109      	str	r1, [sp, #36]	; 0x24
 800b1fa:	f7ff ff19 	bl	800b030 <__exponent>
 800b1fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b200:	1813      	adds	r3, r2, r0
 800b202:	2a01      	cmp	r2, #1
 800b204:	4681      	mov	r9, r0
 800b206:	6123      	str	r3, [r4, #16]
 800b208:	dc02      	bgt.n	800b210 <_printf_float+0x164>
 800b20a:	6822      	ldr	r2, [r4, #0]
 800b20c:	07d2      	lsls	r2, r2, #31
 800b20e:	d501      	bpl.n	800b214 <_printf_float+0x168>
 800b210:	3301      	adds	r3, #1
 800b212:	6123      	str	r3, [r4, #16]
 800b214:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d09c      	beq.n	800b156 <_printf_float+0xaa>
 800b21c:	232d      	movs	r3, #45	; 0x2d
 800b21e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b222:	e798      	b.n	800b156 <_printf_float+0xaa>
 800b224:	9a06      	ldr	r2, [sp, #24]
 800b226:	2a47      	cmp	r2, #71	; 0x47
 800b228:	d1be      	bne.n	800b1a8 <_printf_float+0xfc>
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d1bc      	bne.n	800b1a8 <_printf_float+0xfc>
 800b22e:	2301      	movs	r3, #1
 800b230:	e7b9      	b.n	800b1a6 <_printf_float+0xfa>
 800b232:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b236:	d118      	bne.n	800b26a <_printf_float+0x1be>
 800b238:	2900      	cmp	r1, #0
 800b23a:	6863      	ldr	r3, [r4, #4]
 800b23c:	dd0b      	ble.n	800b256 <_printf_float+0x1aa>
 800b23e:	6121      	str	r1, [r4, #16]
 800b240:	b913      	cbnz	r3, 800b248 <_printf_float+0x19c>
 800b242:	6822      	ldr	r2, [r4, #0]
 800b244:	07d0      	lsls	r0, r2, #31
 800b246:	d502      	bpl.n	800b24e <_printf_float+0x1a2>
 800b248:	3301      	adds	r3, #1
 800b24a:	440b      	add	r3, r1
 800b24c:	6123      	str	r3, [r4, #16]
 800b24e:	65a1      	str	r1, [r4, #88]	; 0x58
 800b250:	f04f 0900 	mov.w	r9, #0
 800b254:	e7de      	b.n	800b214 <_printf_float+0x168>
 800b256:	b913      	cbnz	r3, 800b25e <_printf_float+0x1b2>
 800b258:	6822      	ldr	r2, [r4, #0]
 800b25a:	07d2      	lsls	r2, r2, #31
 800b25c:	d501      	bpl.n	800b262 <_printf_float+0x1b6>
 800b25e:	3302      	adds	r3, #2
 800b260:	e7f4      	b.n	800b24c <_printf_float+0x1a0>
 800b262:	2301      	movs	r3, #1
 800b264:	e7f2      	b.n	800b24c <_printf_float+0x1a0>
 800b266:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b26a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b26c:	4299      	cmp	r1, r3
 800b26e:	db05      	blt.n	800b27c <_printf_float+0x1d0>
 800b270:	6823      	ldr	r3, [r4, #0]
 800b272:	6121      	str	r1, [r4, #16]
 800b274:	07d8      	lsls	r0, r3, #31
 800b276:	d5ea      	bpl.n	800b24e <_printf_float+0x1a2>
 800b278:	1c4b      	adds	r3, r1, #1
 800b27a:	e7e7      	b.n	800b24c <_printf_float+0x1a0>
 800b27c:	2900      	cmp	r1, #0
 800b27e:	bfd4      	ite	le
 800b280:	f1c1 0202 	rsble	r2, r1, #2
 800b284:	2201      	movgt	r2, #1
 800b286:	4413      	add	r3, r2
 800b288:	e7e0      	b.n	800b24c <_printf_float+0x1a0>
 800b28a:	6823      	ldr	r3, [r4, #0]
 800b28c:	055a      	lsls	r2, r3, #21
 800b28e:	d407      	bmi.n	800b2a0 <_printf_float+0x1f4>
 800b290:	6923      	ldr	r3, [r4, #16]
 800b292:	4642      	mov	r2, r8
 800b294:	4631      	mov	r1, r6
 800b296:	4628      	mov	r0, r5
 800b298:	47b8      	blx	r7
 800b29a:	3001      	adds	r0, #1
 800b29c:	d12c      	bne.n	800b2f8 <_printf_float+0x24c>
 800b29e:	e764      	b.n	800b16a <_printf_float+0xbe>
 800b2a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b2a4:	f240 80e0 	bls.w	800b468 <_printf_float+0x3bc>
 800b2a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	f7f5 fc1a 	bl	8000ae8 <__aeabi_dcmpeq>
 800b2b4:	2800      	cmp	r0, #0
 800b2b6:	d034      	beq.n	800b322 <_printf_float+0x276>
 800b2b8:	4a37      	ldr	r2, [pc, #220]	; (800b398 <_printf_float+0x2ec>)
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	4631      	mov	r1, r6
 800b2be:	4628      	mov	r0, r5
 800b2c0:	47b8      	blx	r7
 800b2c2:	3001      	adds	r0, #1
 800b2c4:	f43f af51 	beq.w	800b16a <_printf_float+0xbe>
 800b2c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	db02      	blt.n	800b2d6 <_printf_float+0x22a>
 800b2d0:	6823      	ldr	r3, [r4, #0]
 800b2d2:	07d8      	lsls	r0, r3, #31
 800b2d4:	d510      	bpl.n	800b2f8 <_printf_float+0x24c>
 800b2d6:	ee18 3a10 	vmov	r3, s16
 800b2da:	4652      	mov	r2, sl
 800b2dc:	4631      	mov	r1, r6
 800b2de:	4628      	mov	r0, r5
 800b2e0:	47b8      	blx	r7
 800b2e2:	3001      	adds	r0, #1
 800b2e4:	f43f af41 	beq.w	800b16a <_printf_float+0xbe>
 800b2e8:	f04f 0800 	mov.w	r8, #0
 800b2ec:	f104 091a 	add.w	r9, r4, #26
 800b2f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2f2:	3b01      	subs	r3, #1
 800b2f4:	4543      	cmp	r3, r8
 800b2f6:	dc09      	bgt.n	800b30c <_printf_float+0x260>
 800b2f8:	6823      	ldr	r3, [r4, #0]
 800b2fa:	079b      	lsls	r3, r3, #30
 800b2fc:	f100 8107 	bmi.w	800b50e <_printf_float+0x462>
 800b300:	68e0      	ldr	r0, [r4, #12]
 800b302:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b304:	4298      	cmp	r0, r3
 800b306:	bfb8      	it	lt
 800b308:	4618      	movlt	r0, r3
 800b30a:	e730      	b.n	800b16e <_printf_float+0xc2>
 800b30c:	2301      	movs	r3, #1
 800b30e:	464a      	mov	r2, r9
 800b310:	4631      	mov	r1, r6
 800b312:	4628      	mov	r0, r5
 800b314:	47b8      	blx	r7
 800b316:	3001      	adds	r0, #1
 800b318:	f43f af27 	beq.w	800b16a <_printf_float+0xbe>
 800b31c:	f108 0801 	add.w	r8, r8, #1
 800b320:	e7e6      	b.n	800b2f0 <_printf_float+0x244>
 800b322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b324:	2b00      	cmp	r3, #0
 800b326:	dc39      	bgt.n	800b39c <_printf_float+0x2f0>
 800b328:	4a1b      	ldr	r2, [pc, #108]	; (800b398 <_printf_float+0x2ec>)
 800b32a:	2301      	movs	r3, #1
 800b32c:	4631      	mov	r1, r6
 800b32e:	4628      	mov	r0, r5
 800b330:	47b8      	blx	r7
 800b332:	3001      	adds	r0, #1
 800b334:	f43f af19 	beq.w	800b16a <_printf_float+0xbe>
 800b338:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b33c:	4313      	orrs	r3, r2
 800b33e:	d102      	bne.n	800b346 <_printf_float+0x29a>
 800b340:	6823      	ldr	r3, [r4, #0]
 800b342:	07d9      	lsls	r1, r3, #31
 800b344:	d5d8      	bpl.n	800b2f8 <_printf_float+0x24c>
 800b346:	ee18 3a10 	vmov	r3, s16
 800b34a:	4652      	mov	r2, sl
 800b34c:	4631      	mov	r1, r6
 800b34e:	4628      	mov	r0, r5
 800b350:	47b8      	blx	r7
 800b352:	3001      	adds	r0, #1
 800b354:	f43f af09 	beq.w	800b16a <_printf_float+0xbe>
 800b358:	f04f 0900 	mov.w	r9, #0
 800b35c:	f104 0a1a 	add.w	sl, r4, #26
 800b360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b362:	425b      	negs	r3, r3
 800b364:	454b      	cmp	r3, r9
 800b366:	dc01      	bgt.n	800b36c <_printf_float+0x2c0>
 800b368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b36a:	e792      	b.n	800b292 <_printf_float+0x1e6>
 800b36c:	2301      	movs	r3, #1
 800b36e:	4652      	mov	r2, sl
 800b370:	4631      	mov	r1, r6
 800b372:	4628      	mov	r0, r5
 800b374:	47b8      	blx	r7
 800b376:	3001      	adds	r0, #1
 800b378:	f43f aef7 	beq.w	800b16a <_printf_float+0xbe>
 800b37c:	f109 0901 	add.w	r9, r9, #1
 800b380:	e7ee      	b.n	800b360 <_printf_float+0x2b4>
 800b382:	bf00      	nop
 800b384:	7fefffff 	.word	0x7fefffff
 800b388:	0800dd54 	.word	0x0800dd54
 800b38c:	0800dd58 	.word	0x0800dd58
 800b390:	0800dd5c 	.word	0x0800dd5c
 800b394:	0800dd60 	.word	0x0800dd60
 800b398:	0800dd64 	.word	0x0800dd64
 800b39c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b39e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	bfa8      	it	ge
 800b3a4:	461a      	movge	r2, r3
 800b3a6:	2a00      	cmp	r2, #0
 800b3a8:	4691      	mov	r9, r2
 800b3aa:	dc37      	bgt.n	800b41c <_printf_float+0x370>
 800b3ac:	f04f 0b00 	mov.w	fp, #0
 800b3b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b3b4:	f104 021a 	add.w	r2, r4, #26
 800b3b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b3ba:	9305      	str	r3, [sp, #20]
 800b3bc:	eba3 0309 	sub.w	r3, r3, r9
 800b3c0:	455b      	cmp	r3, fp
 800b3c2:	dc33      	bgt.n	800b42c <_printf_float+0x380>
 800b3c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b3c8:	429a      	cmp	r2, r3
 800b3ca:	db3b      	blt.n	800b444 <_printf_float+0x398>
 800b3cc:	6823      	ldr	r3, [r4, #0]
 800b3ce:	07da      	lsls	r2, r3, #31
 800b3d0:	d438      	bmi.n	800b444 <_printf_float+0x398>
 800b3d2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b3d6:	eba2 0903 	sub.w	r9, r2, r3
 800b3da:	9b05      	ldr	r3, [sp, #20]
 800b3dc:	1ad2      	subs	r2, r2, r3
 800b3de:	4591      	cmp	r9, r2
 800b3e0:	bfa8      	it	ge
 800b3e2:	4691      	movge	r9, r2
 800b3e4:	f1b9 0f00 	cmp.w	r9, #0
 800b3e8:	dc35      	bgt.n	800b456 <_printf_float+0x3aa>
 800b3ea:	f04f 0800 	mov.w	r8, #0
 800b3ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b3f2:	f104 0a1a 	add.w	sl, r4, #26
 800b3f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b3fa:	1a9b      	subs	r3, r3, r2
 800b3fc:	eba3 0309 	sub.w	r3, r3, r9
 800b400:	4543      	cmp	r3, r8
 800b402:	f77f af79 	ble.w	800b2f8 <_printf_float+0x24c>
 800b406:	2301      	movs	r3, #1
 800b408:	4652      	mov	r2, sl
 800b40a:	4631      	mov	r1, r6
 800b40c:	4628      	mov	r0, r5
 800b40e:	47b8      	blx	r7
 800b410:	3001      	adds	r0, #1
 800b412:	f43f aeaa 	beq.w	800b16a <_printf_float+0xbe>
 800b416:	f108 0801 	add.w	r8, r8, #1
 800b41a:	e7ec      	b.n	800b3f6 <_printf_float+0x34a>
 800b41c:	4613      	mov	r3, r2
 800b41e:	4631      	mov	r1, r6
 800b420:	4642      	mov	r2, r8
 800b422:	4628      	mov	r0, r5
 800b424:	47b8      	blx	r7
 800b426:	3001      	adds	r0, #1
 800b428:	d1c0      	bne.n	800b3ac <_printf_float+0x300>
 800b42a:	e69e      	b.n	800b16a <_printf_float+0xbe>
 800b42c:	2301      	movs	r3, #1
 800b42e:	4631      	mov	r1, r6
 800b430:	4628      	mov	r0, r5
 800b432:	9205      	str	r2, [sp, #20]
 800b434:	47b8      	blx	r7
 800b436:	3001      	adds	r0, #1
 800b438:	f43f ae97 	beq.w	800b16a <_printf_float+0xbe>
 800b43c:	9a05      	ldr	r2, [sp, #20]
 800b43e:	f10b 0b01 	add.w	fp, fp, #1
 800b442:	e7b9      	b.n	800b3b8 <_printf_float+0x30c>
 800b444:	ee18 3a10 	vmov	r3, s16
 800b448:	4652      	mov	r2, sl
 800b44a:	4631      	mov	r1, r6
 800b44c:	4628      	mov	r0, r5
 800b44e:	47b8      	blx	r7
 800b450:	3001      	adds	r0, #1
 800b452:	d1be      	bne.n	800b3d2 <_printf_float+0x326>
 800b454:	e689      	b.n	800b16a <_printf_float+0xbe>
 800b456:	9a05      	ldr	r2, [sp, #20]
 800b458:	464b      	mov	r3, r9
 800b45a:	4442      	add	r2, r8
 800b45c:	4631      	mov	r1, r6
 800b45e:	4628      	mov	r0, r5
 800b460:	47b8      	blx	r7
 800b462:	3001      	adds	r0, #1
 800b464:	d1c1      	bne.n	800b3ea <_printf_float+0x33e>
 800b466:	e680      	b.n	800b16a <_printf_float+0xbe>
 800b468:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b46a:	2a01      	cmp	r2, #1
 800b46c:	dc01      	bgt.n	800b472 <_printf_float+0x3c6>
 800b46e:	07db      	lsls	r3, r3, #31
 800b470:	d53a      	bpl.n	800b4e8 <_printf_float+0x43c>
 800b472:	2301      	movs	r3, #1
 800b474:	4642      	mov	r2, r8
 800b476:	4631      	mov	r1, r6
 800b478:	4628      	mov	r0, r5
 800b47a:	47b8      	blx	r7
 800b47c:	3001      	adds	r0, #1
 800b47e:	f43f ae74 	beq.w	800b16a <_printf_float+0xbe>
 800b482:	ee18 3a10 	vmov	r3, s16
 800b486:	4652      	mov	r2, sl
 800b488:	4631      	mov	r1, r6
 800b48a:	4628      	mov	r0, r5
 800b48c:	47b8      	blx	r7
 800b48e:	3001      	adds	r0, #1
 800b490:	f43f ae6b 	beq.w	800b16a <_printf_float+0xbe>
 800b494:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b498:	2200      	movs	r2, #0
 800b49a:	2300      	movs	r3, #0
 800b49c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b4a0:	f7f5 fb22 	bl	8000ae8 <__aeabi_dcmpeq>
 800b4a4:	b9d8      	cbnz	r0, 800b4de <_printf_float+0x432>
 800b4a6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b4aa:	f108 0201 	add.w	r2, r8, #1
 800b4ae:	4631      	mov	r1, r6
 800b4b0:	4628      	mov	r0, r5
 800b4b2:	47b8      	blx	r7
 800b4b4:	3001      	adds	r0, #1
 800b4b6:	d10e      	bne.n	800b4d6 <_printf_float+0x42a>
 800b4b8:	e657      	b.n	800b16a <_printf_float+0xbe>
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	4652      	mov	r2, sl
 800b4be:	4631      	mov	r1, r6
 800b4c0:	4628      	mov	r0, r5
 800b4c2:	47b8      	blx	r7
 800b4c4:	3001      	adds	r0, #1
 800b4c6:	f43f ae50 	beq.w	800b16a <_printf_float+0xbe>
 800b4ca:	f108 0801 	add.w	r8, r8, #1
 800b4ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4d0:	3b01      	subs	r3, #1
 800b4d2:	4543      	cmp	r3, r8
 800b4d4:	dcf1      	bgt.n	800b4ba <_printf_float+0x40e>
 800b4d6:	464b      	mov	r3, r9
 800b4d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b4dc:	e6da      	b.n	800b294 <_printf_float+0x1e8>
 800b4de:	f04f 0800 	mov.w	r8, #0
 800b4e2:	f104 0a1a 	add.w	sl, r4, #26
 800b4e6:	e7f2      	b.n	800b4ce <_printf_float+0x422>
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	4642      	mov	r2, r8
 800b4ec:	e7df      	b.n	800b4ae <_printf_float+0x402>
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	464a      	mov	r2, r9
 800b4f2:	4631      	mov	r1, r6
 800b4f4:	4628      	mov	r0, r5
 800b4f6:	47b8      	blx	r7
 800b4f8:	3001      	adds	r0, #1
 800b4fa:	f43f ae36 	beq.w	800b16a <_printf_float+0xbe>
 800b4fe:	f108 0801 	add.w	r8, r8, #1
 800b502:	68e3      	ldr	r3, [r4, #12]
 800b504:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b506:	1a5b      	subs	r3, r3, r1
 800b508:	4543      	cmp	r3, r8
 800b50a:	dcf0      	bgt.n	800b4ee <_printf_float+0x442>
 800b50c:	e6f8      	b.n	800b300 <_printf_float+0x254>
 800b50e:	f04f 0800 	mov.w	r8, #0
 800b512:	f104 0919 	add.w	r9, r4, #25
 800b516:	e7f4      	b.n	800b502 <_printf_float+0x456>

0800b518 <_printf_common>:
 800b518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b51c:	4616      	mov	r6, r2
 800b51e:	4699      	mov	r9, r3
 800b520:	688a      	ldr	r2, [r1, #8]
 800b522:	690b      	ldr	r3, [r1, #16]
 800b524:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b528:	4293      	cmp	r3, r2
 800b52a:	bfb8      	it	lt
 800b52c:	4613      	movlt	r3, r2
 800b52e:	6033      	str	r3, [r6, #0]
 800b530:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b534:	4607      	mov	r7, r0
 800b536:	460c      	mov	r4, r1
 800b538:	b10a      	cbz	r2, 800b53e <_printf_common+0x26>
 800b53a:	3301      	adds	r3, #1
 800b53c:	6033      	str	r3, [r6, #0]
 800b53e:	6823      	ldr	r3, [r4, #0]
 800b540:	0699      	lsls	r1, r3, #26
 800b542:	bf42      	ittt	mi
 800b544:	6833      	ldrmi	r3, [r6, #0]
 800b546:	3302      	addmi	r3, #2
 800b548:	6033      	strmi	r3, [r6, #0]
 800b54a:	6825      	ldr	r5, [r4, #0]
 800b54c:	f015 0506 	ands.w	r5, r5, #6
 800b550:	d106      	bne.n	800b560 <_printf_common+0x48>
 800b552:	f104 0a19 	add.w	sl, r4, #25
 800b556:	68e3      	ldr	r3, [r4, #12]
 800b558:	6832      	ldr	r2, [r6, #0]
 800b55a:	1a9b      	subs	r3, r3, r2
 800b55c:	42ab      	cmp	r3, r5
 800b55e:	dc26      	bgt.n	800b5ae <_printf_common+0x96>
 800b560:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b564:	1e13      	subs	r3, r2, #0
 800b566:	6822      	ldr	r2, [r4, #0]
 800b568:	bf18      	it	ne
 800b56a:	2301      	movne	r3, #1
 800b56c:	0692      	lsls	r2, r2, #26
 800b56e:	d42b      	bmi.n	800b5c8 <_printf_common+0xb0>
 800b570:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b574:	4649      	mov	r1, r9
 800b576:	4638      	mov	r0, r7
 800b578:	47c0      	blx	r8
 800b57a:	3001      	adds	r0, #1
 800b57c:	d01e      	beq.n	800b5bc <_printf_common+0xa4>
 800b57e:	6823      	ldr	r3, [r4, #0]
 800b580:	6922      	ldr	r2, [r4, #16]
 800b582:	f003 0306 	and.w	r3, r3, #6
 800b586:	2b04      	cmp	r3, #4
 800b588:	bf02      	ittt	eq
 800b58a:	68e5      	ldreq	r5, [r4, #12]
 800b58c:	6833      	ldreq	r3, [r6, #0]
 800b58e:	1aed      	subeq	r5, r5, r3
 800b590:	68a3      	ldr	r3, [r4, #8]
 800b592:	bf0c      	ite	eq
 800b594:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b598:	2500      	movne	r5, #0
 800b59a:	4293      	cmp	r3, r2
 800b59c:	bfc4      	itt	gt
 800b59e:	1a9b      	subgt	r3, r3, r2
 800b5a0:	18ed      	addgt	r5, r5, r3
 800b5a2:	2600      	movs	r6, #0
 800b5a4:	341a      	adds	r4, #26
 800b5a6:	42b5      	cmp	r5, r6
 800b5a8:	d11a      	bne.n	800b5e0 <_printf_common+0xc8>
 800b5aa:	2000      	movs	r0, #0
 800b5ac:	e008      	b.n	800b5c0 <_printf_common+0xa8>
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	4652      	mov	r2, sl
 800b5b2:	4649      	mov	r1, r9
 800b5b4:	4638      	mov	r0, r7
 800b5b6:	47c0      	blx	r8
 800b5b8:	3001      	adds	r0, #1
 800b5ba:	d103      	bne.n	800b5c4 <_printf_common+0xac>
 800b5bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b5c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5c4:	3501      	adds	r5, #1
 800b5c6:	e7c6      	b.n	800b556 <_printf_common+0x3e>
 800b5c8:	18e1      	adds	r1, r4, r3
 800b5ca:	1c5a      	adds	r2, r3, #1
 800b5cc:	2030      	movs	r0, #48	; 0x30
 800b5ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b5d2:	4422      	add	r2, r4
 800b5d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b5d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b5dc:	3302      	adds	r3, #2
 800b5de:	e7c7      	b.n	800b570 <_printf_common+0x58>
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	4622      	mov	r2, r4
 800b5e4:	4649      	mov	r1, r9
 800b5e6:	4638      	mov	r0, r7
 800b5e8:	47c0      	blx	r8
 800b5ea:	3001      	adds	r0, #1
 800b5ec:	d0e6      	beq.n	800b5bc <_printf_common+0xa4>
 800b5ee:	3601      	adds	r6, #1
 800b5f0:	e7d9      	b.n	800b5a6 <_printf_common+0x8e>
	...

0800b5f4 <_printf_i>:
 800b5f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b5f8:	7e0f      	ldrb	r7, [r1, #24]
 800b5fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b5fc:	2f78      	cmp	r7, #120	; 0x78
 800b5fe:	4691      	mov	r9, r2
 800b600:	4680      	mov	r8, r0
 800b602:	460c      	mov	r4, r1
 800b604:	469a      	mov	sl, r3
 800b606:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b60a:	d807      	bhi.n	800b61c <_printf_i+0x28>
 800b60c:	2f62      	cmp	r7, #98	; 0x62
 800b60e:	d80a      	bhi.n	800b626 <_printf_i+0x32>
 800b610:	2f00      	cmp	r7, #0
 800b612:	f000 80d4 	beq.w	800b7be <_printf_i+0x1ca>
 800b616:	2f58      	cmp	r7, #88	; 0x58
 800b618:	f000 80c0 	beq.w	800b79c <_printf_i+0x1a8>
 800b61c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b620:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b624:	e03a      	b.n	800b69c <_printf_i+0xa8>
 800b626:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b62a:	2b15      	cmp	r3, #21
 800b62c:	d8f6      	bhi.n	800b61c <_printf_i+0x28>
 800b62e:	a101      	add	r1, pc, #4	; (adr r1, 800b634 <_printf_i+0x40>)
 800b630:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b634:	0800b68d 	.word	0x0800b68d
 800b638:	0800b6a1 	.word	0x0800b6a1
 800b63c:	0800b61d 	.word	0x0800b61d
 800b640:	0800b61d 	.word	0x0800b61d
 800b644:	0800b61d 	.word	0x0800b61d
 800b648:	0800b61d 	.word	0x0800b61d
 800b64c:	0800b6a1 	.word	0x0800b6a1
 800b650:	0800b61d 	.word	0x0800b61d
 800b654:	0800b61d 	.word	0x0800b61d
 800b658:	0800b61d 	.word	0x0800b61d
 800b65c:	0800b61d 	.word	0x0800b61d
 800b660:	0800b7a5 	.word	0x0800b7a5
 800b664:	0800b6cd 	.word	0x0800b6cd
 800b668:	0800b75f 	.word	0x0800b75f
 800b66c:	0800b61d 	.word	0x0800b61d
 800b670:	0800b61d 	.word	0x0800b61d
 800b674:	0800b7c7 	.word	0x0800b7c7
 800b678:	0800b61d 	.word	0x0800b61d
 800b67c:	0800b6cd 	.word	0x0800b6cd
 800b680:	0800b61d 	.word	0x0800b61d
 800b684:	0800b61d 	.word	0x0800b61d
 800b688:	0800b767 	.word	0x0800b767
 800b68c:	682b      	ldr	r3, [r5, #0]
 800b68e:	1d1a      	adds	r2, r3, #4
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	602a      	str	r2, [r5, #0]
 800b694:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b698:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b69c:	2301      	movs	r3, #1
 800b69e:	e09f      	b.n	800b7e0 <_printf_i+0x1ec>
 800b6a0:	6820      	ldr	r0, [r4, #0]
 800b6a2:	682b      	ldr	r3, [r5, #0]
 800b6a4:	0607      	lsls	r7, r0, #24
 800b6a6:	f103 0104 	add.w	r1, r3, #4
 800b6aa:	6029      	str	r1, [r5, #0]
 800b6ac:	d501      	bpl.n	800b6b2 <_printf_i+0xbe>
 800b6ae:	681e      	ldr	r6, [r3, #0]
 800b6b0:	e003      	b.n	800b6ba <_printf_i+0xc6>
 800b6b2:	0646      	lsls	r6, r0, #25
 800b6b4:	d5fb      	bpl.n	800b6ae <_printf_i+0xba>
 800b6b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b6ba:	2e00      	cmp	r6, #0
 800b6bc:	da03      	bge.n	800b6c6 <_printf_i+0xd2>
 800b6be:	232d      	movs	r3, #45	; 0x2d
 800b6c0:	4276      	negs	r6, r6
 800b6c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6c6:	485a      	ldr	r0, [pc, #360]	; (800b830 <_printf_i+0x23c>)
 800b6c8:	230a      	movs	r3, #10
 800b6ca:	e012      	b.n	800b6f2 <_printf_i+0xfe>
 800b6cc:	682b      	ldr	r3, [r5, #0]
 800b6ce:	6820      	ldr	r0, [r4, #0]
 800b6d0:	1d19      	adds	r1, r3, #4
 800b6d2:	6029      	str	r1, [r5, #0]
 800b6d4:	0605      	lsls	r5, r0, #24
 800b6d6:	d501      	bpl.n	800b6dc <_printf_i+0xe8>
 800b6d8:	681e      	ldr	r6, [r3, #0]
 800b6da:	e002      	b.n	800b6e2 <_printf_i+0xee>
 800b6dc:	0641      	lsls	r1, r0, #25
 800b6de:	d5fb      	bpl.n	800b6d8 <_printf_i+0xe4>
 800b6e0:	881e      	ldrh	r6, [r3, #0]
 800b6e2:	4853      	ldr	r0, [pc, #332]	; (800b830 <_printf_i+0x23c>)
 800b6e4:	2f6f      	cmp	r7, #111	; 0x6f
 800b6e6:	bf0c      	ite	eq
 800b6e8:	2308      	moveq	r3, #8
 800b6ea:	230a      	movne	r3, #10
 800b6ec:	2100      	movs	r1, #0
 800b6ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b6f2:	6865      	ldr	r5, [r4, #4]
 800b6f4:	60a5      	str	r5, [r4, #8]
 800b6f6:	2d00      	cmp	r5, #0
 800b6f8:	bfa2      	ittt	ge
 800b6fa:	6821      	ldrge	r1, [r4, #0]
 800b6fc:	f021 0104 	bicge.w	r1, r1, #4
 800b700:	6021      	strge	r1, [r4, #0]
 800b702:	b90e      	cbnz	r6, 800b708 <_printf_i+0x114>
 800b704:	2d00      	cmp	r5, #0
 800b706:	d04b      	beq.n	800b7a0 <_printf_i+0x1ac>
 800b708:	4615      	mov	r5, r2
 800b70a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b70e:	fb03 6711 	mls	r7, r3, r1, r6
 800b712:	5dc7      	ldrb	r7, [r0, r7]
 800b714:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b718:	4637      	mov	r7, r6
 800b71a:	42bb      	cmp	r3, r7
 800b71c:	460e      	mov	r6, r1
 800b71e:	d9f4      	bls.n	800b70a <_printf_i+0x116>
 800b720:	2b08      	cmp	r3, #8
 800b722:	d10b      	bne.n	800b73c <_printf_i+0x148>
 800b724:	6823      	ldr	r3, [r4, #0]
 800b726:	07de      	lsls	r6, r3, #31
 800b728:	d508      	bpl.n	800b73c <_printf_i+0x148>
 800b72a:	6923      	ldr	r3, [r4, #16]
 800b72c:	6861      	ldr	r1, [r4, #4]
 800b72e:	4299      	cmp	r1, r3
 800b730:	bfde      	ittt	le
 800b732:	2330      	movle	r3, #48	; 0x30
 800b734:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b738:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b73c:	1b52      	subs	r2, r2, r5
 800b73e:	6122      	str	r2, [r4, #16]
 800b740:	f8cd a000 	str.w	sl, [sp]
 800b744:	464b      	mov	r3, r9
 800b746:	aa03      	add	r2, sp, #12
 800b748:	4621      	mov	r1, r4
 800b74a:	4640      	mov	r0, r8
 800b74c:	f7ff fee4 	bl	800b518 <_printf_common>
 800b750:	3001      	adds	r0, #1
 800b752:	d14a      	bne.n	800b7ea <_printf_i+0x1f6>
 800b754:	f04f 30ff 	mov.w	r0, #4294967295
 800b758:	b004      	add	sp, #16
 800b75a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b75e:	6823      	ldr	r3, [r4, #0]
 800b760:	f043 0320 	orr.w	r3, r3, #32
 800b764:	6023      	str	r3, [r4, #0]
 800b766:	4833      	ldr	r0, [pc, #204]	; (800b834 <_printf_i+0x240>)
 800b768:	2778      	movs	r7, #120	; 0x78
 800b76a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b76e:	6823      	ldr	r3, [r4, #0]
 800b770:	6829      	ldr	r1, [r5, #0]
 800b772:	061f      	lsls	r7, r3, #24
 800b774:	f851 6b04 	ldr.w	r6, [r1], #4
 800b778:	d402      	bmi.n	800b780 <_printf_i+0x18c>
 800b77a:	065f      	lsls	r7, r3, #25
 800b77c:	bf48      	it	mi
 800b77e:	b2b6      	uxthmi	r6, r6
 800b780:	07df      	lsls	r7, r3, #31
 800b782:	bf48      	it	mi
 800b784:	f043 0320 	orrmi.w	r3, r3, #32
 800b788:	6029      	str	r1, [r5, #0]
 800b78a:	bf48      	it	mi
 800b78c:	6023      	strmi	r3, [r4, #0]
 800b78e:	b91e      	cbnz	r6, 800b798 <_printf_i+0x1a4>
 800b790:	6823      	ldr	r3, [r4, #0]
 800b792:	f023 0320 	bic.w	r3, r3, #32
 800b796:	6023      	str	r3, [r4, #0]
 800b798:	2310      	movs	r3, #16
 800b79a:	e7a7      	b.n	800b6ec <_printf_i+0xf8>
 800b79c:	4824      	ldr	r0, [pc, #144]	; (800b830 <_printf_i+0x23c>)
 800b79e:	e7e4      	b.n	800b76a <_printf_i+0x176>
 800b7a0:	4615      	mov	r5, r2
 800b7a2:	e7bd      	b.n	800b720 <_printf_i+0x12c>
 800b7a4:	682b      	ldr	r3, [r5, #0]
 800b7a6:	6826      	ldr	r6, [r4, #0]
 800b7a8:	6961      	ldr	r1, [r4, #20]
 800b7aa:	1d18      	adds	r0, r3, #4
 800b7ac:	6028      	str	r0, [r5, #0]
 800b7ae:	0635      	lsls	r5, r6, #24
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	d501      	bpl.n	800b7b8 <_printf_i+0x1c4>
 800b7b4:	6019      	str	r1, [r3, #0]
 800b7b6:	e002      	b.n	800b7be <_printf_i+0x1ca>
 800b7b8:	0670      	lsls	r0, r6, #25
 800b7ba:	d5fb      	bpl.n	800b7b4 <_printf_i+0x1c0>
 800b7bc:	8019      	strh	r1, [r3, #0]
 800b7be:	2300      	movs	r3, #0
 800b7c0:	6123      	str	r3, [r4, #16]
 800b7c2:	4615      	mov	r5, r2
 800b7c4:	e7bc      	b.n	800b740 <_printf_i+0x14c>
 800b7c6:	682b      	ldr	r3, [r5, #0]
 800b7c8:	1d1a      	adds	r2, r3, #4
 800b7ca:	602a      	str	r2, [r5, #0]
 800b7cc:	681d      	ldr	r5, [r3, #0]
 800b7ce:	6862      	ldr	r2, [r4, #4]
 800b7d0:	2100      	movs	r1, #0
 800b7d2:	4628      	mov	r0, r5
 800b7d4:	f7f4 fd0c 	bl	80001f0 <memchr>
 800b7d8:	b108      	cbz	r0, 800b7de <_printf_i+0x1ea>
 800b7da:	1b40      	subs	r0, r0, r5
 800b7dc:	6060      	str	r0, [r4, #4]
 800b7de:	6863      	ldr	r3, [r4, #4]
 800b7e0:	6123      	str	r3, [r4, #16]
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7e8:	e7aa      	b.n	800b740 <_printf_i+0x14c>
 800b7ea:	6923      	ldr	r3, [r4, #16]
 800b7ec:	462a      	mov	r2, r5
 800b7ee:	4649      	mov	r1, r9
 800b7f0:	4640      	mov	r0, r8
 800b7f2:	47d0      	blx	sl
 800b7f4:	3001      	adds	r0, #1
 800b7f6:	d0ad      	beq.n	800b754 <_printf_i+0x160>
 800b7f8:	6823      	ldr	r3, [r4, #0]
 800b7fa:	079b      	lsls	r3, r3, #30
 800b7fc:	d413      	bmi.n	800b826 <_printf_i+0x232>
 800b7fe:	68e0      	ldr	r0, [r4, #12]
 800b800:	9b03      	ldr	r3, [sp, #12]
 800b802:	4298      	cmp	r0, r3
 800b804:	bfb8      	it	lt
 800b806:	4618      	movlt	r0, r3
 800b808:	e7a6      	b.n	800b758 <_printf_i+0x164>
 800b80a:	2301      	movs	r3, #1
 800b80c:	4632      	mov	r2, r6
 800b80e:	4649      	mov	r1, r9
 800b810:	4640      	mov	r0, r8
 800b812:	47d0      	blx	sl
 800b814:	3001      	adds	r0, #1
 800b816:	d09d      	beq.n	800b754 <_printf_i+0x160>
 800b818:	3501      	adds	r5, #1
 800b81a:	68e3      	ldr	r3, [r4, #12]
 800b81c:	9903      	ldr	r1, [sp, #12]
 800b81e:	1a5b      	subs	r3, r3, r1
 800b820:	42ab      	cmp	r3, r5
 800b822:	dcf2      	bgt.n	800b80a <_printf_i+0x216>
 800b824:	e7eb      	b.n	800b7fe <_printf_i+0x20a>
 800b826:	2500      	movs	r5, #0
 800b828:	f104 0619 	add.w	r6, r4, #25
 800b82c:	e7f5      	b.n	800b81a <_printf_i+0x226>
 800b82e:	bf00      	nop
 800b830:	0800dd66 	.word	0x0800dd66
 800b834:	0800dd77 	.word	0x0800dd77

0800b838 <std>:
 800b838:	2300      	movs	r3, #0
 800b83a:	b510      	push	{r4, lr}
 800b83c:	4604      	mov	r4, r0
 800b83e:	e9c0 3300 	strd	r3, r3, [r0]
 800b842:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b846:	6083      	str	r3, [r0, #8]
 800b848:	8181      	strh	r1, [r0, #12]
 800b84a:	6643      	str	r3, [r0, #100]	; 0x64
 800b84c:	81c2      	strh	r2, [r0, #14]
 800b84e:	6183      	str	r3, [r0, #24]
 800b850:	4619      	mov	r1, r3
 800b852:	2208      	movs	r2, #8
 800b854:	305c      	adds	r0, #92	; 0x5c
 800b856:	f000 f906 	bl	800ba66 <memset>
 800b85a:	4b0d      	ldr	r3, [pc, #52]	; (800b890 <std+0x58>)
 800b85c:	6263      	str	r3, [r4, #36]	; 0x24
 800b85e:	4b0d      	ldr	r3, [pc, #52]	; (800b894 <std+0x5c>)
 800b860:	62a3      	str	r3, [r4, #40]	; 0x28
 800b862:	4b0d      	ldr	r3, [pc, #52]	; (800b898 <std+0x60>)
 800b864:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b866:	4b0d      	ldr	r3, [pc, #52]	; (800b89c <std+0x64>)
 800b868:	6323      	str	r3, [r4, #48]	; 0x30
 800b86a:	4b0d      	ldr	r3, [pc, #52]	; (800b8a0 <std+0x68>)
 800b86c:	6224      	str	r4, [r4, #32]
 800b86e:	429c      	cmp	r4, r3
 800b870:	d006      	beq.n	800b880 <std+0x48>
 800b872:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b876:	4294      	cmp	r4, r2
 800b878:	d002      	beq.n	800b880 <std+0x48>
 800b87a:	33d0      	adds	r3, #208	; 0xd0
 800b87c:	429c      	cmp	r4, r3
 800b87e:	d105      	bne.n	800b88c <std+0x54>
 800b880:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b888:	f000 b9d2 	b.w	800bc30 <__retarget_lock_init_recursive>
 800b88c:	bd10      	pop	{r4, pc}
 800b88e:	bf00      	nop
 800b890:	0800b9e1 	.word	0x0800b9e1
 800b894:	0800ba03 	.word	0x0800ba03
 800b898:	0800ba3b 	.word	0x0800ba3b
 800b89c:	0800ba5f 	.word	0x0800ba5f
 800b8a0:	200060b0 	.word	0x200060b0

0800b8a4 <stdio_exit_handler>:
 800b8a4:	4a02      	ldr	r2, [pc, #8]	; (800b8b0 <stdio_exit_handler+0xc>)
 800b8a6:	4903      	ldr	r1, [pc, #12]	; (800b8b4 <stdio_exit_handler+0x10>)
 800b8a8:	4803      	ldr	r0, [pc, #12]	; (800b8b8 <stdio_exit_handler+0x14>)
 800b8aa:	f000 b869 	b.w	800b980 <_fwalk_sglue>
 800b8ae:	bf00      	nop
 800b8b0:	20000014 	.word	0x20000014
 800b8b4:	0800d5d9 	.word	0x0800d5d9
 800b8b8:	20000020 	.word	0x20000020

0800b8bc <cleanup_stdio>:
 800b8bc:	6841      	ldr	r1, [r0, #4]
 800b8be:	4b0c      	ldr	r3, [pc, #48]	; (800b8f0 <cleanup_stdio+0x34>)
 800b8c0:	4299      	cmp	r1, r3
 800b8c2:	b510      	push	{r4, lr}
 800b8c4:	4604      	mov	r4, r0
 800b8c6:	d001      	beq.n	800b8cc <cleanup_stdio+0x10>
 800b8c8:	f001 fe86 	bl	800d5d8 <_fflush_r>
 800b8cc:	68a1      	ldr	r1, [r4, #8]
 800b8ce:	4b09      	ldr	r3, [pc, #36]	; (800b8f4 <cleanup_stdio+0x38>)
 800b8d0:	4299      	cmp	r1, r3
 800b8d2:	d002      	beq.n	800b8da <cleanup_stdio+0x1e>
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	f001 fe7f 	bl	800d5d8 <_fflush_r>
 800b8da:	68e1      	ldr	r1, [r4, #12]
 800b8dc:	4b06      	ldr	r3, [pc, #24]	; (800b8f8 <cleanup_stdio+0x3c>)
 800b8de:	4299      	cmp	r1, r3
 800b8e0:	d004      	beq.n	800b8ec <cleanup_stdio+0x30>
 800b8e2:	4620      	mov	r0, r4
 800b8e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8e8:	f001 be76 	b.w	800d5d8 <_fflush_r>
 800b8ec:	bd10      	pop	{r4, pc}
 800b8ee:	bf00      	nop
 800b8f0:	200060b0 	.word	0x200060b0
 800b8f4:	20006118 	.word	0x20006118
 800b8f8:	20006180 	.word	0x20006180

0800b8fc <global_stdio_init.part.0>:
 800b8fc:	b510      	push	{r4, lr}
 800b8fe:	4b0b      	ldr	r3, [pc, #44]	; (800b92c <global_stdio_init.part.0+0x30>)
 800b900:	4c0b      	ldr	r4, [pc, #44]	; (800b930 <global_stdio_init.part.0+0x34>)
 800b902:	4a0c      	ldr	r2, [pc, #48]	; (800b934 <global_stdio_init.part.0+0x38>)
 800b904:	601a      	str	r2, [r3, #0]
 800b906:	4620      	mov	r0, r4
 800b908:	2200      	movs	r2, #0
 800b90a:	2104      	movs	r1, #4
 800b90c:	f7ff ff94 	bl	800b838 <std>
 800b910:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b914:	2201      	movs	r2, #1
 800b916:	2109      	movs	r1, #9
 800b918:	f7ff ff8e 	bl	800b838 <std>
 800b91c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b920:	2202      	movs	r2, #2
 800b922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b926:	2112      	movs	r1, #18
 800b928:	f7ff bf86 	b.w	800b838 <std>
 800b92c:	200061e8 	.word	0x200061e8
 800b930:	200060b0 	.word	0x200060b0
 800b934:	0800b8a5 	.word	0x0800b8a5

0800b938 <__sfp_lock_acquire>:
 800b938:	4801      	ldr	r0, [pc, #4]	; (800b940 <__sfp_lock_acquire+0x8>)
 800b93a:	f000 b97a 	b.w	800bc32 <__retarget_lock_acquire_recursive>
 800b93e:	bf00      	nop
 800b940:	200061f1 	.word	0x200061f1

0800b944 <__sfp_lock_release>:
 800b944:	4801      	ldr	r0, [pc, #4]	; (800b94c <__sfp_lock_release+0x8>)
 800b946:	f000 b975 	b.w	800bc34 <__retarget_lock_release_recursive>
 800b94a:	bf00      	nop
 800b94c:	200061f1 	.word	0x200061f1

0800b950 <__sinit>:
 800b950:	b510      	push	{r4, lr}
 800b952:	4604      	mov	r4, r0
 800b954:	f7ff fff0 	bl	800b938 <__sfp_lock_acquire>
 800b958:	6a23      	ldr	r3, [r4, #32]
 800b95a:	b11b      	cbz	r3, 800b964 <__sinit+0x14>
 800b95c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b960:	f7ff bff0 	b.w	800b944 <__sfp_lock_release>
 800b964:	4b04      	ldr	r3, [pc, #16]	; (800b978 <__sinit+0x28>)
 800b966:	6223      	str	r3, [r4, #32]
 800b968:	4b04      	ldr	r3, [pc, #16]	; (800b97c <__sinit+0x2c>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d1f5      	bne.n	800b95c <__sinit+0xc>
 800b970:	f7ff ffc4 	bl	800b8fc <global_stdio_init.part.0>
 800b974:	e7f2      	b.n	800b95c <__sinit+0xc>
 800b976:	bf00      	nop
 800b978:	0800b8bd 	.word	0x0800b8bd
 800b97c:	200061e8 	.word	0x200061e8

0800b980 <_fwalk_sglue>:
 800b980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b984:	4607      	mov	r7, r0
 800b986:	4688      	mov	r8, r1
 800b988:	4614      	mov	r4, r2
 800b98a:	2600      	movs	r6, #0
 800b98c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b990:	f1b9 0901 	subs.w	r9, r9, #1
 800b994:	d505      	bpl.n	800b9a2 <_fwalk_sglue+0x22>
 800b996:	6824      	ldr	r4, [r4, #0]
 800b998:	2c00      	cmp	r4, #0
 800b99a:	d1f7      	bne.n	800b98c <_fwalk_sglue+0xc>
 800b99c:	4630      	mov	r0, r6
 800b99e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9a2:	89ab      	ldrh	r3, [r5, #12]
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	d907      	bls.n	800b9b8 <_fwalk_sglue+0x38>
 800b9a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b9ac:	3301      	adds	r3, #1
 800b9ae:	d003      	beq.n	800b9b8 <_fwalk_sglue+0x38>
 800b9b0:	4629      	mov	r1, r5
 800b9b2:	4638      	mov	r0, r7
 800b9b4:	47c0      	blx	r8
 800b9b6:	4306      	orrs	r6, r0
 800b9b8:	3568      	adds	r5, #104	; 0x68
 800b9ba:	e7e9      	b.n	800b990 <_fwalk_sglue+0x10>

0800b9bc <iprintf>:
 800b9bc:	b40f      	push	{r0, r1, r2, r3}
 800b9be:	b507      	push	{r0, r1, r2, lr}
 800b9c0:	4906      	ldr	r1, [pc, #24]	; (800b9dc <iprintf+0x20>)
 800b9c2:	ab04      	add	r3, sp, #16
 800b9c4:	6808      	ldr	r0, [r1, #0]
 800b9c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9ca:	6881      	ldr	r1, [r0, #8]
 800b9cc:	9301      	str	r3, [sp, #4]
 800b9ce:	f001 fc63 	bl	800d298 <_vfiprintf_r>
 800b9d2:	b003      	add	sp, #12
 800b9d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9d8:	b004      	add	sp, #16
 800b9da:	4770      	bx	lr
 800b9dc:	2000006c 	.word	0x2000006c

0800b9e0 <__sread>:
 800b9e0:	b510      	push	{r4, lr}
 800b9e2:	460c      	mov	r4, r1
 800b9e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9e8:	f000 f8d4 	bl	800bb94 <_read_r>
 800b9ec:	2800      	cmp	r0, #0
 800b9ee:	bfab      	itete	ge
 800b9f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b9f2:	89a3      	ldrhlt	r3, [r4, #12]
 800b9f4:	181b      	addge	r3, r3, r0
 800b9f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b9fa:	bfac      	ite	ge
 800b9fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800b9fe:	81a3      	strhlt	r3, [r4, #12]
 800ba00:	bd10      	pop	{r4, pc}

0800ba02 <__swrite>:
 800ba02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba06:	461f      	mov	r7, r3
 800ba08:	898b      	ldrh	r3, [r1, #12]
 800ba0a:	05db      	lsls	r3, r3, #23
 800ba0c:	4605      	mov	r5, r0
 800ba0e:	460c      	mov	r4, r1
 800ba10:	4616      	mov	r6, r2
 800ba12:	d505      	bpl.n	800ba20 <__swrite+0x1e>
 800ba14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba18:	2302      	movs	r3, #2
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	f000 f8a8 	bl	800bb70 <_lseek_r>
 800ba20:	89a3      	ldrh	r3, [r4, #12]
 800ba22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba2a:	81a3      	strh	r3, [r4, #12]
 800ba2c:	4632      	mov	r2, r6
 800ba2e:	463b      	mov	r3, r7
 800ba30:	4628      	mov	r0, r5
 800ba32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba36:	f000 b8bf 	b.w	800bbb8 <_write_r>

0800ba3a <__sseek>:
 800ba3a:	b510      	push	{r4, lr}
 800ba3c:	460c      	mov	r4, r1
 800ba3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba42:	f000 f895 	bl	800bb70 <_lseek_r>
 800ba46:	1c43      	adds	r3, r0, #1
 800ba48:	89a3      	ldrh	r3, [r4, #12]
 800ba4a:	bf15      	itete	ne
 800ba4c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba56:	81a3      	strheq	r3, [r4, #12]
 800ba58:	bf18      	it	ne
 800ba5a:	81a3      	strhne	r3, [r4, #12]
 800ba5c:	bd10      	pop	{r4, pc}

0800ba5e <__sclose>:
 800ba5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba62:	f000 b81f 	b.w	800baa4 <_close_r>

0800ba66 <memset>:
 800ba66:	4402      	add	r2, r0
 800ba68:	4603      	mov	r3, r0
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d100      	bne.n	800ba70 <memset+0xa>
 800ba6e:	4770      	bx	lr
 800ba70:	f803 1b01 	strb.w	r1, [r3], #1
 800ba74:	e7f9      	b.n	800ba6a <memset+0x4>

0800ba76 <strncpy>:
 800ba76:	b510      	push	{r4, lr}
 800ba78:	3901      	subs	r1, #1
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	b132      	cbz	r2, 800ba8c <strncpy+0x16>
 800ba7e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ba82:	f803 4b01 	strb.w	r4, [r3], #1
 800ba86:	3a01      	subs	r2, #1
 800ba88:	2c00      	cmp	r4, #0
 800ba8a:	d1f7      	bne.n	800ba7c <strncpy+0x6>
 800ba8c:	441a      	add	r2, r3
 800ba8e:	2100      	movs	r1, #0
 800ba90:	4293      	cmp	r3, r2
 800ba92:	d100      	bne.n	800ba96 <strncpy+0x20>
 800ba94:	bd10      	pop	{r4, pc}
 800ba96:	f803 1b01 	strb.w	r1, [r3], #1
 800ba9a:	e7f9      	b.n	800ba90 <strncpy+0x1a>

0800ba9c <_localeconv_r>:
 800ba9c:	4800      	ldr	r0, [pc, #0]	; (800baa0 <_localeconv_r+0x4>)
 800ba9e:	4770      	bx	lr
 800baa0:	20000160 	.word	0x20000160

0800baa4 <_close_r>:
 800baa4:	b538      	push	{r3, r4, r5, lr}
 800baa6:	4d06      	ldr	r5, [pc, #24]	; (800bac0 <_close_r+0x1c>)
 800baa8:	2300      	movs	r3, #0
 800baaa:	4604      	mov	r4, r0
 800baac:	4608      	mov	r0, r1
 800baae:	602b      	str	r3, [r5, #0]
 800bab0:	f7f6 f9f3 	bl	8001e9a <_close>
 800bab4:	1c43      	adds	r3, r0, #1
 800bab6:	d102      	bne.n	800babe <_close_r+0x1a>
 800bab8:	682b      	ldr	r3, [r5, #0]
 800baba:	b103      	cbz	r3, 800babe <_close_r+0x1a>
 800babc:	6023      	str	r3, [r4, #0]
 800babe:	bd38      	pop	{r3, r4, r5, pc}
 800bac0:	200061ec 	.word	0x200061ec

0800bac4 <_reclaim_reent>:
 800bac4:	4b29      	ldr	r3, [pc, #164]	; (800bb6c <_reclaim_reent+0xa8>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	4283      	cmp	r3, r0
 800baca:	b570      	push	{r4, r5, r6, lr}
 800bacc:	4604      	mov	r4, r0
 800bace:	d04b      	beq.n	800bb68 <_reclaim_reent+0xa4>
 800bad0:	69c3      	ldr	r3, [r0, #28]
 800bad2:	b143      	cbz	r3, 800bae6 <_reclaim_reent+0x22>
 800bad4:	68db      	ldr	r3, [r3, #12]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d144      	bne.n	800bb64 <_reclaim_reent+0xa0>
 800bada:	69e3      	ldr	r3, [r4, #28]
 800badc:	6819      	ldr	r1, [r3, #0]
 800bade:	b111      	cbz	r1, 800bae6 <_reclaim_reent+0x22>
 800bae0:	4620      	mov	r0, r4
 800bae2:	f000 ff33 	bl	800c94c <_free_r>
 800bae6:	6961      	ldr	r1, [r4, #20]
 800bae8:	b111      	cbz	r1, 800baf0 <_reclaim_reent+0x2c>
 800baea:	4620      	mov	r0, r4
 800baec:	f000 ff2e 	bl	800c94c <_free_r>
 800baf0:	69e1      	ldr	r1, [r4, #28]
 800baf2:	b111      	cbz	r1, 800bafa <_reclaim_reent+0x36>
 800baf4:	4620      	mov	r0, r4
 800baf6:	f000 ff29 	bl	800c94c <_free_r>
 800bafa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bafc:	b111      	cbz	r1, 800bb04 <_reclaim_reent+0x40>
 800bafe:	4620      	mov	r0, r4
 800bb00:	f000 ff24 	bl	800c94c <_free_r>
 800bb04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb06:	b111      	cbz	r1, 800bb0e <_reclaim_reent+0x4a>
 800bb08:	4620      	mov	r0, r4
 800bb0a:	f000 ff1f 	bl	800c94c <_free_r>
 800bb0e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bb10:	b111      	cbz	r1, 800bb18 <_reclaim_reent+0x54>
 800bb12:	4620      	mov	r0, r4
 800bb14:	f000 ff1a 	bl	800c94c <_free_r>
 800bb18:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bb1a:	b111      	cbz	r1, 800bb22 <_reclaim_reent+0x5e>
 800bb1c:	4620      	mov	r0, r4
 800bb1e:	f000 ff15 	bl	800c94c <_free_r>
 800bb22:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800bb24:	b111      	cbz	r1, 800bb2c <_reclaim_reent+0x68>
 800bb26:	4620      	mov	r0, r4
 800bb28:	f000 ff10 	bl	800c94c <_free_r>
 800bb2c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800bb2e:	b111      	cbz	r1, 800bb36 <_reclaim_reent+0x72>
 800bb30:	4620      	mov	r0, r4
 800bb32:	f000 ff0b 	bl	800c94c <_free_r>
 800bb36:	6a23      	ldr	r3, [r4, #32]
 800bb38:	b1b3      	cbz	r3, 800bb68 <_reclaim_reent+0xa4>
 800bb3a:	4620      	mov	r0, r4
 800bb3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bb40:	4718      	bx	r3
 800bb42:	5949      	ldr	r1, [r1, r5]
 800bb44:	b941      	cbnz	r1, 800bb58 <_reclaim_reent+0x94>
 800bb46:	3504      	adds	r5, #4
 800bb48:	69e3      	ldr	r3, [r4, #28]
 800bb4a:	2d80      	cmp	r5, #128	; 0x80
 800bb4c:	68d9      	ldr	r1, [r3, #12]
 800bb4e:	d1f8      	bne.n	800bb42 <_reclaim_reent+0x7e>
 800bb50:	4620      	mov	r0, r4
 800bb52:	f000 fefb 	bl	800c94c <_free_r>
 800bb56:	e7c0      	b.n	800bada <_reclaim_reent+0x16>
 800bb58:	680e      	ldr	r6, [r1, #0]
 800bb5a:	4620      	mov	r0, r4
 800bb5c:	f000 fef6 	bl	800c94c <_free_r>
 800bb60:	4631      	mov	r1, r6
 800bb62:	e7ef      	b.n	800bb44 <_reclaim_reent+0x80>
 800bb64:	2500      	movs	r5, #0
 800bb66:	e7ef      	b.n	800bb48 <_reclaim_reent+0x84>
 800bb68:	bd70      	pop	{r4, r5, r6, pc}
 800bb6a:	bf00      	nop
 800bb6c:	2000006c 	.word	0x2000006c

0800bb70 <_lseek_r>:
 800bb70:	b538      	push	{r3, r4, r5, lr}
 800bb72:	4d07      	ldr	r5, [pc, #28]	; (800bb90 <_lseek_r+0x20>)
 800bb74:	4604      	mov	r4, r0
 800bb76:	4608      	mov	r0, r1
 800bb78:	4611      	mov	r1, r2
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	602a      	str	r2, [r5, #0]
 800bb7e:	461a      	mov	r2, r3
 800bb80:	f7f6 f9b2 	bl	8001ee8 <_lseek>
 800bb84:	1c43      	adds	r3, r0, #1
 800bb86:	d102      	bne.n	800bb8e <_lseek_r+0x1e>
 800bb88:	682b      	ldr	r3, [r5, #0]
 800bb8a:	b103      	cbz	r3, 800bb8e <_lseek_r+0x1e>
 800bb8c:	6023      	str	r3, [r4, #0]
 800bb8e:	bd38      	pop	{r3, r4, r5, pc}
 800bb90:	200061ec 	.word	0x200061ec

0800bb94 <_read_r>:
 800bb94:	b538      	push	{r3, r4, r5, lr}
 800bb96:	4d07      	ldr	r5, [pc, #28]	; (800bbb4 <_read_r+0x20>)
 800bb98:	4604      	mov	r4, r0
 800bb9a:	4608      	mov	r0, r1
 800bb9c:	4611      	mov	r1, r2
 800bb9e:	2200      	movs	r2, #0
 800bba0:	602a      	str	r2, [r5, #0]
 800bba2:	461a      	mov	r2, r3
 800bba4:	f7f6 f940 	bl	8001e28 <_read>
 800bba8:	1c43      	adds	r3, r0, #1
 800bbaa:	d102      	bne.n	800bbb2 <_read_r+0x1e>
 800bbac:	682b      	ldr	r3, [r5, #0]
 800bbae:	b103      	cbz	r3, 800bbb2 <_read_r+0x1e>
 800bbb0:	6023      	str	r3, [r4, #0]
 800bbb2:	bd38      	pop	{r3, r4, r5, pc}
 800bbb4:	200061ec 	.word	0x200061ec

0800bbb8 <_write_r>:
 800bbb8:	b538      	push	{r3, r4, r5, lr}
 800bbba:	4d07      	ldr	r5, [pc, #28]	; (800bbd8 <_write_r+0x20>)
 800bbbc:	4604      	mov	r4, r0
 800bbbe:	4608      	mov	r0, r1
 800bbc0:	4611      	mov	r1, r2
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	602a      	str	r2, [r5, #0]
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	f7f6 f94b 	bl	8001e62 <_write>
 800bbcc:	1c43      	adds	r3, r0, #1
 800bbce:	d102      	bne.n	800bbd6 <_write_r+0x1e>
 800bbd0:	682b      	ldr	r3, [r5, #0]
 800bbd2:	b103      	cbz	r3, 800bbd6 <_write_r+0x1e>
 800bbd4:	6023      	str	r3, [r4, #0]
 800bbd6:	bd38      	pop	{r3, r4, r5, pc}
 800bbd8:	200061ec 	.word	0x200061ec

0800bbdc <__errno>:
 800bbdc:	4b01      	ldr	r3, [pc, #4]	; (800bbe4 <__errno+0x8>)
 800bbde:	6818      	ldr	r0, [r3, #0]
 800bbe0:	4770      	bx	lr
 800bbe2:	bf00      	nop
 800bbe4:	2000006c 	.word	0x2000006c

0800bbe8 <__libc_init_array>:
 800bbe8:	b570      	push	{r4, r5, r6, lr}
 800bbea:	4d0d      	ldr	r5, [pc, #52]	; (800bc20 <__libc_init_array+0x38>)
 800bbec:	4c0d      	ldr	r4, [pc, #52]	; (800bc24 <__libc_init_array+0x3c>)
 800bbee:	1b64      	subs	r4, r4, r5
 800bbf0:	10a4      	asrs	r4, r4, #2
 800bbf2:	2600      	movs	r6, #0
 800bbf4:	42a6      	cmp	r6, r4
 800bbf6:	d109      	bne.n	800bc0c <__libc_init_array+0x24>
 800bbf8:	4d0b      	ldr	r5, [pc, #44]	; (800bc28 <__libc_init_array+0x40>)
 800bbfa:	4c0c      	ldr	r4, [pc, #48]	; (800bc2c <__libc_init_array+0x44>)
 800bbfc:	f001 fef0 	bl	800d9e0 <_init>
 800bc00:	1b64      	subs	r4, r4, r5
 800bc02:	10a4      	asrs	r4, r4, #2
 800bc04:	2600      	movs	r6, #0
 800bc06:	42a6      	cmp	r6, r4
 800bc08:	d105      	bne.n	800bc16 <__libc_init_array+0x2e>
 800bc0a:	bd70      	pop	{r4, r5, r6, pc}
 800bc0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc10:	4798      	blx	r3
 800bc12:	3601      	adds	r6, #1
 800bc14:	e7ee      	b.n	800bbf4 <__libc_init_array+0xc>
 800bc16:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc1a:	4798      	blx	r3
 800bc1c:	3601      	adds	r6, #1
 800bc1e:	e7f2      	b.n	800bc06 <__libc_init_array+0x1e>
 800bc20:	0800e0cc 	.word	0x0800e0cc
 800bc24:	0800e0cc 	.word	0x0800e0cc
 800bc28:	0800e0cc 	.word	0x0800e0cc
 800bc2c:	0800e0d0 	.word	0x0800e0d0

0800bc30 <__retarget_lock_init_recursive>:
 800bc30:	4770      	bx	lr

0800bc32 <__retarget_lock_acquire_recursive>:
 800bc32:	4770      	bx	lr

0800bc34 <__retarget_lock_release_recursive>:
 800bc34:	4770      	bx	lr

0800bc36 <memcpy>:
 800bc36:	440a      	add	r2, r1
 800bc38:	4291      	cmp	r1, r2
 800bc3a:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc3e:	d100      	bne.n	800bc42 <memcpy+0xc>
 800bc40:	4770      	bx	lr
 800bc42:	b510      	push	{r4, lr}
 800bc44:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc48:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc4c:	4291      	cmp	r1, r2
 800bc4e:	d1f9      	bne.n	800bc44 <memcpy+0xe>
 800bc50:	bd10      	pop	{r4, pc}

0800bc52 <quorem>:
 800bc52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc56:	6903      	ldr	r3, [r0, #16]
 800bc58:	690c      	ldr	r4, [r1, #16]
 800bc5a:	42a3      	cmp	r3, r4
 800bc5c:	4607      	mov	r7, r0
 800bc5e:	db7e      	blt.n	800bd5e <quorem+0x10c>
 800bc60:	3c01      	subs	r4, #1
 800bc62:	f101 0814 	add.w	r8, r1, #20
 800bc66:	f100 0514 	add.w	r5, r0, #20
 800bc6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc6e:	9301      	str	r3, [sp, #4]
 800bc70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bc74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc78:	3301      	adds	r3, #1
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bc80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bc84:	fbb2 f6f3 	udiv	r6, r2, r3
 800bc88:	d331      	bcc.n	800bcee <quorem+0x9c>
 800bc8a:	f04f 0e00 	mov.w	lr, #0
 800bc8e:	4640      	mov	r0, r8
 800bc90:	46ac      	mov	ip, r5
 800bc92:	46f2      	mov	sl, lr
 800bc94:	f850 2b04 	ldr.w	r2, [r0], #4
 800bc98:	b293      	uxth	r3, r2
 800bc9a:	fb06 e303 	mla	r3, r6, r3, lr
 800bc9e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bca2:	0c1a      	lsrs	r2, r3, #16
 800bca4:	b29b      	uxth	r3, r3
 800bca6:	ebaa 0303 	sub.w	r3, sl, r3
 800bcaa:	f8dc a000 	ldr.w	sl, [ip]
 800bcae:	fa13 f38a 	uxtah	r3, r3, sl
 800bcb2:	fb06 220e 	mla	r2, r6, lr, r2
 800bcb6:	9300      	str	r3, [sp, #0]
 800bcb8:	9b00      	ldr	r3, [sp, #0]
 800bcba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bcbe:	b292      	uxth	r2, r2
 800bcc0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bcc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bcc8:	f8bd 3000 	ldrh.w	r3, [sp]
 800bccc:	4581      	cmp	r9, r0
 800bcce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bcd2:	f84c 3b04 	str.w	r3, [ip], #4
 800bcd6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bcda:	d2db      	bcs.n	800bc94 <quorem+0x42>
 800bcdc:	f855 300b 	ldr.w	r3, [r5, fp]
 800bce0:	b92b      	cbnz	r3, 800bcee <quorem+0x9c>
 800bce2:	9b01      	ldr	r3, [sp, #4]
 800bce4:	3b04      	subs	r3, #4
 800bce6:	429d      	cmp	r5, r3
 800bce8:	461a      	mov	r2, r3
 800bcea:	d32c      	bcc.n	800bd46 <quorem+0xf4>
 800bcec:	613c      	str	r4, [r7, #16]
 800bcee:	4638      	mov	r0, r7
 800bcf0:	f001 f9a8 	bl	800d044 <__mcmp>
 800bcf4:	2800      	cmp	r0, #0
 800bcf6:	db22      	blt.n	800bd3e <quorem+0xec>
 800bcf8:	3601      	adds	r6, #1
 800bcfa:	4629      	mov	r1, r5
 800bcfc:	2000      	movs	r0, #0
 800bcfe:	f858 2b04 	ldr.w	r2, [r8], #4
 800bd02:	f8d1 c000 	ldr.w	ip, [r1]
 800bd06:	b293      	uxth	r3, r2
 800bd08:	1ac3      	subs	r3, r0, r3
 800bd0a:	0c12      	lsrs	r2, r2, #16
 800bd0c:	fa13 f38c 	uxtah	r3, r3, ip
 800bd10:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800bd14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bd18:	b29b      	uxth	r3, r3
 800bd1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd1e:	45c1      	cmp	r9, r8
 800bd20:	f841 3b04 	str.w	r3, [r1], #4
 800bd24:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bd28:	d2e9      	bcs.n	800bcfe <quorem+0xac>
 800bd2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd32:	b922      	cbnz	r2, 800bd3e <quorem+0xec>
 800bd34:	3b04      	subs	r3, #4
 800bd36:	429d      	cmp	r5, r3
 800bd38:	461a      	mov	r2, r3
 800bd3a:	d30a      	bcc.n	800bd52 <quorem+0x100>
 800bd3c:	613c      	str	r4, [r7, #16]
 800bd3e:	4630      	mov	r0, r6
 800bd40:	b003      	add	sp, #12
 800bd42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd46:	6812      	ldr	r2, [r2, #0]
 800bd48:	3b04      	subs	r3, #4
 800bd4a:	2a00      	cmp	r2, #0
 800bd4c:	d1ce      	bne.n	800bcec <quorem+0x9a>
 800bd4e:	3c01      	subs	r4, #1
 800bd50:	e7c9      	b.n	800bce6 <quorem+0x94>
 800bd52:	6812      	ldr	r2, [r2, #0]
 800bd54:	3b04      	subs	r3, #4
 800bd56:	2a00      	cmp	r2, #0
 800bd58:	d1f0      	bne.n	800bd3c <quorem+0xea>
 800bd5a:	3c01      	subs	r4, #1
 800bd5c:	e7eb      	b.n	800bd36 <quorem+0xe4>
 800bd5e:	2000      	movs	r0, #0
 800bd60:	e7ee      	b.n	800bd40 <quorem+0xee>
 800bd62:	0000      	movs	r0, r0
 800bd64:	0000      	movs	r0, r0
	...

0800bd68 <_dtoa_r>:
 800bd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd6c:	ed2d 8b04 	vpush	{d8-d9}
 800bd70:	69c5      	ldr	r5, [r0, #28]
 800bd72:	b093      	sub	sp, #76	; 0x4c
 800bd74:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bd78:	ec57 6b10 	vmov	r6, r7, d0
 800bd7c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bd80:	9107      	str	r1, [sp, #28]
 800bd82:	4604      	mov	r4, r0
 800bd84:	920a      	str	r2, [sp, #40]	; 0x28
 800bd86:	930d      	str	r3, [sp, #52]	; 0x34
 800bd88:	b975      	cbnz	r5, 800bda8 <_dtoa_r+0x40>
 800bd8a:	2010      	movs	r0, #16
 800bd8c:	f000 fe2a 	bl	800c9e4 <malloc>
 800bd90:	4602      	mov	r2, r0
 800bd92:	61e0      	str	r0, [r4, #28]
 800bd94:	b920      	cbnz	r0, 800bda0 <_dtoa_r+0x38>
 800bd96:	4bae      	ldr	r3, [pc, #696]	; (800c050 <_dtoa_r+0x2e8>)
 800bd98:	21ef      	movs	r1, #239	; 0xef
 800bd9a:	48ae      	ldr	r0, [pc, #696]	; (800c054 <_dtoa_r+0x2ec>)
 800bd9c:	f001 fcea 	bl	800d774 <__assert_func>
 800bda0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bda4:	6005      	str	r5, [r0, #0]
 800bda6:	60c5      	str	r5, [r0, #12]
 800bda8:	69e3      	ldr	r3, [r4, #28]
 800bdaa:	6819      	ldr	r1, [r3, #0]
 800bdac:	b151      	cbz	r1, 800bdc4 <_dtoa_r+0x5c>
 800bdae:	685a      	ldr	r2, [r3, #4]
 800bdb0:	604a      	str	r2, [r1, #4]
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	4093      	lsls	r3, r2
 800bdb6:	608b      	str	r3, [r1, #8]
 800bdb8:	4620      	mov	r0, r4
 800bdba:	f000 ff07 	bl	800cbcc <_Bfree>
 800bdbe:	69e3      	ldr	r3, [r4, #28]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	601a      	str	r2, [r3, #0]
 800bdc4:	1e3b      	subs	r3, r7, #0
 800bdc6:	bfbb      	ittet	lt
 800bdc8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bdcc:	9303      	strlt	r3, [sp, #12]
 800bdce:	2300      	movge	r3, #0
 800bdd0:	2201      	movlt	r2, #1
 800bdd2:	bfac      	ite	ge
 800bdd4:	f8c8 3000 	strge.w	r3, [r8]
 800bdd8:	f8c8 2000 	strlt.w	r2, [r8]
 800bddc:	4b9e      	ldr	r3, [pc, #632]	; (800c058 <_dtoa_r+0x2f0>)
 800bdde:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bde2:	ea33 0308 	bics.w	r3, r3, r8
 800bde6:	d11b      	bne.n	800be20 <_dtoa_r+0xb8>
 800bde8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bdea:	f242 730f 	movw	r3, #9999	; 0x270f
 800bdee:	6013      	str	r3, [r2, #0]
 800bdf0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800bdf4:	4333      	orrs	r3, r6
 800bdf6:	f000 8593 	beq.w	800c920 <_dtoa_r+0xbb8>
 800bdfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdfc:	b963      	cbnz	r3, 800be18 <_dtoa_r+0xb0>
 800bdfe:	4b97      	ldr	r3, [pc, #604]	; (800c05c <_dtoa_r+0x2f4>)
 800be00:	e027      	b.n	800be52 <_dtoa_r+0xea>
 800be02:	4b97      	ldr	r3, [pc, #604]	; (800c060 <_dtoa_r+0x2f8>)
 800be04:	9300      	str	r3, [sp, #0]
 800be06:	3308      	adds	r3, #8
 800be08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800be0a:	6013      	str	r3, [r2, #0]
 800be0c:	9800      	ldr	r0, [sp, #0]
 800be0e:	b013      	add	sp, #76	; 0x4c
 800be10:	ecbd 8b04 	vpop	{d8-d9}
 800be14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be18:	4b90      	ldr	r3, [pc, #576]	; (800c05c <_dtoa_r+0x2f4>)
 800be1a:	9300      	str	r3, [sp, #0]
 800be1c:	3303      	adds	r3, #3
 800be1e:	e7f3      	b.n	800be08 <_dtoa_r+0xa0>
 800be20:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be24:	2200      	movs	r2, #0
 800be26:	ec51 0b17 	vmov	r0, r1, d7
 800be2a:	eeb0 8a47 	vmov.f32	s16, s14
 800be2e:	eef0 8a67 	vmov.f32	s17, s15
 800be32:	2300      	movs	r3, #0
 800be34:	f7f4 fe58 	bl	8000ae8 <__aeabi_dcmpeq>
 800be38:	4681      	mov	r9, r0
 800be3a:	b160      	cbz	r0, 800be56 <_dtoa_r+0xee>
 800be3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800be3e:	2301      	movs	r3, #1
 800be40:	6013      	str	r3, [r2, #0]
 800be42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be44:	2b00      	cmp	r3, #0
 800be46:	f000 8568 	beq.w	800c91a <_dtoa_r+0xbb2>
 800be4a:	4b86      	ldr	r3, [pc, #536]	; (800c064 <_dtoa_r+0x2fc>)
 800be4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800be4e:	6013      	str	r3, [r2, #0]
 800be50:	3b01      	subs	r3, #1
 800be52:	9300      	str	r3, [sp, #0]
 800be54:	e7da      	b.n	800be0c <_dtoa_r+0xa4>
 800be56:	aa10      	add	r2, sp, #64	; 0x40
 800be58:	a911      	add	r1, sp, #68	; 0x44
 800be5a:	4620      	mov	r0, r4
 800be5c:	eeb0 0a48 	vmov.f32	s0, s16
 800be60:	eef0 0a68 	vmov.f32	s1, s17
 800be64:	f001 f994 	bl	800d190 <__d2b>
 800be68:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800be6c:	4682      	mov	sl, r0
 800be6e:	2d00      	cmp	r5, #0
 800be70:	d07f      	beq.n	800bf72 <_dtoa_r+0x20a>
 800be72:	ee18 3a90 	vmov	r3, s17
 800be76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be7a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800be7e:	ec51 0b18 	vmov	r0, r1, d8
 800be82:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800be86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800be8a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800be8e:	4619      	mov	r1, r3
 800be90:	2200      	movs	r2, #0
 800be92:	4b75      	ldr	r3, [pc, #468]	; (800c068 <_dtoa_r+0x300>)
 800be94:	f7f4 fa08 	bl	80002a8 <__aeabi_dsub>
 800be98:	a367      	add	r3, pc, #412	; (adr r3, 800c038 <_dtoa_r+0x2d0>)
 800be9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9e:	f7f4 fbbb 	bl	8000618 <__aeabi_dmul>
 800bea2:	a367      	add	r3, pc, #412	; (adr r3, 800c040 <_dtoa_r+0x2d8>)
 800bea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea8:	f7f4 fa00 	bl	80002ac <__adddf3>
 800beac:	4606      	mov	r6, r0
 800beae:	4628      	mov	r0, r5
 800beb0:	460f      	mov	r7, r1
 800beb2:	f7f4 fb47 	bl	8000544 <__aeabi_i2d>
 800beb6:	a364      	add	r3, pc, #400	; (adr r3, 800c048 <_dtoa_r+0x2e0>)
 800beb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bebc:	f7f4 fbac 	bl	8000618 <__aeabi_dmul>
 800bec0:	4602      	mov	r2, r0
 800bec2:	460b      	mov	r3, r1
 800bec4:	4630      	mov	r0, r6
 800bec6:	4639      	mov	r1, r7
 800bec8:	f7f4 f9f0 	bl	80002ac <__adddf3>
 800becc:	4606      	mov	r6, r0
 800bece:	460f      	mov	r7, r1
 800bed0:	f7f4 fe52 	bl	8000b78 <__aeabi_d2iz>
 800bed4:	2200      	movs	r2, #0
 800bed6:	4683      	mov	fp, r0
 800bed8:	2300      	movs	r3, #0
 800beda:	4630      	mov	r0, r6
 800bedc:	4639      	mov	r1, r7
 800bede:	f7f4 fe0d 	bl	8000afc <__aeabi_dcmplt>
 800bee2:	b148      	cbz	r0, 800bef8 <_dtoa_r+0x190>
 800bee4:	4658      	mov	r0, fp
 800bee6:	f7f4 fb2d 	bl	8000544 <__aeabi_i2d>
 800beea:	4632      	mov	r2, r6
 800beec:	463b      	mov	r3, r7
 800beee:	f7f4 fdfb 	bl	8000ae8 <__aeabi_dcmpeq>
 800bef2:	b908      	cbnz	r0, 800bef8 <_dtoa_r+0x190>
 800bef4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bef8:	f1bb 0f16 	cmp.w	fp, #22
 800befc:	d857      	bhi.n	800bfae <_dtoa_r+0x246>
 800befe:	4b5b      	ldr	r3, [pc, #364]	; (800c06c <_dtoa_r+0x304>)
 800bf00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bf04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf08:	ec51 0b18 	vmov	r0, r1, d8
 800bf0c:	f7f4 fdf6 	bl	8000afc <__aeabi_dcmplt>
 800bf10:	2800      	cmp	r0, #0
 800bf12:	d04e      	beq.n	800bfb2 <_dtoa_r+0x24a>
 800bf14:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bf18:	2300      	movs	r3, #0
 800bf1a:	930c      	str	r3, [sp, #48]	; 0x30
 800bf1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf1e:	1b5b      	subs	r3, r3, r5
 800bf20:	1e5a      	subs	r2, r3, #1
 800bf22:	bf45      	ittet	mi
 800bf24:	f1c3 0301 	rsbmi	r3, r3, #1
 800bf28:	9305      	strmi	r3, [sp, #20]
 800bf2a:	2300      	movpl	r3, #0
 800bf2c:	2300      	movmi	r3, #0
 800bf2e:	9206      	str	r2, [sp, #24]
 800bf30:	bf54      	ite	pl
 800bf32:	9305      	strpl	r3, [sp, #20]
 800bf34:	9306      	strmi	r3, [sp, #24]
 800bf36:	f1bb 0f00 	cmp.w	fp, #0
 800bf3a:	db3c      	blt.n	800bfb6 <_dtoa_r+0x24e>
 800bf3c:	9b06      	ldr	r3, [sp, #24]
 800bf3e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800bf42:	445b      	add	r3, fp
 800bf44:	9306      	str	r3, [sp, #24]
 800bf46:	2300      	movs	r3, #0
 800bf48:	9308      	str	r3, [sp, #32]
 800bf4a:	9b07      	ldr	r3, [sp, #28]
 800bf4c:	2b09      	cmp	r3, #9
 800bf4e:	d868      	bhi.n	800c022 <_dtoa_r+0x2ba>
 800bf50:	2b05      	cmp	r3, #5
 800bf52:	bfc4      	itt	gt
 800bf54:	3b04      	subgt	r3, #4
 800bf56:	9307      	strgt	r3, [sp, #28]
 800bf58:	9b07      	ldr	r3, [sp, #28]
 800bf5a:	f1a3 0302 	sub.w	r3, r3, #2
 800bf5e:	bfcc      	ite	gt
 800bf60:	2500      	movgt	r5, #0
 800bf62:	2501      	movle	r5, #1
 800bf64:	2b03      	cmp	r3, #3
 800bf66:	f200 8085 	bhi.w	800c074 <_dtoa_r+0x30c>
 800bf6a:	e8df f003 	tbb	[pc, r3]
 800bf6e:	3b2e      	.short	0x3b2e
 800bf70:	5839      	.short	0x5839
 800bf72:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bf76:	441d      	add	r5, r3
 800bf78:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bf7c:	2b20      	cmp	r3, #32
 800bf7e:	bfc1      	itttt	gt
 800bf80:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bf84:	fa08 f803 	lslgt.w	r8, r8, r3
 800bf88:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800bf8c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800bf90:	bfd6      	itet	le
 800bf92:	f1c3 0320 	rsble	r3, r3, #32
 800bf96:	ea48 0003 	orrgt.w	r0, r8, r3
 800bf9a:	fa06 f003 	lslle.w	r0, r6, r3
 800bf9e:	f7f4 fac1 	bl	8000524 <__aeabi_ui2d>
 800bfa2:	2201      	movs	r2, #1
 800bfa4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800bfa8:	3d01      	subs	r5, #1
 800bfaa:	920e      	str	r2, [sp, #56]	; 0x38
 800bfac:	e76f      	b.n	800be8e <_dtoa_r+0x126>
 800bfae:	2301      	movs	r3, #1
 800bfb0:	e7b3      	b.n	800bf1a <_dtoa_r+0x1b2>
 800bfb2:	900c      	str	r0, [sp, #48]	; 0x30
 800bfb4:	e7b2      	b.n	800bf1c <_dtoa_r+0x1b4>
 800bfb6:	9b05      	ldr	r3, [sp, #20]
 800bfb8:	eba3 030b 	sub.w	r3, r3, fp
 800bfbc:	9305      	str	r3, [sp, #20]
 800bfbe:	f1cb 0300 	rsb	r3, fp, #0
 800bfc2:	9308      	str	r3, [sp, #32]
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	930b      	str	r3, [sp, #44]	; 0x2c
 800bfc8:	e7bf      	b.n	800bf4a <_dtoa_r+0x1e2>
 800bfca:	2300      	movs	r3, #0
 800bfcc:	9309      	str	r3, [sp, #36]	; 0x24
 800bfce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	dc52      	bgt.n	800c07a <_dtoa_r+0x312>
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	9301      	str	r3, [sp, #4]
 800bfd8:	9304      	str	r3, [sp, #16]
 800bfda:	461a      	mov	r2, r3
 800bfdc:	920a      	str	r2, [sp, #40]	; 0x28
 800bfde:	e00b      	b.n	800bff8 <_dtoa_r+0x290>
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	e7f3      	b.n	800bfcc <_dtoa_r+0x264>
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	9309      	str	r3, [sp, #36]	; 0x24
 800bfe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfea:	445b      	add	r3, fp
 800bfec:	9301      	str	r3, [sp, #4]
 800bfee:	3301      	adds	r3, #1
 800bff0:	2b01      	cmp	r3, #1
 800bff2:	9304      	str	r3, [sp, #16]
 800bff4:	bfb8      	it	lt
 800bff6:	2301      	movlt	r3, #1
 800bff8:	69e0      	ldr	r0, [r4, #28]
 800bffa:	2100      	movs	r1, #0
 800bffc:	2204      	movs	r2, #4
 800bffe:	f102 0614 	add.w	r6, r2, #20
 800c002:	429e      	cmp	r6, r3
 800c004:	d93d      	bls.n	800c082 <_dtoa_r+0x31a>
 800c006:	6041      	str	r1, [r0, #4]
 800c008:	4620      	mov	r0, r4
 800c00a:	f000 fd9f 	bl	800cb4c <_Balloc>
 800c00e:	9000      	str	r0, [sp, #0]
 800c010:	2800      	cmp	r0, #0
 800c012:	d139      	bne.n	800c088 <_dtoa_r+0x320>
 800c014:	4b16      	ldr	r3, [pc, #88]	; (800c070 <_dtoa_r+0x308>)
 800c016:	4602      	mov	r2, r0
 800c018:	f240 11af 	movw	r1, #431	; 0x1af
 800c01c:	e6bd      	b.n	800bd9a <_dtoa_r+0x32>
 800c01e:	2301      	movs	r3, #1
 800c020:	e7e1      	b.n	800bfe6 <_dtoa_r+0x27e>
 800c022:	2501      	movs	r5, #1
 800c024:	2300      	movs	r3, #0
 800c026:	9307      	str	r3, [sp, #28]
 800c028:	9509      	str	r5, [sp, #36]	; 0x24
 800c02a:	f04f 33ff 	mov.w	r3, #4294967295
 800c02e:	9301      	str	r3, [sp, #4]
 800c030:	9304      	str	r3, [sp, #16]
 800c032:	2200      	movs	r2, #0
 800c034:	2312      	movs	r3, #18
 800c036:	e7d1      	b.n	800bfdc <_dtoa_r+0x274>
 800c038:	636f4361 	.word	0x636f4361
 800c03c:	3fd287a7 	.word	0x3fd287a7
 800c040:	8b60c8b3 	.word	0x8b60c8b3
 800c044:	3fc68a28 	.word	0x3fc68a28
 800c048:	509f79fb 	.word	0x509f79fb
 800c04c:	3fd34413 	.word	0x3fd34413
 800c050:	0800dd95 	.word	0x0800dd95
 800c054:	0800ddac 	.word	0x0800ddac
 800c058:	7ff00000 	.word	0x7ff00000
 800c05c:	0800dd91 	.word	0x0800dd91
 800c060:	0800dd88 	.word	0x0800dd88
 800c064:	0800dd65 	.word	0x0800dd65
 800c068:	3ff80000 	.word	0x3ff80000
 800c06c:	0800de98 	.word	0x0800de98
 800c070:	0800de04 	.word	0x0800de04
 800c074:	2301      	movs	r3, #1
 800c076:	9309      	str	r3, [sp, #36]	; 0x24
 800c078:	e7d7      	b.n	800c02a <_dtoa_r+0x2c2>
 800c07a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c07c:	9301      	str	r3, [sp, #4]
 800c07e:	9304      	str	r3, [sp, #16]
 800c080:	e7ba      	b.n	800bff8 <_dtoa_r+0x290>
 800c082:	3101      	adds	r1, #1
 800c084:	0052      	lsls	r2, r2, #1
 800c086:	e7ba      	b.n	800bffe <_dtoa_r+0x296>
 800c088:	69e3      	ldr	r3, [r4, #28]
 800c08a:	9a00      	ldr	r2, [sp, #0]
 800c08c:	601a      	str	r2, [r3, #0]
 800c08e:	9b04      	ldr	r3, [sp, #16]
 800c090:	2b0e      	cmp	r3, #14
 800c092:	f200 80a8 	bhi.w	800c1e6 <_dtoa_r+0x47e>
 800c096:	2d00      	cmp	r5, #0
 800c098:	f000 80a5 	beq.w	800c1e6 <_dtoa_r+0x47e>
 800c09c:	f1bb 0f00 	cmp.w	fp, #0
 800c0a0:	dd38      	ble.n	800c114 <_dtoa_r+0x3ac>
 800c0a2:	4bc0      	ldr	r3, [pc, #768]	; (800c3a4 <_dtoa_r+0x63c>)
 800c0a4:	f00b 020f 	and.w	r2, fp, #15
 800c0a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c0ac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c0b0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c0b4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c0b8:	d019      	beq.n	800c0ee <_dtoa_r+0x386>
 800c0ba:	4bbb      	ldr	r3, [pc, #748]	; (800c3a8 <_dtoa_r+0x640>)
 800c0bc:	ec51 0b18 	vmov	r0, r1, d8
 800c0c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c0c4:	f7f4 fbd2 	bl	800086c <__aeabi_ddiv>
 800c0c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0cc:	f008 080f 	and.w	r8, r8, #15
 800c0d0:	2503      	movs	r5, #3
 800c0d2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c3a8 <_dtoa_r+0x640>
 800c0d6:	f1b8 0f00 	cmp.w	r8, #0
 800c0da:	d10a      	bne.n	800c0f2 <_dtoa_r+0x38a>
 800c0dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0e0:	4632      	mov	r2, r6
 800c0e2:	463b      	mov	r3, r7
 800c0e4:	f7f4 fbc2 	bl	800086c <__aeabi_ddiv>
 800c0e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0ec:	e02b      	b.n	800c146 <_dtoa_r+0x3de>
 800c0ee:	2502      	movs	r5, #2
 800c0f0:	e7ef      	b.n	800c0d2 <_dtoa_r+0x36a>
 800c0f2:	f018 0f01 	tst.w	r8, #1
 800c0f6:	d008      	beq.n	800c10a <_dtoa_r+0x3a2>
 800c0f8:	4630      	mov	r0, r6
 800c0fa:	4639      	mov	r1, r7
 800c0fc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c100:	f7f4 fa8a 	bl	8000618 <__aeabi_dmul>
 800c104:	3501      	adds	r5, #1
 800c106:	4606      	mov	r6, r0
 800c108:	460f      	mov	r7, r1
 800c10a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c10e:	f109 0908 	add.w	r9, r9, #8
 800c112:	e7e0      	b.n	800c0d6 <_dtoa_r+0x36e>
 800c114:	f000 809f 	beq.w	800c256 <_dtoa_r+0x4ee>
 800c118:	f1cb 0600 	rsb	r6, fp, #0
 800c11c:	4ba1      	ldr	r3, [pc, #644]	; (800c3a4 <_dtoa_r+0x63c>)
 800c11e:	4fa2      	ldr	r7, [pc, #648]	; (800c3a8 <_dtoa_r+0x640>)
 800c120:	f006 020f 	and.w	r2, r6, #15
 800c124:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c12c:	ec51 0b18 	vmov	r0, r1, d8
 800c130:	f7f4 fa72 	bl	8000618 <__aeabi_dmul>
 800c134:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c138:	1136      	asrs	r6, r6, #4
 800c13a:	2300      	movs	r3, #0
 800c13c:	2502      	movs	r5, #2
 800c13e:	2e00      	cmp	r6, #0
 800c140:	d17e      	bne.n	800c240 <_dtoa_r+0x4d8>
 800c142:	2b00      	cmp	r3, #0
 800c144:	d1d0      	bne.n	800c0e8 <_dtoa_r+0x380>
 800c146:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c148:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	f000 8084 	beq.w	800c25a <_dtoa_r+0x4f2>
 800c152:	4b96      	ldr	r3, [pc, #600]	; (800c3ac <_dtoa_r+0x644>)
 800c154:	2200      	movs	r2, #0
 800c156:	4640      	mov	r0, r8
 800c158:	4649      	mov	r1, r9
 800c15a:	f7f4 fccf 	bl	8000afc <__aeabi_dcmplt>
 800c15e:	2800      	cmp	r0, #0
 800c160:	d07b      	beq.n	800c25a <_dtoa_r+0x4f2>
 800c162:	9b04      	ldr	r3, [sp, #16]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d078      	beq.n	800c25a <_dtoa_r+0x4f2>
 800c168:	9b01      	ldr	r3, [sp, #4]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	dd39      	ble.n	800c1e2 <_dtoa_r+0x47a>
 800c16e:	4b90      	ldr	r3, [pc, #576]	; (800c3b0 <_dtoa_r+0x648>)
 800c170:	2200      	movs	r2, #0
 800c172:	4640      	mov	r0, r8
 800c174:	4649      	mov	r1, r9
 800c176:	f7f4 fa4f 	bl	8000618 <__aeabi_dmul>
 800c17a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c17e:	9e01      	ldr	r6, [sp, #4]
 800c180:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c184:	3501      	adds	r5, #1
 800c186:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c18a:	4628      	mov	r0, r5
 800c18c:	f7f4 f9da 	bl	8000544 <__aeabi_i2d>
 800c190:	4642      	mov	r2, r8
 800c192:	464b      	mov	r3, r9
 800c194:	f7f4 fa40 	bl	8000618 <__aeabi_dmul>
 800c198:	4b86      	ldr	r3, [pc, #536]	; (800c3b4 <_dtoa_r+0x64c>)
 800c19a:	2200      	movs	r2, #0
 800c19c:	f7f4 f886 	bl	80002ac <__adddf3>
 800c1a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c1a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1a8:	9303      	str	r3, [sp, #12]
 800c1aa:	2e00      	cmp	r6, #0
 800c1ac:	d158      	bne.n	800c260 <_dtoa_r+0x4f8>
 800c1ae:	4b82      	ldr	r3, [pc, #520]	; (800c3b8 <_dtoa_r+0x650>)
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	4640      	mov	r0, r8
 800c1b4:	4649      	mov	r1, r9
 800c1b6:	f7f4 f877 	bl	80002a8 <__aeabi_dsub>
 800c1ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c1be:	4680      	mov	r8, r0
 800c1c0:	4689      	mov	r9, r1
 800c1c2:	f7f4 fcb9 	bl	8000b38 <__aeabi_dcmpgt>
 800c1c6:	2800      	cmp	r0, #0
 800c1c8:	f040 8296 	bne.w	800c6f8 <_dtoa_r+0x990>
 800c1cc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c1d0:	4640      	mov	r0, r8
 800c1d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c1d6:	4649      	mov	r1, r9
 800c1d8:	f7f4 fc90 	bl	8000afc <__aeabi_dcmplt>
 800c1dc:	2800      	cmp	r0, #0
 800c1de:	f040 8289 	bne.w	800c6f4 <_dtoa_r+0x98c>
 800c1e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c1e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	f2c0 814e 	blt.w	800c48a <_dtoa_r+0x722>
 800c1ee:	f1bb 0f0e 	cmp.w	fp, #14
 800c1f2:	f300 814a 	bgt.w	800c48a <_dtoa_r+0x722>
 800c1f6:	4b6b      	ldr	r3, [pc, #428]	; (800c3a4 <_dtoa_r+0x63c>)
 800c1f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c1fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c202:	2b00      	cmp	r3, #0
 800c204:	f280 80dc 	bge.w	800c3c0 <_dtoa_r+0x658>
 800c208:	9b04      	ldr	r3, [sp, #16]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	f300 80d8 	bgt.w	800c3c0 <_dtoa_r+0x658>
 800c210:	f040 826f 	bne.w	800c6f2 <_dtoa_r+0x98a>
 800c214:	4b68      	ldr	r3, [pc, #416]	; (800c3b8 <_dtoa_r+0x650>)
 800c216:	2200      	movs	r2, #0
 800c218:	4640      	mov	r0, r8
 800c21a:	4649      	mov	r1, r9
 800c21c:	f7f4 f9fc 	bl	8000618 <__aeabi_dmul>
 800c220:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c224:	f7f4 fc7e 	bl	8000b24 <__aeabi_dcmpge>
 800c228:	9e04      	ldr	r6, [sp, #16]
 800c22a:	4637      	mov	r7, r6
 800c22c:	2800      	cmp	r0, #0
 800c22e:	f040 8245 	bne.w	800c6bc <_dtoa_r+0x954>
 800c232:	9d00      	ldr	r5, [sp, #0]
 800c234:	2331      	movs	r3, #49	; 0x31
 800c236:	f805 3b01 	strb.w	r3, [r5], #1
 800c23a:	f10b 0b01 	add.w	fp, fp, #1
 800c23e:	e241      	b.n	800c6c4 <_dtoa_r+0x95c>
 800c240:	07f2      	lsls	r2, r6, #31
 800c242:	d505      	bpl.n	800c250 <_dtoa_r+0x4e8>
 800c244:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c248:	f7f4 f9e6 	bl	8000618 <__aeabi_dmul>
 800c24c:	3501      	adds	r5, #1
 800c24e:	2301      	movs	r3, #1
 800c250:	1076      	asrs	r6, r6, #1
 800c252:	3708      	adds	r7, #8
 800c254:	e773      	b.n	800c13e <_dtoa_r+0x3d6>
 800c256:	2502      	movs	r5, #2
 800c258:	e775      	b.n	800c146 <_dtoa_r+0x3de>
 800c25a:	9e04      	ldr	r6, [sp, #16]
 800c25c:	465f      	mov	r7, fp
 800c25e:	e792      	b.n	800c186 <_dtoa_r+0x41e>
 800c260:	9900      	ldr	r1, [sp, #0]
 800c262:	4b50      	ldr	r3, [pc, #320]	; (800c3a4 <_dtoa_r+0x63c>)
 800c264:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c268:	4431      	add	r1, r6
 800c26a:	9102      	str	r1, [sp, #8]
 800c26c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c26e:	eeb0 9a47 	vmov.f32	s18, s14
 800c272:	eef0 9a67 	vmov.f32	s19, s15
 800c276:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c27a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c27e:	2900      	cmp	r1, #0
 800c280:	d044      	beq.n	800c30c <_dtoa_r+0x5a4>
 800c282:	494e      	ldr	r1, [pc, #312]	; (800c3bc <_dtoa_r+0x654>)
 800c284:	2000      	movs	r0, #0
 800c286:	f7f4 faf1 	bl	800086c <__aeabi_ddiv>
 800c28a:	ec53 2b19 	vmov	r2, r3, d9
 800c28e:	f7f4 f80b 	bl	80002a8 <__aeabi_dsub>
 800c292:	9d00      	ldr	r5, [sp, #0]
 800c294:	ec41 0b19 	vmov	d9, r0, r1
 800c298:	4649      	mov	r1, r9
 800c29a:	4640      	mov	r0, r8
 800c29c:	f7f4 fc6c 	bl	8000b78 <__aeabi_d2iz>
 800c2a0:	4606      	mov	r6, r0
 800c2a2:	f7f4 f94f 	bl	8000544 <__aeabi_i2d>
 800c2a6:	4602      	mov	r2, r0
 800c2a8:	460b      	mov	r3, r1
 800c2aa:	4640      	mov	r0, r8
 800c2ac:	4649      	mov	r1, r9
 800c2ae:	f7f3 fffb 	bl	80002a8 <__aeabi_dsub>
 800c2b2:	3630      	adds	r6, #48	; 0x30
 800c2b4:	f805 6b01 	strb.w	r6, [r5], #1
 800c2b8:	ec53 2b19 	vmov	r2, r3, d9
 800c2bc:	4680      	mov	r8, r0
 800c2be:	4689      	mov	r9, r1
 800c2c0:	f7f4 fc1c 	bl	8000afc <__aeabi_dcmplt>
 800c2c4:	2800      	cmp	r0, #0
 800c2c6:	d164      	bne.n	800c392 <_dtoa_r+0x62a>
 800c2c8:	4642      	mov	r2, r8
 800c2ca:	464b      	mov	r3, r9
 800c2cc:	4937      	ldr	r1, [pc, #220]	; (800c3ac <_dtoa_r+0x644>)
 800c2ce:	2000      	movs	r0, #0
 800c2d0:	f7f3 ffea 	bl	80002a8 <__aeabi_dsub>
 800c2d4:	ec53 2b19 	vmov	r2, r3, d9
 800c2d8:	f7f4 fc10 	bl	8000afc <__aeabi_dcmplt>
 800c2dc:	2800      	cmp	r0, #0
 800c2de:	f040 80b6 	bne.w	800c44e <_dtoa_r+0x6e6>
 800c2e2:	9b02      	ldr	r3, [sp, #8]
 800c2e4:	429d      	cmp	r5, r3
 800c2e6:	f43f af7c 	beq.w	800c1e2 <_dtoa_r+0x47a>
 800c2ea:	4b31      	ldr	r3, [pc, #196]	; (800c3b0 <_dtoa_r+0x648>)
 800c2ec:	ec51 0b19 	vmov	r0, r1, d9
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	f7f4 f991 	bl	8000618 <__aeabi_dmul>
 800c2f6:	4b2e      	ldr	r3, [pc, #184]	; (800c3b0 <_dtoa_r+0x648>)
 800c2f8:	ec41 0b19 	vmov	d9, r0, r1
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	4640      	mov	r0, r8
 800c300:	4649      	mov	r1, r9
 800c302:	f7f4 f989 	bl	8000618 <__aeabi_dmul>
 800c306:	4680      	mov	r8, r0
 800c308:	4689      	mov	r9, r1
 800c30a:	e7c5      	b.n	800c298 <_dtoa_r+0x530>
 800c30c:	ec51 0b17 	vmov	r0, r1, d7
 800c310:	f7f4 f982 	bl	8000618 <__aeabi_dmul>
 800c314:	9b02      	ldr	r3, [sp, #8]
 800c316:	9d00      	ldr	r5, [sp, #0]
 800c318:	930f      	str	r3, [sp, #60]	; 0x3c
 800c31a:	ec41 0b19 	vmov	d9, r0, r1
 800c31e:	4649      	mov	r1, r9
 800c320:	4640      	mov	r0, r8
 800c322:	f7f4 fc29 	bl	8000b78 <__aeabi_d2iz>
 800c326:	4606      	mov	r6, r0
 800c328:	f7f4 f90c 	bl	8000544 <__aeabi_i2d>
 800c32c:	3630      	adds	r6, #48	; 0x30
 800c32e:	4602      	mov	r2, r0
 800c330:	460b      	mov	r3, r1
 800c332:	4640      	mov	r0, r8
 800c334:	4649      	mov	r1, r9
 800c336:	f7f3 ffb7 	bl	80002a8 <__aeabi_dsub>
 800c33a:	f805 6b01 	strb.w	r6, [r5], #1
 800c33e:	9b02      	ldr	r3, [sp, #8]
 800c340:	429d      	cmp	r5, r3
 800c342:	4680      	mov	r8, r0
 800c344:	4689      	mov	r9, r1
 800c346:	f04f 0200 	mov.w	r2, #0
 800c34a:	d124      	bne.n	800c396 <_dtoa_r+0x62e>
 800c34c:	4b1b      	ldr	r3, [pc, #108]	; (800c3bc <_dtoa_r+0x654>)
 800c34e:	ec51 0b19 	vmov	r0, r1, d9
 800c352:	f7f3 ffab 	bl	80002ac <__adddf3>
 800c356:	4602      	mov	r2, r0
 800c358:	460b      	mov	r3, r1
 800c35a:	4640      	mov	r0, r8
 800c35c:	4649      	mov	r1, r9
 800c35e:	f7f4 fbeb 	bl	8000b38 <__aeabi_dcmpgt>
 800c362:	2800      	cmp	r0, #0
 800c364:	d173      	bne.n	800c44e <_dtoa_r+0x6e6>
 800c366:	ec53 2b19 	vmov	r2, r3, d9
 800c36a:	4914      	ldr	r1, [pc, #80]	; (800c3bc <_dtoa_r+0x654>)
 800c36c:	2000      	movs	r0, #0
 800c36e:	f7f3 ff9b 	bl	80002a8 <__aeabi_dsub>
 800c372:	4602      	mov	r2, r0
 800c374:	460b      	mov	r3, r1
 800c376:	4640      	mov	r0, r8
 800c378:	4649      	mov	r1, r9
 800c37a:	f7f4 fbbf 	bl	8000afc <__aeabi_dcmplt>
 800c37e:	2800      	cmp	r0, #0
 800c380:	f43f af2f 	beq.w	800c1e2 <_dtoa_r+0x47a>
 800c384:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c386:	1e6b      	subs	r3, r5, #1
 800c388:	930f      	str	r3, [sp, #60]	; 0x3c
 800c38a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c38e:	2b30      	cmp	r3, #48	; 0x30
 800c390:	d0f8      	beq.n	800c384 <_dtoa_r+0x61c>
 800c392:	46bb      	mov	fp, r7
 800c394:	e04a      	b.n	800c42c <_dtoa_r+0x6c4>
 800c396:	4b06      	ldr	r3, [pc, #24]	; (800c3b0 <_dtoa_r+0x648>)
 800c398:	f7f4 f93e 	bl	8000618 <__aeabi_dmul>
 800c39c:	4680      	mov	r8, r0
 800c39e:	4689      	mov	r9, r1
 800c3a0:	e7bd      	b.n	800c31e <_dtoa_r+0x5b6>
 800c3a2:	bf00      	nop
 800c3a4:	0800de98 	.word	0x0800de98
 800c3a8:	0800de70 	.word	0x0800de70
 800c3ac:	3ff00000 	.word	0x3ff00000
 800c3b0:	40240000 	.word	0x40240000
 800c3b4:	401c0000 	.word	0x401c0000
 800c3b8:	40140000 	.word	0x40140000
 800c3bc:	3fe00000 	.word	0x3fe00000
 800c3c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c3c4:	9d00      	ldr	r5, [sp, #0]
 800c3c6:	4642      	mov	r2, r8
 800c3c8:	464b      	mov	r3, r9
 800c3ca:	4630      	mov	r0, r6
 800c3cc:	4639      	mov	r1, r7
 800c3ce:	f7f4 fa4d 	bl	800086c <__aeabi_ddiv>
 800c3d2:	f7f4 fbd1 	bl	8000b78 <__aeabi_d2iz>
 800c3d6:	9001      	str	r0, [sp, #4]
 800c3d8:	f7f4 f8b4 	bl	8000544 <__aeabi_i2d>
 800c3dc:	4642      	mov	r2, r8
 800c3de:	464b      	mov	r3, r9
 800c3e0:	f7f4 f91a 	bl	8000618 <__aeabi_dmul>
 800c3e4:	4602      	mov	r2, r0
 800c3e6:	460b      	mov	r3, r1
 800c3e8:	4630      	mov	r0, r6
 800c3ea:	4639      	mov	r1, r7
 800c3ec:	f7f3 ff5c 	bl	80002a8 <__aeabi_dsub>
 800c3f0:	9e01      	ldr	r6, [sp, #4]
 800c3f2:	9f04      	ldr	r7, [sp, #16]
 800c3f4:	3630      	adds	r6, #48	; 0x30
 800c3f6:	f805 6b01 	strb.w	r6, [r5], #1
 800c3fa:	9e00      	ldr	r6, [sp, #0]
 800c3fc:	1bae      	subs	r6, r5, r6
 800c3fe:	42b7      	cmp	r7, r6
 800c400:	4602      	mov	r2, r0
 800c402:	460b      	mov	r3, r1
 800c404:	d134      	bne.n	800c470 <_dtoa_r+0x708>
 800c406:	f7f3 ff51 	bl	80002ac <__adddf3>
 800c40a:	4642      	mov	r2, r8
 800c40c:	464b      	mov	r3, r9
 800c40e:	4606      	mov	r6, r0
 800c410:	460f      	mov	r7, r1
 800c412:	f7f4 fb91 	bl	8000b38 <__aeabi_dcmpgt>
 800c416:	b9c8      	cbnz	r0, 800c44c <_dtoa_r+0x6e4>
 800c418:	4642      	mov	r2, r8
 800c41a:	464b      	mov	r3, r9
 800c41c:	4630      	mov	r0, r6
 800c41e:	4639      	mov	r1, r7
 800c420:	f7f4 fb62 	bl	8000ae8 <__aeabi_dcmpeq>
 800c424:	b110      	cbz	r0, 800c42c <_dtoa_r+0x6c4>
 800c426:	9b01      	ldr	r3, [sp, #4]
 800c428:	07db      	lsls	r3, r3, #31
 800c42a:	d40f      	bmi.n	800c44c <_dtoa_r+0x6e4>
 800c42c:	4651      	mov	r1, sl
 800c42e:	4620      	mov	r0, r4
 800c430:	f000 fbcc 	bl	800cbcc <_Bfree>
 800c434:	2300      	movs	r3, #0
 800c436:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c438:	702b      	strb	r3, [r5, #0]
 800c43a:	f10b 0301 	add.w	r3, fp, #1
 800c43e:	6013      	str	r3, [r2, #0]
 800c440:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c442:	2b00      	cmp	r3, #0
 800c444:	f43f ace2 	beq.w	800be0c <_dtoa_r+0xa4>
 800c448:	601d      	str	r5, [r3, #0]
 800c44a:	e4df      	b.n	800be0c <_dtoa_r+0xa4>
 800c44c:	465f      	mov	r7, fp
 800c44e:	462b      	mov	r3, r5
 800c450:	461d      	mov	r5, r3
 800c452:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c456:	2a39      	cmp	r2, #57	; 0x39
 800c458:	d106      	bne.n	800c468 <_dtoa_r+0x700>
 800c45a:	9a00      	ldr	r2, [sp, #0]
 800c45c:	429a      	cmp	r2, r3
 800c45e:	d1f7      	bne.n	800c450 <_dtoa_r+0x6e8>
 800c460:	9900      	ldr	r1, [sp, #0]
 800c462:	2230      	movs	r2, #48	; 0x30
 800c464:	3701      	adds	r7, #1
 800c466:	700a      	strb	r2, [r1, #0]
 800c468:	781a      	ldrb	r2, [r3, #0]
 800c46a:	3201      	adds	r2, #1
 800c46c:	701a      	strb	r2, [r3, #0]
 800c46e:	e790      	b.n	800c392 <_dtoa_r+0x62a>
 800c470:	4ba3      	ldr	r3, [pc, #652]	; (800c700 <_dtoa_r+0x998>)
 800c472:	2200      	movs	r2, #0
 800c474:	f7f4 f8d0 	bl	8000618 <__aeabi_dmul>
 800c478:	2200      	movs	r2, #0
 800c47a:	2300      	movs	r3, #0
 800c47c:	4606      	mov	r6, r0
 800c47e:	460f      	mov	r7, r1
 800c480:	f7f4 fb32 	bl	8000ae8 <__aeabi_dcmpeq>
 800c484:	2800      	cmp	r0, #0
 800c486:	d09e      	beq.n	800c3c6 <_dtoa_r+0x65e>
 800c488:	e7d0      	b.n	800c42c <_dtoa_r+0x6c4>
 800c48a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c48c:	2a00      	cmp	r2, #0
 800c48e:	f000 80ca 	beq.w	800c626 <_dtoa_r+0x8be>
 800c492:	9a07      	ldr	r2, [sp, #28]
 800c494:	2a01      	cmp	r2, #1
 800c496:	f300 80ad 	bgt.w	800c5f4 <_dtoa_r+0x88c>
 800c49a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c49c:	2a00      	cmp	r2, #0
 800c49e:	f000 80a5 	beq.w	800c5ec <_dtoa_r+0x884>
 800c4a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c4a6:	9e08      	ldr	r6, [sp, #32]
 800c4a8:	9d05      	ldr	r5, [sp, #20]
 800c4aa:	9a05      	ldr	r2, [sp, #20]
 800c4ac:	441a      	add	r2, r3
 800c4ae:	9205      	str	r2, [sp, #20]
 800c4b0:	9a06      	ldr	r2, [sp, #24]
 800c4b2:	2101      	movs	r1, #1
 800c4b4:	441a      	add	r2, r3
 800c4b6:	4620      	mov	r0, r4
 800c4b8:	9206      	str	r2, [sp, #24]
 800c4ba:	f000 fc3d 	bl	800cd38 <__i2b>
 800c4be:	4607      	mov	r7, r0
 800c4c0:	b165      	cbz	r5, 800c4dc <_dtoa_r+0x774>
 800c4c2:	9b06      	ldr	r3, [sp, #24]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	dd09      	ble.n	800c4dc <_dtoa_r+0x774>
 800c4c8:	42ab      	cmp	r3, r5
 800c4ca:	9a05      	ldr	r2, [sp, #20]
 800c4cc:	bfa8      	it	ge
 800c4ce:	462b      	movge	r3, r5
 800c4d0:	1ad2      	subs	r2, r2, r3
 800c4d2:	9205      	str	r2, [sp, #20]
 800c4d4:	9a06      	ldr	r2, [sp, #24]
 800c4d6:	1aed      	subs	r5, r5, r3
 800c4d8:	1ad3      	subs	r3, r2, r3
 800c4da:	9306      	str	r3, [sp, #24]
 800c4dc:	9b08      	ldr	r3, [sp, #32]
 800c4de:	b1f3      	cbz	r3, 800c51e <_dtoa_r+0x7b6>
 800c4e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	f000 80a3 	beq.w	800c62e <_dtoa_r+0x8c6>
 800c4e8:	2e00      	cmp	r6, #0
 800c4ea:	dd10      	ble.n	800c50e <_dtoa_r+0x7a6>
 800c4ec:	4639      	mov	r1, r7
 800c4ee:	4632      	mov	r2, r6
 800c4f0:	4620      	mov	r0, r4
 800c4f2:	f000 fce1 	bl	800ceb8 <__pow5mult>
 800c4f6:	4652      	mov	r2, sl
 800c4f8:	4601      	mov	r1, r0
 800c4fa:	4607      	mov	r7, r0
 800c4fc:	4620      	mov	r0, r4
 800c4fe:	f000 fc31 	bl	800cd64 <__multiply>
 800c502:	4651      	mov	r1, sl
 800c504:	4680      	mov	r8, r0
 800c506:	4620      	mov	r0, r4
 800c508:	f000 fb60 	bl	800cbcc <_Bfree>
 800c50c:	46c2      	mov	sl, r8
 800c50e:	9b08      	ldr	r3, [sp, #32]
 800c510:	1b9a      	subs	r2, r3, r6
 800c512:	d004      	beq.n	800c51e <_dtoa_r+0x7b6>
 800c514:	4651      	mov	r1, sl
 800c516:	4620      	mov	r0, r4
 800c518:	f000 fcce 	bl	800ceb8 <__pow5mult>
 800c51c:	4682      	mov	sl, r0
 800c51e:	2101      	movs	r1, #1
 800c520:	4620      	mov	r0, r4
 800c522:	f000 fc09 	bl	800cd38 <__i2b>
 800c526:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c528:	2b00      	cmp	r3, #0
 800c52a:	4606      	mov	r6, r0
 800c52c:	f340 8081 	ble.w	800c632 <_dtoa_r+0x8ca>
 800c530:	461a      	mov	r2, r3
 800c532:	4601      	mov	r1, r0
 800c534:	4620      	mov	r0, r4
 800c536:	f000 fcbf 	bl	800ceb8 <__pow5mult>
 800c53a:	9b07      	ldr	r3, [sp, #28]
 800c53c:	2b01      	cmp	r3, #1
 800c53e:	4606      	mov	r6, r0
 800c540:	dd7a      	ble.n	800c638 <_dtoa_r+0x8d0>
 800c542:	f04f 0800 	mov.w	r8, #0
 800c546:	6933      	ldr	r3, [r6, #16]
 800c548:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c54c:	6918      	ldr	r0, [r3, #16]
 800c54e:	f000 fba5 	bl	800cc9c <__hi0bits>
 800c552:	f1c0 0020 	rsb	r0, r0, #32
 800c556:	9b06      	ldr	r3, [sp, #24]
 800c558:	4418      	add	r0, r3
 800c55a:	f010 001f 	ands.w	r0, r0, #31
 800c55e:	f000 8094 	beq.w	800c68a <_dtoa_r+0x922>
 800c562:	f1c0 0320 	rsb	r3, r0, #32
 800c566:	2b04      	cmp	r3, #4
 800c568:	f340 8085 	ble.w	800c676 <_dtoa_r+0x90e>
 800c56c:	9b05      	ldr	r3, [sp, #20]
 800c56e:	f1c0 001c 	rsb	r0, r0, #28
 800c572:	4403      	add	r3, r0
 800c574:	9305      	str	r3, [sp, #20]
 800c576:	9b06      	ldr	r3, [sp, #24]
 800c578:	4403      	add	r3, r0
 800c57a:	4405      	add	r5, r0
 800c57c:	9306      	str	r3, [sp, #24]
 800c57e:	9b05      	ldr	r3, [sp, #20]
 800c580:	2b00      	cmp	r3, #0
 800c582:	dd05      	ble.n	800c590 <_dtoa_r+0x828>
 800c584:	4651      	mov	r1, sl
 800c586:	461a      	mov	r2, r3
 800c588:	4620      	mov	r0, r4
 800c58a:	f000 fcef 	bl	800cf6c <__lshift>
 800c58e:	4682      	mov	sl, r0
 800c590:	9b06      	ldr	r3, [sp, #24]
 800c592:	2b00      	cmp	r3, #0
 800c594:	dd05      	ble.n	800c5a2 <_dtoa_r+0x83a>
 800c596:	4631      	mov	r1, r6
 800c598:	461a      	mov	r2, r3
 800c59a:	4620      	mov	r0, r4
 800c59c:	f000 fce6 	bl	800cf6c <__lshift>
 800c5a0:	4606      	mov	r6, r0
 800c5a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d072      	beq.n	800c68e <_dtoa_r+0x926>
 800c5a8:	4631      	mov	r1, r6
 800c5aa:	4650      	mov	r0, sl
 800c5ac:	f000 fd4a 	bl	800d044 <__mcmp>
 800c5b0:	2800      	cmp	r0, #0
 800c5b2:	da6c      	bge.n	800c68e <_dtoa_r+0x926>
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	4651      	mov	r1, sl
 800c5b8:	220a      	movs	r2, #10
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	f000 fb28 	bl	800cc10 <__multadd>
 800c5c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c5c6:	4682      	mov	sl, r0
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	f000 81b0 	beq.w	800c92e <_dtoa_r+0xbc6>
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	4639      	mov	r1, r7
 800c5d2:	220a      	movs	r2, #10
 800c5d4:	4620      	mov	r0, r4
 800c5d6:	f000 fb1b 	bl	800cc10 <__multadd>
 800c5da:	9b01      	ldr	r3, [sp, #4]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	4607      	mov	r7, r0
 800c5e0:	f300 8096 	bgt.w	800c710 <_dtoa_r+0x9a8>
 800c5e4:	9b07      	ldr	r3, [sp, #28]
 800c5e6:	2b02      	cmp	r3, #2
 800c5e8:	dc59      	bgt.n	800c69e <_dtoa_r+0x936>
 800c5ea:	e091      	b.n	800c710 <_dtoa_r+0x9a8>
 800c5ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c5ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c5f2:	e758      	b.n	800c4a6 <_dtoa_r+0x73e>
 800c5f4:	9b04      	ldr	r3, [sp, #16]
 800c5f6:	1e5e      	subs	r6, r3, #1
 800c5f8:	9b08      	ldr	r3, [sp, #32]
 800c5fa:	42b3      	cmp	r3, r6
 800c5fc:	bfbf      	itttt	lt
 800c5fe:	9b08      	ldrlt	r3, [sp, #32]
 800c600:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c602:	9608      	strlt	r6, [sp, #32]
 800c604:	1af3      	sublt	r3, r6, r3
 800c606:	bfb4      	ite	lt
 800c608:	18d2      	addlt	r2, r2, r3
 800c60a:	1b9e      	subge	r6, r3, r6
 800c60c:	9b04      	ldr	r3, [sp, #16]
 800c60e:	bfbc      	itt	lt
 800c610:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c612:	2600      	movlt	r6, #0
 800c614:	2b00      	cmp	r3, #0
 800c616:	bfb7      	itett	lt
 800c618:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c61c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c620:	1a9d      	sublt	r5, r3, r2
 800c622:	2300      	movlt	r3, #0
 800c624:	e741      	b.n	800c4aa <_dtoa_r+0x742>
 800c626:	9e08      	ldr	r6, [sp, #32]
 800c628:	9d05      	ldr	r5, [sp, #20]
 800c62a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c62c:	e748      	b.n	800c4c0 <_dtoa_r+0x758>
 800c62e:	9a08      	ldr	r2, [sp, #32]
 800c630:	e770      	b.n	800c514 <_dtoa_r+0x7ac>
 800c632:	9b07      	ldr	r3, [sp, #28]
 800c634:	2b01      	cmp	r3, #1
 800c636:	dc19      	bgt.n	800c66c <_dtoa_r+0x904>
 800c638:	9b02      	ldr	r3, [sp, #8]
 800c63a:	b9bb      	cbnz	r3, 800c66c <_dtoa_r+0x904>
 800c63c:	9b03      	ldr	r3, [sp, #12]
 800c63e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c642:	b99b      	cbnz	r3, 800c66c <_dtoa_r+0x904>
 800c644:	9b03      	ldr	r3, [sp, #12]
 800c646:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c64a:	0d1b      	lsrs	r3, r3, #20
 800c64c:	051b      	lsls	r3, r3, #20
 800c64e:	b183      	cbz	r3, 800c672 <_dtoa_r+0x90a>
 800c650:	9b05      	ldr	r3, [sp, #20]
 800c652:	3301      	adds	r3, #1
 800c654:	9305      	str	r3, [sp, #20]
 800c656:	9b06      	ldr	r3, [sp, #24]
 800c658:	3301      	adds	r3, #1
 800c65a:	9306      	str	r3, [sp, #24]
 800c65c:	f04f 0801 	mov.w	r8, #1
 800c660:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c662:	2b00      	cmp	r3, #0
 800c664:	f47f af6f 	bne.w	800c546 <_dtoa_r+0x7de>
 800c668:	2001      	movs	r0, #1
 800c66a:	e774      	b.n	800c556 <_dtoa_r+0x7ee>
 800c66c:	f04f 0800 	mov.w	r8, #0
 800c670:	e7f6      	b.n	800c660 <_dtoa_r+0x8f8>
 800c672:	4698      	mov	r8, r3
 800c674:	e7f4      	b.n	800c660 <_dtoa_r+0x8f8>
 800c676:	d082      	beq.n	800c57e <_dtoa_r+0x816>
 800c678:	9a05      	ldr	r2, [sp, #20]
 800c67a:	331c      	adds	r3, #28
 800c67c:	441a      	add	r2, r3
 800c67e:	9205      	str	r2, [sp, #20]
 800c680:	9a06      	ldr	r2, [sp, #24]
 800c682:	441a      	add	r2, r3
 800c684:	441d      	add	r5, r3
 800c686:	9206      	str	r2, [sp, #24]
 800c688:	e779      	b.n	800c57e <_dtoa_r+0x816>
 800c68a:	4603      	mov	r3, r0
 800c68c:	e7f4      	b.n	800c678 <_dtoa_r+0x910>
 800c68e:	9b04      	ldr	r3, [sp, #16]
 800c690:	2b00      	cmp	r3, #0
 800c692:	dc37      	bgt.n	800c704 <_dtoa_r+0x99c>
 800c694:	9b07      	ldr	r3, [sp, #28]
 800c696:	2b02      	cmp	r3, #2
 800c698:	dd34      	ble.n	800c704 <_dtoa_r+0x99c>
 800c69a:	9b04      	ldr	r3, [sp, #16]
 800c69c:	9301      	str	r3, [sp, #4]
 800c69e:	9b01      	ldr	r3, [sp, #4]
 800c6a0:	b963      	cbnz	r3, 800c6bc <_dtoa_r+0x954>
 800c6a2:	4631      	mov	r1, r6
 800c6a4:	2205      	movs	r2, #5
 800c6a6:	4620      	mov	r0, r4
 800c6a8:	f000 fab2 	bl	800cc10 <__multadd>
 800c6ac:	4601      	mov	r1, r0
 800c6ae:	4606      	mov	r6, r0
 800c6b0:	4650      	mov	r0, sl
 800c6b2:	f000 fcc7 	bl	800d044 <__mcmp>
 800c6b6:	2800      	cmp	r0, #0
 800c6b8:	f73f adbb 	bgt.w	800c232 <_dtoa_r+0x4ca>
 800c6bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6be:	9d00      	ldr	r5, [sp, #0]
 800c6c0:	ea6f 0b03 	mvn.w	fp, r3
 800c6c4:	f04f 0800 	mov.w	r8, #0
 800c6c8:	4631      	mov	r1, r6
 800c6ca:	4620      	mov	r0, r4
 800c6cc:	f000 fa7e 	bl	800cbcc <_Bfree>
 800c6d0:	2f00      	cmp	r7, #0
 800c6d2:	f43f aeab 	beq.w	800c42c <_dtoa_r+0x6c4>
 800c6d6:	f1b8 0f00 	cmp.w	r8, #0
 800c6da:	d005      	beq.n	800c6e8 <_dtoa_r+0x980>
 800c6dc:	45b8      	cmp	r8, r7
 800c6de:	d003      	beq.n	800c6e8 <_dtoa_r+0x980>
 800c6e0:	4641      	mov	r1, r8
 800c6e2:	4620      	mov	r0, r4
 800c6e4:	f000 fa72 	bl	800cbcc <_Bfree>
 800c6e8:	4639      	mov	r1, r7
 800c6ea:	4620      	mov	r0, r4
 800c6ec:	f000 fa6e 	bl	800cbcc <_Bfree>
 800c6f0:	e69c      	b.n	800c42c <_dtoa_r+0x6c4>
 800c6f2:	2600      	movs	r6, #0
 800c6f4:	4637      	mov	r7, r6
 800c6f6:	e7e1      	b.n	800c6bc <_dtoa_r+0x954>
 800c6f8:	46bb      	mov	fp, r7
 800c6fa:	4637      	mov	r7, r6
 800c6fc:	e599      	b.n	800c232 <_dtoa_r+0x4ca>
 800c6fe:	bf00      	nop
 800c700:	40240000 	.word	0x40240000
 800c704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c706:	2b00      	cmp	r3, #0
 800c708:	f000 80c8 	beq.w	800c89c <_dtoa_r+0xb34>
 800c70c:	9b04      	ldr	r3, [sp, #16]
 800c70e:	9301      	str	r3, [sp, #4]
 800c710:	2d00      	cmp	r5, #0
 800c712:	dd05      	ble.n	800c720 <_dtoa_r+0x9b8>
 800c714:	4639      	mov	r1, r7
 800c716:	462a      	mov	r2, r5
 800c718:	4620      	mov	r0, r4
 800c71a:	f000 fc27 	bl	800cf6c <__lshift>
 800c71e:	4607      	mov	r7, r0
 800c720:	f1b8 0f00 	cmp.w	r8, #0
 800c724:	d05b      	beq.n	800c7de <_dtoa_r+0xa76>
 800c726:	6879      	ldr	r1, [r7, #4]
 800c728:	4620      	mov	r0, r4
 800c72a:	f000 fa0f 	bl	800cb4c <_Balloc>
 800c72e:	4605      	mov	r5, r0
 800c730:	b928      	cbnz	r0, 800c73e <_dtoa_r+0x9d6>
 800c732:	4b83      	ldr	r3, [pc, #524]	; (800c940 <_dtoa_r+0xbd8>)
 800c734:	4602      	mov	r2, r0
 800c736:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c73a:	f7ff bb2e 	b.w	800bd9a <_dtoa_r+0x32>
 800c73e:	693a      	ldr	r2, [r7, #16]
 800c740:	3202      	adds	r2, #2
 800c742:	0092      	lsls	r2, r2, #2
 800c744:	f107 010c 	add.w	r1, r7, #12
 800c748:	300c      	adds	r0, #12
 800c74a:	f7ff fa74 	bl	800bc36 <memcpy>
 800c74e:	2201      	movs	r2, #1
 800c750:	4629      	mov	r1, r5
 800c752:	4620      	mov	r0, r4
 800c754:	f000 fc0a 	bl	800cf6c <__lshift>
 800c758:	9b00      	ldr	r3, [sp, #0]
 800c75a:	3301      	adds	r3, #1
 800c75c:	9304      	str	r3, [sp, #16]
 800c75e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c762:	4413      	add	r3, r2
 800c764:	9308      	str	r3, [sp, #32]
 800c766:	9b02      	ldr	r3, [sp, #8]
 800c768:	f003 0301 	and.w	r3, r3, #1
 800c76c:	46b8      	mov	r8, r7
 800c76e:	9306      	str	r3, [sp, #24]
 800c770:	4607      	mov	r7, r0
 800c772:	9b04      	ldr	r3, [sp, #16]
 800c774:	4631      	mov	r1, r6
 800c776:	3b01      	subs	r3, #1
 800c778:	4650      	mov	r0, sl
 800c77a:	9301      	str	r3, [sp, #4]
 800c77c:	f7ff fa69 	bl	800bc52 <quorem>
 800c780:	4641      	mov	r1, r8
 800c782:	9002      	str	r0, [sp, #8]
 800c784:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c788:	4650      	mov	r0, sl
 800c78a:	f000 fc5b 	bl	800d044 <__mcmp>
 800c78e:	463a      	mov	r2, r7
 800c790:	9005      	str	r0, [sp, #20]
 800c792:	4631      	mov	r1, r6
 800c794:	4620      	mov	r0, r4
 800c796:	f000 fc71 	bl	800d07c <__mdiff>
 800c79a:	68c2      	ldr	r2, [r0, #12]
 800c79c:	4605      	mov	r5, r0
 800c79e:	bb02      	cbnz	r2, 800c7e2 <_dtoa_r+0xa7a>
 800c7a0:	4601      	mov	r1, r0
 800c7a2:	4650      	mov	r0, sl
 800c7a4:	f000 fc4e 	bl	800d044 <__mcmp>
 800c7a8:	4602      	mov	r2, r0
 800c7aa:	4629      	mov	r1, r5
 800c7ac:	4620      	mov	r0, r4
 800c7ae:	9209      	str	r2, [sp, #36]	; 0x24
 800c7b0:	f000 fa0c 	bl	800cbcc <_Bfree>
 800c7b4:	9b07      	ldr	r3, [sp, #28]
 800c7b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7b8:	9d04      	ldr	r5, [sp, #16]
 800c7ba:	ea43 0102 	orr.w	r1, r3, r2
 800c7be:	9b06      	ldr	r3, [sp, #24]
 800c7c0:	4319      	orrs	r1, r3
 800c7c2:	d110      	bne.n	800c7e6 <_dtoa_r+0xa7e>
 800c7c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c7c8:	d029      	beq.n	800c81e <_dtoa_r+0xab6>
 800c7ca:	9b05      	ldr	r3, [sp, #20]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	dd02      	ble.n	800c7d6 <_dtoa_r+0xa6e>
 800c7d0:	9b02      	ldr	r3, [sp, #8]
 800c7d2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c7d6:	9b01      	ldr	r3, [sp, #4]
 800c7d8:	f883 9000 	strb.w	r9, [r3]
 800c7dc:	e774      	b.n	800c6c8 <_dtoa_r+0x960>
 800c7de:	4638      	mov	r0, r7
 800c7e0:	e7ba      	b.n	800c758 <_dtoa_r+0x9f0>
 800c7e2:	2201      	movs	r2, #1
 800c7e4:	e7e1      	b.n	800c7aa <_dtoa_r+0xa42>
 800c7e6:	9b05      	ldr	r3, [sp, #20]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	db04      	blt.n	800c7f6 <_dtoa_r+0xa8e>
 800c7ec:	9907      	ldr	r1, [sp, #28]
 800c7ee:	430b      	orrs	r3, r1
 800c7f0:	9906      	ldr	r1, [sp, #24]
 800c7f2:	430b      	orrs	r3, r1
 800c7f4:	d120      	bne.n	800c838 <_dtoa_r+0xad0>
 800c7f6:	2a00      	cmp	r2, #0
 800c7f8:	dded      	ble.n	800c7d6 <_dtoa_r+0xa6e>
 800c7fa:	4651      	mov	r1, sl
 800c7fc:	2201      	movs	r2, #1
 800c7fe:	4620      	mov	r0, r4
 800c800:	f000 fbb4 	bl	800cf6c <__lshift>
 800c804:	4631      	mov	r1, r6
 800c806:	4682      	mov	sl, r0
 800c808:	f000 fc1c 	bl	800d044 <__mcmp>
 800c80c:	2800      	cmp	r0, #0
 800c80e:	dc03      	bgt.n	800c818 <_dtoa_r+0xab0>
 800c810:	d1e1      	bne.n	800c7d6 <_dtoa_r+0xa6e>
 800c812:	f019 0f01 	tst.w	r9, #1
 800c816:	d0de      	beq.n	800c7d6 <_dtoa_r+0xa6e>
 800c818:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c81c:	d1d8      	bne.n	800c7d0 <_dtoa_r+0xa68>
 800c81e:	9a01      	ldr	r2, [sp, #4]
 800c820:	2339      	movs	r3, #57	; 0x39
 800c822:	7013      	strb	r3, [r2, #0]
 800c824:	462b      	mov	r3, r5
 800c826:	461d      	mov	r5, r3
 800c828:	3b01      	subs	r3, #1
 800c82a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c82e:	2a39      	cmp	r2, #57	; 0x39
 800c830:	d06c      	beq.n	800c90c <_dtoa_r+0xba4>
 800c832:	3201      	adds	r2, #1
 800c834:	701a      	strb	r2, [r3, #0]
 800c836:	e747      	b.n	800c6c8 <_dtoa_r+0x960>
 800c838:	2a00      	cmp	r2, #0
 800c83a:	dd07      	ble.n	800c84c <_dtoa_r+0xae4>
 800c83c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c840:	d0ed      	beq.n	800c81e <_dtoa_r+0xab6>
 800c842:	9a01      	ldr	r2, [sp, #4]
 800c844:	f109 0301 	add.w	r3, r9, #1
 800c848:	7013      	strb	r3, [r2, #0]
 800c84a:	e73d      	b.n	800c6c8 <_dtoa_r+0x960>
 800c84c:	9b04      	ldr	r3, [sp, #16]
 800c84e:	9a08      	ldr	r2, [sp, #32]
 800c850:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c854:	4293      	cmp	r3, r2
 800c856:	d043      	beq.n	800c8e0 <_dtoa_r+0xb78>
 800c858:	4651      	mov	r1, sl
 800c85a:	2300      	movs	r3, #0
 800c85c:	220a      	movs	r2, #10
 800c85e:	4620      	mov	r0, r4
 800c860:	f000 f9d6 	bl	800cc10 <__multadd>
 800c864:	45b8      	cmp	r8, r7
 800c866:	4682      	mov	sl, r0
 800c868:	f04f 0300 	mov.w	r3, #0
 800c86c:	f04f 020a 	mov.w	r2, #10
 800c870:	4641      	mov	r1, r8
 800c872:	4620      	mov	r0, r4
 800c874:	d107      	bne.n	800c886 <_dtoa_r+0xb1e>
 800c876:	f000 f9cb 	bl	800cc10 <__multadd>
 800c87a:	4680      	mov	r8, r0
 800c87c:	4607      	mov	r7, r0
 800c87e:	9b04      	ldr	r3, [sp, #16]
 800c880:	3301      	adds	r3, #1
 800c882:	9304      	str	r3, [sp, #16]
 800c884:	e775      	b.n	800c772 <_dtoa_r+0xa0a>
 800c886:	f000 f9c3 	bl	800cc10 <__multadd>
 800c88a:	4639      	mov	r1, r7
 800c88c:	4680      	mov	r8, r0
 800c88e:	2300      	movs	r3, #0
 800c890:	220a      	movs	r2, #10
 800c892:	4620      	mov	r0, r4
 800c894:	f000 f9bc 	bl	800cc10 <__multadd>
 800c898:	4607      	mov	r7, r0
 800c89a:	e7f0      	b.n	800c87e <_dtoa_r+0xb16>
 800c89c:	9b04      	ldr	r3, [sp, #16]
 800c89e:	9301      	str	r3, [sp, #4]
 800c8a0:	9d00      	ldr	r5, [sp, #0]
 800c8a2:	4631      	mov	r1, r6
 800c8a4:	4650      	mov	r0, sl
 800c8a6:	f7ff f9d4 	bl	800bc52 <quorem>
 800c8aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c8ae:	9b00      	ldr	r3, [sp, #0]
 800c8b0:	f805 9b01 	strb.w	r9, [r5], #1
 800c8b4:	1aea      	subs	r2, r5, r3
 800c8b6:	9b01      	ldr	r3, [sp, #4]
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	dd07      	ble.n	800c8cc <_dtoa_r+0xb64>
 800c8bc:	4651      	mov	r1, sl
 800c8be:	2300      	movs	r3, #0
 800c8c0:	220a      	movs	r2, #10
 800c8c2:	4620      	mov	r0, r4
 800c8c4:	f000 f9a4 	bl	800cc10 <__multadd>
 800c8c8:	4682      	mov	sl, r0
 800c8ca:	e7ea      	b.n	800c8a2 <_dtoa_r+0xb3a>
 800c8cc:	9b01      	ldr	r3, [sp, #4]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	bfc8      	it	gt
 800c8d2:	461d      	movgt	r5, r3
 800c8d4:	9b00      	ldr	r3, [sp, #0]
 800c8d6:	bfd8      	it	le
 800c8d8:	2501      	movle	r5, #1
 800c8da:	441d      	add	r5, r3
 800c8dc:	f04f 0800 	mov.w	r8, #0
 800c8e0:	4651      	mov	r1, sl
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	4620      	mov	r0, r4
 800c8e6:	f000 fb41 	bl	800cf6c <__lshift>
 800c8ea:	4631      	mov	r1, r6
 800c8ec:	4682      	mov	sl, r0
 800c8ee:	f000 fba9 	bl	800d044 <__mcmp>
 800c8f2:	2800      	cmp	r0, #0
 800c8f4:	dc96      	bgt.n	800c824 <_dtoa_r+0xabc>
 800c8f6:	d102      	bne.n	800c8fe <_dtoa_r+0xb96>
 800c8f8:	f019 0f01 	tst.w	r9, #1
 800c8fc:	d192      	bne.n	800c824 <_dtoa_r+0xabc>
 800c8fe:	462b      	mov	r3, r5
 800c900:	461d      	mov	r5, r3
 800c902:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c906:	2a30      	cmp	r2, #48	; 0x30
 800c908:	d0fa      	beq.n	800c900 <_dtoa_r+0xb98>
 800c90a:	e6dd      	b.n	800c6c8 <_dtoa_r+0x960>
 800c90c:	9a00      	ldr	r2, [sp, #0]
 800c90e:	429a      	cmp	r2, r3
 800c910:	d189      	bne.n	800c826 <_dtoa_r+0xabe>
 800c912:	f10b 0b01 	add.w	fp, fp, #1
 800c916:	2331      	movs	r3, #49	; 0x31
 800c918:	e796      	b.n	800c848 <_dtoa_r+0xae0>
 800c91a:	4b0a      	ldr	r3, [pc, #40]	; (800c944 <_dtoa_r+0xbdc>)
 800c91c:	f7ff ba99 	b.w	800be52 <_dtoa_r+0xea>
 800c920:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c922:	2b00      	cmp	r3, #0
 800c924:	f47f aa6d 	bne.w	800be02 <_dtoa_r+0x9a>
 800c928:	4b07      	ldr	r3, [pc, #28]	; (800c948 <_dtoa_r+0xbe0>)
 800c92a:	f7ff ba92 	b.w	800be52 <_dtoa_r+0xea>
 800c92e:	9b01      	ldr	r3, [sp, #4]
 800c930:	2b00      	cmp	r3, #0
 800c932:	dcb5      	bgt.n	800c8a0 <_dtoa_r+0xb38>
 800c934:	9b07      	ldr	r3, [sp, #28]
 800c936:	2b02      	cmp	r3, #2
 800c938:	f73f aeb1 	bgt.w	800c69e <_dtoa_r+0x936>
 800c93c:	e7b0      	b.n	800c8a0 <_dtoa_r+0xb38>
 800c93e:	bf00      	nop
 800c940:	0800de04 	.word	0x0800de04
 800c944:	0800dd64 	.word	0x0800dd64
 800c948:	0800dd88 	.word	0x0800dd88

0800c94c <_free_r>:
 800c94c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c94e:	2900      	cmp	r1, #0
 800c950:	d044      	beq.n	800c9dc <_free_r+0x90>
 800c952:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c956:	9001      	str	r0, [sp, #4]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	f1a1 0404 	sub.w	r4, r1, #4
 800c95e:	bfb8      	it	lt
 800c960:	18e4      	addlt	r4, r4, r3
 800c962:	f000 f8e7 	bl	800cb34 <__malloc_lock>
 800c966:	4a1e      	ldr	r2, [pc, #120]	; (800c9e0 <_free_r+0x94>)
 800c968:	9801      	ldr	r0, [sp, #4]
 800c96a:	6813      	ldr	r3, [r2, #0]
 800c96c:	b933      	cbnz	r3, 800c97c <_free_r+0x30>
 800c96e:	6063      	str	r3, [r4, #4]
 800c970:	6014      	str	r4, [r2, #0]
 800c972:	b003      	add	sp, #12
 800c974:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c978:	f000 b8e2 	b.w	800cb40 <__malloc_unlock>
 800c97c:	42a3      	cmp	r3, r4
 800c97e:	d908      	bls.n	800c992 <_free_r+0x46>
 800c980:	6825      	ldr	r5, [r4, #0]
 800c982:	1961      	adds	r1, r4, r5
 800c984:	428b      	cmp	r3, r1
 800c986:	bf01      	itttt	eq
 800c988:	6819      	ldreq	r1, [r3, #0]
 800c98a:	685b      	ldreq	r3, [r3, #4]
 800c98c:	1949      	addeq	r1, r1, r5
 800c98e:	6021      	streq	r1, [r4, #0]
 800c990:	e7ed      	b.n	800c96e <_free_r+0x22>
 800c992:	461a      	mov	r2, r3
 800c994:	685b      	ldr	r3, [r3, #4]
 800c996:	b10b      	cbz	r3, 800c99c <_free_r+0x50>
 800c998:	42a3      	cmp	r3, r4
 800c99a:	d9fa      	bls.n	800c992 <_free_r+0x46>
 800c99c:	6811      	ldr	r1, [r2, #0]
 800c99e:	1855      	adds	r5, r2, r1
 800c9a0:	42a5      	cmp	r5, r4
 800c9a2:	d10b      	bne.n	800c9bc <_free_r+0x70>
 800c9a4:	6824      	ldr	r4, [r4, #0]
 800c9a6:	4421      	add	r1, r4
 800c9a8:	1854      	adds	r4, r2, r1
 800c9aa:	42a3      	cmp	r3, r4
 800c9ac:	6011      	str	r1, [r2, #0]
 800c9ae:	d1e0      	bne.n	800c972 <_free_r+0x26>
 800c9b0:	681c      	ldr	r4, [r3, #0]
 800c9b2:	685b      	ldr	r3, [r3, #4]
 800c9b4:	6053      	str	r3, [r2, #4]
 800c9b6:	440c      	add	r4, r1
 800c9b8:	6014      	str	r4, [r2, #0]
 800c9ba:	e7da      	b.n	800c972 <_free_r+0x26>
 800c9bc:	d902      	bls.n	800c9c4 <_free_r+0x78>
 800c9be:	230c      	movs	r3, #12
 800c9c0:	6003      	str	r3, [r0, #0]
 800c9c2:	e7d6      	b.n	800c972 <_free_r+0x26>
 800c9c4:	6825      	ldr	r5, [r4, #0]
 800c9c6:	1961      	adds	r1, r4, r5
 800c9c8:	428b      	cmp	r3, r1
 800c9ca:	bf04      	itt	eq
 800c9cc:	6819      	ldreq	r1, [r3, #0]
 800c9ce:	685b      	ldreq	r3, [r3, #4]
 800c9d0:	6063      	str	r3, [r4, #4]
 800c9d2:	bf04      	itt	eq
 800c9d4:	1949      	addeq	r1, r1, r5
 800c9d6:	6021      	streq	r1, [r4, #0]
 800c9d8:	6054      	str	r4, [r2, #4]
 800c9da:	e7ca      	b.n	800c972 <_free_r+0x26>
 800c9dc:	b003      	add	sp, #12
 800c9de:	bd30      	pop	{r4, r5, pc}
 800c9e0:	200061f4 	.word	0x200061f4

0800c9e4 <malloc>:
 800c9e4:	4b02      	ldr	r3, [pc, #8]	; (800c9f0 <malloc+0xc>)
 800c9e6:	4601      	mov	r1, r0
 800c9e8:	6818      	ldr	r0, [r3, #0]
 800c9ea:	f000 b823 	b.w	800ca34 <_malloc_r>
 800c9ee:	bf00      	nop
 800c9f0:	2000006c 	.word	0x2000006c

0800c9f4 <sbrk_aligned>:
 800c9f4:	b570      	push	{r4, r5, r6, lr}
 800c9f6:	4e0e      	ldr	r6, [pc, #56]	; (800ca30 <sbrk_aligned+0x3c>)
 800c9f8:	460c      	mov	r4, r1
 800c9fa:	6831      	ldr	r1, [r6, #0]
 800c9fc:	4605      	mov	r5, r0
 800c9fe:	b911      	cbnz	r1, 800ca06 <sbrk_aligned+0x12>
 800ca00:	f000 fea8 	bl	800d754 <_sbrk_r>
 800ca04:	6030      	str	r0, [r6, #0]
 800ca06:	4621      	mov	r1, r4
 800ca08:	4628      	mov	r0, r5
 800ca0a:	f000 fea3 	bl	800d754 <_sbrk_r>
 800ca0e:	1c43      	adds	r3, r0, #1
 800ca10:	d00a      	beq.n	800ca28 <sbrk_aligned+0x34>
 800ca12:	1cc4      	adds	r4, r0, #3
 800ca14:	f024 0403 	bic.w	r4, r4, #3
 800ca18:	42a0      	cmp	r0, r4
 800ca1a:	d007      	beq.n	800ca2c <sbrk_aligned+0x38>
 800ca1c:	1a21      	subs	r1, r4, r0
 800ca1e:	4628      	mov	r0, r5
 800ca20:	f000 fe98 	bl	800d754 <_sbrk_r>
 800ca24:	3001      	adds	r0, #1
 800ca26:	d101      	bne.n	800ca2c <sbrk_aligned+0x38>
 800ca28:	f04f 34ff 	mov.w	r4, #4294967295
 800ca2c:	4620      	mov	r0, r4
 800ca2e:	bd70      	pop	{r4, r5, r6, pc}
 800ca30:	200061f8 	.word	0x200061f8

0800ca34 <_malloc_r>:
 800ca34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca38:	1ccd      	adds	r5, r1, #3
 800ca3a:	f025 0503 	bic.w	r5, r5, #3
 800ca3e:	3508      	adds	r5, #8
 800ca40:	2d0c      	cmp	r5, #12
 800ca42:	bf38      	it	cc
 800ca44:	250c      	movcc	r5, #12
 800ca46:	2d00      	cmp	r5, #0
 800ca48:	4607      	mov	r7, r0
 800ca4a:	db01      	blt.n	800ca50 <_malloc_r+0x1c>
 800ca4c:	42a9      	cmp	r1, r5
 800ca4e:	d905      	bls.n	800ca5c <_malloc_r+0x28>
 800ca50:	230c      	movs	r3, #12
 800ca52:	603b      	str	r3, [r7, #0]
 800ca54:	2600      	movs	r6, #0
 800ca56:	4630      	mov	r0, r6
 800ca58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cb30 <_malloc_r+0xfc>
 800ca60:	f000 f868 	bl	800cb34 <__malloc_lock>
 800ca64:	f8d8 3000 	ldr.w	r3, [r8]
 800ca68:	461c      	mov	r4, r3
 800ca6a:	bb5c      	cbnz	r4, 800cac4 <_malloc_r+0x90>
 800ca6c:	4629      	mov	r1, r5
 800ca6e:	4638      	mov	r0, r7
 800ca70:	f7ff ffc0 	bl	800c9f4 <sbrk_aligned>
 800ca74:	1c43      	adds	r3, r0, #1
 800ca76:	4604      	mov	r4, r0
 800ca78:	d155      	bne.n	800cb26 <_malloc_r+0xf2>
 800ca7a:	f8d8 4000 	ldr.w	r4, [r8]
 800ca7e:	4626      	mov	r6, r4
 800ca80:	2e00      	cmp	r6, #0
 800ca82:	d145      	bne.n	800cb10 <_malloc_r+0xdc>
 800ca84:	2c00      	cmp	r4, #0
 800ca86:	d048      	beq.n	800cb1a <_malloc_r+0xe6>
 800ca88:	6823      	ldr	r3, [r4, #0]
 800ca8a:	4631      	mov	r1, r6
 800ca8c:	4638      	mov	r0, r7
 800ca8e:	eb04 0903 	add.w	r9, r4, r3
 800ca92:	f000 fe5f 	bl	800d754 <_sbrk_r>
 800ca96:	4581      	cmp	r9, r0
 800ca98:	d13f      	bne.n	800cb1a <_malloc_r+0xe6>
 800ca9a:	6821      	ldr	r1, [r4, #0]
 800ca9c:	1a6d      	subs	r5, r5, r1
 800ca9e:	4629      	mov	r1, r5
 800caa0:	4638      	mov	r0, r7
 800caa2:	f7ff ffa7 	bl	800c9f4 <sbrk_aligned>
 800caa6:	3001      	adds	r0, #1
 800caa8:	d037      	beq.n	800cb1a <_malloc_r+0xe6>
 800caaa:	6823      	ldr	r3, [r4, #0]
 800caac:	442b      	add	r3, r5
 800caae:	6023      	str	r3, [r4, #0]
 800cab0:	f8d8 3000 	ldr.w	r3, [r8]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d038      	beq.n	800cb2a <_malloc_r+0xf6>
 800cab8:	685a      	ldr	r2, [r3, #4]
 800caba:	42a2      	cmp	r2, r4
 800cabc:	d12b      	bne.n	800cb16 <_malloc_r+0xe2>
 800cabe:	2200      	movs	r2, #0
 800cac0:	605a      	str	r2, [r3, #4]
 800cac2:	e00f      	b.n	800cae4 <_malloc_r+0xb0>
 800cac4:	6822      	ldr	r2, [r4, #0]
 800cac6:	1b52      	subs	r2, r2, r5
 800cac8:	d41f      	bmi.n	800cb0a <_malloc_r+0xd6>
 800caca:	2a0b      	cmp	r2, #11
 800cacc:	d917      	bls.n	800cafe <_malloc_r+0xca>
 800cace:	1961      	adds	r1, r4, r5
 800cad0:	42a3      	cmp	r3, r4
 800cad2:	6025      	str	r5, [r4, #0]
 800cad4:	bf18      	it	ne
 800cad6:	6059      	strne	r1, [r3, #4]
 800cad8:	6863      	ldr	r3, [r4, #4]
 800cada:	bf08      	it	eq
 800cadc:	f8c8 1000 	streq.w	r1, [r8]
 800cae0:	5162      	str	r2, [r4, r5]
 800cae2:	604b      	str	r3, [r1, #4]
 800cae4:	4638      	mov	r0, r7
 800cae6:	f104 060b 	add.w	r6, r4, #11
 800caea:	f000 f829 	bl	800cb40 <__malloc_unlock>
 800caee:	f026 0607 	bic.w	r6, r6, #7
 800caf2:	1d23      	adds	r3, r4, #4
 800caf4:	1af2      	subs	r2, r6, r3
 800caf6:	d0ae      	beq.n	800ca56 <_malloc_r+0x22>
 800caf8:	1b9b      	subs	r3, r3, r6
 800cafa:	50a3      	str	r3, [r4, r2]
 800cafc:	e7ab      	b.n	800ca56 <_malloc_r+0x22>
 800cafe:	42a3      	cmp	r3, r4
 800cb00:	6862      	ldr	r2, [r4, #4]
 800cb02:	d1dd      	bne.n	800cac0 <_malloc_r+0x8c>
 800cb04:	f8c8 2000 	str.w	r2, [r8]
 800cb08:	e7ec      	b.n	800cae4 <_malloc_r+0xb0>
 800cb0a:	4623      	mov	r3, r4
 800cb0c:	6864      	ldr	r4, [r4, #4]
 800cb0e:	e7ac      	b.n	800ca6a <_malloc_r+0x36>
 800cb10:	4634      	mov	r4, r6
 800cb12:	6876      	ldr	r6, [r6, #4]
 800cb14:	e7b4      	b.n	800ca80 <_malloc_r+0x4c>
 800cb16:	4613      	mov	r3, r2
 800cb18:	e7cc      	b.n	800cab4 <_malloc_r+0x80>
 800cb1a:	230c      	movs	r3, #12
 800cb1c:	603b      	str	r3, [r7, #0]
 800cb1e:	4638      	mov	r0, r7
 800cb20:	f000 f80e 	bl	800cb40 <__malloc_unlock>
 800cb24:	e797      	b.n	800ca56 <_malloc_r+0x22>
 800cb26:	6025      	str	r5, [r4, #0]
 800cb28:	e7dc      	b.n	800cae4 <_malloc_r+0xb0>
 800cb2a:	605b      	str	r3, [r3, #4]
 800cb2c:	deff      	udf	#255	; 0xff
 800cb2e:	bf00      	nop
 800cb30:	200061f4 	.word	0x200061f4

0800cb34 <__malloc_lock>:
 800cb34:	4801      	ldr	r0, [pc, #4]	; (800cb3c <__malloc_lock+0x8>)
 800cb36:	f7ff b87c 	b.w	800bc32 <__retarget_lock_acquire_recursive>
 800cb3a:	bf00      	nop
 800cb3c:	200061f0 	.word	0x200061f0

0800cb40 <__malloc_unlock>:
 800cb40:	4801      	ldr	r0, [pc, #4]	; (800cb48 <__malloc_unlock+0x8>)
 800cb42:	f7ff b877 	b.w	800bc34 <__retarget_lock_release_recursive>
 800cb46:	bf00      	nop
 800cb48:	200061f0 	.word	0x200061f0

0800cb4c <_Balloc>:
 800cb4c:	b570      	push	{r4, r5, r6, lr}
 800cb4e:	69c6      	ldr	r6, [r0, #28]
 800cb50:	4604      	mov	r4, r0
 800cb52:	460d      	mov	r5, r1
 800cb54:	b976      	cbnz	r6, 800cb74 <_Balloc+0x28>
 800cb56:	2010      	movs	r0, #16
 800cb58:	f7ff ff44 	bl	800c9e4 <malloc>
 800cb5c:	4602      	mov	r2, r0
 800cb5e:	61e0      	str	r0, [r4, #28]
 800cb60:	b920      	cbnz	r0, 800cb6c <_Balloc+0x20>
 800cb62:	4b18      	ldr	r3, [pc, #96]	; (800cbc4 <_Balloc+0x78>)
 800cb64:	4818      	ldr	r0, [pc, #96]	; (800cbc8 <_Balloc+0x7c>)
 800cb66:	216b      	movs	r1, #107	; 0x6b
 800cb68:	f000 fe04 	bl	800d774 <__assert_func>
 800cb6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb70:	6006      	str	r6, [r0, #0]
 800cb72:	60c6      	str	r6, [r0, #12]
 800cb74:	69e6      	ldr	r6, [r4, #28]
 800cb76:	68f3      	ldr	r3, [r6, #12]
 800cb78:	b183      	cbz	r3, 800cb9c <_Balloc+0x50>
 800cb7a:	69e3      	ldr	r3, [r4, #28]
 800cb7c:	68db      	ldr	r3, [r3, #12]
 800cb7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cb82:	b9b8      	cbnz	r0, 800cbb4 <_Balloc+0x68>
 800cb84:	2101      	movs	r1, #1
 800cb86:	fa01 f605 	lsl.w	r6, r1, r5
 800cb8a:	1d72      	adds	r2, r6, #5
 800cb8c:	0092      	lsls	r2, r2, #2
 800cb8e:	4620      	mov	r0, r4
 800cb90:	f000 fe0e 	bl	800d7b0 <_calloc_r>
 800cb94:	b160      	cbz	r0, 800cbb0 <_Balloc+0x64>
 800cb96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cb9a:	e00e      	b.n	800cbba <_Balloc+0x6e>
 800cb9c:	2221      	movs	r2, #33	; 0x21
 800cb9e:	2104      	movs	r1, #4
 800cba0:	4620      	mov	r0, r4
 800cba2:	f000 fe05 	bl	800d7b0 <_calloc_r>
 800cba6:	69e3      	ldr	r3, [r4, #28]
 800cba8:	60f0      	str	r0, [r6, #12]
 800cbaa:	68db      	ldr	r3, [r3, #12]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d1e4      	bne.n	800cb7a <_Balloc+0x2e>
 800cbb0:	2000      	movs	r0, #0
 800cbb2:	bd70      	pop	{r4, r5, r6, pc}
 800cbb4:	6802      	ldr	r2, [r0, #0]
 800cbb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cbba:	2300      	movs	r3, #0
 800cbbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cbc0:	e7f7      	b.n	800cbb2 <_Balloc+0x66>
 800cbc2:	bf00      	nop
 800cbc4:	0800dd95 	.word	0x0800dd95
 800cbc8:	0800de15 	.word	0x0800de15

0800cbcc <_Bfree>:
 800cbcc:	b570      	push	{r4, r5, r6, lr}
 800cbce:	69c6      	ldr	r6, [r0, #28]
 800cbd0:	4605      	mov	r5, r0
 800cbd2:	460c      	mov	r4, r1
 800cbd4:	b976      	cbnz	r6, 800cbf4 <_Bfree+0x28>
 800cbd6:	2010      	movs	r0, #16
 800cbd8:	f7ff ff04 	bl	800c9e4 <malloc>
 800cbdc:	4602      	mov	r2, r0
 800cbde:	61e8      	str	r0, [r5, #28]
 800cbe0:	b920      	cbnz	r0, 800cbec <_Bfree+0x20>
 800cbe2:	4b09      	ldr	r3, [pc, #36]	; (800cc08 <_Bfree+0x3c>)
 800cbe4:	4809      	ldr	r0, [pc, #36]	; (800cc0c <_Bfree+0x40>)
 800cbe6:	218f      	movs	r1, #143	; 0x8f
 800cbe8:	f000 fdc4 	bl	800d774 <__assert_func>
 800cbec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cbf0:	6006      	str	r6, [r0, #0]
 800cbf2:	60c6      	str	r6, [r0, #12]
 800cbf4:	b13c      	cbz	r4, 800cc06 <_Bfree+0x3a>
 800cbf6:	69eb      	ldr	r3, [r5, #28]
 800cbf8:	6862      	ldr	r2, [r4, #4]
 800cbfa:	68db      	ldr	r3, [r3, #12]
 800cbfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cc00:	6021      	str	r1, [r4, #0]
 800cc02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cc06:	bd70      	pop	{r4, r5, r6, pc}
 800cc08:	0800dd95 	.word	0x0800dd95
 800cc0c:	0800de15 	.word	0x0800de15

0800cc10 <__multadd>:
 800cc10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc14:	690d      	ldr	r5, [r1, #16]
 800cc16:	4607      	mov	r7, r0
 800cc18:	460c      	mov	r4, r1
 800cc1a:	461e      	mov	r6, r3
 800cc1c:	f101 0c14 	add.w	ip, r1, #20
 800cc20:	2000      	movs	r0, #0
 800cc22:	f8dc 3000 	ldr.w	r3, [ip]
 800cc26:	b299      	uxth	r1, r3
 800cc28:	fb02 6101 	mla	r1, r2, r1, r6
 800cc2c:	0c1e      	lsrs	r6, r3, #16
 800cc2e:	0c0b      	lsrs	r3, r1, #16
 800cc30:	fb02 3306 	mla	r3, r2, r6, r3
 800cc34:	b289      	uxth	r1, r1
 800cc36:	3001      	adds	r0, #1
 800cc38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cc3c:	4285      	cmp	r5, r0
 800cc3e:	f84c 1b04 	str.w	r1, [ip], #4
 800cc42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cc46:	dcec      	bgt.n	800cc22 <__multadd+0x12>
 800cc48:	b30e      	cbz	r6, 800cc8e <__multadd+0x7e>
 800cc4a:	68a3      	ldr	r3, [r4, #8]
 800cc4c:	42ab      	cmp	r3, r5
 800cc4e:	dc19      	bgt.n	800cc84 <__multadd+0x74>
 800cc50:	6861      	ldr	r1, [r4, #4]
 800cc52:	4638      	mov	r0, r7
 800cc54:	3101      	adds	r1, #1
 800cc56:	f7ff ff79 	bl	800cb4c <_Balloc>
 800cc5a:	4680      	mov	r8, r0
 800cc5c:	b928      	cbnz	r0, 800cc6a <__multadd+0x5a>
 800cc5e:	4602      	mov	r2, r0
 800cc60:	4b0c      	ldr	r3, [pc, #48]	; (800cc94 <__multadd+0x84>)
 800cc62:	480d      	ldr	r0, [pc, #52]	; (800cc98 <__multadd+0x88>)
 800cc64:	21ba      	movs	r1, #186	; 0xba
 800cc66:	f000 fd85 	bl	800d774 <__assert_func>
 800cc6a:	6922      	ldr	r2, [r4, #16]
 800cc6c:	3202      	adds	r2, #2
 800cc6e:	f104 010c 	add.w	r1, r4, #12
 800cc72:	0092      	lsls	r2, r2, #2
 800cc74:	300c      	adds	r0, #12
 800cc76:	f7fe ffde 	bl	800bc36 <memcpy>
 800cc7a:	4621      	mov	r1, r4
 800cc7c:	4638      	mov	r0, r7
 800cc7e:	f7ff ffa5 	bl	800cbcc <_Bfree>
 800cc82:	4644      	mov	r4, r8
 800cc84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cc88:	3501      	adds	r5, #1
 800cc8a:	615e      	str	r6, [r3, #20]
 800cc8c:	6125      	str	r5, [r4, #16]
 800cc8e:	4620      	mov	r0, r4
 800cc90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc94:	0800de04 	.word	0x0800de04
 800cc98:	0800de15 	.word	0x0800de15

0800cc9c <__hi0bits>:
 800cc9c:	0c03      	lsrs	r3, r0, #16
 800cc9e:	041b      	lsls	r3, r3, #16
 800cca0:	b9d3      	cbnz	r3, 800ccd8 <__hi0bits+0x3c>
 800cca2:	0400      	lsls	r0, r0, #16
 800cca4:	2310      	movs	r3, #16
 800cca6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ccaa:	bf04      	itt	eq
 800ccac:	0200      	lsleq	r0, r0, #8
 800ccae:	3308      	addeq	r3, #8
 800ccb0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ccb4:	bf04      	itt	eq
 800ccb6:	0100      	lsleq	r0, r0, #4
 800ccb8:	3304      	addeq	r3, #4
 800ccba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ccbe:	bf04      	itt	eq
 800ccc0:	0080      	lsleq	r0, r0, #2
 800ccc2:	3302      	addeq	r3, #2
 800ccc4:	2800      	cmp	r0, #0
 800ccc6:	db05      	blt.n	800ccd4 <__hi0bits+0x38>
 800ccc8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cccc:	f103 0301 	add.w	r3, r3, #1
 800ccd0:	bf08      	it	eq
 800ccd2:	2320      	moveq	r3, #32
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	4770      	bx	lr
 800ccd8:	2300      	movs	r3, #0
 800ccda:	e7e4      	b.n	800cca6 <__hi0bits+0xa>

0800ccdc <__lo0bits>:
 800ccdc:	6803      	ldr	r3, [r0, #0]
 800ccde:	f013 0207 	ands.w	r2, r3, #7
 800cce2:	d00c      	beq.n	800ccfe <__lo0bits+0x22>
 800cce4:	07d9      	lsls	r1, r3, #31
 800cce6:	d422      	bmi.n	800cd2e <__lo0bits+0x52>
 800cce8:	079a      	lsls	r2, r3, #30
 800ccea:	bf49      	itett	mi
 800ccec:	085b      	lsrmi	r3, r3, #1
 800ccee:	089b      	lsrpl	r3, r3, #2
 800ccf0:	6003      	strmi	r3, [r0, #0]
 800ccf2:	2201      	movmi	r2, #1
 800ccf4:	bf5c      	itt	pl
 800ccf6:	6003      	strpl	r3, [r0, #0]
 800ccf8:	2202      	movpl	r2, #2
 800ccfa:	4610      	mov	r0, r2
 800ccfc:	4770      	bx	lr
 800ccfe:	b299      	uxth	r1, r3
 800cd00:	b909      	cbnz	r1, 800cd06 <__lo0bits+0x2a>
 800cd02:	0c1b      	lsrs	r3, r3, #16
 800cd04:	2210      	movs	r2, #16
 800cd06:	b2d9      	uxtb	r1, r3
 800cd08:	b909      	cbnz	r1, 800cd0e <__lo0bits+0x32>
 800cd0a:	3208      	adds	r2, #8
 800cd0c:	0a1b      	lsrs	r3, r3, #8
 800cd0e:	0719      	lsls	r1, r3, #28
 800cd10:	bf04      	itt	eq
 800cd12:	091b      	lsreq	r3, r3, #4
 800cd14:	3204      	addeq	r2, #4
 800cd16:	0799      	lsls	r1, r3, #30
 800cd18:	bf04      	itt	eq
 800cd1a:	089b      	lsreq	r3, r3, #2
 800cd1c:	3202      	addeq	r2, #2
 800cd1e:	07d9      	lsls	r1, r3, #31
 800cd20:	d403      	bmi.n	800cd2a <__lo0bits+0x4e>
 800cd22:	085b      	lsrs	r3, r3, #1
 800cd24:	f102 0201 	add.w	r2, r2, #1
 800cd28:	d003      	beq.n	800cd32 <__lo0bits+0x56>
 800cd2a:	6003      	str	r3, [r0, #0]
 800cd2c:	e7e5      	b.n	800ccfa <__lo0bits+0x1e>
 800cd2e:	2200      	movs	r2, #0
 800cd30:	e7e3      	b.n	800ccfa <__lo0bits+0x1e>
 800cd32:	2220      	movs	r2, #32
 800cd34:	e7e1      	b.n	800ccfa <__lo0bits+0x1e>
	...

0800cd38 <__i2b>:
 800cd38:	b510      	push	{r4, lr}
 800cd3a:	460c      	mov	r4, r1
 800cd3c:	2101      	movs	r1, #1
 800cd3e:	f7ff ff05 	bl	800cb4c <_Balloc>
 800cd42:	4602      	mov	r2, r0
 800cd44:	b928      	cbnz	r0, 800cd52 <__i2b+0x1a>
 800cd46:	4b05      	ldr	r3, [pc, #20]	; (800cd5c <__i2b+0x24>)
 800cd48:	4805      	ldr	r0, [pc, #20]	; (800cd60 <__i2b+0x28>)
 800cd4a:	f240 1145 	movw	r1, #325	; 0x145
 800cd4e:	f000 fd11 	bl	800d774 <__assert_func>
 800cd52:	2301      	movs	r3, #1
 800cd54:	6144      	str	r4, [r0, #20]
 800cd56:	6103      	str	r3, [r0, #16]
 800cd58:	bd10      	pop	{r4, pc}
 800cd5a:	bf00      	nop
 800cd5c:	0800de04 	.word	0x0800de04
 800cd60:	0800de15 	.word	0x0800de15

0800cd64 <__multiply>:
 800cd64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd68:	4691      	mov	r9, r2
 800cd6a:	690a      	ldr	r2, [r1, #16]
 800cd6c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cd70:	429a      	cmp	r2, r3
 800cd72:	bfb8      	it	lt
 800cd74:	460b      	movlt	r3, r1
 800cd76:	460c      	mov	r4, r1
 800cd78:	bfbc      	itt	lt
 800cd7a:	464c      	movlt	r4, r9
 800cd7c:	4699      	movlt	r9, r3
 800cd7e:	6927      	ldr	r7, [r4, #16]
 800cd80:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cd84:	68a3      	ldr	r3, [r4, #8]
 800cd86:	6861      	ldr	r1, [r4, #4]
 800cd88:	eb07 060a 	add.w	r6, r7, sl
 800cd8c:	42b3      	cmp	r3, r6
 800cd8e:	b085      	sub	sp, #20
 800cd90:	bfb8      	it	lt
 800cd92:	3101      	addlt	r1, #1
 800cd94:	f7ff feda 	bl	800cb4c <_Balloc>
 800cd98:	b930      	cbnz	r0, 800cda8 <__multiply+0x44>
 800cd9a:	4602      	mov	r2, r0
 800cd9c:	4b44      	ldr	r3, [pc, #272]	; (800ceb0 <__multiply+0x14c>)
 800cd9e:	4845      	ldr	r0, [pc, #276]	; (800ceb4 <__multiply+0x150>)
 800cda0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800cda4:	f000 fce6 	bl	800d774 <__assert_func>
 800cda8:	f100 0514 	add.w	r5, r0, #20
 800cdac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cdb0:	462b      	mov	r3, r5
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	4543      	cmp	r3, r8
 800cdb6:	d321      	bcc.n	800cdfc <__multiply+0x98>
 800cdb8:	f104 0314 	add.w	r3, r4, #20
 800cdbc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cdc0:	f109 0314 	add.w	r3, r9, #20
 800cdc4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cdc8:	9202      	str	r2, [sp, #8]
 800cdca:	1b3a      	subs	r2, r7, r4
 800cdcc:	3a15      	subs	r2, #21
 800cdce:	f022 0203 	bic.w	r2, r2, #3
 800cdd2:	3204      	adds	r2, #4
 800cdd4:	f104 0115 	add.w	r1, r4, #21
 800cdd8:	428f      	cmp	r7, r1
 800cdda:	bf38      	it	cc
 800cddc:	2204      	movcc	r2, #4
 800cdde:	9201      	str	r2, [sp, #4]
 800cde0:	9a02      	ldr	r2, [sp, #8]
 800cde2:	9303      	str	r3, [sp, #12]
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d80c      	bhi.n	800ce02 <__multiply+0x9e>
 800cde8:	2e00      	cmp	r6, #0
 800cdea:	dd03      	ble.n	800cdf4 <__multiply+0x90>
 800cdec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d05b      	beq.n	800ceac <__multiply+0x148>
 800cdf4:	6106      	str	r6, [r0, #16]
 800cdf6:	b005      	add	sp, #20
 800cdf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdfc:	f843 2b04 	str.w	r2, [r3], #4
 800ce00:	e7d8      	b.n	800cdb4 <__multiply+0x50>
 800ce02:	f8b3 a000 	ldrh.w	sl, [r3]
 800ce06:	f1ba 0f00 	cmp.w	sl, #0
 800ce0a:	d024      	beq.n	800ce56 <__multiply+0xf2>
 800ce0c:	f104 0e14 	add.w	lr, r4, #20
 800ce10:	46a9      	mov	r9, r5
 800ce12:	f04f 0c00 	mov.w	ip, #0
 800ce16:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ce1a:	f8d9 1000 	ldr.w	r1, [r9]
 800ce1e:	fa1f fb82 	uxth.w	fp, r2
 800ce22:	b289      	uxth	r1, r1
 800ce24:	fb0a 110b 	mla	r1, sl, fp, r1
 800ce28:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ce2c:	f8d9 2000 	ldr.w	r2, [r9]
 800ce30:	4461      	add	r1, ip
 800ce32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ce36:	fb0a c20b 	mla	r2, sl, fp, ip
 800ce3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ce3e:	b289      	uxth	r1, r1
 800ce40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ce44:	4577      	cmp	r7, lr
 800ce46:	f849 1b04 	str.w	r1, [r9], #4
 800ce4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ce4e:	d8e2      	bhi.n	800ce16 <__multiply+0xb2>
 800ce50:	9a01      	ldr	r2, [sp, #4]
 800ce52:	f845 c002 	str.w	ip, [r5, r2]
 800ce56:	9a03      	ldr	r2, [sp, #12]
 800ce58:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ce5c:	3304      	adds	r3, #4
 800ce5e:	f1b9 0f00 	cmp.w	r9, #0
 800ce62:	d021      	beq.n	800cea8 <__multiply+0x144>
 800ce64:	6829      	ldr	r1, [r5, #0]
 800ce66:	f104 0c14 	add.w	ip, r4, #20
 800ce6a:	46ae      	mov	lr, r5
 800ce6c:	f04f 0a00 	mov.w	sl, #0
 800ce70:	f8bc b000 	ldrh.w	fp, [ip]
 800ce74:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ce78:	fb09 220b 	mla	r2, r9, fp, r2
 800ce7c:	4452      	add	r2, sl
 800ce7e:	b289      	uxth	r1, r1
 800ce80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ce84:	f84e 1b04 	str.w	r1, [lr], #4
 800ce88:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ce8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ce90:	f8be 1000 	ldrh.w	r1, [lr]
 800ce94:	fb09 110a 	mla	r1, r9, sl, r1
 800ce98:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ce9c:	4567      	cmp	r7, ip
 800ce9e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cea2:	d8e5      	bhi.n	800ce70 <__multiply+0x10c>
 800cea4:	9a01      	ldr	r2, [sp, #4]
 800cea6:	50a9      	str	r1, [r5, r2]
 800cea8:	3504      	adds	r5, #4
 800ceaa:	e799      	b.n	800cde0 <__multiply+0x7c>
 800ceac:	3e01      	subs	r6, #1
 800ceae:	e79b      	b.n	800cde8 <__multiply+0x84>
 800ceb0:	0800de04 	.word	0x0800de04
 800ceb4:	0800de15 	.word	0x0800de15

0800ceb8 <__pow5mult>:
 800ceb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cebc:	4615      	mov	r5, r2
 800cebe:	f012 0203 	ands.w	r2, r2, #3
 800cec2:	4606      	mov	r6, r0
 800cec4:	460f      	mov	r7, r1
 800cec6:	d007      	beq.n	800ced8 <__pow5mult+0x20>
 800cec8:	4c25      	ldr	r4, [pc, #148]	; (800cf60 <__pow5mult+0xa8>)
 800ceca:	3a01      	subs	r2, #1
 800cecc:	2300      	movs	r3, #0
 800cece:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ced2:	f7ff fe9d 	bl	800cc10 <__multadd>
 800ced6:	4607      	mov	r7, r0
 800ced8:	10ad      	asrs	r5, r5, #2
 800ceda:	d03d      	beq.n	800cf58 <__pow5mult+0xa0>
 800cedc:	69f4      	ldr	r4, [r6, #28]
 800cede:	b97c      	cbnz	r4, 800cf00 <__pow5mult+0x48>
 800cee0:	2010      	movs	r0, #16
 800cee2:	f7ff fd7f 	bl	800c9e4 <malloc>
 800cee6:	4602      	mov	r2, r0
 800cee8:	61f0      	str	r0, [r6, #28]
 800ceea:	b928      	cbnz	r0, 800cef8 <__pow5mult+0x40>
 800ceec:	4b1d      	ldr	r3, [pc, #116]	; (800cf64 <__pow5mult+0xac>)
 800ceee:	481e      	ldr	r0, [pc, #120]	; (800cf68 <__pow5mult+0xb0>)
 800cef0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800cef4:	f000 fc3e 	bl	800d774 <__assert_func>
 800cef8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cefc:	6004      	str	r4, [r0, #0]
 800cefe:	60c4      	str	r4, [r0, #12]
 800cf00:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800cf04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cf08:	b94c      	cbnz	r4, 800cf1e <__pow5mult+0x66>
 800cf0a:	f240 2171 	movw	r1, #625	; 0x271
 800cf0e:	4630      	mov	r0, r6
 800cf10:	f7ff ff12 	bl	800cd38 <__i2b>
 800cf14:	2300      	movs	r3, #0
 800cf16:	f8c8 0008 	str.w	r0, [r8, #8]
 800cf1a:	4604      	mov	r4, r0
 800cf1c:	6003      	str	r3, [r0, #0]
 800cf1e:	f04f 0900 	mov.w	r9, #0
 800cf22:	07eb      	lsls	r3, r5, #31
 800cf24:	d50a      	bpl.n	800cf3c <__pow5mult+0x84>
 800cf26:	4639      	mov	r1, r7
 800cf28:	4622      	mov	r2, r4
 800cf2a:	4630      	mov	r0, r6
 800cf2c:	f7ff ff1a 	bl	800cd64 <__multiply>
 800cf30:	4639      	mov	r1, r7
 800cf32:	4680      	mov	r8, r0
 800cf34:	4630      	mov	r0, r6
 800cf36:	f7ff fe49 	bl	800cbcc <_Bfree>
 800cf3a:	4647      	mov	r7, r8
 800cf3c:	106d      	asrs	r5, r5, #1
 800cf3e:	d00b      	beq.n	800cf58 <__pow5mult+0xa0>
 800cf40:	6820      	ldr	r0, [r4, #0]
 800cf42:	b938      	cbnz	r0, 800cf54 <__pow5mult+0x9c>
 800cf44:	4622      	mov	r2, r4
 800cf46:	4621      	mov	r1, r4
 800cf48:	4630      	mov	r0, r6
 800cf4a:	f7ff ff0b 	bl	800cd64 <__multiply>
 800cf4e:	6020      	str	r0, [r4, #0]
 800cf50:	f8c0 9000 	str.w	r9, [r0]
 800cf54:	4604      	mov	r4, r0
 800cf56:	e7e4      	b.n	800cf22 <__pow5mult+0x6a>
 800cf58:	4638      	mov	r0, r7
 800cf5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf5e:	bf00      	nop
 800cf60:	0800df60 	.word	0x0800df60
 800cf64:	0800dd95 	.word	0x0800dd95
 800cf68:	0800de15 	.word	0x0800de15

0800cf6c <__lshift>:
 800cf6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf70:	460c      	mov	r4, r1
 800cf72:	6849      	ldr	r1, [r1, #4]
 800cf74:	6923      	ldr	r3, [r4, #16]
 800cf76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cf7a:	68a3      	ldr	r3, [r4, #8]
 800cf7c:	4607      	mov	r7, r0
 800cf7e:	4691      	mov	r9, r2
 800cf80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cf84:	f108 0601 	add.w	r6, r8, #1
 800cf88:	42b3      	cmp	r3, r6
 800cf8a:	db0b      	blt.n	800cfa4 <__lshift+0x38>
 800cf8c:	4638      	mov	r0, r7
 800cf8e:	f7ff fddd 	bl	800cb4c <_Balloc>
 800cf92:	4605      	mov	r5, r0
 800cf94:	b948      	cbnz	r0, 800cfaa <__lshift+0x3e>
 800cf96:	4602      	mov	r2, r0
 800cf98:	4b28      	ldr	r3, [pc, #160]	; (800d03c <__lshift+0xd0>)
 800cf9a:	4829      	ldr	r0, [pc, #164]	; (800d040 <__lshift+0xd4>)
 800cf9c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800cfa0:	f000 fbe8 	bl	800d774 <__assert_func>
 800cfa4:	3101      	adds	r1, #1
 800cfa6:	005b      	lsls	r3, r3, #1
 800cfa8:	e7ee      	b.n	800cf88 <__lshift+0x1c>
 800cfaa:	2300      	movs	r3, #0
 800cfac:	f100 0114 	add.w	r1, r0, #20
 800cfb0:	f100 0210 	add.w	r2, r0, #16
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	4553      	cmp	r3, sl
 800cfb8:	db33      	blt.n	800d022 <__lshift+0xb6>
 800cfba:	6920      	ldr	r0, [r4, #16]
 800cfbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cfc0:	f104 0314 	add.w	r3, r4, #20
 800cfc4:	f019 091f 	ands.w	r9, r9, #31
 800cfc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cfcc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cfd0:	d02b      	beq.n	800d02a <__lshift+0xbe>
 800cfd2:	f1c9 0e20 	rsb	lr, r9, #32
 800cfd6:	468a      	mov	sl, r1
 800cfd8:	2200      	movs	r2, #0
 800cfda:	6818      	ldr	r0, [r3, #0]
 800cfdc:	fa00 f009 	lsl.w	r0, r0, r9
 800cfe0:	4310      	orrs	r0, r2
 800cfe2:	f84a 0b04 	str.w	r0, [sl], #4
 800cfe6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfea:	459c      	cmp	ip, r3
 800cfec:	fa22 f20e 	lsr.w	r2, r2, lr
 800cff0:	d8f3      	bhi.n	800cfda <__lshift+0x6e>
 800cff2:	ebac 0304 	sub.w	r3, ip, r4
 800cff6:	3b15      	subs	r3, #21
 800cff8:	f023 0303 	bic.w	r3, r3, #3
 800cffc:	3304      	adds	r3, #4
 800cffe:	f104 0015 	add.w	r0, r4, #21
 800d002:	4584      	cmp	ip, r0
 800d004:	bf38      	it	cc
 800d006:	2304      	movcc	r3, #4
 800d008:	50ca      	str	r2, [r1, r3]
 800d00a:	b10a      	cbz	r2, 800d010 <__lshift+0xa4>
 800d00c:	f108 0602 	add.w	r6, r8, #2
 800d010:	3e01      	subs	r6, #1
 800d012:	4638      	mov	r0, r7
 800d014:	612e      	str	r6, [r5, #16]
 800d016:	4621      	mov	r1, r4
 800d018:	f7ff fdd8 	bl	800cbcc <_Bfree>
 800d01c:	4628      	mov	r0, r5
 800d01e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d022:	f842 0f04 	str.w	r0, [r2, #4]!
 800d026:	3301      	adds	r3, #1
 800d028:	e7c5      	b.n	800cfb6 <__lshift+0x4a>
 800d02a:	3904      	subs	r1, #4
 800d02c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d030:	f841 2f04 	str.w	r2, [r1, #4]!
 800d034:	459c      	cmp	ip, r3
 800d036:	d8f9      	bhi.n	800d02c <__lshift+0xc0>
 800d038:	e7ea      	b.n	800d010 <__lshift+0xa4>
 800d03a:	bf00      	nop
 800d03c:	0800de04 	.word	0x0800de04
 800d040:	0800de15 	.word	0x0800de15

0800d044 <__mcmp>:
 800d044:	b530      	push	{r4, r5, lr}
 800d046:	6902      	ldr	r2, [r0, #16]
 800d048:	690c      	ldr	r4, [r1, #16]
 800d04a:	1b12      	subs	r2, r2, r4
 800d04c:	d10e      	bne.n	800d06c <__mcmp+0x28>
 800d04e:	f100 0314 	add.w	r3, r0, #20
 800d052:	3114      	adds	r1, #20
 800d054:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d058:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d05c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d060:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d064:	42a5      	cmp	r5, r4
 800d066:	d003      	beq.n	800d070 <__mcmp+0x2c>
 800d068:	d305      	bcc.n	800d076 <__mcmp+0x32>
 800d06a:	2201      	movs	r2, #1
 800d06c:	4610      	mov	r0, r2
 800d06e:	bd30      	pop	{r4, r5, pc}
 800d070:	4283      	cmp	r3, r0
 800d072:	d3f3      	bcc.n	800d05c <__mcmp+0x18>
 800d074:	e7fa      	b.n	800d06c <__mcmp+0x28>
 800d076:	f04f 32ff 	mov.w	r2, #4294967295
 800d07a:	e7f7      	b.n	800d06c <__mcmp+0x28>

0800d07c <__mdiff>:
 800d07c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d080:	460c      	mov	r4, r1
 800d082:	4606      	mov	r6, r0
 800d084:	4611      	mov	r1, r2
 800d086:	4620      	mov	r0, r4
 800d088:	4690      	mov	r8, r2
 800d08a:	f7ff ffdb 	bl	800d044 <__mcmp>
 800d08e:	1e05      	subs	r5, r0, #0
 800d090:	d110      	bne.n	800d0b4 <__mdiff+0x38>
 800d092:	4629      	mov	r1, r5
 800d094:	4630      	mov	r0, r6
 800d096:	f7ff fd59 	bl	800cb4c <_Balloc>
 800d09a:	b930      	cbnz	r0, 800d0aa <__mdiff+0x2e>
 800d09c:	4b3a      	ldr	r3, [pc, #232]	; (800d188 <__mdiff+0x10c>)
 800d09e:	4602      	mov	r2, r0
 800d0a0:	f240 2137 	movw	r1, #567	; 0x237
 800d0a4:	4839      	ldr	r0, [pc, #228]	; (800d18c <__mdiff+0x110>)
 800d0a6:	f000 fb65 	bl	800d774 <__assert_func>
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d0b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0b4:	bfa4      	itt	ge
 800d0b6:	4643      	movge	r3, r8
 800d0b8:	46a0      	movge	r8, r4
 800d0ba:	4630      	mov	r0, r6
 800d0bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d0c0:	bfa6      	itte	ge
 800d0c2:	461c      	movge	r4, r3
 800d0c4:	2500      	movge	r5, #0
 800d0c6:	2501      	movlt	r5, #1
 800d0c8:	f7ff fd40 	bl	800cb4c <_Balloc>
 800d0cc:	b920      	cbnz	r0, 800d0d8 <__mdiff+0x5c>
 800d0ce:	4b2e      	ldr	r3, [pc, #184]	; (800d188 <__mdiff+0x10c>)
 800d0d0:	4602      	mov	r2, r0
 800d0d2:	f240 2145 	movw	r1, #581	; 0x245
 800d0d6:	e7e5      	b.n	800d0a4 <__mdiff+0x28>
 800d0d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d0dc:	6926      	ldr	r6, [r4, #16]
 800d0de:	60c5      	str	r5, [r0, #12]
 800d0e0:	f104 0914 	add.w	r9, r4, #20
 800d0e4:	f108 0514 	add.w	r5, r8, #20
 800d0e8:	f100 0e14 	add.w	lr, r0, #20
 800d0ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d0f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d0f4:	f108 0210 	add.w	r2, r8, #16
 800d0f8:	46f2      	mov	sl, lr
 800d0fa:	2100      	movs	r1, #0
 800d0fc:	f859 3b04 	ldr.w	r3, [r9], #4
 800d100:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d104:	fa11 f88b 	uxtah	r8, r1, fp
 800d108:	b299      	uxth	r1, r3
 800d10a:	0c1b      	lsrs	r3, r3, #16
 800d10c:	eba8 0801 	sub.w	r8, r8, r1
 800d110:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d114:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d118:	fa1f f888 	uxth.w	r8, r8
 800d11c:	1419      	asrs	r1, r3, #16
 800d11e:	454e      	cmp	r6, r9
 800d120:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d124:	f84a 3b04 	str.w	r3, [sl], #4
 800d128:	d8e8      	bhi.n	800d0fc <__mdiff+0x80>
 800d12a:	1b33      	subs	r3, r6, r4
 800d12c:	3b15      	subs	r3, #21
 800d12e:	f023 0303 	bic.w	r3, r3, #3
 800d132:	3304      	adds	r3, #4
 800d134:	3415      	adds	r4, #21
 800d136:	42a6      	cmp	r6, r4
 800d138:	bf38      	it	cc
 800d13a:	2304      	movcc	r3, #4
 800d13c:	441d      	add	r5, r3
 800d13e:	4473      	add	r3, lr
 800d140:	469e      	mov	lr, r3
 800d142:	462e      	mov	r6, r5
 800d144:	4566      	cmp	r6, ip
 800d146:	d30e      	bcc.n	800d166 <__mdiff+0xea>
 800d148:	f10c 0203 	add.w	r2, ip, #3
 800d14c:	1b52      	subs	r2, r2, r5
 800d14e:	f022 0203 	bic.w	r2, r2, #3
 800d152:	3d03      	subs	r5, #3
 800d154:	45ac      	cmp	ip, r5
 800d156:	bf38      	it	cc
 800d158:	2200      	movcc	r2, #0
 800d15a:	4413      	add	r3, r2
 800d15c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d160:	b17a      	cbz	r2, 800d182 <__mdiff+0x106>
 800d162:	6107      	str	r7, [r0, #16]
 800d164:	e7a4      	b.n	800d0b0 <__mdiff+0x34>
 800d166:	f856 8b04 	ldr.w	r8, [r6], #4
 800d16a:	fa11 f288 	uxtah	r2, r1, r8
 800d16e:	1414      	asrs	r4, r2, #16
 800d170:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d174:	b292      	uxth	r2, r2
 800d176:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d17a:	f84e 2b04 	str.w	r2, [lr], #4
 800d17e:	1421      	asrs	r1, r4, #16
 800d180:	e7e0      	b.n	800d144 <__mdiff+0xc8>
 800d182:	3f01      	subs	r7, #1
 800d184:	e7ea      	b.n	800d15c <__mdiff+0xe0>
 800d186:	bf00      	nop
 800d188:	0800de04 	.word	0x0800de04
 800d18c:	0800de15 	.word	0x0800de15

0800d190 <__d2b>:
 800d190:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d194:	460f      	mov	r7, r1
 800d196:	2101      	movs	r1, #1
 800d198:	ec59 8b10 	vmov	r8, r9, d0
 800d19c:	4616      	mov	r6, r2
 800d19e:	f7ff fcd5 	bl	800cb4c <_Balloc>
 800d1a2:	4604      	mov	r4, r0
 800d1a4:	b930      	cbnz	r0, 800d1b4 <__d2b+0x24>
 800d1a6:	4602      	mov	r2, r0
 800d1a8:	4b24      	ldr	r3, [pc, #144]	; (800d23c <__d2b+0xac>)
 800d1aa:	4825      	ldr	r0, [pc, #148]	; (800d240 <__d2b+0xb0>)
 800d1ac:	f240 310f 	movw	r1, #783	; 0x30f
 800d1b0:	f000 fae0 	bl	800d774 <__assert_func>
 800d1b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d1b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d1bc:	bb2d      	cbnz	r5, 800d20a <__d2b+0x7a>
 800d1be:	9301      	str	r3, [sp, #4]
 800d1c0:	f1b8 0300 	subs.w	r3, r8, #0
 800d1c4:	d026      	beq.n	800d214 <__d2b+0x84>
 800d1c6:	4668      	mov	r0, sp
 800d1c8:	9300      	str	r3, [sp, #0]
 800d1ca:	f7ff fd87 	bl	800ccdc <__lo0bits>
 800d1ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d1d2:	b1e8      	cbz	r0, 800d210 <__d2b+0x80>
 800d1d4:	f1c0 0320 	rsb	r3, r0, #32
 800d1d8:	fa02 f303 	lsl.w	r3, r2, r3
 800d1dc:	430b      	orrs	r3, r1
 800d1de:	40c2      	lsrs	r2, r0
 800d1e0:	6163      	str	r3, [r4, #20]
 800d1e2:	9201      	str	r2, [sp, #4]
 800d1e4:	9b01      	ldr	r3, [sp, #4]
 800d1e6:	61a3      	str	r3, [r4, #24]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	bf14      	ite	ne
 800d1ec:	2202      	movne	r2, #2
 800d1ee:	2201      	moveq	r2, #1
 800d1f0:	6122      	str	r2, [r4, #16]
 800d1f2:	b1bd      	cbz	r5, 800d224 <__d2b+0x94>
 800d1f4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d1f8:	4405      	add	r5, r0
 800d1fa:	603d      	str	r5, [r7, #0]
 800d1fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d200:	6030      	str	r0, [r6, #0]
 800d202:	4620      	mov	r0, r4
 800d204:	b003      	add	sp, #12
 800d206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d20a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d20e:	e7d6      	b.n	800d1be <__d2b+0x2e>
 800d210:	6161      	str	r1, [r4, #20]
 800d212:	e7e7      	b.n	800d1e4 <__d2b+0x54>
 800d214:	a801      	add	r0, sp, #4
 800d216:	f7ff fd61 	bl	800ccdc <__lo0bits>
 800d21a:	9b01      	ldr	r3, [sp, #4]
 800d21c:	6163      	str	r3, [r4, #20]
 800d21e:	3020      	adds	r0, #32
 800d220:	2201      	movs	r2, #1
 800d222:	e7e5      	b.n	800d1f0 <__d2b+0x60>
 800d224:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d228:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d22c:	6038      	str	r0, [r7, #0]
 800d22e:	6918      	ldr	r0, [r3, #16]
 800d230:	f7ff fd34 	bl	800cc9c <__hi0bits>
 800d234:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d238:	e7e2      	b.n	800d200 <__d2b+0x70>
 800d23a:	bf00      	nop
 800d23c:	0800de04 	.word	0x0800de04
 800d240:	0800de15 	.word	0x0800de15

0800d244 <__sfputc_r>:
 800d244:	6893      	ldr	r3, [r2, #8]
 800d246:	3b01      	subs	r3, #1
 800d248:	2b00      	cmp	r3, #0
 800d24a:	b410      	push	{r4}
 800d24c:	6093      	str	r3, [r2, #8]
 800d24e:	da08      	bge.n	800d262 <__sfputc_r+0x1e>
 800d250:	6994      	ldr	r4, [r2, #24]
 800d252:	42a3      	cmp	r3, r4
 800d254:	db01      	blt.n	800d25a <__sfputc_r+0x16>
 800d256:	290a      	cmp	r1, #10
 800d258:	d103      	bne.n	800d262 <__sfputc_r+0x1e>
 800d25a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d25e:	f000 b9e3 	b.w	800d628 <__swbuf_r>
 800d262:	6813      	ldr	r3, [r2, #0]
 800d264:	1c58      	adds	r0, r3, #1
 800d266:	6010      	str	r0, [r2, #0]
 800d268:	7019      	strb	r1, [r3, #0]
 800d26a:	4608      	mov	r0, r1
 800d26c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d270:	4770      	bx	lr

0800d272 <__sfputs_r>:
 800d272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d274:	4606      	mov	r6, r0
 800d276:	460f      	mov	r7, r1
 800d278:	4614      	mov	r4, r2
 800d27a:	18d5      	adds	r5, r2, r3
 800d27c:	42ac      	cmp	r4, r5
 800d27e:	d101      	bne.n	800d284 <__sfputs_r+0x12>
 800d280:	2000      	movs	r0, #0
 800d282:	e007      	b.n	800d294 <__sfputs_r+0x22>
 800d284:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d288:	463a      	mov	r2, r7
 800d28a:	4630      	mov	r0, r6
 800d28c:	f7ff ffda 	bl	800d244 <__sfputc_r>
 800d290:	1c43      	adds	r3, r0, #1
 800d292:	d1f3      	bne.n	800d27c <__sfputs_r+0xa>
 800d294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d298 <_vfiprintf_r>:
 800d298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d29c:	460d      	mov	r5, r1
 800d29e:	b09d      	sub	sp, #116	; 0x74
 800d2a0:	4614      	mov	r4, r2
 800d2a2:	4698      	mov	r8, r3
 800d2a4:	4606      	mov	r6, r0
 800d2a6:	b118      	cbz	r0, 800d2b0 <_vfiprintf_r+0x18>
 800d2a8:	6a03      	ldr	r3, [r0, #32]
 800d2aa:	b90b      	cbnz	r3, 800d2b0 <_vfiprintf_r+0x18>
 800d2ac:	f7fe fb50 	bl	800b950 <__sinit>
 800d2b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2b2:	07d9      	lsls	r1, r3, #31
 800d2b4:	d405      	bmi.n	800d2c2 <_vfiprintf_r+0x2a>
 800d2b6:	89ab      	ldrh	r3, [r5, #12]
 800d2b8:	059a      	lsls	r2, r3, #22
 800d2ba:	d402      	bmi.n	800d2c2 <_vfiprintf_r+0x2a>
 800d2bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2be:	f7fe fcb8 	bl	800bc32 <__retarget_lock_acquire_recursive>
 800d2c2:	89ab      	ldrh	r3, [r5, #12]
 800d2c4:	071b      	lsls	r3, r3, #28
 800d2c6:	d501      	bpl.n	800d2cc <_vfiprintf_r+0x34>
 800d2c8:	692b      	ldr	r3, [r5, #16]
 800d2ca:	b99b      	cbnz	r3, 800d2f4 <_vfiprintf_r+0x5c>
 800d2cc:	4629      	mov	r1, r5
 800d2ce:	4630      	mov	r0, r6
 800d2d0:	f000 f9e8 	bl	800d6a4 <__swsetup_r>
 800d2d4:	b170      	cbz	r0, 800d2f4 <_vfiprintf_r+0x5c>
 800d2d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2d8:	07dc      	lsls	r4, r3, #31
 800d2da:	d504      	bpl.n	800d2e6 <_vfiprintf_r+0x4e>
 800d2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d2e0:	b01d      	add	sp, #116	; 0x74
 800d2e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2e6:	89ab      	ldrh	r3, [r5, #12]
 800d2e8:	0598      	lsls	r0, r3, #22
 800d2ea:	d4f7      	bmi.n	800d2dc <_vfiprintf_r+0x44>
 800d2ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2ee:	f7fe fca1 	bl	800bc34 <__retarget_lock_release_recursive>
 800d2f2:	e7f3      	b.n	800d2dc <_vfiprintf_r+0x44>
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	9309      	str	r3, [sp, #36]	; 0x24
 800d2f8:	2320      	movs	r3, #32
 800d2fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d2fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800d302:	2330      	movs	r3, #48	; 0x30
 800d304:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d4b8 <_vfiprintf_r+0x220>
 800d308:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d30c:	f04f 0901 	mov.w	r9, #1
 800d310:	4623      	mov	r3, r4
 800d312:	469a      	mov	sl, r3
 800d314:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d318:	b10a      	cbz	r2, 800d31e <_vfiprintf_r+0x86>
 800d31a:	2a25      	cmp	r2, #37	; 0x25
 800d31c:	d1f9      	bne.n	800d312 <_vfiprintf_r+0x7a>
 800d31e:	ebba 0b04 	subs.w	fp, sl, r4
 800d322:	d00b      	beq.n	800d33c <_vfiprintf_r+0xa4>
 800d324:	465b      	mov	r3, fp
 800d326:	4622      	mov	r2, r4
 800d328:	4629      	mov	r1, r5
 800d32a:	4630      	mov	r0, r6
 800d32c:	f7ff ffa1 	bl	800d272 <__sfputs_r>
 800d330:	3001      	adds	r0, #1
 800d332:	f000 80a9 	beq.w	800d488 <_vfiprintf_r+0x1f0>
 800d336:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d338:	445a      	add	r2, fp
 800d33a:	9209      	str	r2, [sp, #36]	; 0x24
 800d33c:	f89a 3000 	ldrb.w	r3, [sl]
 800d340:	2b00      	cmp	r3, #0
 800d342:	f000 80a1 	beq.w	800d488 <_vfiprintf_r+0x1f0>
 800d346:	2300      	movs	r3, #0
 800d348:	f04f 32ff 	mov.w	r2, #4294967295
 800d34c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d350:	f10a 0a01 	add.w	sl, sl, #1
 800d354:	9304      	str	r3, [sp, #16]
 800d356:	9307      	str	r3, [sp, #28]
 800d358:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d35c:	931a      	str	r3, [sp, #104]	; 0x68
 800d35e:	4654      	mov	r4, sl
 800d360:	2205      	movs	r2, #5
 800d362:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d366:	4854      	ldr	r0, [pc, #336]	; (800d4b8 <_vfiprintf_r+0x220>)
 800d368:	f7f2 ff42 	bl	80001f0 <memchr>
 800d36c:	9a04      	ldr	r2, [sp, #16]
 800d36e:	b9d8      	cbnz	r0, 800d3a8 <_vfiprintf_r+0x110>
 800d370:	06d1      	lsls	r1, r2, #27
 800d372:	bf44      	itt	mi
 800d374:	2320      	movmi	r3, #32
 800d376:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d37a:	0713      	lsls	r3, r2, #28
 800d37c:	bf44      	itt	mi
 800d37e:	232b      	movmi	r3, #43	; 0x2b
 800d380:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d384:	f89a 3000 	ldrb.w	r3, [sl]
 800d388:	2b2a      	cmp	r3, #42	; 0x2a
 800d38a:	d015      	beq.n	800d3b8 <_vfiprintf_r+0x120>
 800d38c:	9a07      	ldr	r2, [sp, #28]
 800d38e:	4654      	mov	r4, sl
 800d390:	2000      	movs	r0, #0
 800d392:	f04f 0c0a 	mov.w	ip, #10
 800d396:	4621      	mov	r1, r4
 800d398:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d39c:	3b30      	subs	r3, #48	; 0x30
 800d39e:	2b09      	cmp	r3, #9
 800d3a0:	d94d      	bls.n	800d43e <_vfiprintf_r+0x1a6>
 800d3a2:	b1b0      	cbz	r0, 800d3d2 <_vfiprintf_r+0x13a>
 800d3a4:	9207      	str	r2, [sp, #28]
 800d3a6:	e014      	b.n	800d3d2 <_vfiprintf_r+0x13a>
 800d3a8:	eba0 0308 	sub.w	r3, r0, r8
 800d3ac:	fa09 f303 	lsl.w	r3, r9, r3
 800d3b0:	4313      	orrs	r3, r2
 800d3b2:	9304      	str	r3, [sp, #16]
 800d3b4:	46a2      	mov	sl, r4
 800d3b6:	e7d2      	b.n	800d35e <_vfiprintf_r+0xc6>
 800d3b8:	9b03      	ldr	r3, [sp, #12]
 800d3ba:	1d19      	adds	r1, r3, #4
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	9103      	str	r1, [sp, #12]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	bfbb      	ittet	lt
 800d3c4:	425b      	neglt	r3, r3
 800d3c6:	f042 0202 	orrlt.w	r2, r2, #2
 800d3ca:	9307      	strge	r3, [sp, #28]
 800d3cc:	9307      	strlt	r3, [sp, #28]
 800d3ce:	bfb8      	it	lt
 800d3d0:	9204      	strlt	r2, [sp, #16]
 800d3d2:	7823      	ldrb	r3, [r4, #0]
 800d3d4:	2b2e      	cmp	r3, #46	; 0x2e
 800d3d6:	d10c      	bne.n	800d3f2 <_vfiprintf_r+0x15a>
 800d3d8:	7863      	ldrb	r3, [r4, #1]
 800d3da:	2b2a      	cmp	r3, #42	; 0x2a
 800d3dc:	d134      	bne.n	800d448 <_vfiprintf_r+0x1b0>
 800d3de:	9b03      	ldr	r3, [sp, #12]
 800d3e0:	1d1a      	adds	r2, r3, #4
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	9203      	str	r2, [sp, #12]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	bfb8      	it	lt
 800d3ea:	f04f 33ff 	movlt.w	r3, #4294967295
 800d3ee:	3402      	adds	r4, #2
 800d3f0:	9305      	str	r3, [sp, #20]
 800d3f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d4c8 <_vfiprintf_r+0x230>
 800d3f6:	7821      	ldrb	r1, [r4, #0]
 800d3f8:	2203      	movs	r2, #3
 800d3fa:	4650      	mov	r0, sl
 800d3fc:	f7f2 fef8 	bl	80001f0 <memchr>
 800d400:	b138      	cbz	r0, 800d412 <_vfiprintf_r+0x17a>
 800d402:	9b04      	ldr	r3, [sp, #16]
 800d404:	eba0 000a 	sub.w	r0, r0, sl
 800d408:	2240      	movs	r2, #64	; 0x40
 800d40a:	4082      	lsls	r2, r0
 800d40c:	4313      	orrs	r3, r2
 800d40e:	3401      	adds	r4, #1
 800d410:	9304      	str	r3, [sp, #16]
 800d412:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d416:	4829      	ldr	r0, [pc, #164]	; (800d4bc <_vfiprintf_r+0x224>)
 800d418:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d41c:	2206      	movs	r2, #6
 800d41e:	f7f2 fee7 	bl	80001f0 <memchr>
 800d422:	2800      	cmp	r0, #0
 800d424:	d03f      	beq.n	800d4a6 <_vfiprintf_r+0x20e>
 800d426:	4b26      	ldr	r3, [pc, #152]	; (800d4c0 <_vfiprintf_r+0x228>)
 800d428:	bb1b      	cbnz	r3, 800d472 <_vfiprintf_r+0x1da>
 800d42a:	9b03      	ldr	r3, [sp, #12]
 800d42c:	3307      	adds	r3, #7
 800d42e:	f023 0307 	bic.w	r3, r3, #7
 800d432:	3308      	adds	r3, #8
 800d434:	9303      	str	r3, [sp, #12]
 800d436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d438:	443b      	add	r3, r7
 800d43a:	9309      	str	r3, [sp, #36]	; 0x24
 800d43c:	e768      	b.n	800d310 <_vfiprintf_r+0x78>
 800d43e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d442:	460c      	mov	r4, r1
 800d444:	2001      	movs	r0, #1
 800d446:	e7a6      	b.n	800d396 <_vfiprintf_r+0xfe>
 800d448:	2300      	movs	r3, #0
 800d44a:	3401      	adds	r4, #1
 800d44c:	9305      	str	r3, [sp, #20]
 800d44e:	4619      	mov	r1, r3
 800d450:	f04f 0c0a 	mov.w	ip, #10
 800d454:	4620      	mov	r0, r4
 800d456:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d45a:	3a30      	subs	r2, #48	; 0x30
 800d45c:	2a09      	cmp	r2, #9
 800d45e:	d903      	bls.n	800d468 <_vfiprintf_r+0x1d0>
 800d460:	2b00      	cmp	r3, #0
 800d462:	d0c6      	beq.n	800d3f2 <_vfiprintf_r+0x15a>
 800d464:	9105      	str	r1, [sp, #20]
 800d466:	e7c4      	b.n	800d3f2 <_vfiprintf_r+0x15a>
 800d468:	fb0c 2101 	mla	r1, ip, r1, r2
 800d46c:	4604      	mov	r4, r0
 800d46e:	2301      	movs	r3, #1
 800d470:	e7f0      	b.n	800d454 <_vfiprintf_r+0x1bc>
 800d472:	ab03      	add	r3, sp, #12
 800d474:	9300      	str	r3, [sp, #0]
 800d476:	462a      	mov	r2, r5
 800d478:	4b12      	ldr	r3, [pc, #72]	; (800d4c4 <_vfiprintf_r+0x22c>)
 800d47a:	a904      	add	r1, sp, #16
 800d47c:	4630      	mov	r0, r6
 800d47e:	f7fd fe15 	bl	800b0ac <_printf_float>
 800d482:	4607      	mov	r7, r0
 800d484:	1c78      	adds	r0, r7, #1
 800d486:	d1d6      	bne.n	800d436 <_vfiprintf_r+0x19e>
 800d488:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d48a:	07d9      	lsls	r1, r3, #31
 800d48c:	d405      	bmi.n	800d49a <_vfiprintf_r+0x202>
 800d48e:	89ab      	ldrh	r3, [r5, #12]
 800d490:	059a      	lsls	r2, r3, #22
 800d492:	d402      	bmi.n	800d49a <_vfiprintf_r+0x202>
 800d494:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d496:	f7fe fbcd 	bl	800bc34 <__retarget_lock_release_recursive>
 800d49a:	89ab      	ldrh	r3, [r5, #12]
 800d49c:	065b      	lsls	r3, r3, #25
 800d49e:	f53f af1d 	bmi.w	800d2dc <_vfiprintf_r+0x44>
 800d4a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d4a4:	e71c      	b.n	800d2e0 <_vfiprintf_r+0x48>
 800d4a6:	ab03      	add	r3, sp, #12
 800d4a8:	9300      	str	r3, [sp, #0]
 800d4aa:	462a      	mov	r2, r5
 800d4ac:	4b05      	ldr	r3, [pc, #20]	; (800d4c4 <_vfiprintf_r+0x22c>)
 800d4ae:	a904      	add	r1, sp, #16
 800d4b0:	4630      	mov	r0, r6
 800d4b2:	f7fe f89f 	bl	800b5f4 <_printf_i>
 800d4b6:	e7e4      	b.n	800d482 <_vfiprintf_r+0x1ea>
 800d4b8:	0800df6c 	.word	0x0800df6c
 800d4bc:	0800df76 	.word	0x0800df76
 800d4c0:	0800b0ad 	.word	0x0800b0ad
 800d4c4:	0800d273 	.word	0x0800d273
 800d4c8:	0800df72 	.word	0x0800df72

0800d4cc <__sflush_r>:
 800d4cc:	898a      	ldrh	r2, [r1, #12]
 800d4ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4d2:	4605      	mov	r5, r0
 800d4d4:	0710      	lsls	r0, r2, #28
 800d4d6:	460c      	mov	r4, r1
 800d4d8:	d458      	bmi.n	800d58c <__sflush_r+0xc0>
 800d4da:	684b      	ldr	r3, [r1, #4]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	dc05      	bgt.n	800d4ec <__sflush_r+0x20>
 800d4e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	dc02      	bgt.n	800d4ec <__sflush_r+0x20>
 800d4e6:	2000      	movs	r0, #0
 800d4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d4ee:	2e00      	cmp	r6, #0
 800d4f0:	d0f9      	beq.n	800d4e6 <__sflush_r+0x1a>
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d4f8:	682f      	ldr	r7, [r5, #0]
 800d4fa:	6a21      	ldr	r1, [r4, #32]
 800d4fc:	602b      	str	r3, [r5, #0]
 800d4fe:	d032      	beq.n	800d566 <__sflush_r+0x9a>
 800d500:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d502:	89a3      	ldrh	r3, [r4, #12]
 800d504:	075a      	lsls	r2, r3, #29
 800d506:	d505      	bpl.n	800d514 <__sflush_r+0x48>
 800d508:	6863      	ldr	r3, [r4, #4]
 800d50a:	1ac0      	subs	r0, r0, r3
 800d50c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d50e:	b10b      	cbz	r3, 800d514 <__sflush_r+0x48>
 800d510:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d512:	1ac0      	subs	r0, r0, r3
 800d514:	2300      	movs	r3, #0
 800d516:	4602      	mov	r2, r0
 800d518:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d51a:	6a21      	ldr	r1, [r4, #32]
 800d51c:	4628      	mov	r0, r5
 800d51e:	47b0      	blx	r6
 800d520:	1c43      	adds	r3, r0, #1
 800d522:	89a3      	ldrh	r3, [r4, #12]
 800d524:	d106      	bne.n	800d534 <__sflush_r+0x68>
 800d526:	6829      	ldr	r1, [r5, #0]
 800d528:	291d      	cmp	r1, #29
 800d52a:	d82b      	bhi.n	800d584 <__sflush_r+0xb8>
 800d52c:	4a29      	ldr	r2, [pc, #164]	; (800d5d4 <__sflush_r+0x108>)
 800d52e:	410a      	asrs	r2, r1
 800d530:	07d6      	lsls	r6, r2, #31
 800d532:	d427      	bmi.n	800d584 <__sflush_r+0xb8>
 800d534:	2200      	movs	r2, #0
 800d536:	6062      	str	r2, [r4, #4]
 800d538:	04d9      	lsls	r1, r3, #19
 800d53a:	6922      	ldr	r2, [r4, #16]
 800d53c:	6022      	str	r2, [r4, #0]
 800d53e:	d504      	bpl.n	800d54a <__sflush_r+0x7e>
 800d540:	1c42      	adds	r2, r0, #1
 800d542:	d101      	bne.n	800d548 <__sflush_r+0x7c>
 800d544:	682b      	ldr	r3, [r5, #0]
 800d546:	b903      	cbnz	r3, 800d54a <__sflush_r+0x7e>
 800d548:	6560      	str	r0, [r4, #84]	; 0x54
 800d54a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d54c:	602f      	str	r7, [r5, #0]
 800d54e:	2900      	cmp	r1, #0
 800d550:	d0c9      	beq.n	800d4e6 <__sflush_r+0x1a>
 800d552:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d556:	4299      	cmp	r1, r3
 800d558:	d002      	beq.n	800d560 <__sflush_r+0x94>
 800d55a:	4628      	mov	r0, r5
 800d55c:	f7ff f9f6 	bl	800c94c <_free_r>
 800d560:	2000      	movs	r0, #0
 800d562:	6360      	str	r0, [r4, #52]	; 0x34
 800d564:	e7c0      	b.n	800d4e8 <__sflush_r+0x1c>
 800d566:	2301      	movs	r3, #1
 800d568:	4628      	mov	r0, r5
 800d56a:	47b0      	blx	r6
 800d56c:	1c41      	adds	r1, r0, #1
 800d56e:	d1c8      	bne.n	800d502 <__sflush_r+0x36>
 800d570:	682b      	ldr	r3, [r5, #0]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d0c5      	beq.n	800d502 <__sflush_r+0x36>
 800d576:	2b1d      	cmp	r3, #29
 800d578:	d001      	beq.n	800d57e <__sflush_r+0xb2>
 800d57a:	2b16      	cmp	r3, #22
 800d57c:	d101      	bne.n	800d582 <__sflush_r+0xb6>
 800d57e:	602f      	str	r7, [r5, #0]
 800d580:	e7b1      	b.n	800d4e6 <__sflush_r+0x1a>
 800d582:	89a3      	ldrh	r3, [r4, #12]
 800d584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d588:	81a3      	strh	r3, [r4, #12]
 800d58a:	e7ad      	b.n	800d4e8 <__sflush_r+0x1c>
 800d58c:	690f      	ldr	r7, [r1, #16]
 800d58e:	2f00      	cmp	r7, #0
 800d590:	d0a9      	beq.n	800d4e6 <__sflush_r+0x1a>
 800d592:	0793      	lsls	r3, r2, #30
 800d594:	680e      	ldr	r6, [r1, #0]
 800d596:	bf08      	it	eq
 800d598:	694b      	ldreq	r3, [r1, #20]
 800d59a:	600f      	str	r7, [r1, #0]
 800d59c:	bf18      	it	ne
 800d59e:	2300      	movne	r3, #0
 800d5a0:	eba6 0807 	sub.w	r8, r6, r7
 800d5a4:	608b      	str	r3, [r1, #8]
 800d5a6:	f1b8 0f00 	cmp.w	r8, #0
 800d5aa:	dd9c      	ble.n	800d4e6 <__sflush_r+0x1a>
 800d5ac:	6a21      	ldr	r1, [r4, #32]
 800d5ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d5b0:	4643      	mov	r3, r8
 800d5b2:	463a      	mov	r2, r7
 800d5b4:	4628      	mov	r0, r5
 800d5b6:	47b0      	blx	r6
 800d5b8:	2800      	cmp	r0, #0
 800d5ba:	dc06      	bgt.n	800d5ca <__sflush_r+0xfe>
 800d5bc:	89a3      	ldrh	r3, [r4, #12]
 800d5be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5c2:	81a3      	strh	r3, [r4, #12]
 800d5c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5c8:	e78e      	b.n	800d4e8 <__sflush_r+0x1c>
 800d5ca:	4407      	add	r7, r0
 800d5cc:	eba8 0800 	sub.w	r8, r8, r0
 800d5d0:	e7e9      	b.n	800d5a6 <__sflush_r+0xda>
 800d5d2:	bf00      	nop
 800d5d4:	dfbffffe 	.word	0xdfbffffe

0800d5d8 <_fflush_r>:
 800d5d8:	b538      	push	{r3, r4, r5, lr}
 800d5da:	690b      	ldr	r3, [r1, #16]
 800d5dc:	4605      	mov	r5, r0
 800d5de:	460c      	mov	r4, r1
 800d5e0:	b913      	cbnz	r3, 800d5e8 <_fflush_r+0x10>
 800d5e2:	2500      	movs	r5, #0
 800d5e4:	4628      	mov	r0, r5
 800d5e6:	bd38      	pop	{r3, r4, r5, pc}
 800d5e8:	b118      	cbz	r0, 800d5f2 <_fflush_r+0x1a>
 800d5ea:	6a03      	ldr	r3, [r0, #32]
 800d5ec:	b90b      	cbnz	r3, 800d5f2 <_fflush_r+0x1a>
 800d5ee:	f7fe f9af 	bl	800b950 <__sinit>
 800d5f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d0f3      	beq.n	800d5e2 <_fflush_r+0xa>
 800d5fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d5fc:	07d0      	lsls	r0, r2, #31
 800d5fe:	d404      	bmi.n	800d60a <_fflush_r+0x32>
 800d600:	0599      	lsls	r1, r3, #22
 800d602:	d402      	bmi.n	800d60a <_fflush_r+0x32>
 800d604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d606:	f7fe fb14 	bl	800bc32 <__retarget_lock_acquire_recursive>
 800d60a:	4628      	mov	r0, r5
 800d60c:	4621      	mov	r1, r4
 800d60e:	f7ff ff5d 	bl	800d4cc <__sflush_r>
 800d612:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d614:	07da      	lsls	r2, r3, #31
 800d616:	4605      	mov	r5, r0
 800d618:	d4e4      	bmi.n	800d5e4 <_fflush_r+0xc>
 800d61a:	89a3      	ldrh	r3, [r4, #12]
 800d61c:	059b      	lsls	r3, r3, #22
 800d61e:	d4e1      	bmi.n	800d5e4 <_fflush_r+0xc>
 800d620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d622:	f7fe fb07 	bl	800bc34 <__retarget_lock_release_recursive>
 800d626:	e7dd      	b.n	800d5e4 <_fflush_r+0xc>

0800d628 <__swbuf_r>:
 800d628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d62a:	460e      	mov	r6, r1
 800d62c:	4614      	mov	r4, r2
 800d62e:	4605      	mov	r5, r0
 800d630:	b118      	cbz	r0, 800d63a <__swbuf_r+0x12>
 800d632:	6a03      	ldr	r3, [r0, #32]
 800d634:	b90b      	cbnz	r3, 800d63a <__swbuf_r+0x12>
 800d636:	f7fe f98b 	bl	800b950 <__sinit>
 800d63a:	69a3      	ldr	r3, [r4, #24]
 800d63c:	60a3      	str	r3, [r4, #8]
 800d63e:	89a3      	ldrh	r3, [r4, #12]
 800d640:	071a      	lsls	r2, r3, #28
 800d642:	d525      	bpl.n	800d690 <__swbuf_r+0x68>
 800d644:	6923      	ldr	r3, [r4, #16]
 800d646:	b31b      	cbz	r3, 800d690 <__swbuf_r+0x68>
 800d648:	6823      	ldr	r3, [r4, #0]
 800d64a:	6922      	ldr	r2, [r4, #16]
 800d64c:	1a98      	subs	r0, r3, r2
 800d64e:	6963      	ldr	r3, [r4, #20]
 800d650:	b2f6      	uxtb	r6, r6
 800d652:	4283      	cmp	r3, r0
 800d654:	4637      	mov	r7, r6
 800d656:	dc04      	bgt.n	800d662 <__swbuf_r+0x3a>
 800d658:	4621      	mov	r1, r4
 800d65a:	4628      	mov	r0, r5
 800d65c:	f7ff ffbc 	bl	800d5d8 <_fflush_r>
 800d660:	b9e0      	cbnz	r0, 800d69c <__swbuf_r+0x74>
 800d662:	68a3      	ldr	r3, [r4, #8]
 800d664:	3b01      	subs	r3, #1
 800d666:	60a3      	str	r3, [r4, #8]
 800d668:	6823      	ldr	r3, [r4, #0]
 800d66a:	1c5a      	adds	r2, r3, #1
 800d66c:	6022      	str	r2, [r4, #0]
 800d66e:	701e      	strb	r6, [r3, #0]
 800d670:	6962      	ldr	r2, [r4, #20]
 800d672:	1c43      	adds	r3, r0, #1
 800d674:	429a      	cmp	r2, r3
 800d676:	d004      	beq.n	800d682 <__swbuf_r+0x5a>
 800d678:	89a3      	ldrh	r3, [r4, #12]
 800d67a:	07db      	lsls	r3, r3, #31
 800d67c:	d506      	bpl.n	800d68c <__swbuf_r+0x64>
 800d67e:	2e0a      	cmp	r6, #10
 800d680:	d104      	bne.n	800d68c <__swbuf_r+0x64>
 800d682:	4621      	mov	r1, r4
 800d684:	4628      	mov	r0, r5
 800d686:	f7ff ffa7 	bl	800d5d8 <_fflush_r>
 800d68a:	b938      	cbnz	r0, 800d69c <__swbuf_r+0x74>
 800d68c:	4638      	mov	r0, r7
 800d68e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d690:	4621      	mov	r1, r4
 800d692:	4628      	mov	r0, r5
 800d694:	f000 f806 	bl	800d6a4 <__swsetup_r>
 800d698:	2800      	cmp	r0, #0
 800d69a:	d0d5      	beq.n	800d648 <__swbuf_r+0x20>
 800d69c:	f04f 37ff 	mov.w	r7, #4294967295
 800d6a0:	e7f4      	b.n	800d68c <__swbuf_r+0x64>
	...

0800d6a4 <__swsetup_r>:
 800d6a4:	b538      	push	{r3, r4, r5, lr}
 800d6a6:	4b2a      	ldr	r3, [pc, #168]	; (800d750 <__swsetup_r+0xac>)
 800d6a8:	4605      	mov	r5, r0
 800d6aa:	6818      	ldr	r0, [r3, #0]
 800d6ac:	460c      	mov	r4, r1
 800d6ae:	b118      	cbz	r0, 800d6b8 <__swsetup_r+0x14>
 800d6b0:	6a03      	ldr	r3, [r0, #32]
 800d6b2:	b90b      	cbnz	r3, 800d6b8 <__swsetup_r+0x14>
 800d6b4:	f7fe f94c 	bl	800b950 <__sinit>
 800d6b8:	89a3      	ldrh	r3, [r4, #12]
 800d6ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d6be:	0718      	lsls	r0, r3, #28
 800d6c0:	d422      	bmi.n	800d708 <__swsetup_r+0x64>
 800d6c2:	06d9      	lsls	r1, r3, #27
 800d6c4:	d407      	bmi.n	800d6d6 <__swsetup_r+0x32>
 800d6c6:	2309      	movs	r3, #9
 800d6c8:	602b      	str	r3, [r5, #0]
 800d6ca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d6ce:	81a3      	strh	r3, [r4, #12]
 800d6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d6d4:	e034      	b.n	800d740 <__swsetup_r+0x9c>
 800d6d6:	0758      	lsls	r0, r3, #29
 800d6d8:	d512      	bpl.n	800d700 <__swsetup_r+0x5c>
 800d6da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d6dc:	b141      	cbz	r1, 800d6f0 <__swsetup_r+0x4c>
 800d6de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6e2:	4299      	cmp	r1, r3
 800d6e4:	d002      	beq.n	800d6ec <__swsetup_r+0x48>
 800d6e6:	4628      	mov	r0, r5
 800d6e8:	f7ff f930 	bl	800c94c <_free_r>
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	6363      	str	r3, [r4, #52]	; 0x34
 800d6f0:	89a3      	ldrh	r3, [r4, #12]
 800d6f2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d6f6:	81a3      	strh	r3, [r4, #12]
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	6063      	str	r3, [r4, #4]
 800d6fc:	6923      	ldr	r3, [r4, #16]
 800d6fe:	6023      	str	r3, [r4, #0]
 800d700:	89a3      	ldrh	r3, [r4, #12]
 800d702:	f043 0308 	orr.w	r3, r3, #8
 800d706:	81a3      	strh	r3, [r4, #12]
 800d708:	6923      	ldr	r3, [r4, #16]
 800d70a:	b94b      	cbnz	r3, 800d720 <__swsetup_r+0x7c>
 800d70c:	89a3      	ldrh	r3, [r4, #12]
 800d70e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d712:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d716:	d003      	beq.n	800d720 <__swsetup_r+0x7c>
 800d718:	4621      	mov	r1, r4
 800d71a:	4628      	mov	r0, r5
 800d71c:	f000 f8b6 	bl	800d88c <__smakebuf_r>
 800d720:	89a0      	ldrh	r0, [r4, #12]
 800d722:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d726:	f010 0301 	ands.w	r3, r0, #1
 800d72a:	d00a      	beq.n	800d742 <__swsetup_r+0x9e>
 800d72c:	2300      	movs	r3, #0
 800d72e:	60a3      	str	r3, [r4, #8]
 800d730:	6963      	ldr	r3, [r4, #20]
 800d732:	425b      	negs	r3, r3
 800d734:	61a3      	str	r3, [r4, #24]
 800d736:	6923      	ldr	r3, [r4, #16]
 800d738:	b943      	cbnz	r3, 800d74c <__swsetup_r+0xa8>
 800d73a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d73e:	d1c4      	bne.n	800d6ca <__swsetup_r+0x26>
 800d740:	bd38      	pop	{r3, r4, r5, pc}
 800d742:	0781      	lsls	r1, r0, #30
 800d744:	bf58      	it	pl
 800d746:	6963      	ldrpl	r3, [r4, #20]
 800d748:	60a3      	str	r3, [r4, #8]
 800d74a:	e7f4      	b.n	800d736 <__swsetup_r+0x92>
 800d74c:	2000      	movs	r0, #0
 800d74e:	e7f7      	b.n	800d740 <__swsetup_r+0x9c>
 800d750:	2000006c 	.word	0x2000006c

0800d754 <_sbrk_r>:
 800d754:	b538      	push	{r3, r4, r5, lr}
 800d756:	4d06      	ldr	r5, [pc, #24]	; (800d770 <_sbrk_r+0x1c>)
 800d758:	2300      	movs	r3, #0
 800d75a:	4604      	mov	r4, r0
 800d75c:	4608      	mov	r0, r1
 800d75e:	602b      	str	r3, [r5, #0]
 800d760:	f7f4 fbd0 	bl	8001f04 <_sbrk>
 800d764:	1c43      	adds	r3, r0, #1
 800d766:	d102      	bne.n	800d76e <_sbrk_r+0x1a>
 800d768:	682b      	ldr	r3, [r5, #0]
 800d76a:	b103      	cbz	r3, 800d76e <_sbrk_r+0x1a>
 800d76c:	6023      	str	r3, [r4, #0]
 800d76e:	bd38      	pop	{r3, r4, r5, pc}
 800d770:	200061ec 	.word	0x200061ec

0800d774 <__assert_func>:
 800d774:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d776:	4614      	mov	r4, r2
 800d778:	461a      	mov	r2, r3
 800d77a:	4b09      	ldr	r3, [pc, #36]	; (800d7a0 <__assert_func+0x2c>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	4605      	mov	r5, r0
 800d780:	68d8      	ldr	r0, [r3, #12]
 800d782:	b14c      	cbz	r4, 800d798 <__assert_func+0x24>
 800d784:	4b07      	ldr	r3, [pc, #28]	; (800d7a4 <__assert_func+0x30>)
 800d786:	9100      	str	r1, [sp, #0]
 800d788:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d78c:	4906      	ldr	r1, [pc, #24]	; (800d7a8 <__assert_func+0x34>)
 800d78e:	462b      	mov	r3, r5
 800d790:	f000 f844 	bl	800d81c <fiprintf>
 800d794:	f000 f8d8 	bl	800d948 <abort>
 800d798:	4b04      	ldr	r3, [pc, #16]	; (800d7ac <__assert_func+0x38>)
 800d79a:	461c      	mov	r4, r3
 800d79c:	e7f3      	b.n	800d786 <__assert_func+0x12>
 800d79e:	bf00      	nop
 800d7a0:	2000006c 	.word	0x2000006c
 800d7a4:	0800df87 	.word	0x0800df87
 800d7a8:	0800df94 	.word	0x0800df94
 800d7ac:	0800dfc2 	.word	0x0800dfc2

0800d7b0 <_calloc_r>:
 800d7b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d7b2:	fba1 2402 	umull	r2, r4, r1, r2
 800d7b6:	b94c      	cbnz	r4, 800d7cc <_calloc_r+0x1c>
 800d7b8:	4611      	mov	r1, r2
 800d7ba:	9201      	str	r2, [sp, #4]
 800d7bc:	f7ff f93a 	bl	800ca34 <_malloc_r>
 800d7c0:	9a01      	ldr	r2, [sp, #4]
 800d7c2:	4605      	mov	r5, r0
 800d7c4:	b930      	cbnz	r0, 800d7d4 <_calloc_r+0x24>
 800d7c6:	4628      	mov	r0, r5
 800d7c8:	b003      	add	sp, #12
 800d7ca:	bd30      	pop	{r4, r5, pc}
 800d7cc:	220c      	movs	r2, #12
 800d7ce:	6002      	str	r2, [r0, #0]
 800d7d0:	2500      	movs	r5, #0
 800d7d2:	e7f8      	b.n	800d7c6 <_calloc_r+0x16>
 800d7d4:	4621      	mov	r1, r4
 800d7d6:	f7fe f946 	bl	800ba66 <memset>
 800d7da:	e7f4      	b.n	800d7c6 <_calloc_r+0x16>

0800d7dc <__ascii_mbtowc>:
 800d7dc:	b082      	sub	sp, #8
 800d7de:	b901      	cbnz	r1, 800d7e2 <__ascii_mbtowc+0x6>
 800d7e0:	a901      	add	r1, sp, #4
 800d7e2:	b142      	cbz	r2, 800d7f6 <__ascii_mbtowc+0x1a>
 800d7e4:	b14b      	cbz	r3, 800d7fa <__ascii_mbtowc+0x1e>
 800d7e6:	7813      	ldrb	r3, [r2, #0]
 800d7e8:	600b      	str	r3, [r1, #0]
 800d7ea:	7812      	ldrb	r2, [r2, #0]
 800d7ec:	1e10      	subs	r0, r2, #0
 800d7ee:	bf18      	it	ne
 800d7f0:	2001      	movne	r0, #1
 800d7f2:	b002      	add	sp, #8
 800d7f4:	4770      	bx	lr
 800d7f6:	4610      	mov	r0, r2
 800d7f8:	e7fb      	b.n	800d7f2 <__ascii_mbtowc+0x16>
 800d7fa:	f06f 0001 	mvn.w	r0, #1
 800d7fe:	e7f8      	b.n	800d7f2 <__ascii_mbtowc+0x16>

0800d800 <__ascii_wctomb>:
 800d800:	b149      	cbz	r1, 800d816 <__ascii_wctomb+0x16>
 800d802:	2aff      	cmp	r2, #255	; 0xff
 800d804:	bf85      	ittet	hi
 800d806:	238a      	movhi	r3, #138	; 0x8a
 800d808:	6003      	strhi	r3, [r0, #0]
 800d80a:	700a      	strbls	r2, [r1, #0]
 800d80c:	f04f 30ff 	movhi.w	r0, #4294967295
 800d810:	bf98      	it	ls
 800d812:	2001      	movls	r0, #1
 800d814:	4770      	bx	lr
 800d816:	4608      	mov	r0, r1
 800d818:	4770      	bx	lr
	...

0800d81c <fiprintf>:
 800d81c:	b40e      	push	{r1, r2, r3}
 800d81e:	b503      	push	{r0, r1, lr}
 800d820:	4601      	mov	r1, r0
 800d822:	ab03      	add	r3, sp, #12
 800d824:	4805      	ldr	r0, [pc, #20]	; (800d83c <fiprintf+0x20>)
 800d826:	f853 2b04 	ldr.w	r2, [r3], #4
 800d82a:	6800      	ldr	r0, [r0, #0]
 800d82c:	9301      	str	r3, [sp, #4]
 800d82e:	f7ff fd33 	bl	800d298 <_vfiprintf_r>
 800d832:	b002      	add	sp, #8
 800d834:	f85d eb04 	ldr.w	lr, [sp], #4
 800d838:	b003      	add	sp, #12
 800d83a:	4770      	bx	lr
 800d83c:	2000006c 	.word	0x2000006c

0800d840 <__swhatbuf_r>:
 800d840:	b570      	push	{r4, r5, r6, lr}
 800d842:	460c      	mov	r4, r1
 800d844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d848:	2900      	cmp	r1, #0
 800d84a:	b096      	sub	sp, #88	; 0x58
 800d84c:	4615      	mov	r5, r2
 800d84e:	461e      	mov	r6, r3
 800d850:	da0d      	bge.n	800d86e <__swhatbuf_r+0x2e>
 800d852:	89a3      	ldrh	r3, [r4, #12]
 800d854:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d858:	f04f 0100 	mov.w	r1, #0
 800d85c:	bf0c      	ite	eq
 800d85e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d862:	2340      	movne	r3, #64	; 0x40
 800d864:	2000      	movs	r0, #0
 800d866:	6031      	str	r1, [r6, #0]
 800d868:	602b      	str	r3, [r5, #0]
 800d86a:	b016      	add	sp, #88	; 0x58
 800d86c:	bd70      	pop	{r4, r5, r6, pc}
 800d86e:	466a      	mov	r2, sp
 800d870:	f000 f848 	bl	800d904 <_fstat_r>
 800d874:	2800      	cmp	r0, #0
 800d876:	dbec      	blt.n	800d852 <__swhatbuf_r+0x12>
 800d878:	9901      	ldr	r1, [sp, #4]
 800d87a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d87e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d882:	4259      	negs	r1, r3
 800d884:	4159      	adcs	r1, r3
 800d886:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d88a:	e7eb      	b.n	800d864 <__swhatbuf_r+0x24>

0800d88c <__smakebuf_r>:
 800d88c:	898b      	ldrh	r3, [r1, #12]
 800d88e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d890:	079d      	lsls	r5, r3, #30
 800d892:	4606      	mov	r6, r0
 800d894:	460c      	mov	r4, r1
 800d896:	d507      	bpl.n	800d8a8 <__smakebuf_r+0x1c>
 800d898:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d89c:	6023      	str	r3, [r4, #0]
 800d89e:	6123      	str	r3, [r4, #16]
 800d8a0:	2301      	movs	r3, #1
 800d8a2:	6163      	str	r3, [r4, #20]
 800d8a4:	b002      	add	sp, #8
 800d8a6:	bd70      	pop	{r4, r5, r6, pc}
 800d8a8:	ab01      	add	r3, sp, #4
 800d8aa:	466a      	mov	r2, sp
 800d8ac:	f7ff ffc8 	bl	800d840 <__swhatbuf_r>
 800d8b0:	9900      	ldr	r1, [sp, #0]
 800d8b2:	4605      	mov	r5, r0
 800d8b4:	4630      	mov	r0, r6
 800d8b6:	f7ff f8bd 	bl	800ca34 <_malloc_r>
 800d8ba:	b948      	cbnz	r0, 800d8d0 <__smakebuf_r+0x44>
 800d8bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8c0:	059a      	lsls	r2, r3, #22
 800d8c2:	d4ef      	bmi.n	800d8a4 <__smakebuf_r+0x18>
 800d8c4:	f023 0303 	bic.w	r3, r3, #3
 800d8c8:	f043 0302 	orr.w	r3, r3, #2
 800d8cc:	81a3      	strh	r3, [r4, #12]
 800d8ce:	e7e3      	b.n	800d898 <__smakebuf_r+0xc>
 800d8d0:	89a3      	ldrh	r3, [r4, #12]
 800d8d2:	6020      	str	r0, [r4, #0]
 800d8d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8d8:	81a3      	strh	r3, [r4, #12]
 800d8da:	9b00      	ldr	r3, [sp, #0]
 800d8dc:	6163      	str	r3, [r4, #20]
 800d8de:	9b01      	ldr	r3, [sp, #4]
 800d8e0:	6120      	str	r0, [r4, #16]
 800d8e2:	b15b      	cbz	r3, 800d8fc <__smakebuf_r+0x70>
 800d8e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8e8:	4630      	mov	r0, r6
 800d8ea:	f000 f81d 	bl	800d928 <_isatty_r>
 800d8ee:	b128      	cbz	r0, 800d8fc <__smakebuf_r+0x70>
 800d8f0:	89a3      	ldrh	r3, [r4, #12]
 800d8f2:	f023 0303 	bic.w	r3, r3, #3
 800d8f6:	f043 0301 	orr.w	r3, r3, #1
 800d8fa:	81a3      	strh	r3, [r4, #12]
 800d8fc:	89a3      	ldrh	r3, [r4, #12]
 800d8fe:	431d      	orrs	r5, r3
 800d900:	81a5      	strh	r5, [r4, #12]
 800d902:	e7cf      	b.n	800d8a4 <__smakebuf_r+0x18>

0800d904 <_fstat_r>:
 800d904:	b538      	push	{r3, r4, r5, lr}
 800d906:	4d07      	ldr	r5, [pc, #28]	; (800d924 <_fstat_r+0x20>)
 800d908:	2300      	movs	r3, #0
 800d90a:	4604      	mov	r4, r0
 800d90c:	4608      	mov	r0, r1
 800d90e:	4611      	mov	r1, r2
 800d910:	602b      	str	r3, [r5, #0]
 800d912:	f7f4 face 	bl	8001eb2 <_fstat>
 800d916:	1c43      	adds	r3, r0, #1
 800d918:	d102      	bne.n	800d920 <_fstat_r+0x1c>
 800d91a:	682b      	ldr	r3, [r5, #0]
 800d91c:	b103      	cbz	r3, 800d920 <_fstat_r+0x1c>
 800d91e:	6023      	str	r3, [r4, #0]
 800d920:	bd38      	pop	{r3, r4, r5, pc}
 800d922:	bf00      	nop
 800d924:	200061ec 	.word	0x200061ec

0800d928 <_isatty_r>:
 800d928:	b538      	push	{r3, r4, r5, lr}
 800d92a:	4d06      	ldr	r5, [pc, #24]	; (800d944 <_isatty_r+0x1c>)
 800d92c:	2300      	movs	r3, #0
 800d92e:	4604      	mov	r4, r0
 800d930:	4608      	mov	r0, r1
 800d932:	602b      	str	r3, [r5, #0]
 800d934:	f7f4 facd 	bl	8001ed2 <_isatty>
 800d938:	1c43      	adds	r3, r0, #1
 800d93a:	d102      	bne.n	800d942 <_isatty_r+0x1a>
 800d93c:	682b      	ldr	r3, [r5, #0]
 800d93e:	b103      	cbz	r3, 800d942 <_isatty_r+0x1a>
 800d940:	6023      	str	r3, [r4, #0]
 800d942:	bd38      	pop	{r3, r4, r5, pc}
 800d944:	200061ec 	.word	0x200061ec

0800d948 <abort>:
 800d948:	b508      	push	{r3, lr}
 800d94a:	2006      	movs	r0, #6
 800d94c:	f000 f82c 	bl	800d9a8 <raise>
 800d950:	2001      	movs	r0, #1
 800d952:	f7f4 fa5f 	bl	8001e14 <_exit>

0800d956 <_raise_r>:
 800d956:	291f      	cmp	r1, #31
 800d958:	b538      	push	{r3, r4, r5, lr}
 800d95a:	4604      	mov	r4, r0
 800d95c:	460d      	mov	r5, r1
 800d95e:	d904      	bls.n	800d96a <_raise_r+0x14>
 800d960:	2316      	movs	r3, #22
 800d962:	6003      	str	r3, [r0, #0]
 800d964:	f04f 30ff 	mov.w	r0, #4294967295
 800d968:	bd38      	pop	{r3, r4, r5, pc}
 800d96a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d96c:	b112      	cbz	r2, 800d974 <_raise_r+0x1e>
 800d96e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d972:	b94b      	cbnz	r3, 800d988 <_raise_r+0x32>
 800d974:	4620      	mov	r0, r4
 800d976:	f000 f831 	bl	800d9dc <_getpid_r>
 800d97a:	462a      	mov	r2, r5
 800d97c:	4601      	mov	r1, r0
 800d97e:	4620      	mov	r0, r4
 800d980:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d984:	f000 b818 	b.w	800d9b8 <_kill_r>
 800d988:	2b01      	cmp	r3, #1
 800d98a:	d00a      	beq.n	800d9a2 <_raise_r+0x4c>
 800d98c:	1c59      	adds	r1, r3, #1
 800d98e:	d103      	bne.n	800d998 <_raise_r+0x42>
 800d990:	2316      	movs	r3, #22
 800d992:	6003      	str	r3, [r0, #0]
 800d994:	2001      	movs	r0, #1
 800d996:	e7e7      	b.n	800d968 <_raise_r+0x12>
 800d998:	2400      	movs	r4, #0
 800d99a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d99e:	4628      	mov	r0, r5
 800d9a0:	4798      	blx	r3
 800d9a2:	2000      	movs	r0, #0
 800d9a4:	e7e0      	b.n	800d968 <_raise_r+0x12>
	...

0800d9a8 <raise>:
 800d9a8:	4b02      	ldr	r3, [pc, #8]	; (800d9b4 <raise+0xc>)
 800d9aa:	4601      	mov	r1, r0
 800d9ac:	6818      	ldr	r0, [r3, #0]
 800d9ae:	f7ff bfd2 	b.w	800d956 <_raise_r>
 800d9b2:	bf00      	nop
 800d9b4:	2000006c 	.word	0x2000006c

0800d9b8 <_kill_r>:
 800d9b8:	b538      	push	{r3, r4, r5, lr}
 800d9ba:	4d07      	ldr	r5, [pc, #28]	; (800d9d8 <_kill_r+0x20>)
 800d9bc:	2300      	movs	r3, #0
 800d9be:	4604      	mov	r4, r0
 800d9c0:	4608      	mov	r0, r1
 800d9c2:	4611      	mov	r1, r2
 800d9c4:	602b      	str	r3, [r5, #0]
 800d9c6:	f7f4 fa15 	bl	8001df4 <_kill>
 800d9ca:	1c43      	adds	r3, r0, #1
 800d9cc:	d102      	bne.n	800d9d4 <_kill_r+0x1c>
 800d9ce:	682b      	ldr	r3, [r5, #0]
 800d9d0:	b103      	cbz	r3, 800d9d4 <_kill_r+0x1c>
 800d9d2:	6023      	str	r3, [r4, #0]
 800d9d4:	bd38      	pop	{r3, r4, r5, pc}
 800d9d6:	bf00      	nop
 800d9d8:	200061ec 	.word	0x200061ec

0800d9dc <_getpid_r>:
 800d9dc:	f7f4 ba02 	b.w	8001de4 <_getpid>

0800d9e0 <_init>:
 800d9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9e2:	bf00      	nop
 800d9e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9e6:	bc08      	pop	{r3}
 800d9e8:	469e      	mov	lr, r3
 800d9ea:	4770      	bx	lr

0800d9ec <_fini>:
 800d9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9ee:	bf00      	nop
 800d9f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9f2:	bc08      	pop	{r3}
 800d9f4:	469e      	mov	lr, r3
 800d9f6:	4770      	bx	lr
