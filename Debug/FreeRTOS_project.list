
FreeRTOS_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009de8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  08009f78  08009f78  00019f78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a444  0800a444  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a444  0800a444  0001a444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a44c  0800a44c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a44c  0800a44c  0001a44c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a450  0800a450  0001a450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800a454  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c34  200001d8  0800a62c  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e0c  0800a62c  00021e0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b498  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000384e  00000000  00000000  0003b6e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001720  00000000  00000000  0003ef38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011f2  00000000  00000000  00040658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004848  00000000  00000000  0004184a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019ec9  00000000  00000000  00046092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fea48  00000000  00000000  0005ff5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000071e8  00000000  00000000  0015e9a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00165b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009f60 	.word	0x08009f60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08009f60 	.word	0x08009f60

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b970 	b.w	8000ec0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	460d      	mov	r5, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	460f      	mov	r7, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4694      	mov	ip, r2
 8000c0c:	d965      	bls.n	8000cda <__udivmoddi4+0xe2>
 8000c0e:	fab2 f382 	clz	r3, r2
 8000c12:	b143      	cbz	r3, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c18:	f1c3 0220 	rsb	r2, r3, #32
 8000c1c:	409f      	lsls	r7, r3
 8000c1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c22:	4317      	orrs	r7, r2
 8000c24:	409c      	lsls	r4, r3
 8000c26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c2a:	fa1f f58c 	uxth.w	r5, ip
 8000c2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c32:	0c22      	lsrs	r2, r4, #16
 8000c34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c3c:	fb01 f005 	mul.w	r0, r1, r5
 8000c40:	4290      	cmp	r0, r2
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c4c:	f080 811c 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c50:	4290      	cmp	r0, r2
 8000c52:	f240 8119 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c56:	3902      	subs	r1, #2
 8000c58:	4462      	add	r2, ip
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	b2a4      	uxth	r4, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c6a:	fb00 f505 	mul.w	r5, r0, r5
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x90>
 8000c72:	eb1c 0404 	adds.w	r4, ip, r4
 8000c76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c7a:	f080 8107 	bcs.w	8000e8c <__udivmoddi4+0x294>
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	f240 8104 	bls.w	8000e8c <__udivmoddi4+0x294>
 8000c84:	4464      	add	r4, ip
 8000c86:	3802      	subs	r0, #2
 8000c88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11e      	cbz	r6, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40dc      	lsrs	r4, r3
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0xbc>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80ed 	beq.w	8000e82 <__udivmoddi4+0x28a>
 8000ca8:	2100      	movs	r1, #0
 8000caa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	fab3 f183 	clz	r1, r3
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	d149      	bne.n	8000d50 <__udivmoddi4+0x158>
 8000cbc:	42ab      	cmp	r3, r5
 8000cbe:	d302      	bcc.n	8000cc6 <__udivmoddi4+0xce>
 8000cc0:	4282      	cmp	r2, r0
 8000cc2:	f200 80f8 	bhi.w	8000eb6 <__udivmoddi4+0x2be>
 8000cc6:	1a84      	subs	r4, r0, r2
 8000cc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ccc:	2001      	movs	r0, #1
 8000cce:	4617      	mov	r7, r2
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d0e2      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cd8:	e7df      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cda:	b902      	cbnz	r2, 8000cde <__udivmoddi4+0xe6>
 8000cdc:	deff      	udf	#255	; 0xff
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8090 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000ce8:	1a8a      	subs	r2, r1, r2
 8000cea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cf8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cfc:	0c22      	lsrs	r2, r4, #16
 8000cfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d02:	fb0e f005 	mul.w	r0, lr, r5
 8000d06:	4290      	cmp	r0, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d0e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4290      	cmp	r0, r2
 8000d16:	f200 80cb 	bhi.w	8000eb0 <__udivmoddi4+0x2b8>
 8000d1a:	4645      	mov	r5, r8
 8000d1c:	1a12      	subs	r2, r2, r0
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d24:	fb07 2210 	mls	r2, r7, r0, r2
 8000d28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x14e>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x14c>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	f200 80bb 	bhi.w	8000eba <__udivmoddi4+0x2c2>
 8000d44:	4610      	mov	r0, r2
 8000d46:	eba4 040e 	sub.w	r4, r4, lr
 8000d4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d4e:	e79f      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d50:	f1c1 0720 	rsb	r7, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d62:	fa20 f307 	lsr.w	r3, r0, r7
 8000d66:	40fd      	lsrs	r5, r7
 8000d68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6c:	4323      	orrs	r3, r4
 8000d6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d72:	fa1f fe8c 	uxth.w	lr, ip
 8000d76:	fb09 5518 	mls	r5, r9, r8, r5
 8000d7a:	0c1c      	lsrs	r4, r3, #16
 8000d7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d80:	fb08 f50e 	mul.w	r5, r8, lr
 8000d84:	42a5      	cmp	r5, r4
 8000d86:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d98:	f080 8088 	bcs.w	8000eac <__udivmoddi4+0x2b4>
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	f240 8085 	bls.w	8000eac <__udivmoddi4+0x2b4>
 8000da2:	f1a8 0802 	sub.w	r8, r8, #2
 8000da6:	4464      	add	r4, ip
 8000da8:	1b64      	subs	r4, r4, r5
 8000daa:	b29d      	uxth	r5, r3
 8000dac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db0:	fb09 4413 	mls	r4, r9, r3, r4
 8000db4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000db8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dc8:	d26c      	bcs.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	d96a      	bls.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dd6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dda:	eba4 040e 	sub.w	r4, r4, lr
 8000dde:	42ac      	cmp	r4, r5
 8000de0:	46c8      	mov	r8, r9
 8000de2:	46ae      	mov	lr, r5
 8000de4:	d356      	bcc.n	8000e94 <__udivmoddi4+0x29c>
 8000de6:	d053      	beq.n	8000e90 <__udivmoddi4+0x298>
 8000de8:	b156      	cbz	r6, 8000e00 <__udivmoddi4+0x208>
 8000dea:	ebb0 0208 	subs.w	r2, r0, r8
 8000dee:	eb64 040e 	sbc.w	r4, r4, lr
 8000df2:	fa04 f707 	lsl.w	r7, r4, r7
 8000df6:	40ca      	lsrs	r2, r1
 8000df8:	40cc      	lsrs	r4, r1
 8000dfa:	4317      	orrs	r7, r2
 8000dfc:	e9c6 7400 	strd	r7, r4, [r6]
 8000e00:	4618      	mov	r0, r3
 8000e02:	2100      	movs	r1, #0
 8000e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e08:	f1c3 0120 	rsb	r1, r3, #32
 8000e0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e10:	fa20 f201 	lsr.w	r2, r0, r1
 8000e14:	fa25 f101 	lsr.w	r1, r5, r1
 8000e18:	409d      	lsls	r5, r3
 8000e1a:	432a      	orrs	r2, r5
 8000e1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e28:	fb07 1510 	mls	r5, r7, r0, r1
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e32:	fb00 f50e 	mul.w	r5, r0, lr
 8000e36:	428d      	cmp	r5, r1
 8000e38:	fa04 f403 	lsl.w	r4, r4, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x258>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e46:	d22f      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e48:	428d      	cmp	r5, r1
 8000e4a:	d92d      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1b49      	subs	r1, r1, r5
 8000e52:	b292      	uxth	r2, r2
 8000e54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e58:	fb07 1115 	mls	r1, r7, r5, r1
 8000e5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e60:	fb05 f10e 	mul.w	r1, r5, lr
 8000e64:	4291      	cmp	r1, r2
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x282>
 8000e68:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e70:	d216      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e72:	4291      	cmp	r1, r2
 8000e74:	d914      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e76:	3d02      	subs	r5, #2
 8000e78:	4462      	add	r2, ip
 8000e7a:	1a52      	subs	r2, r2, r1
 8000e7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e80:	e738      	b.n	8000cf4 <__udivmoddi4+0xfc>
 8000e82:	4631      	mov	r1, r6
 8000e84:	4630      	mov	r0, r6
 8000e86:	e708      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000e88:	4639      	mov	r1, r7
 8000e8a:	e6e6      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	e6fb      	b.n	8000c88 <__udivmoddi4+0x90>
 8000e90:	4548      	cmp	r0, r9
 8000e92:	d2a9      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e94:	ebb9 0802 	subs.w	r8, r9, r2
 8000e98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	e7a3      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000ea0:	4645      	mov	r5, r8
 8000ea2:	e7ea      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ea4:	462b      	mov	r3, r5
 8000ea6:	e794      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea8:	4640      	mov	r0, r8
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x258>
 8000eac:	46d0      	mov	r8, sl
 8000eae:	e77b      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eb0:	3d02      	subs	r5, #2
 8000eb2:	4462      	add	r2, ip
 8000eb4:	e732      	b.n	8000d1c <__udivmoddi4+0x124>
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e70a      	b.n	8000cd0 <__udivmoddi4+0xd8>
 8000eba:	4464      	add	r4, ip
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	e742      	b.n	8000d46 <__udivmoddi4+0x14e>

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2b0a      	cmp	r3, #10
 8000ed0:	d109      	bne.n	8000ee6 <__io_putchar+0x22>
        uint8_t ch2 = '\r';
 8000ed2:	230d      	movs	r3, #13
 8000ed4:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 8000ed6:	f107 010f 	add.w	r1, r7, #15
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295
 8000ede:	2201      	movs	r2, #1
 8000ee0:	4807      	ldr	r0, [pc, #28]	; (8000f00 <__io_putchar+0x3c>)
 8000ee2:	f002 fd0f 	bl	8003904 <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000ee6:	1d39      	adds	r1, r7, #4
 8000ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8000eec:	2201      	movs	r2, #1
 8000eee:	4804      	ldr	r0, [pc, #16]	; (8000f00 <__io_putchar+0x3c>)
 8000ef0:	f002 fd08 	bl	8003904 <HAL_UART_Transmit>
    return 1;
 8000ef4:	2301      	movs	r3, #1
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200001f4 	.word	0x200001f4

08000f04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f08:	f000 fbcb 	bl	80016a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f0c:	f000 f840 	bl	8000f90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f10:	f000 f8b4 	bl	800107c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f14:	f000 f882 	bl	800101c <MX_USART2_UART_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f18:	f003 fb5a 	bl	80045d0 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Queue1_Commands */
  Queue1_CommandsHandle = osMessageQueueNew (10, 10, &Queue1_Commands_attributes);
 8000f1c:	4a11      	ldr	r2, [pc, #68]	; (8000f64 <main+0x60>)
 8000f1e:	210a      	movs	r1, #10
 8000f20:	200a      	movs	r0, #10
 8000f22:	f003 fc4c 	bl	80047be <osMessageQueueNew>
 8000f26:	4603      	mov	r3, r0
 8000f28:	4a0f      	ldr	r2, [pc, #60]	; (8000f68 <main+0x64>)
 8000f2a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f2c:	4a0f      	ldr	r2, [pc, #60]	; (8000f6c <main+0x68>)
 8000f2e:	2100      	movs	r1, #0
 8000f30:	480f      	ldr	r0, [pc, #60]	; (8000f70 <main+0x6c>)
 8000f32:	f003 fb97 	bl	8004664 <osThreadNew>
 8000f36:	4603      	mov	r3, r0
 8000f38:	4a0e      	ldr	r2, [pc, #56]	; (8000f74 <main+0x70>)
 8000f3a:	6013      	str	r3, [r2, #0]

  /* creation of Task2_UsartReceiving */
  Task2_UsartReceivingHandle = osThreadNew(UsartReceiving, NULL, &Task2_UsartReceiving_attributes);
 8000f3c:	4a0e      	ldr	r2, [pc, #56]	; (8000f78 <main+0x74>)
 8000f3e:	2100      	movs	r1, #0
 8000f40:	480e      	ldr	r0, [pc, #56]	; (8000f7c <main+0x78>)
 8000f42:	f003 fb8f 	bl	8004664 <osThreadNew>
 8000f46:	4603      	mov	r3, r0
 8000f48:	4a0d      	ldr	r2, [pc, #52]	; (8000f80 <main+0x7c>)
 8000f4a:	6013      	str	r3, [r2, #0]

  /* creation of Task3_CommandDetection */
  Task3_CommandDetectionHandle = osThreadNew(CommandDetection, NULL, &Task3_CommandDetection_attributes);
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	; (8000f84 <main+0x80>)
 8000f4e:	2100      	movs	r1, #0
 8000f50:	480d      	ldr	r0, [pc, #52]	; (8000f88 <main+0x84>)
 8000f52:	f003 fb87 	bl	8004664 <osThreadNew>
 8000f56:	4603      	mov	r3, r0
 8000f58:	4a0c      	ldr	r2, [pc, #48]	; (8000f8c <main+0x88>)
 8000f5a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f5c:	f003 fb5c 	bl	8004618 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <main+0x5c>
 8000f62:	bf00      	nop
 8000f64:	0800a070 	.word	0x0800a070
 8000f68:	20000288 	.word	0x20000288
 8000f6c:	0800a004 	.word	0x0800a004
 8000f70:	080010dd 	.word	0x080010dd
 8000f74:	2000027c 	.word	0x2000027c
 8000f78:	0800a028 	.word	0x0800a028
 8000f7c:	080010ed 	.word	0x080010ed
 8000f80:	20000280 	.word	0x20000280
 8000f84:	0800a04c 	.word	0x0800a04c
 8000f88:	080011b5 	.word	0x080011b5
 8000f8c:	20000284 	.word	0x20000284

08000f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b096      	sub	sp, #88	; 0x58
 8000f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	2244      	movs	r2, #68	; 0x44
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f007 f821 	bl	8007fe6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa4:	463b      	mov	r3, r7
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fb2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fb6:	f000 fe5f 	bl	8001c78 <HAL_PWREx_ControlVoltageScaling>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fc0:	f000 f94a 	bl	8001258 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000fc4:	2310      	movs	r3, #16
 8000fc6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000fd0:	2360      	movs	r3, #96	; 0x60
 8000fd2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f000 fea1 	bl	8001d24 <HAL_RCC_OscConfig>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000fe8:	f000 f936 	bl	8001258 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fec:	230f      	movs	r3, #15
 8000fee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001000:	463b      	mov	r3, r7
 8001002:	2100      	movs	r1, #0
 8001004:	4618      	mov	r0, r3
 8001006:	f001 fa69 	bl	80024dc <HAL_RCC_ClockConfig>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001010:	f000 f922 	bl	8001258 <Error_Handler>
  }
}
 8001014:	bf00      	nop
 8001016:	3758      	adds	r7, #88	; 0x58
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001020:	4b14      	ldr	r3, [pc, #80]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001022:	4a15      	ldr	r2, [pc, #84]	; (8001078 <MX_USART2_UART_Init+0x5c>)
 8001024:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001026:	4b13      	ldr	r3, [pc, #76]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001028:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800102c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <MX_USART2_UART_Init+0x58>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001042:	220c      	movs	r2, #12
 8001044:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <MX_USART2_UART_Init+0x58>)
 800104e:	2200      	movs	r2, #0
 8001050:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001052:	4b08      	ldr	r3, [pc, #32]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001054:	2200      	movs	r2, #0
 8001056:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <MX_USART2_UART_Init+0x58>)
 800105a:	2200      	movs	r2, #0
 800105c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800105e:	4805      	ldr	r0, [pc, #20]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001060:	f002 fc02 	bl	8003868 <HAL_UART_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800106a:	f000 f8f5 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	200001f4 	.word	0x200001f4
 8001078:	40004400 	.word	0x40004400

0800107c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_GPIO_Init+0x5c>)
 8001092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001094:	4a10      	ldr	r2, [pc, #64]	; (80010d8 <MX_GPIO_Init+0x5c>)
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109c:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <MX_GPIO_Init+0x5c>)
 800109e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	603b      	str	r3, [r7, #0]
 80010a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2120      	movs	r1, #32
 80010ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b0:	f000 fdbc 	bl	8001c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010b4:	2320      	movs	r3, #32
 80010b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b8:	2301      	movs	r3, #1
 80010ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	2300      	movs	r3, #0
 80010c2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	4619      	mov	r1, r3
 80010c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010cc:	f000 fc04 	bl	80018d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010d0:	bf00      	nop
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40021000 	.word	0x40021000

080010dc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010e4:	2001      	movs	r0, #1
 80010e6:	f003 fb4f 	bl	8004788 <osDelay>
 80010ea:	e7fb      	b.n	80010e4 <StartDefaultTask+0x8>

080010ec <UsartReceiving>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UsartReceiving */
void UsartReceiving(void *argument)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

	  if (HAL_UART_Receive(&huart2, &value, 1, 0) == HAL_OK){
 80010f4:	2300      	movs	r3, #0
 80010f6:	2201      	movs	r2, #1
 80010f8:	4928      	ldr	r1, [pc, #160]	; (800119c <UsartReceiving+0xb0>)
 80010fa:	4829      	ldr	r0, [pc, #164]	; (80011a0 <UsartReceiving+0xb4>)
 80010fc:	f002 fc8c 	bl	8003a18 <HAL_UART_Receive>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d145      	bne.n	8001192 <UsartReceiving+0xa6>
	  		if (value == '\r' || value == '\n') {
 8001106:	4b25      	ldr	r3, [pc, #148]	; (800119c <UsartReceiving+0xb0>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b0d      	cmp	r3, #13
 800110c:	d003      	beq.n	8001116 <UsartReceiving+0x2a>
 800110e:	4b23      	ldr	r3, [pc, #140]	; (800119c <UsartReceiving+0xb0>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b0a      	cmp	r3, #10
 8001114:	d12d      	bne.n	8001172 <UsartReceiving+0x86>
	  			// end of line character received
	  			if (line_length > 0){
 8001116:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <UsartReceiving+0xb8>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d039      	beq.n	8001192 <UsartReceiving+0xa6>
	  				// if the buffer is not empty, we add the \0 character at the end of the line
	  				line_buffer[line_length] = '\0';
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <UsartReceiving+0xb8>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a21      	ldr	r2, [pc, #132]	; (80011a8 <UsartReceiving+0xbc>)
 8001124:	2100      	movs	r1, #0
 8001126:	54d1      	strb	r1, [r2, r3]
	  				// passing the buffer to CommendDetection Task by queue
	  			    strncpy(receivedLine, line_buffer, line_length);
 8001128:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <UsartReceiving+0xb8>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	461a      	mov	r2, r3
 800112e:	491e      	ldr	r1, [pc, #120]	; (80011a8 <UsartReceiving+0xbc>)
 8001130:	481e      	ldr	r0, [pc, #120]	; (80011ac <UsartReceiving+0xc0>)
 8001132:	f006 ff60 	bl	8007ff6 <strncpy>
	  			    receivedLine[line_length] = '\0'; // Ensure null termination
 8001136:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <UsartReceiving+0xb8>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a1c      	ldr	r2, [pc, #112]	; (80011ac <UsartReceiving+0xc0>)
 800113c:	2100      	movs	r1, #0
 800113e:	54d1      	strb	r1, [r2, r3]
	  				osMessageQueuePut(Queue1_CommandsHandle, receivedLine, 0, 200);
 8001140:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <UsartReceiving+0xc4>)
 8001142:	6818      	ldr	r0, [r3, #0]
 8001144:	23c8      	movs	r3, #200	; 0xc8
 8001146:	2200      	movs	r2, #0
 8001148:	4918      	ldr	r1, [pc, #96]	; (80011ac <UsartReceiving+0xc0>)
 800114a:	f003 fbab 	bl	80048a4 <osMessageQueuePut>
	  				int x = osMessageQueueGetCapacity(Queue1_CommandsHandle);
 800114e:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <UsartReceiving+0xc4>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f003 fc64 	bl	8004a20 <osMessageQueueGetCapacity>
 8001158:	4603      	mov	r3, r0
 800115a:	60fb      	str	r3, [r7, #12]
	  				int y = osMessageQueueGetMsgSize(Queue1_CommandsHandle);
 800115c:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <UsartReceiving+0xc4>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f003 fc73 	bl	8004a4c <osMessageQueueGetMsgSize>
 8001166:	4603      	mov	r3, r0
 8001168:	60bb      	str	r3, [r7, #8]
	  				// starting data collection again
	  				line_length = 0;
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <UsartReceiving+0xb8>)
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
	  			if (line_length > 0){
 8001170:	e00f      	b.n	8001192 <UsartReceiving+0xa6>
	  			}
	  		}
	  		else {
	  			if (line_length >= MAX_LENGTH_OF_LINE_RECEIVED_BY_USART) {
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <UsartReceiving+0xb8>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b09      	cmp	r3, #9
 8001178:	d902      	bls.n	8001180 <UsartReceiving+0x94>
	  				// too much data, we delete what we have collected so far
	  				line_length = 0;
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <UsartReceiving+0xb8>)
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
	  			}
	  			// we add the value to the buffer
	  			line_buffer[line_length++] = value;
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <UsartReceiving+0xb8>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	1c5a      	adds	r2, r3, #1
 8001186:	4907      	ldr	r1, [pc, #28]	; (80011a4 <UsartReceiving+0xb8>)
 8001188:	600a      	str	r2, [r1, #0]
 800118a:	4a04      	ldr	r2, [pc, #16]	; (800119c <UsartReceiving+0xb0>)
 800118c:	7811      	ldrb	r1, [r2, #0]
 800118e:	4a06      	ldr	r2, [pc, #24]	; (80011a8 <UsartReceiving+0xbc>)
 8001190:	54d1      	strb	r1, [r2, r3]
	  		}
	  	}

    osDelay(1);
 8001192:	2001      	movs	r0, #1
 8001194:	f003 faf8 	bl	8004788 <osDelay>
	  if (HAL_UART_Receive(&huart2, &value, 1, 0) == HAL_OK){
 8001198:	e7ac      	b.n	80010f4 <UsartReceiving+0x8>
 800119a:	bf00      	nop
 800119c:	2000028c 	.word	0x2000028c
 80011a0:	200001f4 	.word	0x200001f4
 80011a4:	20000290 	.word	0x20000290
 80011a8:	20000294 	.word	0x20000294
 80011ac:	200002a0 	.word	0x200002a0
 80011b0:	20000288 	.word	0x20000288

080011b4 <CommandDetection>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CommandDetection */
void CommandDetection(void *argument)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]

	char ReceivedValue[MAX_LENGTH_OF_LINE_RECEIVED_BY_USART + 1];
  /* Infinite loop */
  for(;;){

	 osMessageQueueGet(Queue1_CommandsHandle, ReceivedValue, 0, osWaitForever);
 80011bc:	4b19      	ldr	r3, [pc, #100]	; (8001224 <CommandDetection+0x70>)
 80011be:	6818      	ldr	r0, [r3, #0]
 80011c0:	f107 010c 	add.w	r1, r7, #12
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295
 80011c8:	2200      	movs	r2, #0
 80011ca:	f003 fbcb 	bl	8004964 <osMessageQueueGet>
	  //ReceivedValue = osMessageGet(Queue1_CommandsHandle, osWaitForever)
	  if (strcmp(ReceivedValue, "led_on") == 0){
 80011ce:	f107 030c 	add.w	r3, r7, #12
 80011d2:	4915      	ldr	r1, [pc, #84]	; (8001228 <CommandDetection+0x74>)
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7fe fffb 	bl	80001d0 <strcmp>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d106      	bne.n	80011ee <CommandDetection+0x3a>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80011e0:	2201      	movs	r2, #1
 80011e2:	2120      	movs	r1, #32
 80011e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e8:	f000 fd20 	bl	8001c2c <HAL_GPIO_WritePin>
 80011ec:	e015      	b.n	800121a <CommandDetection+0x66>
	  }else if (strcmp(ReceivedValue, "led_off") == 0) {
 80011ee:	f107 030c 	add.w	r3, r7, #12
 80011f2:	490e      	ldr	r1, [pc, #56]	; (800122c <CommandDetection+0x78>)
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7fe ffeb 	bl	80001d0 <strcmp>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d106      	bne.n	800120e <CommandDetection+0x5a>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001200:	2200      	movs	r2, #0
 8001202:	2120      	movs	r1, #32
 8001204:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001208:	f000 fd10 	bl	8001c2c <HAL_GPIO_WritePin>
 800120c:	e005      	b.n	800121a <CommandDetection+0x66>
	  } else {
		  printf("Nieznane polecenie: %s\n", ReceivedValue);
 800120e:	f107 030c 	add.w	r3, r7, #12
 8001212:	4619      	mov	r1, r3
 8001214:	4806      	ldr	r0, [pc, #24]	; (8001230 <CommandDetection+0x7c>)
 8001216:	f006 fe91 	bl	8007f3c <iprintf>
	  }

    osDelay(1);
 800121a:	2001      	movs	r0, #1
 800121c:	f003 fab4 	bl	8004788 <osDelay>
	 osMessageQueueGet(Queue1_CommandsHandle, ReceivedValue, 0, osWaitForever);
 8001220:	e7cc      	b.n	80011bc <CommandDetection+0x8>
 8001222:	bf00      	nop
 8001224:	20000288 	.word	0x20000288
 8001228:	08009fc4 	.word	0x08009fc4
 800122c:	08009fcc 	.word	0x08009fcc
 8001230:	08009fd4 	.word	0x08009fd4

08001234 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a04      	ldr	r2, [pc, #16]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d101      	bne.n	800124a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001246:	f000 fa45 	bl	80016d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40001400 	.word	0x40001400

08001258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800125c:	b672      	cpsid	i
}
 800125e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001260:	e7fe      	b.n	8001260 <Error_Handler+0x8>
	...

08001264 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <HAL_MspInit+0x4c>)
 800126c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800126e:	4a10      	ldr	r2, [pc, #64]	; (80012b0 <HAL_MspInit+0x4c>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6613      	str	r3, [r2, #96]	; 0x60
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <HAL_MspInit+0x4c>)
 8001278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <HAL_MspInit+0x4c>)
 8001284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001286:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <HAL_MspInit+0x4c>)
 8001288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800128c:	6593      	str	r3, [r2, #88]	; 0x58
 800128e:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <HAL_MspInit+0x4c>)
 8001290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	210f      	movs	r1, #15
 800129e:	f06f 0001 	mvn.w	r0, #1
 80012a2:	f000 faef 	bl	8001884 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40021000 	.word	0x40021000

080012b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b0ac      	sub	sp, #176	; 0xb0
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	2288      	movs	r2, #136	; 0x88
 80012d2:	2100      	movs	r1, #0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f006 fe86 	bl	8007fe6 <memset>
  if(huart->Instance==USART2)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a21      	ldr	r2, [pc, #132]	; (8001364 <HAL_UART_MspInit+0xb0>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d13b      	bne.n	800135c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012e4:	2302      	movs	r3, #2
 80012e6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012e8:	2300      	movs	r3, #0
 80012ea:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	4618      	mov	r0, r3
 80012f2:	f001 fb49 	bl	8002988 <HAL_RCCEx_PeriphCLKConfig>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012fc:	f7ff ffac 	bl	8001258 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001300:	4b19      	ldr	r3, [pc, #100]	; (8001368 <HAL_UART_MspInit+0xb4>)
 8001302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001304:	4a18      	ldr	r2, [pc, #96]	; (8001368 <HAL_UART_MspInit+0xb4>)
 8001306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800130a:	6593      	str	r3, [r2, #88]	; 0x58
 800130c:	4b16      	ldr	r3, [pc, #88]	; (8001368 <HAL_UART_MspInit+0xb4>)
 800130e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <HAL_UART_MspInit+0xb4>)
 800131a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131c:	4a12      	ldr	r2, [pc, #72]	; (8001368 <HAL_UART_MspInit+0xb4>)
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001324:	4b10      	ldr	r3, [pc, #64]	; (8001368 <HAL_UART_MspInit+0xb4>)
 8001326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001330:	230c      	movs	r3, #12
 8001332:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001342:	2303      	movs	r3, #3
 8001344:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001348:	2307      	movs	r3, #7
 800134a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001352:	4619      	mov	r1, r3
 8001354:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001358:	f000 fabe 	bl	80018d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800135c:	bf00      	nop
 800135e:	37b0      	adds	r7, #176	; 0xb0
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40004400 	.word	0x40004400
 8001368:	40021000 	.word	0x40021000

0800136c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08e      	sub	sp, #56	; 0x38
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001374:	2300      	movs	r3, #0
 8001376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 800137a:	4b34      	ldr	r3, [pc, #208]	; (800144c <HAL_InitTick+0xe0>)
 800137c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137e:	4a33      	ldr	r2, [pc, #204]	; (800144c <HAL_InitTick+0xe0>)
 8001380:	f043 0320 	orr.w	r3, r3, #32
 8001384:	6593      	str	r3, [r2, #88]	; 0x58
 8001386:	4b31      	ldr	r3, [pc, #196]	; (800144c <HAL_InitTick+0xe0>)
 8001388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138a:	f003 0320 	and.w	r3, r3, #32
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001392:	f107 0210 	add.w	r2, r7, #16
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	4611      	mov	r1, r2
 800139c:	4618      	mov	r0, r3
 800139e:	f001 fa61 	bl	8002864 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013a2:	6a3b      	ldr	r3, [r7, #32]
 80013a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d103      	bne.n	80013b4 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013ac:	f001 fa2e 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 80013b0:	6378      	str	r0, [r7, #52]	; 0x34
 80013b2:	e004      	b.n	80013be <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013b4:	f001 fa2a 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 80013b8:	4603      	mov	r3, r0
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013c0:	4a23      	ldr	r2, [pc, #140]	; (8001450 <HAL_InitTick+0xe4>)
 80013c2:	fba2 2303 	umull	r2, r3, r2, r3
 80013c6:	0c9b      	lsrs	r3, r3, #18
 80013c8:	3b01      	subs	r3, #1
 80013ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80013cc:	4b21      	ldr	r3, [pc, #132]	; (8001454 <HAL_InitTick+0xe8>)
 80013ce:	4a22      	ldr	r2, [pc, #136]	; (8001458 <HAL_InitTick+0xec>)
 80013d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80013d2:	4b20      	ldr	r3, [pc, #128]	; (8001454 <HAL_InitTick+0xe8>)
 80013d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013d8:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80013da:	4a1e      	ldr	r2, [pc, #120]	; (8001454 <HAL_InitTick+0xe8>)
 80013dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013de:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80013e0:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <HAL_InitTick+0xe8>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e6:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <HAL_InitTick+0xe8>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ec:	4b19      	ldr	r3, [pc, #100]	; (8001454 <HAL_InitTick+0xe8>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 80013f2:	4818      	ldr	r0, [pc, #96]	; (8001454 <HAL_InitTick+0xe8>)
 80013f4:	f001 ff84 	bl	8003300 <HAL_TIM_Base_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80013fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001402:	2b00      	cmp	r3, #0
 8001404:	d11b      	bne.n	800143e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001406:	4813      	ldr	r0, [pc, #76]	; (8001454 <HAL_InitTick+0xe8>)
 8001408:	f001 ffdc 	bl	80033c4 <HAL_TIM_Base_Start_IT>
 800140c:	4603      	mov	r3, r0
 800140e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001412:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001416:	2b00      	cmp	r3, #0
 8001418:	d111      	bne.n	800143e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800141a:	2037      	movs	r0, #55	; 0x37
 800141c:	f000 fa4e 	bl	80018bc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b0f      	cmp	r3, #15
 8001424:	d808      	bhi.n	8001438 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001426:	2200      	movs	r2, #0
 8001428:	6879      	ldr	r1, [r7, #4]
 800142a:	2037      	movs	r0, #55	; 0x37
 800142c:	f000 fa2a 	bl	8001884 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001430:	4a0a      	ldr	r2, [pc, #40]	; (800145c <HAL_InitTick+0xf0>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	e002      	b.n	800143e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800143e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001442:	4618      	mov	r0, r3
 8001444:	3738      	adds	r7, #56	; 0x38
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40021000 	.word	0x40021000
 8001450:	431bde83 	.word	0x431bde83
 8001454:	200002ac 	.word	0x200002ac
 8001458:	40001400 	.word	0x40001400
 800145c:	20000004 	.word	0x20000004

08001460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001464:	e7fe      	b.n	8001464 <NMI_Handler+0x4>

08001466 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800146a:	e7fe      	b.n	800146a <HardFault_Handler+0x4>

0800146c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <MemManage_Handler+0x4>

08001472 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001476:	e7fe      	b.n	8001476 <BusFault_Handler+0x4>

08001478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800147c:	e7fe      	b.n	800147c <UsageFault_Handler+0x4>

0800147e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001490:	4802      	ldr	r0, [pc, #8]	; (800149c <TIM7_IRQHandler+0x10>)
 8001492:	f002 f807 	bl	80034a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200002ac 	.word	0x200002ac

080014a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  return 1;
 80014a4:	2301      	movs	r3, #1
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <_kill>:

int _kill(int pid, int sig)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014ba:	f006 fe4f 	bl	800815c <__errno>
 80014be:	4603      	mov	r3, r0
 80014c0:	2216      	movs	r2, #22
 80014c2:	601a      	str	r2, [r3, #0]
  return -1;
 80014c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <_exit>:

void _exit (int status)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014d8:	f04f 31ff 	mov.w	r1, #4294967295
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff ffe7 	bl	80014b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014e2:	e7fe      	b.n	80014e2 <_exit+0x12>

080014e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	e00a      	b.n	800150c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014f6:	f3af 8000 	nop.w
 80014fa:	4601      	mov	r1, r0
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	1c5a      	adds	r2, r3, #1
 8001500:	60ba      	str	r2, [r7, #8]
 8001502:	b2ca      	uxtb	r2, r1
 8001504:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	3301      	adds	r3, #1
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	697a      	ldr	r2, [r7, #20]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	429a      	cmp	r2, r3
 8001512:	dbf0      	blt.n	80014f6 <_read+0x12>
  }

  return len;
 8001514:	687b      	ldr	r3, [r7, #4]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	60f8      	str	r0, [r7, #12]
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	e009      	b.n	8001544 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	60ba      	str	r2, [r7, #8]
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fcc3 	bl	8000ec4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	3301      	adds	r3, #1
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	697a      	ldr	r2, [r7, #20]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	429a      	cmp	r2, r3
 800154a:	dbf1      	blt.n	8001530 <_write+0x12>
  }
  return len;
 800154c:	687b      	ldr	r3, [r7, #4]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <_close>:

int _close(int file)
{
 8001556:	b480      	push	{r7}
 8001558:	b083      	sub	sp, #12
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800155e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001562:	4618      	mov	r0, r3
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800157e:	605a      	str	r2, [r3, #4]
  return 0;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <_isatty>:

int _isatty(int file)
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001596:	2301      	movs	r3, #1
}
 8001598:	4618      	mov	r0, r3
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015c8:	4a14      	ldr	r2, [pc, #80]	; (800161c <_sbrk+0x5c>)
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <_sbrk+0x60>)
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d4:	4b13      	ldr	r3, [pc, #76]	; (8001624 <_sbrk+0x64>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d102      	bne.n	80015e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015dc:	4b11      	ldr	r3, [pc, #68]	; (8001624 <_sbrk+0x64>)
 80015de:	4a12      	ldr	r2, [pc, #72]	; (8001628 <_sbrk+0x68>)
 80015e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015e2:	4b10      	ldr	r3, [pc, #64]	; (8001624 <_sbrk+0x64>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d207      	bcs.n	8001600 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f0:	f006 fdb4 	bl	800815c <__errno>
 80015f4:	4603      	mov	r3, r0
 80015f6:	220c      	movs	r2, #12
 80015f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015fa:	f04f 33ff 	mov.w	r3, #4294967295
 80015fe:	e009      	b.n	8001614 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001600:	4b08      	ldr	r3, [pc, #32]	; (8001624 <_sbrk+0x64>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001606:	4b07      	ldr	r3, [pc, #28]	; (8001624 <_sbrk+0x64>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4413      	add	r3, r2
 800160e:	4a05      	ldr	r2, [pc, #20]	; (8001624 <_sbrk+0x64>)
 8001610:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001612:	68fb      	ldr	r3, [r7, #12]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20018000 	.word	0x20018000
 8001620:	00000400 	.word	0x00000400
 8001624:	200002f8 	.word	0x200002f8
 8001628:	20001e10 	.word	0x20001e10

0800162c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <SystemInit+0x20>)
 8001632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001636:	4a05      	ldr	r2, [pc, #20]	; (800164c <SystemInit+0x20>)
 8001638:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800163c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001650:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001688 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001654:	f7ff ffea 	bl	800162c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001658:	480c      	ldr	r0, [pc, #48]	; (800168c <LoopForever+0x6>)
  ldr r1, =_edata
 800165a:	490d      	ldr	r1, [pc, #52]	; (8001690 <LoopForever+0xa>)
  ldr r2, =_sidata
 800165c:	4a0d      	ldr	r2, [pc, #52]	; (8001694 <LoopForever+0xe>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001660:	e002      	b.n	8001668 <LoopCopyDataInit>

08001662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001666:	3304      	adds	r3, #4

08001668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800166c:	d3f9      	bcc.n	8001662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166e:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001670:	4c0a      	ldr	r4, [pc, #40]	; (800169c <LoopForever+0x16>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001674:	e001      	b.n	800167a <LoopFillZerobss>

08001676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001678:	3204      	adds	r2, #4

0800167a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800167c:	d3fb      	bcc.n	8001676 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800167e:	f006 fd73 	bl	8008168 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001682:	f7ff fc3f 	bl	8000f04 <main>

08001686 <LoopForever>:

LoopForever:
    b LoopForever
 8001686:	e7fe      	b.n	8001686 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001688:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800168c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001690:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001694:	0800a454 	.word	0x0800a454
  ldr r2, =_sbss
 8001698:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800169c:	20001e0c 	.word	0x20001e0c

080016a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016a0:	e7fe      	b.n	80016a0 <ADC1_2_IRQHandler>

080016a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016a8:	2300      	movs	r3, #0
 80016aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ac:	2003      	movs	r0, #3
 80016ae:	f000 f8de 	bl	800186e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016b2:	200f      	movs	r0, #15
 80016b4:	f7ff fe5a 	bl	800136c <HAL_InitTick>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d002      	beq.n	80016c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	71fb      	strb	r3, [r7, #7]
 80016c2:	e001      	b.n	80016c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016c4:	f7ff fdce 	bl	8001264 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016c8:	79fb      	ldrb	r3, [r7, #7]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_IncTick+0x20>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	461a      	mov	r2, r3
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_IncTick+0x24>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4413      	add	r3, r2
 80016e4:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <HAL_IncTick+0x24>)
 80016e6:	6013      	str	r3, [r2, #0]
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	20000008 	.word	0x20000008
 80016f8:	200002fc 	.word	0x200002fc

080016fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001700:	4b03      	ldr	r3, [pc, #12]	; (8001710 <HAL_GetTick+0x14>)
 8001702:	681b      	ldr	r3, [r3, #0]
}
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	200002fc 	.word	0x200002fc

08001714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <__NVIC_SetPriorityGrouping+0x44>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001730:	4013      	ands	r3, r2
 8001732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800173c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001746:	4a04      	ldr	r2, [pc, #16]	; (8001758 <__NVIC_SetPriorityGrouping+0x44>)
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	60d3      	str	r3, [r2, #12]
}
 800174c:	bf00      	nop
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001760:	4b04      	ldr	r3, [pc, #16]	; (8001774 <__NVIC_GetPriorityGrouping+0x18>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	0a1b      	lsrs	r3, r3, #8
 8001766:	f003 0307 	and.w	r3, r3, #7
}
 800176a:	4618      	mov	r0, r3
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	2b00      	cmp	r3, #0
 8001788:	db0b      	blt.n	80017a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	f003 021f 	and.w	r2, r3, #31
 8001790:	4907      	ldr	r1, [pc, #28]	; (80017b0 <__NVIC_EnableIRQ+0x38>)
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	095b      	lsrs	r3, r3, #5
 8001798:	2001      	movs	r0, #1
 800179a:	fa00 f202 	lsl.w	r2, r0, r2
 800179e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000e100 	.word	0xe000e100

080017b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	6039      	str	r1, [r7, #0]
 80017be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	db0a      	blt.n	80017de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	490c      	ldr	r1, [pc, #48]	; (8001800 <__NVIC_SetPriority+0x4c>)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	0112      	lsls	r2, r2, #4
 80017d4:	b2d2      	uxtb	r2, r2
 80017d6:	440b      	add	r3, r1
 80017d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017dc:	e00a      	b.n	80017f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	4908      	ldr	r1, [pc, #32]	; (8001804 <__NVIC_SetPriority+0x50>)
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	f003 030f 	and.w	r3, r3, #15
 80017ea:	3b04      	subs	r3, #4
 80017ec:	0112      	lsls	r2, r2, #4
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	440b      	add	r3, r1
 80017f2:	761a      	strb	r2, [r3, #24]
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	e000e100 	.word	0xe000e100
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001808:	b480      	push	{r7}
 800180a:	b089      	sub	sp, #36	; 0x24
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f1c3 0307 	rsb	r3, r3, #7
 8001822:	2b04      	cmp	r3, #4
 8001824:	bf28      	it	cs
 8001826:	2304      	movcs	r3, #4
 8001828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	3304      	adds	r3, #4
 800182e:	2b06      	cmp	r3, #6
 8001830:	d902      	bls.n	8001838 <NVIC_EncodePriority+0x30>
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	3b03      	subs	r3, #3
 8001836:	e000      	b.n	800183a <NVIC_EncodePriority+0x32>
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800183c:	f04f 32ff 	mov.w	r2, #4294967295
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43da      	mvns	r2, r3
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	401a      	ands	r2, r3
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001850:	f04f 31ff 	mov.w	r1, #4294967295
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	fa01 f303 	lsl.w	r3, r1, r3
 800185a:	43d9      	mvns	r1, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001860:	4313      	orrs	r3, r2
         );
}
 8001862:	4618      	mov	r0, r3
 8001864:	3724      	adds	r7, #36	; 0x24
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ff4c 	bl	8001714 <__NVIC_SetPriorityGrouping>
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
 8001890:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001896:	f7ff ff61 	bl	800175c <__NVIC_GetPriorityGrouping>
 800189a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	68b9      	ldr	r1, [r7, #8]
 80018a0:	6978      	ldr	r0, [r7, #20]
 80018a2:	f7ff ffb1 	bl	8001808 <NVIC_EncodePriority>
 80018a6:	4602      	mov	r2, r0
 80018a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ac:	4611      	mov	r1, r2
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff ff80 	bl	80017b4 <__NVIC_SetPriority>
}
 80018b4:	bf00      	nop
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff ff54 	bl	8001778 <__NVIC_EnableIRQ>
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d8:	b480      	push	{r7}
 80018da:	b087      	sub	sp, #28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018e6:	e17f      	b.n	8001be8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	2101      	movs	r1, #1
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	fa01 f303 	lsl.w	r3, r1, r3
 80018f4:	4013      	ands	r3, r2
 80018f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 8171 	beq.w	8001be2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 0303 	and.w	r3, r3, #3
 8001908:	2b01      	cmp	r3, #1
 800190a:	d005      	beq.n	8001918 <HAL_GPIO_Init+0x40>
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d130      	bne.n	800197a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	2203      	movs	r2, #3
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4013      	ands	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	68da      	ldr	r2, [r3, #12]
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	4313      	orrs	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800194e:	2201      	movs	r2, #1
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4013      	ands	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	091b      	lsrs	r3, r3, #4
 8001964:	f003 0201 	and.w	r2, r3, #1
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f003 0303 	and.w	r3, r3, #3
 8001982:	2b03      	cmp	r3, #3
 8001984:	d118      	bne.n	80019b8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800198c:	2201      	movs	r2, #1
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	4013      	ands	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	08db      	lsrs	r3, r3, #3
 80019a2:	f003 0201 	and.w	r2, r3, #1
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	2b03      	cmp	r3, #3
 80019c2:	d017      	beq.n	80019f4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	2203      	movs	r2, #3
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4013      	ands	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d123      	bne.n	8001a48 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	08da      	lsrs	r2, r3, #3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3208      	adds	r2, #8
 8001a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	220f      	movs	r2, #15
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	4013      	ands	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	691a      	ldr	r2, [r3, #16]
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	08da      	lsrs	r2, r3, #3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3208      	adds	r2, #8
 8001a42:	6939      	ldr	r1, [r7, #16]
 8001a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	2203      	movs	r2, #3
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 0203 	and.w	r2, r3, #3
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 80ac 	beq.w	8001be2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8a:	4b5f      	ldr	r3, [pc, #380]	; (8001c08 <HAL_GPIO_Init+0x330>)
 8001a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a8e:	4a5e      	ldr	r2, [pc, #376]	; (8001c08 <HAL_GPIO_Init+0x330>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6613      	str	r3, [r2, #96]	; 0x60
 8001a96:	4b5c      	ldr	r3, [pc, #368]	; (8001c08 <HAL_GPIO_Init+0x330>)
 8001a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001aa2:	4a5a      	ldr	r2, [pc, #360]	; (8001c0c <HAL_GPIO_Init+0x334>)
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	089b      	lsrs	r3, r3, #2
 8001aa8:	3302      	adds	r3, #2
 8001aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	f003 0303 	and.w	r3, r3, #3
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	220f      	movs	r2, #15
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001acc:	d025      	beq.n	8001b1a <HAL_GPIO_Init+0x242>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a4f      	ldr	r2, [pc, #316]	; (8001c10 <HAL_GPIO_Init+0x338>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d01f      	beq.n	8001b16 <HAL_GPIO_Init+0x23e>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a4e      	ldr	r2, [pc, #312]	; (8001c14 <HAL_GPIO_Init+0x33c>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d019      	beq.n	8001b12 <HAL_GPIO_Init+0x23a>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a4d      	ldr	r2, [pc, #308]	; (8001c18 <HAL_GPIO_Init+0x340>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d013      	beq.n	8001b0e <HAL_GPIO_Init+0x236>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a4c      	ldr	r2, [pc, #304]	; (8001c1c <HAL_GPIO_Init+0x344>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d00d      	beq.n	8001b0a <HAL_GPIO_Init+0x232>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a4b      	ldr	r2, [pc, #300]	; (8001c20 <HAL_GPIO_Init+0x348>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d007      	beq.n	8001b06 <HAL_GPIO_Init+0x22e>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a4a      	ldr	r2, [pc, #296]	; (8001c24 <HAL_GPIO_Init+0x34c>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d101      	bne.n	8001b02 <HAL_GPIO_Init+0x22a>
 8001afe:	2306      	movs	r3, #6
 8001b00:	e00c      	b.n	8001b1c <HAL_GPIO_Init+0x244>
 8001b02:	2307      	movs	r3, #7
 8001b04:	e00a      	b.n	8001b1c <HAL_GPIO_Init+0x244>
 8001b06:	2305      	movs	r3, #5
 8001b08:	e008      	b.n	8001b1c <HAL_GPIO_Init+0x244>
 8001b0a:	2304      	movs	r3, #4
 8001b0c:	e006      	b.n	8001b1c <HAL_GPIO_Init+0x244>
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e004      	b.n	8001b1c <HAL_GPIO_Init+0x244>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e002      	b.n	8001b1c <HAL_GPIO_Init+0x244>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <HAL_GPIO_Init+0x244>
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	f002 0203 	and.w	r2, r2, #3
 8001b22:	0092      	lsls	r2, r2, #2
 8001b24:	4093      	lsls	r3, r2
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b2c:	4937      	ldr	r1, [pc, #220]	; (8001c0c <HAL_GPIO_Init+0x334>)
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	089b      	lsrs	r3, r3, #2
 8001b32:	3302      	adds	r3, #2
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b3a:	4b3b      	ldr	r3, [pc, #236]	; (8001c28 <HAL_GPIO_Init+0x350>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	43db      	mvns	r3, r3
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	4013      	ands	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b5e:	4a32      	ldr	r2, [pc, #200]	; (8001c28 <HAL_GPIO_Init+0x350>)
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b64:	4b30      	ldr	r3, [pc, #192]	; (8001c28 <HAL_GPIO_Init+0x350>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b88:	4a27      	ldr	r2, [pc, #156]	; (8001c28 <HAL_GPIO_Init+0x350>)
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b8e:	4b26      	ldr	r3, [pc, #152]	; (8001c28 <HAL_GPIO_Init+0x350>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	43db      	mvns	r3, r3
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bb2:	4a1d      	ldr	r2, [pc, #116]	; (8001c28 <HAL_GPIO_Init+0x350>)
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001bb8:	4b1b      	ldr	r3, [pc, #108]	; (8001c28 <HAL_GPIO_Init+0x350>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bdc:	4a12      	ldr	r2, [pc, #72]	; (8001c28 <HAL_GPIO_Init+0x350>)
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	3301      	adds	r3, #1
 8001be6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f47f ae78 	bne.w	80018e8 <HAL_GPIO_Init+0x10>
  }
}
 8001bf8:	bf00      	nop
 8001bfa:	bf00      	nop
 8001bfc:	371c      	adds	r7, #28
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40010000 	.word	0x40010000
 8001c10:	48000400 	.word	0x48000400
 8001c14:	48000800 	.word	0x48000800
 8001c18:	48000c00 	.word	0x48000c00
 8001c1c:	48001000 	.word	0x48001000
 8001c20:	48001400 	.word	0x48001400
 8001c24:	48001800 	.word	0x48001800
 8001c28:	40010400 	.word	0x40010400

08001c2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	807b      	strh	r3, [r7, #2]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c3c:	787b      	ldrb	r3, [r7, #1]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c42:	887a      	ldrh	r2, [r7, #2]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c48:	e002      	b.n	8001c50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c4a:	887a      	ldrh	r2, [r7, #2]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40007000 	.word	0x40007000

08001c78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c86:	d130      	bne.n	8001cea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c88:	4b23      	ldr	r3, [pc, #140]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c94:	d038      	beq.n	8001d08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c96:	4b20      	ldr	r3, [pc, #128]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c9e:	4a1e      	ldr	r2, [pc, #120]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ca0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ca4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ca6:	4b1d      	ldr	r3, [pc, #116]	; (8001d1c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2232      	movs	r2, #50	; 0x32
 8001cac:	fb02 f303 	mul.w	r3, r2, r3
 8001cb0:	4a1b      	ldr	r2, [pc, #108]	; (8001d20 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb6:	0c9b      	lsrs	r3, r3, #18
 8001cb8:	3301      	adds	r3, #1
 8001cba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cbc:	e002      	b.n	8001cc4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cc4:	4b14      	ldr	r3, [pc, #80]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cd0:	d102      	bne.n	8001cd8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1f2      	bne.n	8001cbe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ce4:	d110      	bne.n	8001d08 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e00f      	b.n	8001d0a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cea:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cf6:	d007      	beq.n	8001d08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cf8:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d00:	4a05      	ldr	r2, [pc, #20]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d06:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40007000 	.word	0x40007000
 8001d1c:	20000000 	.word	0x20000000
 8001d20:	431bde83 	.word	0x431bde83

08001d24 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b088      	sub	sp, #32
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e3ca      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d36:	4b97      	ldr	r3, [pc, #604]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 030c 	and.w	r3, r3, #12
 8001d3e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d40:	4b94      	ldr	r3, [pc, #592]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0310 	and.w	r3, r3, #16
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 80e4 	beq.w	8001f20 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d007      	beq.n	8001d6e <HAL_RCC_OscConfig+0x4a>
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	2b0c      	cmp	r3, #12
 8001d62:	f040 808b 	bne.w	8001e7c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	f040 8087 	bne.w	8001e7c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d6e:	4b89      	ldr	r3, [pc, #548]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d005      	beq.n	8001d86 <HAL_RCC_OscConfig+0x62>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e3a2      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a1a      	ldr	r2, [r3, #32]
 8001d8a:	4b82      	ldr	r3, [pc, #520]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d004      	beq.n	8001da0 <HAL_RCC_OscConfig+0x7c>
 8001d96:	4b7f      	ldr	r3, [pc, #508]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d9e:	e005      	b.n	8001dac <HAL_RCC_OscConfig+0x88>
 8001da0:	4b7c      	ldr	r3, [pc, #496]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001da6:	091b      	lsrs	r3, r3, #4
 8001da8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d223      	bcs.n	8001df8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 fd87 	bl	80028c8 <RCC_SetFlashLatencyFromMSIRange>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e383      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dc4:	4b73      	ldr	r3, [pc, #460]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a72      	ldr	r2, [pc, #456]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001dca:	f043 0308 	orr.w	r3, r3, #8
 8001dce:	6013      	str	r3, [r2, #0]
 8001dd0:	4b70      	ldr	r3, [pc, #448]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	496d      	ldr	r1, [pc, #436]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001de2:	4b6c      	ldr	r3, [pc, #432]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	021b      	lsls	r3, r3, #8
 8001df0:	4968      	ldr	r1, [pc, #416]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	604b      	str	r3, [r1, #4]
 8001df6:	e025      	b.n	8001e44 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001df8:	4b66      	ldr	r3, [pc, #408]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a65      	ldr	r2, [pc, #404]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001dfe:	f043 0308 	orr.w	r3, r3, #8
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	4b63      	ldr	r3, [pc, #396]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	4960      	ldr	r1, [pc, #384]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e16:	4b5f      	ldr	r3, [pc, #380]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	021b      	lsls	r3, r3, #8
 8001e24:	495b      	ldr	r1, [pc, #364]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d109      	bne.n	8001e44 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f000 fd47 	bl	80028c8 <RCC_SetFlashLatencyFromMSIRange>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e343      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e44:	f000 fc4a 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	4b52      	ldr	r3, [pc, #328]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	091b      	lsrs	r3, r3, #4
 8001e50:	f003 030f 	and.w	r3, r3, #15
 8001e54:	4950      	ldr	r1, [pc, #320]	; (8001f98 <HAL_RCC_OscConfig+0x274>)
 8001e56:	5ccb      	ldrb	r3, [r1, r3]
 8001e58:	f003 031f 	and.w	r3, r3, #31
 8001e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e60:	4a4e      	ldr	r2, [pc, #312]	; (8001f9c <HAL_RCC_OscConfig+0x278>)
 8001e62:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e64:	4b4e      	ldr	r3, [pc, #312]	; (8001fa0 <HAL_RCC_OscConfig+0x27c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fa7f 	bl	800136c <HAL_InitTick>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d052      	beq.n	8001f1e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
 8001e7a:	e327      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d032      	beq.n	8001eea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e84:	4b43      	ldr	r3, [pc, #268]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a42      	ldr	r2, [pc, #264]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e90:	f7ff fc34 	bl	80016fc <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e98:	f7ff fc30 	bl	80016fc <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e310      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001eaa:	4b3a      	ldr	r3, [pc, #232]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eb6:	4b37      	ldr	r3, [pc, #220]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a36      	ldr	r2, [pc, #216]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001ebc:	f043 0308 	orr.w	r3, r3, #8
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	4b34      	ldr	r3, [pc, #208]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	4931      	ldr	r1, [pc, #196]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ed4:	4b2f      	ldr	r3, [pc, #188]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69db      	ldr	r3, [r3, #28]
 8001ee0:	021b      	lsls	r3, r3, #8
 8001ee2:	492c      	ldr	r1, [pc, #176]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	604b      	str	r3, [r1, #4]
 8001ee8:	e01a      	b.n	8001f20 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001eea:	4b2a      	ldr	r3, [pc, #168]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a29      	ldr	r2, [pc, #164]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001ef0:	f023 0301 	bic.w	r3, r3, #1
 8001ef4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ef6:	f7ff fc01 	bl	80016fc <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001efe:	f7ff fbfd 	bl	80016fc <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e2dd      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f10:	4b20      	ldr	r3, [pc, #128]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1f0      	bne.n	8001efe <HAL_RCC_OscConfig+0x1da>
 8001f1c:	e000      	b.n	8001f20 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f1e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d074      	beq.n	8002016 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	d005      	beq.n	8001f3e <HAL_RCC_OscConfig+0x21a>
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	2b0c      	cmp	r3, #12
 8001f36:	d10e      	bne.n	8001f56 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	d10b      	bne.n	8001f56 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f3e:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d064      	beq.n	8002014 <HAL_RCC_OscConfig+0x2f0>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d160      	bne.n	8002014 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e2ba      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f5e:	d106      	bne.n	8001f6e <HAL_RCC_OscConfig+0x24a>
 8001f60:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0b      	ldr	r2, [pc, #44]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f6a:	6013      	str	r3, [r2, #0]
 8001f6c:	e026      	b.n	8001fbc <HAL_RCC_OscConfig+0x298>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f76:	d115      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x280>
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a05      	ldr	r2, [pc, #20]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001f7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f82:	6013      	str	r3, [r2, #0]
 8001f84:	4b03      	ldr	r3, [pc, #12]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a02      	ldr	r2, [pc, #8]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f8e:	6013      	str	r3, [r2, #0]
 8001f90:	e014      	b.n	8001fbc <HAL_RCC_OscConfig+0x298>
 8001f92:	bf00      	nop
 8001f94:	40021000 	.word	0x40021000
 8001f98:	0800a088 	.word	0x0800a088
 8001f9c:	20000000 	.word	0x20000000
 8001fa0:	20000004 	.word	0x20000004
 8001fa4:	4ba0      	ldr	r3, [pc, #640]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a9f      	ldr	r2, [pc, #636]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8001faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fae:	6013      	str	r3, [r2, #0]
 8001fb0:	4b9d      	ldr	r3, [pc, #628]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a9c      	ldr	r2, [pc, #624]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8001fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d013      	beq.n	8001fec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc4:	f7ff fb9a 	bl	80016fc <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fcc:	f7ff fb96 	bl	80016fc <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b64      	cmp	r3, #100	; 0x64
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e276      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fde:	4b92      	ldr	r3, [pc, #584]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0f0      	beq.n	8001fcc <HAL_RCC_OscConfig+0x2a8>
 8001fea:	e014      	b.n	8002016 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fec:	f7ff fb86 	bl	80016fc <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff4:	f7ff fb82 	bl	80016fc <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b64      	cmp	r3, #100	; 0x64
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e262      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002006:	4b88      	ldr	r3, [pc, #544]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f0      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x2d0>
 8002012:	e000      	b.n	8002016 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d060      	beq.n	80020e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	2b04      	cmp	r3, #4
 8002026:	d005      	beq.n	8002034 <HAL_RCC_OscConfig+0x310>
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	2b0c      	cmp	r3, #12
 800202c:	d119      	bne.n	8002062 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d116      	bne.n	8002062 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002034:	4b7c      	ldr	r3, [pc, #496]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <HAL_RCC_OscConfig+0x328>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e23f      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204c:	4b76      	ldr	r3, [pc, #472]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	061b      	lsls	r3, r3, #24
 800205a:	4973      	ldr	r1, [pc, #460]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 800205c:	4313      	orrs	r3, r2
 800205e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002060:	e040      	b.n	80020e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d023      	beq.n	80020b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800206a:	4b6f      	ldr	r3, [pc, #444]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a6e      	ldr	r2, [pc, #440]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8002070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002074:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002076:	f7ff fb41 	bl	80016fc <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800207e:	f7ff fb3d 	bl	80016fc <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e21d      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002090:	4b65      	ldr	r3, [pc, #404]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f0      	beq.n	800207e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209c:	4b62      	ldr	r3, [pc, #392]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	061b      	lsls	r3, r3, #24
 80020aa:	495f      	ldr	r1, [pc, #380]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	604b      	str	r3, [r1, #4]
 80020b0:	e018      	b.n	80020e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020b2:	4b5d      	ldr	r3, [pc, #372]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a5c      	ldr	r2, [pc, #368]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 80020b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020be:	f7ff fb1d 	bl	80016fc <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c6:	f7ff fb19 	bl	80016fc <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e1f9      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020d8:	4b53      	ldr	r3, [pc, #332]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1f0      	bne.n	80020c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d03c      	beq.n	800216a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d01c      	beq.n	8002132 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020f8:	4b4b      	ldr	r3, [pc, #300]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 80020fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020fe:	4a4a      	ldr	r2, [pc, #296]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002108:	f7ff faf8 	bl	80016fc <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002110:	f7ff faf4 	bl	80016fc <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e1d4      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002122:	4b41      	ldr	r3, [pc, #260]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8002124:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0ef      	beq.n	8002110 <HAL_RCC_OscConfig+0x3ec>
 8002130:	e01b      	b.n	800216a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002132:	4b3d      	ldr	r3, [pc, #244]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8002134:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002138:	4a3b      	ldr	r2, [pc, #236]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 800213a:	f023 0301 	bic.w	r3, r3, #1
 800213e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002142:	f7ff fadb 	bl	80016fc <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800214a:	f7ff fad7 	bl	80016fc <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e1b7      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800215c:	4b32      	ldr	r3, [pc, #200]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 800215e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1ef      	bne.n	800214a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 80a6 	beq.w	80022c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002178:	2300      	movs	r3, #0
 800217a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800217c:	4b2a      	ldr	r3, [pc, #168]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 800217e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10d      	bne.n	80021a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002188:	4b27      	ldr	r3, [pc, #156]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 800218a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218c:	4a26      	ldr	r2, [pc, #152]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 800218e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002192:	6593      	str	r3, [r2, #88]	; 0x58
 8002194:	4b24      	ldr	r3, [pc, #144]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8002196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021a0:	2301      	movs	r3, #1
 80021a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021a4:	4b21      	ldr	r3, [pc, #132]	; (800222c <HAL_RCC_OscConfig+0x508>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d118      	bne.n	80021e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021b0:	4b1e      	ldr	r3, [pc, #120]	; (800222c <HAL_RCC_OscConfig+0x508>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a1d      	ldr	r2, [pc, #116]	; (800222c <HAL_RCC_OscConfig+0x508>)
 80021b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021bc:	f7ff fa9e 	bl	80016fc <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c4:	f7ff fa9a 	bl	80016fc <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e17a      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d6:	4b15      	ldr	r3, [pc, #84]	; (800222c <HAL_RCC_OscConfig+0x508>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0f0      	beq.n	80021c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d108      	bne.n	80021fc <HAL_RCC_OscConfig+0x4d8>
 80021ea:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 80021ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f0:	4a0d      	ldr	r2, [pc, #52]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021fa:	e029      	b.n	8002250 <HAL_RCC_OscConfig+0x52c>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	2b05      	cmp	r3, #5
 8002202:	d115      	bne.n	8002230 <HAL_RCC_OscConfig+0x50c>
 8002204:	4b08      	ldr	r3, [pc, #32]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8002206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220a:	4a07      	ldr	r2, [pc, #28]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 800220c:	f043 0304 	orr.w	r3, r3, #4
 8002210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002214:	4b04      	ldr	r3, [pc, #16]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8002216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800221a:	4a03      	ldr	r2, [pc, #12]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002224:	e014      	b.n	8002250 <HAL_RCC_OscConfig+0x52c>
 8002226:	bf00      	nop
 8002228:	40021000 	.word	0x40021000
 800222c:	40007000 	.word	0x40007000
 8002230:	4b9c      	ldr	r3, [pc, #624]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 8002232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002236:	4a9b      	ldr	r2, [pc, #620]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 8002238:	f023 0301 	bic.w	r3, r3, #1
 800223c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002240:	4b98      	ldr	r3, [pc, #608]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 8002242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002246:	4a97      	ldr	r2, [pc, #604]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 8002248:	f023 0304 	bic.w	r3, r3, #4
 800224c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d016      	beq.n	8002286 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002258:	f7ff fa50 	bl	80016fc <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800225e:	e00a      	b.n	8002276 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002260:	f7ff fa4c 	bl	80016fc <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	f241 3288 	movw	r2, #5000	; 0x1388
 800226e:	4293      	cmp	r3, r2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e12a      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002276:	4b8b      	ldr	r3, [pc, #556]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 8002278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0ed      	beq.n	8002260 <HAL_RCC_OscConfig+0x53c>
 8002284:	e015      	b.n	80022b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002286:	f7ff fa39 	bl	80016fc <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800228c:	e00a      	b.n	80022a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228e:	f7ff fa35 	bl	80016fc <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	f241 3288 	movw	r2, #5000	; 0x1388
 800229c:	4293      	cmp	r3, r2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e113      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022a4:	4b7f      	ldr	r3, [pc, #508]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 80022a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1ed      	bne.n	800228e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022b2:	7ffb      	ldrb	r3, [r7, #31]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d105      	bne.n	80022c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022b8:	4b7a      	ldr	r3, [pc, #488]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 80022ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022bc:	4a79      	ldr	r2, [pc, #484]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 80022be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022c2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 80fe 	beq.w	80024ca <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	f040 80d0 	bne.w	8002478 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80022d8:	4b72      	ldr	r3, [pc, #456]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f003 0203 	and.w	r2, r3, #3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d130      	bne.n	800234e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	3b01      	subs	r3, #1
 80022f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d127      	bne.n	800234e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002308:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800230a:	429a      	cmp	r2, r3
 800230c:	d11f      	bne.n	800234e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002318:	2a07      	cmp	r2, #7
 800231a:	bf14      	ite	ne
 800231c:	2201      	movne	r2, #1
 800231e:	2200      	moveq	r2, #0
 8002320:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002322:	4293      	cmp	r3, r2
 8002324:	d113      	bne.n	800234e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002330:	085b      	lsrs	r3, r3, #1
 8002332:	3b01      	subs	r3, #1
 8002334:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002336:	429a      	cmp	r2, r3
 8002338:	d109      	bne.n	800234e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	085b      	lsrs	r3, r3, #1
 8002346:	3b01      	subs	r3, #1
 8002348:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800234a:	429a      	cmp	r2, r3
 800234c:	d06e      	beq.n	800242c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	2b0c      	cmp	r3, #12
 8002352:	d069      	beq.n	8002428 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002354:	4b53      	ldr	r3, [pc, #332]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d105      	bne.n	800236c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002360:	4b50      	ldr	r3, [pc, #320]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0ad      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002370:	4b4c      	ldr	r3, [pc, #304]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a4b      	ldr	r2, [pc, #300]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 8002376:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800237a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800237c:	f7ff f9be 	bl	80016fc <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002384:	f7ff f9ba 	bl	80016fc <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e09a      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002396:	4b43      	ldr	r3, [pc, #268]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023a2:	4b40      	ldr	r3, [pc, #256]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	4b40      	ldr	r3, [pc, #256]	; (80024a8 <HAL_RCC_OscConfig+0x784>)
 80023a8:	4013      	ands	r3, r2
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023b2:	3a01      	subs	r2, #1
 80023b4:	0112      	lsls	r2, r2, #4
 80023b6:	4311      	orrs	r1, r2
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023bc:	0212      	lsls	r2, r2, #8
 80023be:	4311      	orrs	r1, r2
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023c4:	0852      	lsrs	r2, r2, #1
 80023c6:	3a01      	subs	r2, #1
 80023c8:	0552      	lsls	r2, r2, #21
 80023ca:	4311      	orrs	r1, r2
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023d0:	0852      	lsrs	r2, r2, #1
 80023d2:	3a01      	subs	r2, #1
 80023d4:	0652      	lsls	r2, r2, #25
 80023d6:	4311      	orrs	r1, r2
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023dc:	0912      	lsrs	r2, r2, #4
 80023de:	0452      	lsls	r2, r2, #17
 80023e0:	430a      	orrs	r2, r1
 80023e2:	4930      	ldr	r1, [pc, #192]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80023e8:	4b2e      	ldr	r3, [pc, #184]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a2d      	ldr	r2, [pc, #180]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 80023ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023f4:	4b2b      	ldr	r3, [pc, #172]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	4a2a      	ldr	r2, [pc, #168]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 80023fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002400:	f7ff f97c 	bl	80016fc <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002408:	f7ff f978 	bl	80016fc <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e058      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800241a:	4b22      	ldr	r3, [pc, #136]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0f0      	beq.n	8002408 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002426:	e050      	b.n	80024ca <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e04f      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800242c:	4b1d      	ldr	r3, [pc, #116]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d148      	bne.n	80024ca <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002438:	4b1a      	ldr	r3, [pc, #104]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a19      	ldr	r2, [pc, #100]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 800243e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002442:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002444:	4b17      	ldr	r3, [pc, #92]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4a16      	ldr	r2, [pc, #88]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 800244a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800244e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002450:	f7ff f954 	bl	80016fc <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002458:	f7ff f950 	bl	80016fc <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e030      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800246a:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0x734>
 8002476:	e028      	b.n	80024ca <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	2b0c      	cmp	r3, #12
 800247c:	d023      	beq.n	80024c6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800247e:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a08      	ldr	r2, [pc, #32]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 8002484:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248a:	f7ff f937 	bl	80016fc <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002490:	e00c      	b.n	80024ac <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002492:	f7ff f933 	bl	80016fc <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d905      	bls.n	80024ac <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e013      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
 80024a4:	40021000 	.word	0x40021000
 80024a8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024ac:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <HAL_RCC_OscConfig+0x7b0>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1ec      	bne.n	8002492 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_RCC_OscConfig+0x7b0>)
 80024ba:	68da      	ldr	r2, [r3, #12]
 80024bc:	4905      	ldr	r1, [pc, #20]	; (80024d4 <HAL_RCC_OscConfig+0x7b0>)
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_RCC_OscConfig+0x7b4>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	60cb      	str	r3, [r1, #12]
 80024c4:	e001      	b.n	80024ca <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3720      	adds	r7, #32
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40021000 	.word	0x40021000
 80024d8:	feeefffc 	.word	0xfeeefffc

080024dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e0e7      	b.n	80026c0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024f0:	4b75      	ldr	r3, [pc, #468]	; (80026c8 <HAL_RCC_ClockConfig+0x1ec>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d910      	bls.n	8002520 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fe:	4b72      	ldr	r3, [pc, #456]	; (80026c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f023 0207 	bic.w	r2, r3, #7
 8002506:	4970      	ldr	r1, [pc, #448]	; (80026c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	4313      	orrs	r3, r2
 800250c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800250e:	4b6e      	ldr	r3, [pc, #440]	; (80026c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	429a      	cmp	r2, r3
 800251a:	d001      	beq.n	8002520 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e0cf      	b.n	80026c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d010      	beq.n	800254e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	4b66      	ldr	r3, [pc, #408]	; (80026cc <HAL_RCC_ClockConfig+0x1f0>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002538:	429a      	cmp	r2, r3
 800253a:	d908      	bls.n	800254e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800253c:	4b63      	ldr	r3, [pc, #396]	; (80026cc <HAL_RCC_ClockConfig+0x1f0>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	4960      	ldr	r1, [pc, #384]	; (80026cc <HAL_RCC_ClockConfig+0x1f0>)
 800254a:	4313      	orrs	r3, r2
 800254c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d04c      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b03      	cmp	r3, #3
 8002560:	d107      	bne.n	8002572 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002562:	4b5a      	ldr	r3, [pc, #360]	; (80026cc <HAL_RCC_ClockConfig+0x1f0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d121      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e0a6      	b.n	80026c0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b02      	cmp	r3, #2
 8002578:	d107      	bne.n	800258a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800257a:	4b54      	ldr	r3, [pc, #336]	; (80026cc <HAL_RCC_ClockConfig+0x1f0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d115      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e09a      	b.n	80026c0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d107      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002592:	4b4e      	ldr	r3, [pc, #312]	; (80026cc <HAL_RCC_ClockConfig+0x1f0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d109      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e08e      	b.n	80026c0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025a2:	4b4a      	ldr	r3, [pc, #296]	; (80026cc <HAL_RCC_ClockConfig+0x1f0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e086      	b.n	80026c0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025b2:	4b46      	ldr	r3, [pc, #280]	; (80026cc <HAL_RCC_ClockConfig+0x1f0>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f023 0203 	bic.w	r2, r3, #3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	4943      	ldr	r1, [pc, #268]	; (80026cc <HAL_RCC_ClockConfig+0x1f0>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025c4:	f7ff f89a 	bl	80016fc <HAL_GetTick>
 80025c8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ca:	e00a      	b.n	80025e2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025cc:	f7ff f896 	bl	80016fc <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025da:	4293      	cmp	r3, r2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e06e      	b.n	80026c0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e2:	4b3a      	ldr	r3, [pc, #232]	; (80026cc <HAL_RCC_ClockConfig+0x1f0>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 020c 	and.w	r2, r3, #12
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d1eb      	bne.n	80025cc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d010      	beq.n	8002622 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	4b31      	ldr	r3, [pc, #196]	; (80026cc <HAL_RCC_ClockConfig+0x1f0>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800260c:	429a      	cmp	r2, r3
 800260e:	d208      	bcs.n	8002622 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002610:	4b2e      	ldr	r3, [pc, #184]	; (80026cc <HAL_RCC_ClockConfig+0x1f0>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	492b      	ldr	r1, [pc, #172]	; (80026cc <HAL_RCC_ClockConfig+0x1f0>)
 800261e:	4313      	orrs	r3, r2
 8002620:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002622:	4b29      	ldr	r3, [pc, #164]	; (80026c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d210      	bcs.n	8002652 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002630:	4b25      	ldr	r3, [pc, #148]	; (80026c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f023 0207 	bic.w	r2, r3, #7
 8002638:	4923      	ldr	r1, [pc, #140]	; (80026c8 <HAL_RCC_ClockConfig+0x1ec>)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	4313      	orrs	r3, r2
 800263e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002640:	4b21      	ldr	r3, [pc, #132]	; (80026c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d001      	beq.n	8002652 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e036      	b.n	80026c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	2b00      	cmp	r3, #0
 800265c:	d008      	beq.n	8002670 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800265e:	4b1b      	ldr	r3, [pc, #108]	; (80026cc <HAL_RCC_ClockConfig+0x1f0>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	4918      	ldr	r1, [pc, #96]	; (80026cc <HAL_RCC_ClockConfig+0x1f0>)
 800266c:	4313      	orrs	r3, r2
 800266e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0308 	and.w	r3, r3, #8
 8002678:	2b00      	cmp	r3, #0
 800267a:	d009      	beq.n	8002690 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800267c:	4b13      	ldr	r3, [pc, #76]	; (80026cc <HAL_RCC_ClockConfig+0x1f0>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	4910      	ldr	r1, [pc, #64]	; (80026cc <HAL_RCC_ClockConfig+0x1f0>)
 800268c:	4313      	orrs	r3, r2
 800268e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002690:	f000 f824 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 8002694:	4602      	mov	r2, r0
 8002696:	4b0d      	ldr	r3, [pc, #52]	; (80026cc <HAL_RCC_ClockConfig+0x1f0>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	091b      	lsrs	r3, r3, #4
 800269c:	f003 030f 	and.w	r3, r3, #15
 80026a0:	490b      	ldr	r1, [pc, #44]	; (80026d0 <HAL_RCC_ClockConfig+0x1f4>)
 80026a2:	5ccb      	ldrb	r3, [r1, r3]
 80026a4:	f003 031f 	and.w	r3, r3, #31
 80026a8:	fa22 f303 	lsr.w	r3, r2, r3
 80026ac:	4a09      	ldr	r2, [pc, #36]	; (80026d4 <HAL_RCC_ClockConfig+0x1f8>)
 80026ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026b0:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <HAL_RCC_ClockConfig+0x1fc>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fe fe59 	bl	800136c <HAL_InitTick>
 80026ba:	4603      	mov	r3, r0
 80026bc:	72fb      	strb	r3, [r7, #11]

  return status;
 80026be:	7afb      	ldrb	r3, [r7, #11]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40022000 	.word	0x40022000
 80026cc:	40021000 	.word	0x40021000
 80026d0:	0800a088 	.word	0x0800a088
 80026d4:	20000000 	.word	0x20000000
 80026d8:	20000004 	.word	0x20000004

080026dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	b089      	sub	sp, #36	; 0x24
 80026e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61fb      	str	r3, [r7, #28]
 80026e6:	2300      	movs	r3, #0
 80026e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ea:	4b3e      	ldr	r3, [pc, #248]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 030c 	and.w	r3, r3, #12
 80026f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026f4:	4b3b      	ldr	r3, [pc, #236]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f003 0303 	and.w	r3, r3, #3
 80026fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <HAL_RCC_GetSysClockFreq+0x34>
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	2b0c      	cmp	r3, #12
 8002708:	d121      	bne.n	800274e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d11e      	bne.n	800274e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002710:	4b34      	ldr	r3, [pc, #208]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	2b00      	cmp	r3, #0
 800271a:	d107      	bne.n	800272c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800271c:	4b31      	ldr	r3, [pc, #196]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800271e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002722:	0a1b      	lsrs	r3, r3, #8
 8002724:	f003 030f 	and.w	r3, r3, #15
 8002728:	61fb      	str	r3, [r7, #28]
 800272a:	e005      	b.n	8002738 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800272c:	4b2d      	ldr	r3, [pc, #180]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	091b      	lsrs	r3, r3, #4
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002738:	4a2b      	ldr	r2, [pc, #172]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002740:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10d      	bne.n	8002764 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800274c:	e00a      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	2b04      	cmp	r3, #4
 8002752:	d102      	bne.n	800275a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002754:	4b25      	ldr	r3, [pc, #148]	; (80027ec <HAL_RCC_GetSysClockFreq+0x110>)
 8002756:	61bb      	str	r3, [r7, #24]
 8002758:	e004      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	2b08      	cmp	r3, #8
 800275e:	d101      	bne.n	8002764 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002760:	4b23      	ldr	r3, [pc, #140]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002762:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	2b0c      	cmp	r3, #12
 8002768:	d134      	bne.n	80027d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800276a:	4b1e      	ldr	r3, [pc, #120]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	2b02      	cmp	r3, #2
 8002778:	d003      	beq.n	8002782 <HAL_RCC_GetSysClockFreq+0xa6>
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	2b03      	cmp	r3, #3
 800277e:	d003      	beq.n	8002788 <HAL_RCC_GetSysClockFreq+0xac>
 8002780:	e005      	b.n	800278e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002782:	4b1a      	ldr	r3, [pc, #104]	; (80027ec <HAL_RCC_GetSysClockFreq+0x110>)
 8002784:	617b      	str	r3, [r7, #20]
      break;
 8002786:	e005      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002788:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800278a:	617b      	str	r3, [r7, #20]
      break;
 800278c:	e002      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	617b      	str	r3, [r7, #20]
      break;
 8002792:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002794:	4b13      	ldr	r3, [pc, #76]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	091b      	lsrs	r3, r3, #4
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	3301      	adds	r3, #1
 80027a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80027a2:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	0a1b      	lsrs	r3, r3, #8
 80027a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	fb03 f202 	mul.w	r2, r3, r2
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027ba:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	0e5b      	lsrs	r3, r3, #25
 80027c0:	f003 0303 	and.w	r3, r3, #3
 80027c4:	3301      	adds	r3, #1
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80027d4:	69bb      	ldr	r3, [r7, #24]
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3724      	adds	r7, #36	; 0x24
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	40021000 	.word	0x40021000
 80027e8:	0800a0a0 	.word	0x0800a0a0
 80027ec:	00f42400 	.word	0x00f42400
 80027f0:	007a1200 	.word	0x007a1200

080027f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027f8:	4b03      	ldr	r3, [pc, #12]	; (8002808 <HAL_RCC_GetHCLKFreq+0x14>)
 80027fa:	681b      	ldr	r3, [r3, #0]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	20000000 	.word	0x20000000

0800280c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002810:	f7ff fff0 	bl	80027f4 <HAL_RCC_GetHCLKFreq>
 8002814:	4602      	mov	r2, r0
 8002816:	4b06      	ldr	r3, [pc, #24]	; (8002830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	0a1b      	lsrs	r3, r3, #8
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	4904      	ldr	r1, [pc, #16]	; (8002834 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002822:	5ccb      	ldrb	r3, [r1, r3]
 8002824:	f003 031f 	and.w	r3, r3, #31
 8002828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800282c:	4618      	mov	r0, r3
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40021000 	.word	0x40021000
 8002834:	0800a098 	.word	0x0800a098

08002838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800283c:	f7ff ffda 	bl	80027f4 <HAL_RCC_GetHCLKFreq>
 8002840:	4602      	mov	r2, r0
 8002842:	4b06      	ldr	r3, [pc, #24]	; (800285c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	0adb      	lsrs	r3, r3, #11
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	4904      	ldr	r1, [pc, #16]	; (8002860 <HAL_RCC_GetPCLK2Freq+0x28>)
 800284e:	5ccb      	ldrb	r3, [r1, r3]
 8002850:	f003 031f 	and.w	r3, r3, #31
 8002854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002858:	4618      	mov	r0, r3
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40021000 	.word	0x40021000
 8002860:	0800a098 	.word	0x0800a098

08002864 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	220f      	movs	r2, #15
 8002872:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002874:	4b12      	ldr	r3, [pc, #72]	; (80028c0 <HAL_RCC_GetClockConfig+0x5c>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 0203 	and.w	r2, r3, #3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002880:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <HAL_RCC_GetClockConfig+0x5c>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800288c:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <HAL_RCC_GetClockConfig+0x5c>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002898:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <HAL_RCC_GetClockConfig+0x5c>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	08db      	lsrs	r3, r3, #3
 800289e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80028a6:	4b07      	ldr	r3, [pc, #28]	; (80028c4 <HAL_RCC_GetClockConfig+0x60>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0207 	and.w	r2, r3, #7
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	601a      	str	r2, [r3, #0]
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40022000 	.word	0x40022000

080028c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028d0:	2300      	movs	r3, #0
 80028d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028d4:	4b2a      	ldr	r3, [pc, #168]	; (8002980 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80028e0:	f7ff f9bc 	bl	8001c5c <HAL_PWREx_GetVoltageRange>
 80028e4:	6178      	str	r0, [r7, #20]
 80028e6:	e014      	b.n	8002912 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028e8:	4b25      	ldr	r3, [pc, #148]	; (8002980 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ec:	4a24      	ldr	r2, [pc, #144]	; (8002980 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f2:	6593      	str	r3, [r2, #88]	; 0x58
 80028f4:	4b22      	ldr	r3, [pc, #136]	; (8002980 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002900:	f7ff f9ac 	bl	8001c5c <HAL_PWREx_GetVoltageRange>
 8002904:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002906:	4b1e      	ldr	r3, [pc, #120]	; (8002980 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290a:	4a1d      	ldr	r2, [pc, #116]	; (8002980 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800290c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002910:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002918:	d10b      	bne.n	8002932 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b80      	cmp	r3, #128	; 0x80
 800291e:	d919      	bls.n	8002954 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2ba0      	cmp	r3, #160	; 0xa0
 8002924:	d902      	bls.n	800292c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002926:	2302      	movs	r3, #2
 8002928:	613b      	str	r3, [r7, #16]
 800292a:	e013      	b.n	8002954 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800292c:	2301      	movs	r3, #1
 800292e:	613b      	str	r3, [r7, #16]
 8002930:	e010      	b.n	8002954 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b80      	cmp	r3, #128	; 0x80
 8002936:	d902      	bls.n	800293e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002938:	2303      	movs	r3, #3
 800293a:	613b      	str	r3, [r7, #16]
 800293c:	e00a      	b.n	8002954 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b80      	cmp	r3, #128	; 0x80
 8002942:	d102      	bne.n	800294a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002944:	2302      	movs	r3, #2
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	e004      	b.n	8002954 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b70      	cmp	r3, #112	; 0x70
 800294e:	d101      	bne.n	8002954 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002950:	2301      	movs	r3, #1
 8002952:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f023 0207 	bic.w	r2, r3, #7
 800295c:	4909      	ldr	r1, [pc, #36]	; (8002984 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	4313      	orrs	r3, r2
 8002962:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002964:	4b07      	ldr	r3, [pc, #28]	; (8002984 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	429a      	cmp	r2, r3
 8002970:	d001      	beq.n	8002976 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40021000 	.word	0x40021000
 8002984:	40022000 	.word	0x40022000

08002988 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002990:	2300      	movs	r3, #0
 8002992:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002994:	2300      	movs	r3, #0
 8002996:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d041      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029ac:	d02a      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80029ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029b2:	d824      	bhi.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029b8:	d008      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80029ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029be:	d81e      	bhi.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00a      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80029c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029c8:	d010      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80029ca:	e018      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029cc:	4b86      	ldr	r3, [pc, #536]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	4a85      	ldr	r2, [pc, #532]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029d8:	e015      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	3304      	adds	r3, #4
 80029de:	2100      	movs	r1, #0
 80029e0:	4618      	mov	r0, r3
 80029e2:	f000 fabb 	bl	8002f5c <RCCEx_PLLSAI1_Config>
 80029e6:	4603      	mov	r3, r0
 80029e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029ea:	e00c      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3320      	adds	r3, #32
 80029f0:	2100      	movs	r1, #0
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 fba6 	bl	8003144 <RCCEx_PLLSAI2_Config>
 80029f8:	4603      	mov	r3, r0
 80029fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029fc:	e003      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	74fb      	strb	r3, [r7, #19]
      break;
 8002a02:	e000      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002a04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a06:	7cfb      	ldrb	r3, [r7, #19]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10b      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a0c:	4b76      	ldr	r3, [pc, #472]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a1a:	4973      	ldr	r1, [pc, #460]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a22:	e001      	b.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a24:	7cfb      	ldrb	r3, [r7, #19]
 8002a26:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d041      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a38:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a3c:	d02a      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002a3e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a42:	d824      	bhi.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a48:	d008      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a4e:	d81e      	bhi.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00a      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a58:	d010      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a5a:	e018      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a5c:	4b62      	ldr	r3, [pc, #392]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	4a61      	ldr	r2, [pc, #388]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a66:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a68:	e015      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	2100      	movs	r1, #0
 8002a70:	4618      	mov	r0, r3
 8002a72:	f000 fa73 	bl	8002f5c <RCCEx_PLLSAI1_Config>
 8002a76:	4603      	mov	r3, r0
 8002a78:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a7a:	e00c      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3320      	adds	r3, #32
 8002a80:	2100      	movs	r1, #0
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 fb5e 	bl	8003144 <RCCEx_PLLSAI2_Config>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a8c:	e003      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	74fb      	strb	r3, [r7, #19]
      break;
 8002a92:	e000      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002a94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a96:	7cfb      	ldrb	r3, [r7, #19]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10b      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a9c:	4b52      	ldr	r3, [pc, #328]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002aaa:	494f      	ldr	r1, [pc, #316]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ab2:	e001      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab4:	7cfb      	ldrb	r3, [r7, #19]
 8002ab6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 80a0 	beq.w	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002aca:	4b47      	ldr	r3, [pc, #284]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002ada:	2300      	movs	r3, #0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00d      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ae0:	4b41      	ldr	r3, [pc, #260]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae4:	4a40      	ldr	r2, [pc, #256]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aea:	6593      	str	r3, [r2, #88]	; 0x58
 8002aec:	4b3e      	ldr	r3, [pc, #248]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002af8:	2301      	movs	r3, #1
 8002afa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002afc:	4b3b      	ldr	r3, [pc, #236]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a3a      	ldr	r2, [pc, #232]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b08:	f7fe fdf8 	bl	80016fc <HAL_GetTick>
 8002b0c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b0e:	e009      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b10:	f7fe fdf4 	bl	80016fc <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d902      	bls.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	74fb      	strb	r3, [r7, #19]
        break;
 8002b22:	e005      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b24:	4b31      	ldr	r3, [pc, #196]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0ef      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002b30:	7cfb      	ldrb	r3, [r7, #19]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d15c      	bne.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b36:	4b2c      	ldr	r3, [pc, #176]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b40:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d01f      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d019      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b54:	4b24      	ldr	r3, [pc, #144]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b60:	4b21      	ldr	r3, [pc, #132]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b66:	4a20      	ldr	r2, [pc, #128]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b70:	4b1d      	ldr	r3, [pc, #116]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b76:	4a1c      	ldr	r2, [pc, #112]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b80:	4a19      	ldr	r2, [pc, #100]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d016      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b92:	f7fe fdb3 	bl	80016fc <HAL_GetTick>
 8002b96:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b98:	e00b      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b9a:	f7fe fdaf 	bl	80016fc <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d902      	bls.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	74fb      	strb	r3, [r7, #19]
            break;
 8002bb0:	e006      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bb2:	4b0d      	ldr	r3, [pc, #52]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d0ec      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002bc0:	7cfb      	ldrb	r3, [r7, #19]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10c      	bne.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bc6:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bd6:	4904      	ldr	r1, [pc, #16]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002bde:	e009      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002be0:	7cfb      	ldrb	r3, [r7, #19]
 8002be2:	74bb      	strb	r3, [r7, #18]
 8002be4:	e006      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002be6:	bf00      	nop
 8002be8:	40021000 	.word	0x40021000
 8002bec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bf0:	7cfb      	ldrb	r3, [r7, #19]
 8002bf2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bf4:	7c7b      	ldrb	r3, [r7, #17]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d105      	bne.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bfa:	4b9e      	ldr	r3, [pc, #632]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfe:	4a9d      	ldr	r2, [pc, #628]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00a      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c12:	4b98      	ldr	r3, [pc, #608]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c18:	f023 0203 	bic.w	r2, r3, #3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c20:	4994      	ldr	r1, [pc, #592]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00a      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c34:	4b8f      	ldr	r3, [pc, #572]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3a:	f023 020c 	bic.w	r2, r3, #12
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c42:	498c      	ldr	r1, [pc, #560]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0304 	and.w	r3, r3, #4
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00a      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c56:	4b87      	ldr	r3, [pc, #540]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	4983      	ldr	r1, [pc, #524]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0308 	and.w	r3, r3, #8
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00a      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c78:	4b7e      	ldr	r3, [pc, #504]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c86:	497b      	ldr	r1, [pc, #492]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0310 	and.w	r3, r3, #16
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00a      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c9a:	4b76      	ldr	r3, [pc, #472]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca8:	4972      	ldr	r1, [pc, #456]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0320 	and.w	r3, r3, #32
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00a      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cbc:	4b6d      	ldr	r3, [pc, #436]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cca:	496a      	ldr	r1, [pc, #424]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00a      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cde:	4b65      	ldr	r3, [pc, #404]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cec:	4961      	ldr	r1, [pc, #388]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00a      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d00:	4b5c      	ldr	r3, [pc, #368]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d0e:	4959      	ldr	r1, [pc, #356]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00a      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d22:	4b54      	ldr	r3, [pc, #336]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d28:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d30:	4950      	ldr	r1, [pc, #320]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00a      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d44:	4b4b      	ldr	r3, [pc, #300]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d52:	4948      	ldr	r1, [pc, #288]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00a      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d66:	4b43      	ldr	r3, [pc, #268]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d74:	493f      	ldr	r1, [pc, #252]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d028      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d88:	4b3a      	ldr	r3, [pc, #232]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d96:	4937      	ldr	r1, [pc, #220]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002da2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002da6:	d106      	bne.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002da8:	4b32      	ldr	r3, [pc, #200]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	4a31      	ldr	r2, [pc, #196]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002db2:	60d3      	str	r3, [r2, #12]
 8002db4:	e011      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dbe:	d10c      	bne.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 f8c8 	bl	8002f5c <RCCEx_PLLSAI1_Config>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002dd0:	7cfb      	ldrb	r3, [r7, #19]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002dd6:	7cfb      	ldrb	r3, [r7, #19]
 8002dd8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d028      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002de6:	4b23      	ldr	r3, [pc, #140]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df4:	491f      	ldr	r1, [pc, #124]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e04:	d106      	bne.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e06:	4b1b      	ldr	r3, [pc, #108]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	4a1a      	ldr	r2, [pc, #104]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e10:	60d3      	str	r3, [r2, #12]
 8002e12:	e011      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e1c:	d10c      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	3304      	adds	r3, #4
 8002e22:	2101      	movs	r1, #1
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 f899 	bl	8002f5c <RCCEx_PLLSAI1_Config>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e2e:	7cfb      	ldrb	r3, [r7, #19]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002e34:	7cfb      	ldrb	r3, [r7, #19]
 8002e36:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d02b      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e44:	4b0b      	ldr	r3, [pc, #44]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e52:	4908      	ldr	r1, [pc, #32]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e62:	d109      	bne.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e64:	4b03      	ldr	r3, [pc, #12]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	4a02      	ldr	r2, [pc, #8]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e6e:	60d3      	str	r3, [r2, #12]
 8002e70:	e014      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002e72:	bf00      	nop
 8002e74:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e80:	d10c      	bne.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3304      	adds	r3, #4
 8002e86:	2101      	movs	r1, #1
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 f867 	bl	8002f5c <RCCEx_PLLSAI1_Config>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e92:	7cfb      	ldrb	r3, [r7, #19]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002e98:	7cfb      	ldrb	r3, [r7, #19]
 8002e9a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d02f      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ea8:	4b2b      	ldr	r3, [pc, #172]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002eb6:	4928      	ldr	r1, [pc, #160]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ec2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ec6:	d10d      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	3304      	adds	r3, #4
 8002ecc:	2102      	movs	r1, #2
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 f844 	bl	8002f5c <RCCEx_PLLSAI1_Config>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ed8:	7cfb      	ldrb	r3, [r7, #19]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d014      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ede:	7cfb      	ldrb	r3, [r7, #19]
 8002ee0:	74bb      	strb	r3, [r7, #18]
 8002ee2:	e011      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ee8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eec:	d10c      	bne.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3320      	adds	r3, #32
 8002ef2:	2102      	movs	r1, #2
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 f925 	bl	8003144 <RCCEx_PLLSAI2_Config>
 8002efa:	4603      	mov	r3, r0
 8002efc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002efe:	7cfb      	ldrb	r3, [r7, #19]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002f04:	7cfb      	ldrb	r3, [r7, #19]
 8002f06:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00a      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f14:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f22:	490d      	ldr	r1, [pc, #52]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00b      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f36:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f46:	4904      	ldr	r1, [pc, #16]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f4e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40021000 	.word	0x40021000

08002f5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f66:	2300      	movs	r3, #0
 8002f68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f6a:	4b75      	ldr	r3, [pc, #468]	; (8003140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d018      	beq.n	8002fa8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f76:	4b72      	ldr	r3, [pc, #456]	; (8003140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f003 0203 	and.w	r2, r3, #3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d10d      	bne.n	8002fa2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
       ||
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d009      	beq.n	8002fa2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f8e:	4b6c      	ldr	r3, [pc, #432]	; (8003140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	091b      	lsrs	r3, r3, #4
 8002f94:	f003 0307 	and.w	r3, r3, #7
 8002f98:	1c5a      	adds	r2, r3, #1
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
       ||
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d047      	beq.n	8003032 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	73fb      	strb	r3, [r7, #15]
 8002fa6:	e044      	b.n	8003032 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d018      	beq.n	8002fe2 <RCCEx_PLLSAI1_Config+0x86>
 8002fb0:	2b03      	cmp	r3, #3
 8002fb2:	d825      	bhi.n	8003000 <RCCEx_PLLSAI1_Config+0xa4>
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d002      	beq.n	8002fbe <RCCEx_PLLSAI1_Config+0x62>
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d009      	beq.n	8002fd0 <RCCEx_PLLSAI1_Config+0x74>
 8002fbc:	e020      	b.n	8003000 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fbe:	4b60      	ldr	r3, [pc, #384]	; (8003140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d11d      	bne.n	8003006 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fce:	e01a      	b.n	8003006 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fd0:	4b5b      	ldr	r3, [pc, #364]	; (8003140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d116      	bne.n	800300a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fe0:	e013      	b.n	800300a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fe2:	4b57      	ldr	r3, [pc, #348]	; (8003140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10f      	bne.n	800300e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fee:	4b54      	ldr	r3, [pc, #336]	; (8003140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d109      	bne.n	800300e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ffe:	e006      	b.n	800300e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	73fb      	strb	r3, [r7, #15]
      break;
 8003004:	e004      	b.n	8003010 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003006:	bf00      	nop
 8003008:	e002      	b.n	8003010 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800300a:	bf00      	nop
 800300c:	e000      	b.n	8003010 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800300e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003010:	7bfb      	ldrb	r3, [r7, #15]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10d      	bne.n	8003032 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003016:	4b4a      	ldr	r3, [pc, #296]	; (8003140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6819      	ldr	r1, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	3b01      	subs	r3, #1
 8003028:	011b      	lsls	r3, r3, #4
 800302a:	430b      	orrs	r3, r1
 800302c:	4944      	ldr	r1, [pc, #272]	; (8003140 <RCCEx_PLLSAI1_Config+0x1e4>)
 800302e:	4313      	orrs	r3, r2
 8003030:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003032:	7bfb      	ldrb	r3, [r7, #15]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d17d      	bne.n	8003134 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003038:	4b41      	ldr	r3, [pc, #260]	; (8003140 <RCCEx_PLLSAI1_Config+0x1e4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a40      	ldr	r2, [pc, #256]	; (8003140 <RCCEx_PLLSAI1_Config+0x1e4>)
 800303e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003042:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003044:	f7fe fb5a 	bl	80016fc <HAL_GetTick>
 8003048:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800304a:	e009      	b.n	8003060 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800304c:	f7fe fb56 	bl	80016fc <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d902      	bls.n	8003060 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	73fb      	strb	r3, [r7, #15]
        break;
 800305e:	e005      	b.n	800306c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003060:	4b37      	ldr	r3, [pc, #220]	; (8003140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1ef      	bne.n	800304c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800306c:	7bfb      	ldrb	r3, [r7, #15]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d160      	bne.n	8003134 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d111      	bne.n	800309c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003078:	4b31      	ldr	r3, [pc, #196]	; (8003140 <RCCEx_PLLSAI1_Config+0x1e4>)
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6892      	ldr	r2, [r2, #8]
 8003088:	0211      	lsls	r1, r2, #8
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	68d2      	ldr	r2, [r2, #12]
 800308e:	0912      	lsrs	r2, r2, #4
 8003090:	0452      	lsls	r2, r2, #17
 8003092:	430a      	orrs	r2, r1
 8003094:	492a      	ldr	r1, [pc, #168]	; (8003140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003096:	4313      	orrs	r3, r2
 8003098:	610b      	str	r3, [r1, #16]
 800309a:	e027      	b.n	80030ec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d112      	bne.n	80030c8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030a2:	4b27      	ldr	r3, [pc, #156]	; (8003140 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80030aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6892      	ldr	r2, [r2, #8]
 80030b2:	0211      	lsls	r1, r2, #8
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6912      	ldr	r2, [r2, #16]
 80030b8:	0852      	lsrs	r2, r2, #1
 80030ba:	3a01      	subs	r2, #1
 80030bc:	0552      	lsls	r2, r2, #21
 80030be:	430a      	orrs	r2, r1
 80030c0:	491f      	ldr	r1, [pc, #124]	; (8003140 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	610b      	str	r3, [r1, #16]
 80030c6:	e011      	b.n	80030ec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030c8:	4b1d      	ldr	r3, [pc, #116]	; (8003140 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80030d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6892      	ldr	r2, [r2, #8]
 80030d8:	0211      	lsls	r1, r2, #8
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6952      	ldr	r2, [r2, #20]
 80030de:	0852      	lsrs	r2, r2, #1
 80030e0:	3a01      	subs	r2, #1
 80030e2:	0652      	lsls	r2, r2, #25
 80030e4:	430a      	orrs	r2, r1
 80030e6:	4916      	ldr	r1, [pc, #88]	; (8003140 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80030ec:	4b14      	ldr	r3, [pc, #80]	; (8003140 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a13      	ldr	r2, [pc, #76]	; (8003140 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f8:	f7fe fb00 	bl	80016fc <HAL_GetTick>
 80030fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030fe:	e009      	b.n	8003114 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003100:	f7fe fafc 	bl	80016fc <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d902      	bls.n	8003114 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	73fb      	strb	r3, [r7, #15]
          break;
 8003112:	e005      	b.n	8003120 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003114:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0ef      	beq.n	8003100 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003120:	7bfb      	ldrb	r3, [r7, #15]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d106      	bne.n	8003134 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003126:	4b06      	ldr	r3, [pc, #24]	; (8003140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003128:	691a      	ldr	r2, [r3, #16]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	4904      	ldr	r1, [pc, #16]	; (8003140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003130:	4313      	orrs	r3, r2
 8003132:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003134:	7bfb      	ldrb	r3, [r7, #15]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40021000 	.word	0x40021000

08003144 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800314e:	2300      	movs	r3, #0
 8003150:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003152:	4b6a      	ldr	r3, [pc, #424]	; (80032fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d018      	beq.n	8003190 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800315e:	4b67      	ldr	r3, [pc, #412]	; (80032fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f003 0203 	and.w	r2, r3, #3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	429a      	cmp	r2, r3
 800316c:	d10d      	bne.n	800318a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
       ||
 8003172:	2b00      	cmp	r3, #0
 8003174:	d009      	beq.n	800318a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003176:	4b61      	ldr	r3, [pc, #388]	; (80032fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	091b      	lsrs	r3, r3, #4
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	1c5a      	adds	r2, r3, #1
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
       ||
 8003186:	429a      	cmp	r2, r3
 8003188:	d047      	beq.n	800321a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	73fb      	strb	r3, [r7, #15]
 800318e:	e044      	b.n	800321a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b03      	cmp	r3, #3
 8003196:	d018      	beq.n	80031ca <RCCEx_PLLSAI2_Config+0x86>
 8003198:	2b03      	cmp	r3, #3
 800319a:	d825      	bhi.n	80031e8 <RCCEx_PLLSAI2_Config+0xa4>
 800319c:	2b01      	cmp	r3, #1
 800319e:	d002      	beq.n	80031a6 <RCCEx_PLLSAI2_Config+0x62>
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d009      	beq.n	80031b8 <RCCEx_PLLSAI2_Config+0x74>
 80031a4:	e020      	b.n	80031e8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031a6:	4b55      	ldr	r3, [pc, #340]	; (80032fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d11d      	bne.n	80031ee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031b6:	e01a      	b.n	80031ee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031b8:	4b50      	ldr	r3, [pc, #320]	; (80032fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d116      	bne.n	80031f2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031c8:	e013      	b.n	80031f2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031ca:	4b4c      	ldr	r3, [pc, #304]	; (80032fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10f      	bne.n	80031f6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031d6:	4b49      	ldr	r3, [pc, #292]	; (80032fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d109      	bne.n	80031f6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031e6:	e006      	b.n	80031f6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	73fb      	strb	r3, [r7, #15]
      break;
 80031ec:	e004      	b.n	80031f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80031ee:	bf00      	nop
 80031f0:	e002      	b.n	80031f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80031f2:	bf00      	nop
 80031f4:	e000      	b.n	80031f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80031f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80031f8:	7bfb      	ldrb	r3, [r7, #15]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10d      	bne.n	800321a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031fe:	4b3f      	ldr	r3, [pc, #252]	; (80032fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6819      	ldr	r1, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	3b01      	subs	r3, #1
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	430b      	orrs	r3, r1
 8003214:	4939      	ldr	r1, [pc, #228]	; (80032fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003216:	4313      	orrs	r3, r2
 8003218:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800321a:	7bfb      	ldrb	r3, [r7, #15]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d167      	bne.n	80032f0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003220:	4b36      	ldr	r3, [pc, #216]	; (80032fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a35      	ldr	r2, [pc, #212]	; (80032fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003226:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800322a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800322c:	f7fe fa66 	bl	80016fc <HAL_GetTick>
 8003230:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003232:	e009      	b.n	8003248 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003234:	f7fe fa62 	bl	80016fc <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d902      	bls.n	8003248 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	73fb      	strb	r3, [r7, #15]
        break;
 8003246:	e005      	b.n	8003254 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003248:	4b2c      	ldr	r3, [pc, #176]	; (80032fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1ef      	bne.n	8003234 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003254:	7bfb      	ldrb	r3, [r7, #15]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d14a      	bne.n	80032f0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d111      	bne.n	8003284 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003260:	4b26      	ldr	r3, [pc, #152]	; (80032fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6892      	ldr	r2, [r2, #8]
 8003270:	0211      	lsls	r1, r2, #8
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	68d2      	ldr	r2, [r2, #12]
 8003276:	0912      	lsrs	r2, r2, #4
 8003278:	0452      	lsls	r2, r2, #17
 800327a:	430a      	orrs	r2, r1
 800327c:	491f      	ldr	r1, [pc, #124]	; (80032fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800327e:	4313      	orrs	r3, r2
 8003280:	614b      	str	r3, [r1, #20]
 8003282:	e011      	b.n	80032a8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003284:	4b1d      	ldr	r3, [pc, #116]	; (80032fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800328c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6892      	ldr	r2, [r2, #8]
 8003294:	0211      	lsls	r1, r2, #8
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6912      	ldr	r2, [r2, #16]
 800329a:	0852      	lsrs	r2, r2, #1
 800329c:	3a01      	subs	r2, #1
 800329e:	0652      	lsls	r2, r2, #25
 80032a0:	430a      	orrs	r2, r1
 80032a2:	4916      	ldr	r1, [pc, #88]	; (80032fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80032a8:	4b14      	ldr	r3, [pc, #80]	; (80032fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a13      	ldr	r2, [pc, #76]	; (80032fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b4:	f7fe fa22 	bl	80016fc <HAL_GetTick>
 80032b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032ba:	e009      	b.n	80032d0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032bc:	f7fe fa1e 	bl	80016fc <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d902      	bls.n	80032d0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	73fb      	strb	r3, [r7, #15]
          break;
 80032ce:	e005      	b.n	80032dc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032d0:	4b0a      	ldr	r3, [pc, #40]	; (80032fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0ef      	beq.n	80032bc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80032dc:	7bfb      	ldrb	r3, [r7, #15]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d106      	bne.n	80032f0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80032e2:	4b06      	ldr	r3, [pc, #24]	; (80032fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80032e4:	695a      	ldr	r2, [r3, #20]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	4904      	ldr	r1, [pc, #16]	; (80032fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80032f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40021000 	.word	0x40021000

08003300 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e049      	b.n	80033a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d106      	bne.n	800332c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f841 	bl	80033ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3304      	adds	r3, #4
 800333c:	4619      	mov	r1, r3
 800333e:	4610      	mov	r0, r2
 8003340:	f000 f9da 	bl	80036f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b083      	sub	sp, #12
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
	...

080033c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d001      	beq.n	80033dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e04f      	b.n	800347c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2202      	movs	r2, #2
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68da      	ldr	r2, [r3, #12]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0201 	orr.w	r2, r2, #1
 80033f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a23      	ldr	r2, [pc, #140]	; (8003488 <HAL_TIM_Base_Start_IT+0xc4>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d01d      	beq.n	800343a <HAL_TIM_Base_Start_IT+0x76>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003406:	d018      	beq.n	800343a <HAL_TIM_Base_Start_IT+0x76>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a1f      	ldr	r2, [pc, #124]	; (800348c <HAL_TIM_Base_Start_IT+0xc8>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d013      	beq.n	800343a <HAL_TIM_Base_Start_IT+0x76>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a1e      	ldr	r2, [pc, #120]	; (8003490 <HAL_TIM_Base_Start_IT+0xcc>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d00e      	beq.n	800343a <HAL_TIM_Base_Start_IT+0x76>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a1c      	ldr	r2, [pc, #112]	; (8003494 <HAL_TIM_Base_Start_IT+0xd0>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d009      	beq.n	800343a <HAL_TIM_Base_Start_IT+0x76>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a1b      	ldr	r2, [pc, #108]	; (8003498 <HAL_TIM_Base_Start_IT+0xd4>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d004      	beq.n	800343a <HAL_TIM_Base_Start_IT+0x76>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a19      	ldr	r2, [pc, #100]	; (800349c <HAL_TIM_Base_Start_IT+0xd8>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d115      	bne.n	8003466 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	4b17      	ldr	r3, [pc, #92]	; (80034a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003442:	4013      	ands	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2b06      	cmp	r3, #6
 800344a:	d015      	beq.n	8003478 <HAL_TIM_Base_Start_IT+0xb4>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003452:	d011      	beq.n	8003478 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0201 	orr.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003464:	e008      	b.n	8003478 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f042 0201 	orr.w	r2, r2, #1
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	e000      	b.n	800347a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003478:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3714      	adds	r7, #20
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	40012c00 	.word	0x40012c00
 800348c:	40000400 	.word	0x40000400
 8003490:	40000800 	.word	0x40000800
 8003494:	40000c00 	.word	0x40000c00
 8003498:	40013400 	.word	0x40013400
 800349c:	40014000 	.word	0x40014000
 80034a0:	00010007 	.word	0x00010007

080034a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d020      	beq.n	8003508 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d01b      	beq.n	8003508 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f06f 0202 	mvn.w	r2, #2
 80034d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f8e4 	bl	80036bc <HAL_TIM_IC_CaptureCallback>
 80034f4:	e005      	b.n	8003502 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f8d6 	bl	80036a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f8e7 	bl	80036d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	f003 0304 	and.w	r3, r3, #4
 800350e:	2b00      	cmp	r3, #0
 8003510:	d020      	beq.n	8003554 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	d01b      	beq.n	8003554 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f06f 0204 	mvn.w	r2, #4
 8003524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2202      	movs	r2, #2
 800352a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f8be 	bl	80036bc <HAL_TIM_IC_CaptureCallback>
 8003540:	e005      	b.n	800354e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f8b0 	bl	80036a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f8c1 	bl	80036d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d020      	beq.n	80035a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	2b00      	cmp	r3, #0
 8003566:	d01b      	beq.n	80035a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f06f 0208 	mvn.w	r2, #8
 8003570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2204      	movs	r2, #4
 8003576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f898 	bl	80036bc <HAL_TIM_IC_CaptureCallback>
 800358c:	e005      	b.n	800359a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f88a 	bl	80036a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f89b 	bl	80036d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	f003 0310 	and.w	r3, r3, #16
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d020      	beq.n	80035ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f003 0310 	and.w	r3, r3, #16
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d01b      	beq.n	80035ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f06f 0210 	mvn.w	r2, #16
 80035bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2208      	movs	r2, #8
 80035c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f872 	bl	80036bc <HAL_TIM_IC_CaptureCallback>
 80035d8:	e005      	b.n	80035e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f864 	bl	80036a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f875 	bl	80036d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00c      	beq.n	8003610 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d007      	beq.n	8003610 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f06f 0201 	mvn.w	r2, #1
 8003608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7fd fe12 	bl	8001234 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00c      	beq.n	8003634 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003620:	2b00      	cmp	r3, #0
 8003622:	d007      	beq.n	8003634 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800362c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f906 	bl	8003840 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00c      	beq.n	8003658 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003644:	2b00      	cmp	r3, #0
 8003646:	d007      	beq.n	8003658 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f8fe 	bl	8003854 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00c      	beq.n	800367c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003668:	2b00      	cmp	r3, #0
 800366a:	d007      	beq.n	800367c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f834 	bl	80036e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f003 0320 	and.w	r3, r3, #32
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00c      	beq.n	80036a0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f003 0320 	and.w	r3, r3, #32
 800368c:	2b00      	cmp	r3, #0
 800368e:	d007      	beq.n	80036a0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f06f 0220 	mvn.w	r2, #32
 8003698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f8c6 	bl	800382c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036a0:	bf00      	nop
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a40      	ldr	r2, [pc, #256]	; (800380c <TIM_Base_SetConfig+0x114>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d013      	beq.n	8003738 <TIM_Base_SetConfig+0x40>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003716:	d00f      	beq.n	8003738 <TIM_Base_SetConfig+0x40>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a3d      	ldr	r2, [pc, #244]	; (8003810 <TIM_Base_SetConfig+0x118>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d00b      	beq.n	8003738 <TIM_Base_SetConfig+0x40>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a3c      	ldr	r2, [pc, #240]	; (8003814 <TIM_Base_SetConfig+0x11c>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d007      	beq.n	8003738 <TIM_Base_SetConfig+0x40>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a3b      	ldr	r2, [pc, #236]	; (8003818 <TIM_Base_SetConfig+0x120>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d003      	beq.n	8003738 <TIM_Base_SetConfig+0x40>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a3a      	ldr	r2, [pc, #232]	; (800381c <TIM_Base_SetConfig+0x124>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d108      	bne.n	800374a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	4313      	orrs	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a2f      	ldr	r2, [pc, #188]	; (800380c <TIM_Base_SetConfig+0x114>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d01f      	beq.n	8003792 <TIM_Base_SetConfig+0x9a>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003758:	d01b      	beq.n	8003792 <TIM_Base_SetConfig+0x9a>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a2c      	ldr	r2, [pc, #176]	; (8003810 <TIM_Base_SetConfig+0x118>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d017      	beq.n	8003792 <TIM_Base_SetConfig+0x9a>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a2b      	ldr	r2, [pc, #172]	; (8003814 <TIM_Base_SetConfig+0x11c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d013      	beq.n	8003792 <TIM_Base_SetConfig+0x9a>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a2a      	ldr	r2, [pc, #168]	; (8003818 <TIM_Base_SetConfig+0x120>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d00f      	beq.n	8003792 <TIM_Base_SetConfig+0x9a>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a29      	ldr	r2, [pc, #164]	; (800381c <TIM_Base_SetConfig+0x124>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d00b      	beq.n	8003792 <TIM_Base_SetConfig+0x9a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a28      	ldr	r2, [pc, #160]	; (8003820 <TIM_Base_SetConfig+0x128>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d007      	beq.n	8003792 <TIM_Base_SetConfig+0x9a>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a27      	ldr	r2, [pc, #156]	; (8003824 <TIM_Base_SetConfig+0x12c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d003      	beq.n	8003792 <TIM_Base_SetConfig+0x9a>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a26      	ldr	r2, [pc, #152]	; (8003828 <TIM_Base_SetConfig+0x130>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d108      	bne.n	80037a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a10      	ldr	r2, [pc, #64]	; (800380c <TIM_Base_SetConfig+0x114>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d00f      	beq.n	80037f0 <TIM_Base_SetConfig+0xf8>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a12      	ldr	r2, [pc, #72]	; (800381c <TIM_Base_SetConfig+0x124>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d00b      	beq.n	80037f0 <TIM_Base_SetConfig+0xf8>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a11      	ldr	r2, [pc, #68]	; (8003820 <TIM_Base_SetConfig+0x128>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d007      	beq.n	80037f0 <TIM_Base_SetConfig+0xf8>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a10      	ldr	r2, [pc, #64]	; (8003824 <TIM_Base_SetConfig+0x12c>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d003      	beq.n	80037f0 <TIM_Base_SetConfig+0xf8>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a0f      	ldr	r2, [pc, #60]	; (8003828 <TIM_Base_SetConfig+0x130>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d103      	bne.n	80037f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	691a      	ldr	r2, [r3, #16]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	615a      	str	r2, [r3, #20]
}
 80037fe:	bf00      	nop
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40012c00 	.word	0x40012c00
 8003810:	40000400 	.word	0x40000400
 8003814:	40000800 	.word	0x40000800
 8003818:	40000c00 	.word	0x40000c00
 800381c:	40013400 	.word	0x40013400
 8003820:	40014000 	.word	0x40014000
 8003824:	40014400 	.word	0x40014400
 8003828:	40014800 	.word	0x40014800

0800382c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e040      	b.n	80038fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800387e:	2b00      	cmp	r3, #0
 8003880:	d106      	bne.n	8003890 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7fd fd12 	bl	80012b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2224      	movs	r2, #36	; 0x24
 8003894:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0201 	bic.w	r2, r2, #1
 80038a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d002      	beq.n	80038b4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 fc34 	bl	800411c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f979 	bl	8003bac <UART_SetConfig>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e01b      	b.n	80038fc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689a      	ldr	r2, [r3, #8]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0201 	orr.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 fcb3 	bl	8004260 <UART_CheckIdleState>
 80038fa:	4603      	mov	r3, r0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08a      	sub	sp, #40	; 0x28
 8003908:	af02      	add	r7, sp, #8
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	603b      	str	r3, [r7, #0]
 8003910:	4613      	mov	r3, r2
 8003912:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003918:	2b20      	cmp	r3, #32
 800391a:	d178      	bne.n	8003a0e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d002      	beq.n	8003928 <HAL_UART_Transmit+0x24>
 8003922:	88fb      	ldrh	r3, [r7, #6]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e071      	b.n	8003a10 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2221      	movs	r2, #33	; 0x21
 8003938:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800393a:	f7fd fedf 	bl	80016fc <HAL_GetTick>
 800393e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	88fa      	ldrh	r2, [r7, #6]
 8003944:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	88fa      	ldrh	r2, [r7, #6]
 800394c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003958:	d108      	bne.n	800396c <HAL_UART_Transmit+0x68>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d104      	bne.n	800396c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003962:	2300      	movs	r3, #0
 8003964:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	61bb      	str	r3, [r7, #24]
 800396a:	e003      	b.n	8003974 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003970:	2300      	movs	r3, #0
 8003972:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003974:	e030      	b.n	80039d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2200      	movs	r2, #0
 800397e:	2180      	movs	r1, #128	; 0x80
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 fd15 	bl	80043b0 <UART_WaitOnFlagUntilTimeout>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d004      	beq.n	8003996 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2220      	movs	r2, #32
 8003990:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e03c      	b.n	8003a10 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10b      	bne.n	80039b4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	881a      	ldrh	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039a8:	b292      	uxth	r2, r2
 80039aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	3302      	adds	r3, #2
 80039b0:	61bb      	str	r3, [r7, #24]
 80039b2:	e008      	b.n	80039c6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	781a      	ldrb	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	b292      	uxth	r2, r2
 80039be:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	3301      	adds	r3, #1
 80039c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039de:	b29b      	uxth	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1c8      	bne.n	8003976 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	2200      	movs	r2, #0
 80039ec:	2140      	movs	r1, #64	; 0x40
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 fcde 	bl	80043b0 <UART_WaitOnFlagUntilTimeout>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d004      	beq.n	8003a04 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2220      	movs	r2, #32
 80039fe:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e005      	b.n	8003a10 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2220      	movs	r2, #32
 8003a08:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	e000      	b.n	8003a10 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003a0e:	2302      	movs	r3, #2
  }
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3720      	adds	r7, #32
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08a      	sub	sp, #40	; 0x28
 8003a1c:	af02      	add	r7, sp, #8
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	603b      	str	r3, [r7, #0]
 8003a24:	4613      	mov	r3, r2
 8003a26:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a2e:	2b20      	cmp	r3, #32
 8003a30:	f040 80b6 	bne.w	8003ba0 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <HAL_UART_Receive+0x28>
 8003a3a:	88fb      	ldrh	r3, [r7, #6]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0ae      	b.n	8003ba2 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2222      	movs	r2, #34	; 0x22
 8003a50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a5a:	f7fd fe4f 	bl	80016fc <HAL_GetTick>
 8003a5e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	88fa      	ldrh	r2, [r7, #6]
 8003a64:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	88fa      	ldrh	r2, [r7, #6]
 8003a6c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a78:	d10e      	bne.n	8003a98 <HAL_UART_Receive+0x80>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d105      	bne.n	8003a8e <HAL_UART_Receive+0x76>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003a88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a8c:	e02d      	b.n	8003aea <HAL_UART_Receive+0xd2>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	22ff      	movs	r2, #255	; 0xff
 8003a92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a96:	e028      	b.n	8003aea <HAL_UART_Receive+0xd2>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10d      	bne.n	8003abc <HAL_UART_Receive+0xa4>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d104      	bne.n	8003ab2 <HAL_UART_Receive+0x9a>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	22ff      	movs	r2, #255	; 0xff
 8003aac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ab0:	e01b      	b.n	8003aea <HAL_UART_Receive+0xd2>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	227f      	movs	r2, #127	; 0x7f
 8003ab6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003aba:	e016      	b.n	8003aea <HAL_UART_Receive+0xd2>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ac4:	d10d      	bne.n	8003ae2 <HAL_UART_Receive+0xca>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d104      	bne.n	8003ad8 <HAL_UART_Receive+0xc0>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	227f      	movs	r2, #127	; 0x7f
 8003ad2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ad6:	e008      	b.n	8003aea <HAL_UART_Receive+0xd2>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	223f      	movs	r2, #63	; 0x3f
 8003adc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ae0:	e003      	b.n	8003aea <HAL_UART_Receive+0xd2>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003af0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003afa:	d108      	bne.n	8003b0e <HAL_UART_Receive+0xf6>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d104      	bne.n	8003b0e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003b04:	2300      	movs	r3, #0
 8003b06:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	61bb      	str	r3, [r7, #24]
 8003b0c:	e003      	b.n	8003b16 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b12:	2300      	movs	r3, #0
 8003b14:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003b16:	e037      	b.n	8003b88 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	2120      	movs	r1, #32
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 fc44 	bl	80043b0 <UART_WaitOnFlagUntilTimeout>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d005      	beq.n	8003b3a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2220      	movs	r2, #32
 8003b32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e033      	b.n	8003ba2 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10c      	bne.n	8003b5a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	8a7b      	ldrh	r3, [r7, #18]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	3302      	adds	r3, #2
 8003b56:	61bb      	str	r3, [r7, #24]
 8003b58:	e00d      	b.n	8003b76 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	8a7b      	ldrh	r3, [r7, #18]
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	4013      	ands	r3, r2
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	3301      	adds	r3, #1
 8003b74:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1c1      	bne.n	8003b18 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	e000      	b.n	8003ba2 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003ba0:	2302      	movs	r3, #2
  }
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3720      	adds	r7, #32
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
	...

08003bac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bb0:	b08a      	sub	sp, #40	; 0x28
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	69db      	ldr	r3, [r3, #28]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	4ba4      	ldr	r3, [pc, #656]	; (8003e6c <UART_SetConfig+0x2c0>)
 8003bdc:	4013      	ands	r3, r2
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	6812      	ldr	r2, [r2, #0]
 8003be2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003be4:	430b      	orrs	r3, r1
 8003be6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	68da      	ldr	r2, [r3, #12]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a99      	ldr	r2, [pc, #612]	; (8003e70 <UART_SetConfig+0x2c4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d004      	beq.n	8003c18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c14:	4313      	orrs	r3, r2
 8003c16:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a90      	ldr	r2, [pc, #576]	; (8003e74 <UART_SetConfig+0x2c8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d126      	bne.n	8003c84 <UART_SetConfig+0xd8>
 8003c36:	4b90      	ldr	r3, [pc, #576]	; (8003e78 <UART_SetConfig+0x2cc>)
 8003c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3c:	f003 0303 	and.w	r3, r3, #3
 8003c40:	2b03      	cmp	r3, #3
 8003c42:	d81b      	bhi.n	8003c7c <UART_SetConfig+0xd0>
 8003c44:	a201      	add	r2, pc, #4	; (adr r2, 8003c4c <UART_SetConfig+0xa0>)
 8003c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4a:	bf00      	nop
 8003c4c:	08003c5d 	.word	0x08003c5d
 8003c50:	08003c6d 	.word	0x08003c6d
 8003c54:	08003c65 	.word	0x08003c65
 8003c58:	08003c75 	.word	0x08003c75
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c62:	e116      	b.n	8003e92 <UART_SetConfig+0x2e6>
 8003c64:	2302      	movs	r3, #2
 8003c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c6a:	e112      	b.n	8003e92 <UART_SetConfig+0x2e6>
 8003c6c:	2304      	movs	r3, #4
 8003c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c72:	e10e      	b.n	8003e92 <UART_SetConfig+0x2e6>
 8003c74:	2308      	movs	r3, #8
 8003c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c7a:	e10a      	b.n	8003e92 <UART_SetConfig+0x2e6>
 8003c7c:	2310      	movs	r3, #16
 8003c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c82:	e106      	b.n	8003e92 <UART_SetConfig+0x2e6>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a7c      	ldr	r2, [pc, #496]	; (8003e7c <UART_SetConfig+0x2d0>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d138      	bne.n	8003d00 <UART_SetConfig+0x154>
 8003c8e:	4b7a      	ldr	r3, [pc, #488]	; (8003e78 <UART_SetConfig+0x2cc>)
 8003c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c94:	f003 030c 	and.w	r3, r3, #12
 8003c98:	2b0c      	cmp	r3, #12
 8003c9a:	d82d      	bhi.n	8003cf8 <UART_SetConfig+0x14c>
 8003c9c:	a201      	add	r2, pc, #4	; (adr r2, 8003ca4 <UART_SetConfig+0xf8>)
 8003c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca2:	bf00      	nop
 8003ca4:	08003cd9 	.word	0x08003cd9
 8003ca8:	08003cf9 	.word	0x08003cf9
 8003cac:	08003cf9 	.word	0x08003cf9
 8003cb0:	08003cf9 	.word	0x08003cf9
 8003cb4:	08003ce9 	.word	0x08003ce9
 8003cb8:	08003cf9 	.word	0x08003cf9
 8003cbc:	08003cf9 	.word	0x08003cf9
 8003cc0:	08003cf9 	.word	0x08003cf9
 8003cc4:	08003ce1 	.word	0x08003ce1
 8003cc8:	08003cf9 	.word	0x08003cf9
 8003ccc:	08003cf9 	.word	0x08003cf9
 8003cd0:	08003cf9 	.word	0x08003cf9
 8003cd4:	08003cf1 	.word	0x08003cf1
 8003cd8:	2300      	movs	r3, #0
 8003cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cde:	e0d8      	b.n	8003e92 <UART_SetConfig+0x2e6>
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ce6:	e0d4      	b.n	8003e92 <UART_SetConfig+0x2e6>
 8003ce8:	2304      	movs	r3, #4
 8003cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cee:	e0d0      	b.n	8003e92 <UART_SetConfig+0x2e6>
 8003cf0:	2308      	movs	r3, #8
 8003cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cf6:	e0cc      	b.n	8003e92 <UART_SetConfig+0x2e6>
 8003cf8:	2310      	movs	r3, #16
 8003cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cfe:	e0c8      	b.n	8003e92 <UART_SetConfig+0x2e6>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a5e      	ldr	r2, [pc, #376]	; (8003e80 <UART_SetConfig+0x2d4>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d125      	bne.n	8003d56 <UART_SetConfig+0x1aa>
 8003d0a:	4b5b      	ldr	r3, [pc, #364]	; (8003e78 <UART_SetConfig+0x2cc>)
 8003d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d10:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d14:	2b30      	cmp	r3, #48	; 0x30
 8003d16:	d016      	beq.n	8003d46 <UART_SetConfig+0x19a>
 8003d18:	2b30      	cmp	r3, #48	; 0x30
 8003d1a:	d818      	bhi.n	8003d4e <UART_SetConfig+0x1a2>
 8003d1c:	2b20      	cmp	r3, #32
 8003d1e:	d00a      	beq.n	8003d36 <UART_SetConfig+0x18a>
 8003d20:	2b20      	cmp	r3, #32
 8003d22:	d814      	bhi.n	8003d4e <UART_SetConfig+0x1a2>
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d002      	beq.n	8003d2e <UART_SetConfig+0x182>
 8003d28:	2b10      	cmp	r3, #16
 8003d2a:	d008      	beq.n	8003d3e <UART_SetConfig+0x192>
 8003d2c:	e00f      	b.n	8003d4e <UART_SetConfig+0x1a2>
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d34:	e0ad      	b.n	8003e92 <UART_SetConfig+0x2e6>
 8003d36:	2302      	movs	r3, #2
 8003d38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d3c:	e0a9      	b.n	8003e92 <UART_SetConfig+0x2e6>
 8003d3e:	2304      	movs	r3, #4
 8003d40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d44:	e0a5      	b.n	8003e92 <UART_SetConfig+0x2e6>
 8003d46:	2308      	movs	r3, #8
 8003d48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d4c:	e0a1      	b.n	8003e92 <UART_SetConfig+0x2e6>
 8003d4e:	2310      	movs	r3, #16
 8003d50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d54:	e09d      	b.n	8003e92 <UART_SetConfig+0x2e6>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a4a      	ldr	r2, [pc, #296]	; (8003e84 <UART_SetConfig+0x2d8>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d125      	bne.n	8003dac <UART_SetConfig+0x200>
 8003d60:	4b45      	ldr	r3, [pc, #276]	; (8003e78 <UART_SetConfig+0x2cc>)
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d6a:	2bc0      	cmp	r3, #192	; 0xc0
 8003d6c:	d016      	beq.n	8003d9c <UART_SetConfig+0x1f0>
 8003d6e:	2bc0      	cmp	r3, #192	; 0xc0
 8003d70:	d818      	bhi.n	8003da4 <UART_SetConfig+0x1f8>
 8003d72:	2b80      	cmp	r3, #128	; 0x80
 8003d74:	d00a      	beq.n	8003d8c <UART_SetConfig+0x1e0>
 8003d76:	2b80      	cmp	r3, #128	; 0x80
 8003d78:	d814      	bhi.n	8003da4 <UART_SetConfig+0x1f8>
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d002      	beq.n	8003d84 <UART_SetConfig+0x1d8>
 8003d7e:	2b40      	cmp	r3, #64	; 0x40
 8003d80:	d008      	beq.n	8003d94 <UART_SetConfig+0x1e8>
 8003d82:	e00f      	b.n	8003da4 <UART_SetConfig+0x1f8>
 8003d84:	2300      	movs	r3, #0
 8003d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d8a:	e082      	b.n	8003e92 <UART_SetConfig+0x2e6>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d92:	e07e      	b.n	8003e92 <UART_SetConfig+0x2e6>
 8003d94:	2304      	movs	r3, #4
 8003d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d9a:	e07a      	b.n	8003e92 <UART_SetConfig+0x2e6>
 8003d9c:	2308      	movs	r3, #8
 8003d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003da2:	e076      	b.n	8003e92 <UART_SetConfig+0x2e6>
 8003da4:	2310      	movs	r3, #16
 8003da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003daa:	e072      	b.n	8003e92 <UART_SetConfig+0x2e6>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a35      	ldr	r2, [pc, #212]	; (8003e88 <UART_SetConfig+0x2dc>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d12a      	bne.n	8003e0c <UART_SetConfig+0x260>
 8003db6:	4b30      	ldr	r3, [pc, #192]	; (8003e78 <UART_SetConfig+0x2cc>)
 8003db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dc4:	d01a      	beq.n	8003dfc <UART_SetConfig+0x250>
 8003dc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dca:	d81b      	bhi.n	8003e04 <UART_SetConfig+0x258>
 8003dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dd0:	d00c      	beq.n	8003dec <UART_SetConfig+0x240>
 8003dd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dd6:	d815      	bhi.n	8003e04 <UART_SetConfig+0x258>
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d003      	beq.n	8003de4 <UART_SetConfig+0x238>
 8003ddc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003de0:	d008      	beq.n	8003df4 <UART_SetConfig+0x248>
 8003de2:	e00f      	b.n	8003e04 <UART_SetConfig+0x258>
 8003de4:	2300      	movs	r3, #0
 8003de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dea:	e052      	b.n	8003e92 <UART_SetConfig+0x2e6>
 8003dec:	2302      	movs	r3, #2
 8003dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003df2:	e04e      	b.n	8003e92 <UART_SetConfig+0x2e6>
 8003df4:	2304      	movs	r3, #4
 8003df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dfa:	e04a      	b.n	8003e92 <UART_SetConfig+0x2e6>
 8003dfc:	2308      	movs	r3, #8
 8003dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e02:	e046      	b.n	8003e92 <UART_SetConfig+0x2e6>
 8003e04:	2310      	movs	r3, #16
 8003e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e0a:	e042      	b.n	8003e92 <UART_SetConfig+0x2e6>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a17      	ldr	r2, [pc, #92]	; (8003e70 <UART_SetConfig+0x2c4>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d13a      	bne.n	8003e8c <UART_SetConfig+0x2e0>
 8003e16:	4b18      	ldr	r3, [pc, #96]	; (8003e78 <UART_SetConfig+0x2cc>)
 8003e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e24:	d01a      	beq.n	8003e5c <UART_SetConfig+0x2b0>
 8003e26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e2a:	d81b      	bhi.n	8003e64 <UART_SetConfig+0x2b8>
 8003e2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e30:	d00c      	beq.n	8003e4c <UART_SetConfig+0x2a0>
 8003e32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e36:	d815      	bhi.n	8003e64 <UART_SetConfig+0x2b8>
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d003      	beq.n	8003e44 <UART_SetConfig+0x298>
 8003e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e40:	d008      	beq.n	8003e54 <UART_SetConfig+0x2a8>
 8003e42:	e00f      	b.n	8003e64 <UART_SetConfig+0x2b8>
 8003e44:	2300      	movs	r3, #0
 8003e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e4a:	e022      	b.n	8003e92 <UART_SetConfig+0x2e6>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e52:	e01e      	b.n	8003e92 <UART_SetConfig+0x2e6>
 8003e54:	2304      	movs	r3, #4
 8003e56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e5a:	e01a      	b.n	8003e92 <UART_SetConfig+0x2e6>
 8003e5c:	2308      	movs	r3, #8
 8003e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e62:	e016      	b.n	8003e92 <UART_SetConfig+0x2e6>
 8003e64:	2310      	movs	r3, #16
 8003e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e6a:	e012      	b.n	8003e92 <UART_SetConfig+0x2e6>
 8003e6c:	efff69f3 	.word	0xefff69f3
 8003e70:	40008000 	.word	0x40008000
 8003e74:	40013800 	.word	0x40013800
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	40004400 	.word	0x40004400
 8003e80:	40004800 	.word	0x40004800
 8003e84:	40004c00 	.word	0x40004c00
 8003e88:	40005000 	.word	0x40005000
 8003e8c:	2310      	movs	r3, #16
 8003e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a9f      	ldr	r2, [pc, #636]	; (8004114 <UART_SetConfig+0x568>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d17a      	bne.n	8003f92 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d824      	bhi.n	8003eee <UART_SetConfig+0x342>
 8003ea4:	a201      	add	r2, pc, #4	; (adr r2, 8003eac <UART_SetConfig+0x300>)
 8003ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eaa:	bf00      	nop
 8003eac:	08003ed1 	.word	0x08003ed1
 8003eb0:	08003eef 	.word	0x08003eef
 8003eb4:	08003ed9 	.word	0x08003ed9
 8003eb8:	08003eef 	.word	0x08003eef
 8003ebc:	08003edf 	.word	0x08003edf
 8003ec0:	08003eef 	.word	0x08003eef
 8003ec4:	08003eef 	.word	0x08003eef
 8003ec8:	08003eef 	.word	0x08003eef
 8003ecc:	08003ee7 	.word	0x08003ee7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ed0:	f7fe fc9c 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 8003ed4:	61f8      	str	r0, [r7, #28]
        break;
 8003ed6:	e010      	b.n	8003efa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ed8:	4b8f      	ldr	r3, [pc, #572]	; (8004118 <UART_SetConfig+0x56c>)
 8003eda:	61fb      	str	r3, [r7, #28]
        break;
 8003edc:	e00d      	b.n	8003efa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ede:	f7fe fbfd 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 8003ee2:	61f8      	str	r0, [r7, #28]
        break;
 8003ee4:	e009      	b.n	8003efa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eea:	61fb      	str	r3, [r7, #28]
        break;
 8003eec:	e005      	b.n	8003efa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ef8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 80fb 	beq.w	80040f8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	4613      	mov	r3, r2
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	4413      	add	r3, r2
 8003f0c:	69fa      	ldr	r2, [r7, #28]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d305      	bcc.n	8003f1e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f18:	69fa      	ldr	r2, [r7, #28]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d903      	bls.n	8003f26 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003f24:	e0e8      	b.n	80040f8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	461c      	mov	r4, r3
 8003f2c:	4615      	mov	r5, r2
 8003f2e:	f04f 0200 	mov.w	r2, #0
 8003f32:	f04f 0300 	mov.w	r3, #0
 8003f36:	022b      	lsls	r3, r5, #8
 8003f38:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003f3c:	0222      	lsls	r2, r4, #8
 8003f3e:	68f9      	ldr	r1, [r7, #12]
 8003f40:	6849      	ldr	r1, [r1, #4]
 8003f42:	0849      	lsrs	r1, r1, #1
 8003f44:	2000      	movs	r0, #0
 8003f46:	4688      	mov	r8, r1
 8003f48:	4681      	mov	r9, r0
 8003f4a:	eb12 0a08 	adds.w	sl, r2, r8
 8003f4e:	eb43 0b09 	adc.w	fp, r3, r9
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	603b      	str	r3, [r7, #0]
 8003f5a:	607a      	str	r2, [r7, #4]
 8003f5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f60:	4650      	mov	r0, sl
 8003f62:	4659      	mov	r1, fp
 8003f64:	f7fc fe30 	bl	8000bc8 <__aeabi_uldivmod>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f76:	d308      	bcc.n	8003f8a <UART_SetConfig+0x3de>
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f7e:	d204      	bcs.n	8003f8a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	60da      	str	r2, [r3, #12]
 8003f88:	e0b6      	b.n	80040f8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003f90:	e0b2      	b.n	80040f8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f9a:	d15e      	bne.n	800405a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003f9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fa0:	2b08      	cmp	r3, #8
 8003fa2:	d828      	bhi.n	8003ff6 <UART_SetConfig+0x44a>
 8003fa4:	a201      	add	r2, pc, #4	; (adr r2, 8003fac <UART_SetConfig+0x400>)
 8003fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003faa:	bf00      	nop
 8003fac:	08003fd1 	.word	0x08003fd1
 8003fb0:	08003fd9 	.word	0x08003fd9
 8003fb4:	08003fe1 	.word	0x08003fe1
 8003fb8:	08003ff7 	.word	0x08003ff7
 8003fbc:	08003fe7 	.word	0x08003fe7
 8003fc0:	08003ff7 	.word	0x08003ff7
 8003fc4:	08003ff7 	.word	0x08003ff7
 8003fc8:	08003ff7 	.word	0x08003ff7
 8003fcc:	08003fef 	.word	0x08003fef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fd0:	f7fe fc1c 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 8003fd4:	61f8      	str	r0, [r7, #28]
        break;
 8003fd6:	e014      	b.n	8004002 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fd8:	f7fe fc2e 	bl	8002838 <HAL_RCC_GetPCLK2Freq>
 8003fdc:	61f8      	str	r0, [r7, #28]
        break;
 8003fde:	e010      	b.n	8004002 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fe0:	4b4d      	ldr	r3, [pc, #308]	; (8004118 <UART_SetConfig+0x56c>)
 8003fe2:	61fb      	str	r3, [r7, #28]
        break;
 8003fe4:	e00d      	b.n	8004002 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fe6:	f7fe fb79 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 8003fea:	61f8      	str	r0, [r7, #28]
        break;
 8003fec:	e009      	b.n	8004002 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ff2:	61fb      	str	r3, [r7, #28]
        break;
 8003ff4:	e005      	b.n	8004002 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004000:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d077      	beq.n	80040f8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	005a      	lsls	r2, r3, #1
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	085b      	lsrs	r3, r3, #1
 8004012:	441a      	add	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	fbb2 f3f3 	udiv	r3, r2, r3
 800401c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	2b0f      	cmp	r3, #15
 8004022:	d916      	bls.n	8004052 <UART_SetConfig+0x4a6>
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800402a:	d212      	bcs.n	8004052 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	b29b      	uxth	r3, r3
 8004030:	f023 030f 	bic.w	r3, r3, #15
 8004034:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	085b      	lsrs	r3, r3, #1
 800403a:	b29b      	uxth	r3, r3
 800403c:	f003 0307 	and.w	r3, r3, #7
 8004040:	b29a      	uxth	r2, r3
 8004042:	8afb      	ldrh	r3, [r7, #22]
 8004044:	4313      	orrs	r3, r2
 8004046:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	8afa      	ldrh	r2, [r7, #22]
 800404e:	60da      	str	r2, [r3, #12]
 8004050:	e052      	b.n	80040f8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004058:	e04e      	b.n	80040f8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800405a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800405e:	2b08      	cmp	r3, #8
 8004060:	d827      	bhi.n	80040b2 <UART_SetConfig+0x506>
 8004062:	a201      	add	r2, pc, #4	; (adr r2, 8004068 <UART_SetConfig+0x4bc>)
 8004064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004068:	0800408d 	.word	0x0800408d
 800406c:	08004095 	.word	0x08004095
 8004070:	0800409d 	.word	0x0800409d
 8004074:	080040b3 	.word	0x080040b3
 8004078:	080040a3 	.word	0x080040a3
 800407c:	080040b3 	.word	0x080040b3
 8004080:	080040b3 	.word	0x080040b3
 8004084:	080040b3 	.word	0x080040b3
 8004088:	080040ab 	.word	0x080040ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800408c:	f7fe fbbe 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 8004090:	61f8      	str	r0, [r7, #28]
        break;
 8004092:	e014      	b.n	80040be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004094:	f7fe fbd0 	bl	8002838 <HAL_RCC_GetPCLK2Freq>
 8004098:	61f8      	str	r0, [r7, #28]
        break;
 800409a:	e010      	b.n	80040be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800409c:	4b1e      	ldr	r3, [pc, #120]	; (8004118 <UART_SetConfig+0x56c>)
 800409e:	61fb      	str	r3, [r7, #28]
        break;
 80040a0:	e00d      	b.n	80040be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040a2:	f7fe fb1b 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 80040a6:	61f8      	str	r0, [r7, #28]
        break;
 80040a8:	e009      	b.n	80040be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ae:	61fb      	str	r3, [r7, #28]
        break;
 80040b0:	e005      	b.n	80040be <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80040bc:	bf00      	nop
    }

    if (pclk != 0U)
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d019      	beq.n	80040f8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	085a      	lsrs	r2, r3, #1
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	441a      	add	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	2b0f      	cmp	r3, #15
 80040dc:	d909      	bls.n	80040f2 <UART_SetConfig+0x546>
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e4:	d205      	bcs.n	80040f2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	60da      	str	r2, [r3, #12]
 80040f0:	e002      	b.n	80040f8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004104:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004108:	4618      	mov	r0, r3
 800410a:	3728      	adds	r7, #40	; 0x28
 800410c:	46bd      	mov	sp, r7
 800410e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004112:	bf00      	nop
 8004114:	40008000 	.word	0x40008000
 8004118:	00f42400 	.word	0x00f42400

0800411c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00a      	beq.n	800418a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00a      	beq.n	80041ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	f003 0310 	and.w	r3, r3, #16
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00a      	beq.n	80041ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	f003 0320 	and.w	r3, r3, #32
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d01a      	beq.n	8004232 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800421a:	d10a      	bne.n	8004232 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00a      	beq.n	8004254 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	605a      	str	r2, [r3, #4]
  }
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b098      	sub	sp, #96	; 0x60
 8004264:	af02      	add	r7, sp, #8
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004270:	f7fd fa44 	bl	80016fc <HAL_GetTick>
 8004274:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0308 	and.w	r3, r3, #8
 8004280:	2b08      	cmp	r3, #8
 8004282:	d12e      	bne.n	80042e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004284:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800428c:	2200      	movs	r2, #0
 800428e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f88c 	bl	80043b0 <UART_WaitOnFlagUntilTimeout>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d021      	beq.n	80042e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a6:	e853 3f00 	ldrex	r3, [r3]
 80042aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042b2:	653b      	str	r3, [r7, #80]	; 0x50
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	461a      	mov	r2, r3
 80042ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042bc:	647b      	str	r3, [r7, #68]	; 0x44
 80042be:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042c4:	e841 2300 	strex	r3, r2, [r1]
 80042c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1e6      	bne.n	800429e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2220      	movs	r2, #32
 80042d4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e062      	b.n	80043a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	d149      	bne.n	8004384 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042f8:	2200      	movs	r2, #0
 80042fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f856 	bl	80043b0 <UART_WaitOnFlagUntilTimeout>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d03c      	beq.n	8004384 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004312:	e853 3f00 	ldrex	r3, [r3]
 8004316:	623b      	str	r3, [r7, #32]
   return(result);
 8004318:	6a3b      	ldr	r3, [r7, #32]
 800431a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800431e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	461a      	mov	r2, r3
 8004326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004328:	633b      	str	r3, [r7, #48]	; 0x30
 800432a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800432e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004330:	e841 2300 	strex	r3, r2, [r1]
 8004334:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1e6      	bne.n	800430a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	3308      	adds	r3, #8
 8004342:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	e853 3f00 	ldrex	r3, [r3]
 800434a:	60fb      	str	r3, [r7, #12]
   return(result);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 0301 	bic.w	r3, r3, #1
 8004352:	64bb      	str	r3, [r7, #72]	; 0x48
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	3308      	adds	r3, #8
 800435a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800435c:	61fa      	str	r2, [r7, #28]
 800435e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004360:	69b9      	ldr	r1, [r7, #24]
 8004362:	69fa      	ldr	r2, [r7, #28]
 8004364:	e841 2300 	strex	r3, r2, [r1]
 8004368:	617b      	str	r3, [r7, #20]
   return(result);
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1e5      	bne.n	800433c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2220      	movs	r2, #32
 8004374:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e011      	b.n	80043a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2220      	movs	r2, #32
 8004388:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2220      	movs	r2, #32
 800438e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3758      	adds	r7, #88	; 0x58
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	603b      	str	r3, [r7, #0]
 80043bc:	4613      	mov	r3, r2
 80043be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043c0:	e049      	b.n	8004456 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c8:	d045      	beq.n	8004456 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ca:	f7fd f997 	bl	80016fc <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d302      	bcc.n	80043e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e048      	b.n	8004476 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0304 	and.w	r3, r3, #4
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d031      	beq.n	8004456 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	f003 0308 	and.w	r3, r3, #8
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	d110      	bne.n	8004422 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2208      	movs	r2, #8
 8004406:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 f838 	bl	800447e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2208      	movs	r2, #8
 8004412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e029      	b.n	8004476 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	69db      	ldr	r3, [r3, #28]
 8004428:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800442c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004430:	d111      	bne.n	8004456 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800443a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 f81e 	bl	800447e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2220      	movs	r2, #32
 8004446:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e00f      	b.n	8004476 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	69da      	ldr	r2, [r3, #28]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	4013      	ands	r3, r2
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	429a      	cmp	r2, r3
 8004464:	bf0c      	ite	eq
 8004466:	2301      	moveq	r3, #1
 8004468:	2300      	movne	r3, #0
 800446a:	b2db      	uxtb	r3, r3
 800446c:	461a      	mov	r2, r3
 800446e:	79fb      	ldrb	r3, [r7, #7]
 8004470:	429a      	cmp	r2, r3
 8004472:	d0a6      	beq.n	80043c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800447e:	b480      	push	{r7}
 8004480:	b095      	sub	sp, #84	; 0x54
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800448e:	e853 3f00 	ldrex	r3, [r3]
 8004492:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004496:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800449a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	461a      	mov	r2, r3
 80044a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044a4:	643b      	str	r3, [r7, #64]	; 0x40
 80044a6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044ac:	e841 2300 	strex	r3, r2, [r1]
 80044b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1e6      	bne.n	8004486 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	3308      	adds	r3, #8
 80044be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	e853 3f00 	ldrex	r3, [r3]
 80044c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	f023 0301 	bic.w	r3, r3, #1
 80044ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3308      	adds	r3, #8
 80044d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044e0:	e841 2300 	strex	r3, r2, [r1]
 80044e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1e5      	bne.n	80044b8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d118      	bne.n	8004526 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	e853 3f00 	ldrex	r3, [r3]
 8004500:	60bb      	str	r3, [r7, #8]
   return(result);
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	f023 0310 	bic.w	r3, r3, #16
 8004508:	647b      	str	r3, [r7, #68]	; 0x44
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	461a      	mov	r2, r3
 8004510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004512:	61bb      	str	r3, [r7, #24]
 8004514:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004516:	6979      	ldr	r1, [r7, #20]
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	e841 2300 	strex	r3, r2, [r1]
 800451e:	613b      	str	r3, [r7, #16]
   return(result);
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1e6      	bne.n	80044f4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2220      	movs	r2, #32
 800452a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	669a      	str	r2, [r3, #104]	; 0x68
}
 800453a:	bf00      	nop
 800453c:	3754      	adds	r7, #84	; 0x54
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
	...

08004548 <__NVIC_SetPriority>:
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	4603      	mov	r3, r0
 8004550:	6039      	str	r1, [r7, #0]
 8004552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004558:	2b00      	cmp	r3, #0
 800455a:	db0a      	blt.n	8004572 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	b2da      	uxtb	r2, r3
 8004560:	490c      	ldr	r1, [pc, #48]	; (8004594 <__NVIC_SetPriority+0x4c>)
 8004562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004566:	0112      	lsls	r2, r2, #4
 8004568:	b2d2      	uxtb	r2, r2
 800456a:	440b      	add	r3, r1
 800456c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004570:	e00a      	b.n	8004588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	b2da      	uxtb	r2, r3
 8004576:	4908      	ldr	r1, [pc, #32]	; (8004598 <__NVIC_SetPriority+0x50>)
 8004578:	79fb      	ldrb	r3, [r7, #7]
 800457a:	f003 030f 	and.w	r3, r3, #15
 800457e:	3b04      	subs	r3, #4
 8004580:	0112      	lsls	r2, r2, #4
 8004582:	b2d2      	uxtb	r2, r2
 8004584:	440b      	add	r3, r1
 8004586:	761a      	strb	r2, [r3, #24]
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	e000e100 	.word	0xe000e100
 8004598:	e000ed00 	.word	0xe000ed00

0800459c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80045a0:	4b05      	ldr	r3, [pc, #20]	; (80045b8 <SysTick_Handler+0x1c>)
 80045a2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80045a4:	f001 ff3e 	bl	8006424 <xTaskGetSchedulerState>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d001      	beq.n	80045b2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80045ae:	f002 fd23 	bl	8006ff8 <xPortSysTickHandler>
  }
}
 80045b2:	bf00      	nop
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	e000e010 	.word	0xe000e010

080045bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80045c0:	2100      	movs	r1, #0
 80045c2:	f06f 0004 	mvn.w	r0, #4
 80045c6:	f7ff ffbf 	bl	8004548 <__NVIC_SetPriority>
#endif
}
 80045ca:	bf00      	nop
 80045cc:	bd80      	pop	{r7, pc}
	...

080045d0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045d6:	f3ef 8305 	mrs	r3, IPSR
 80045da:	603b      	str	r3, [r7, #0]
  return(result);
 80045dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80045e2:	f06f 0305 	mvn.w	r3, #5
 80045e6:	607b      	str	r3, [r7, #4]
 80045e8:	e00c      	b.n	8004604 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80045ea:	4b0a      	ldr	r3, [pc, #40]	; (8004614 <osKernelInitialize+0x44>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d105      	bne.n	80045fe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80045f2:	4b08      	ldr	r3, [pc, #32]	; (8004614 <osKernelInitialize+0x44>)
 80045f4:	2201      	movs	r2, #1
 80045f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80045f8:	2300      	movs	r3, #0
 80045fa:	607b      	str	r3, [r7, #4]
 80045fc:	e002      	b.n	8004604 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80045fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004602:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004604:	687b      	ldr	r3, [r7, #4]
}
 8004606:	4618      	mov	r0, r3
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	20000300 	.word	0x20000300

08004618 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800461e:	f3ef 8305 	mrs	r3, IPSR
 8004622:	603b      	str	r3, [r7, #0]
  return(result);
 8004624:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <osKernelStart+0x1a>
    stat = osErrorISR;
 800462a:	f06f 0305 	mvn.w	r3, #5
 800462e:	607b      	str	r3, [r7, #4]
 8004630:	e010      	b.n	8004654 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004632:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <osKernelStart+0x48>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d109      	bne.n	800464e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800463a:	f7ff ffbf 	bl	80045bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800463e:	4b08      	ldr	r3, [pc, #32]	; (8004660 <osKernelStart+0x48>)
 8004640:	2202      	movs	r2, #2
 8004642:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004644:	f001 fa92 	bl	8005b6c <vTaskStartScheduler>
      stat = osOK;
 8004648:	2300      	movs	r3, #0
 800464a:	607b      	str	r3, [r7, #4]
 800464c:	e002      	b.n	8004654 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800464e:	f04f 33ff 	mov.w	r3, #4294967295
 8004652:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004654:	687b      	ldr	r3, [r7, #4]
}
 8004656:	4618      	mov	r0, r3
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	20000300 	.word	0x20000300

08004664 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004664:	b580      	push	{r7, lr}
 8004666:	b08e      	sub	sp, #56	; 0x38
 8004668:	af04      	add	r7, sp, #16
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004670:	2300      	movs	r3, #0
 8004672:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004674:	f3ef 8305 	mrs	r3, IPSR
 8004678:	617b      	str	r3, [r7, #20]
  return(result);
 800467a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800467c:	2b00      	cmp	r3, #0
 800467e:	d17e      	bne.n	800477e <osThreadNew+0x11a>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d07b      	beq.n	800477e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004686:	2380      	movs	r3, #128	; 0x80
 8004688:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800468a:	2318      	movs	r3, #24
 800468c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800468e:	2300      	movs	r3, #0
 8004690:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004692:	f04f 33ff 	mov.w	r3, #4294967295
 8004696:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d045      	beq.n	800472a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d002      	beq.n	80046ac <osThreadNew+0x48>
        name = attr->name;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d002      	beq.n	80046ba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d008      	beq.n	80046d2 <osThreadNew+0x6e>
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	2b38      	cmp	r3, #56	; 0x38
 80046c4:	d805      	bhi.n	80046d2 <osThreadNew+0x6e>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <osThreadNew+0x72>
        return (NULL);
 80046d2:	2300      	movs	r3, #0
 80046d4:	e054      	b.n	8004780 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	089b      	lsrs	r3, r3, #2
 80046e4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00e      	beq.n	800470c <osThreadNew+0xa8>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	2bb7      	cmp	r3, #183	; 0xb7
 80046f4:	d90a      	bls.n	800470c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d006      	beq.n	800470c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d002      	beq.n	800470c <osThreadNew+0xa8>
        mem = 1;
 8004706:	2301      	movs	r3, #1
 8004708:	61bb      	str	r3, [r7, #24]
 800470a:	e010      	b.n	800472e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10c      	bne.n	800472e <osThreadNew+0xca>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d108      	bne.n	800472e <osThreadNew+0xca>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d104      	bne.n	800472e <osThreadNew+0xca>
          mem = 0;
 8004724:	2300      	movs	r3, #0
 8004726:	61bb      	str	r3, [r7, #24]
 8004728:	e001      	b.n	800472e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800472a:	2300      	movs	r3, #0
 800472c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d110      	bne.n	8004756 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800473c:	9202      	str	r2, [sp, #8]
 800473e:	9301      	str	r3, [sp, #4]
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	9300      	str	r3, [sp, #0]
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	6a3a      	ldr	r2, [r7, #32]
 8004748:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f001 f822 	bl	8005794 <xTaskCreateStatic>
 8004750:	4603      	mov	r3, r0
 8004752:	613b      	str	r3, [r7, #16]
 8004754:	e013      	b.n	800477e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d110      	bne.n	800477e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	b29a      	uxth	r2, r3
 8004760:	f107 0310 	add.w	r3, r7, #16
 8004764:	9301      	str	r3, [sp, #4]
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	9300      	str	r3, [sp, #0]
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f001 f86d 	bl	800584e <xTaskCreate>
 8004774:	4603      	mov	r3, r0
 8004776:	2b01      	cmp	r3, #1
 8004778:	d001      	beq.n	800477e <osThreadNew+0x11a>
            hTask = NULL;
 800477a:	2300      	movs	r3, #0
 800477c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800477e:	693b      	ldr	r3, [r7, #16]
}
 8004780:	4618      	mov	r0, r3
 8004782:	3728      	adds	r7, #40	; 0x28
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004790:	f3ef 8305 	mrs	r3, IPSR
 8004794:	60bb      	str	r3, [r7, #8]
  return(result);
 8004796:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <osDelay+0x1c>
    stat = osErrorISR;
 800479c:	f06f 0305 	mvn.w	r3, #5
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	e007      	b.n	80047b4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80047a4:	2300      	movs	r3, #0
 80047a6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d002      	beq.n	80047b4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f001 f9a8 	bl	8005b04 <vTaskDelay>
    }
  }

  return (stat);
 80047b4:	68fb      	ldr	r3, [r7, #12]
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80047be:	b580      	push	{r7, lr}
 80047c0:	b08a      	sub	sp, #40	; 0x28
 80047c2:	af02      	add	r7, sp, #8
 80047c4:	60f8      	str	r0, [r7, #12]
 80047c6:	60b9      	str	r1, [r7, #8]
 80047c8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80047ca:	2300      	movs	r3, #0
 80047cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047ce:	f3ef 8305 	mrs	r3, IPSR
 80047d2:	613b      	str	r3, [r7, #16]
  return(result);
 80047d4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d15f      	bne.n	800489a <osMessageQueueNew+0xdc>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d05c      	beq.n	800489a <osMessageQueueNew+0xdc>
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d059      	beq.n	800489a <osMessageQueueNew+0xdc>
    mem = -1;
 80047e6:	f04f 33ff 	mov.w	r3, #4294967295
 80047ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d029      	beq.n	8004846 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d012      	beq.n	8004820 <osMessageQueueNew+0x62>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	2b4f      	cmp	r3, #79	; 0x4f
 8004800:	d90e      	bls.n	8004820 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00a      	beq.n	8004820 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	695a      	ldr	r2, [r3, #20]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	68b9      	ldr	r1, [r7, #8]
 8004812:	fb01 f303 	mul.w	r3, r1, r3
 8004816:	429a      	cmp	r2, r3
 8004818:	d302      	bcc.n	8004820 <osMessageQueueNew+0x62>
        mem = 1;
 800481a:	2301      	movs	r3, #1
 800481c:	61bb      	str	r3, [r7, #24]
 800481e:	e014      	b.n	800484a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d110      	bne.n	800484a <osMessageQueueNew+0x8c>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10c      	bne.n	800484a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004834:	2b00      	cmp	r3, #0
 8004836:	d108      	bne.n	800484a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d104      	bne.n	800484a <osMessageQueueNew+0x8c>
          mem = 0;
 8004840:	2300      	movs	r3, #0
 8004842:	61bb      	str	r3, [r7, #24]
 8004844:	e001      	b.n	800484a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004846:	2300      	movs	r3, #0
 8004848:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d10b      	bne.n	8004868 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	691a      	ldr	r2, [r3, #16]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	2100      	movs	r1, #0
 800485a:	9100      	str	r1, [sp, #0]
 800485c:	68b9      	ldr	r1, [r7, #8]
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 fa5a 	bl	8004d18 <xQueueGenericCreateStatic>
 8004864:	61f8      	str	r0, [r7, #28]
 8004866:	e008      	b.n	800487a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d105      	bne.n	800487a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800486e:	2200      	movs	r2, #0
 8004870:	68b9      	ldr	r1, [r7, #8]
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 fac8 	bl	8004e08 <xQueueGenericCreate>
 8004878:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00c      	beq.n	800489a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <osMessageQueueNew+0xd0>
        name = attr->name;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	617b      	str	r3, [r7, #20]
 800488c:	e001      	b.n	8004892 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800488e:	2300      	movs	r3, #0
 8004890:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004892:	6979      	ldr	r1, [r7, #20]
 8004894:	69f8      	ldr	r0, [r7, #28]
 8004896:	f000 ff1f 	bl	80056d8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800489a:	69fb      	ldr	r3, [r7, #28]
}
 800489c:	4618      	mov	r0, r3
 800489e:	3720      	adds	r7, #32
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b088      	sub	sp, #32
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	603b      	str	r3, [r7, #0]
 80048b0:	4613      	mov	r3, r2
 80048b2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80048b8:	2300      	movs	r3, #0
 80048ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048bc:	f3ef 8305 	mrs	r3, IPSR
 80048c0:	617b      	str	r3, [r7, #20]
  return(result);
 80048c2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d028      	beq.n	800491a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d005      	beq.n	80048da <osMessageQueuePut+0x36>
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d002      	beq.n	80048da <osMessageQueuePut+0x36>
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80048da:	f06f 0303 	mvn.w	r3, #3
 80048de:	61fb      	str	r3, [r7, #28]
 80048e0:	e038      	b.n	8004954 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80048e2:	2300      	movs	r3, #0
 80048e4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80048e6:	f107 0210 	add.w	r2, r7, #16
 80048ea:	2300      	movs	r3, #0
 80048ec:	68b9      	ldr	r1, [r7, #8]
 80048ee:	69b8      	ldr	r0, [r7, #24]
 80048f0:	f000 fbe6 	bl	80050c0 <xQueueGenericSendFromISR>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d003      	beq.n	8004902 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80048fa:	f06f 0302 	mvn.w	r3, #2
 80048fe:	61fb      	str	r3, [r7, #28]
 8004900:	e028      	b.n	8004954 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d025      	beq.n	8004954 <osMessageQueuePut+0xb0>
 8004908:	4b15      	ldr	r3, [pc, #84]	; (8004960 <osMessageQueuePut+0xbc>)
 800490a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	f3bf 8f4f 	dsb	sy
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	e01c      	b.n	8004954 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d002      	beq.n	8004926 <osMessageQueuePut+0x82>
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d103      	bne.n	800492e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004926:	f06f 0303 	mvn.w	r3, #3
 800492a:	61fb      	str	r3, [r7, #28]
 800492c:	e012      	b.n	8004954 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800492e:	2300      	movs	r3, #0
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	68b9      	ldr	r1, [r7, #8]
 8004934:	69b8      	ldr	r0, [r7, #24]
 8004936:	f000 fac5 	bl	8004ec4 <xQueueGenericSend>
 800493a:	4603      	mov	r3, r0
 800493c:	2b01      	cmp	r3, #1
 800493e:	d009      	beq.n	8004954 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004946:	f06f 0301 	mvn.w	r3, #1
 800494a:	61fb      	str	r3, [r7, #28]
 800494c:	e002      	b.n	8004954 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800494e:	f06f 0302 	mvn.w	r3, #2
 8004952:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004954:	69fb      	ldr	r3, [r7, #28]
}
 8004956:	4618      	mov	r0, r3
 8004958:	3720      	adds	r7, #32
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	e000ed04 	.word	0xe000ed04

08004964 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004964:	b580      	push	{r7, lr}
 8004966:	b088      	sub	sp, #32
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
 8004970:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004976:	2300      	movs	r3, #0
 8004978:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800497a:	f3ef 8305 	mrs	r3, IPSR
 800497e:	617b      	str	r3, [r7, #20]
  return(result);
 8004980:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004982:	2b00      	cmp	r3, #0
 8004984:	d028      	beq.n	80049d8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d005      	beq.n	8004998 <osMessageQueueGet+0x34>
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d002      	beq.n	8004998 <osMessageQueueGet+0x34>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d003      	beq.n	80049a0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004998:	f06f 0303 	mvn.w	r3, #3
 800499c:	61fb      	str	r3, [r7, #28]
 800499e:	e037      	b.n	8004a10 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80049a0:	2300      	movs	r3, #0
 80049a2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80049a4:	f107 0310 	add.w	r3, r7, #16
 80049a8:	461a      	mov	r2, r3
 80049aa:	68b9      	ldr	r1, [r7, #8]
 80049ac:	69b8      	ldr	r0, [r7, #24]
 80049ae:	f000 fd03 	bl	80053b8 <xQueueReceiveFromISR>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d003      	beq.n	80049c0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80049b8:	f06f 0302 	mvn.w	r3, #2
 80049bc:	61fb      	str	r3, [r7, #28]
 80049be:	e027      	b.n	8004a10 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d024      	beq.n	8004a10 <osMessageQueueGet+0xac>
 80049c6:	4b15      	ldr	r3, [pc, #84]	; (8004a1c <osMessageQueueGet+0xb8>)
 80049c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	e01b      	b.n	8004a10 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d002      	beq.n	80049e4 <osMessageQueueGet+0x80>
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d103      	bne.n	80049ec <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80049e4:	f06f 0303 	mvn.w	r3, #3
 80049e8:	61fb      	str	r3, [r7, #28]
 80049ea:	e011      	b.n	8004a10 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	68b9      	ldr	r1, [r7, #8]
 80049f0:	69b8      	ldr	r0, [r7, #24]
 80049f2:	f000 fc01 	bl	80051f8 <xQueueReceive>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d009      	beq.n	8004a10 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004a02:	f06f 0301 	mvn.w	r3, #1
 8004a06:	61fb      	str	r3, [r7, #28]
 8004a08:	e002      	b.n	8004a10 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004a0a:	f06f 0302 	mvn.w	r3, #2
 8004a0e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004a10:	69fb      	ldr	r3, [r7, #28]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3720      	adds	r7, #32
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	e000ed04 	.word	0xe000ed04

08004a20 <osMessageQueueGetCapacity>:

uint32_t osMessageQueueGetCapacity (osMessageQueueId_t mq_id) {
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	60bb      	str	r3, [r7, #8]
  uint32_t capacity;

  if (mq == NULL) {
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d102      	bne.n	8004a38 <osMessageQueueGetCapacity+0x18>
    capacity = 0U;
 8004a32:	2300      	movs	r3, #0
 8004a34:	60fb      	str	r3, [r7, #12]
 8004a36:	e002      	b.n	8004a3e <osMessageQueueGetCapacity+0x1e>
  } else {
    /* capacity = pxQueue->uxLength */
    capacity = mq->uxDummy4[1];
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3c:	60fb      	str	r3, [r7, #12]
  }

  return (capacity);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3714      	adds	r7, #20
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <osMessageQueueGetMsgSize>:

uint32_t osMessageQueueGetMsgSize (osMessageQueueId_t mq_id) {
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	60bb      	str	r3, [r7, #8]
  uint32_t size;

  if (mq == NULL) {
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d102      	bne.n	8004a64 <osMessageQueueGetMsgSize+0x18>
    size = 0U;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	60fb      	str	r3, [r7, #12]
 8004a62:	e002      	b.n	8004a6a <osMessageQueueGetMsgSize+0x1e>
  } else {
    /* size = pxQueue->uxItemSize */
    size = mq->uxDummy4[2];
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a68:	60fb      	str	r3, [r7, #12]
  }

  return (size);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3714      	adds	r7, #20
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4a07      	ldr	r2, [pc, #28]	; (8004aa4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004a88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	4a06      	ldr	r2, [pc, #24]	; (8004aa8 <vApplicationGetIdleTaskMemory+0x30>)
 8004a8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2280      	movs	r2, #128	; 0x80
 8004a94:	601a      	str	r2, [r3, #0]
}
 8004a96:	bf00      	nop
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	20000304 	.word	0x20000304
 8004aa8:	200003bc 	.word	0x200003bc

08004aac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4a07      	ldr	r2, [pc, #28]	; (8004ad8 <vApplicationGetTimerTaskMemory+0x2c>)
 8004abc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	4a06      	ldr	r2, [pc, #24]	; (8004adc <vApplicationGetTimerTaskMemory+0x30>)
 8004ac2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004aca:	601a      	str	r2, [r3, #0]
}
 8004acc:	bf00      	nop
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	200005bc 	.word	0x200005bc
 8004adc:	20000674 	.word	0x20000674

08004ae0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f103 0208 	add.w	r2, r3, #8
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f04f 32ff 	mov.w	r2, #4294967295
 8004af8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f103 0208 	add.w	r2, r3, #8
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f103 0208 	add.w	r2, r3, #8
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004b2e:	bf00      	nop
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b085      	sub	sp, #20
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
 8004b42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	1c5a      	adds	r2, r3, #1
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	601a      	str	r2, [r3, #0]
}
 8004b76:	bf00      	nop
 8004b78:	3714      	adds	r7, #20
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b82:	b480      	push	{r7}
 8004b84:	b085      	sub	sp, #20
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
 8004b8a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b98:	d103      	bne.n	8004ba2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	e00c      	b.n	8004bbc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	3308      	adds	r3, #8
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	e002      	b.n	8004bb0 <vListInsert+0x2e>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d2f6      	bcs.n	8004baa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	1c5a      	adds	r2, r3, #1
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	601a      	str	r2, [r3, #0]
}
 8004be8:	bf00      	nop
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	6892      	ldr	r2, [r2, #8]
 8004c0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	6852      	ldr	r2, [r2, #4]
 8004c14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d103      	bne.n	8004c28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689a      	ldr	r2, [r3, #8]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	1e5a      	subs	r2, r3, #1
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3714      	adds	r7, #20
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10a      	bne.n	8004c72 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c60:	f383 8811 	msr	BASEPRI, r3
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004c6e:	bf00      	nop
 8004c70:	e7fe      	b.n	8004c70 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004c72:	f002 f92f 	bl	8006ed4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7e:	68f9      	ldr	r1, [r7, #12]
 8004c80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c82:	fb01 f303 	mul.w	r3, r1, r3
 8004c86:	441a      	add	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	68f9      	ldr	r1, [r7, #12]
 8004ca6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ca8:	fb01 f303 	mul.w	r3, r1, r3
 8004cac:	441a      	add	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	22ff      	movs	r2, #255	; 0xff
 8004cb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	22ff      	movs	r2, #255	; 0xff
 8004cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d114      	bne.n	8004cf2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d01a      	beq.n	8004d06 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	3310      	adds	r3, #16
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f001 f9e3 	bl	80060a0 <xTaskRemoveFromEventList>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d012      	beq.n	8004d06 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004ce0:	4b0c      	ldr	r3, [pc, #48]	; (8004d14 <xQueueGenericReset+0xcc>)
 8004ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	f3bf 8f6f 	isb	sy
 8004cf0:	e009      	b.n	8004d06 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	3310      	adds	r3, #16
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7ff fef2 	bl	8004ae0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	3324      	adds	r3, #36	; 0x24
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7ff feed 	bl	8004ae0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004d06:	f002 f915 	bl	8006f34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004d0a:	2301      	movs	r3, #1
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	e000ed04 	.word	0xe000ed04

08004d18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b08e      	sub	sp, #56	; 0x38
 8004d1c:	af02      	add	r7, sp, #8
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
 8004d24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10a      	bne.n	8004d42 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d30:	f383 8811 	msr	BASEPRI, r3
 8004d34:	f3bf 8f6f 	isb	sy
 8004d38:	f3bf 8f4f 	dsb	sy
 8004d3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d3e:	bf00      	nop
 8004d40:	e7fe      	b.n	8004d40 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10a      	bne.n	8004d5e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4c:	f383 8811 	msr	BASEPRI, r3
 8004d50:	f3bf 8f6f 	isb	sy
 8004d54:	f3bf 8f4f 	dsb	sy
 8004d58:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d5a:	bf00      	nop
 8004d5c:	e7fe      	b.n	8004d5c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <xQueueGenericCreateStatic+0x52>
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <xQueueGenericCreateStatic+0x56>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e000      	b.n	8004d70 <xQueueGenericCreateStatic+0x58>
 8004d6e:	2300      	movs	r3, #0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10a      	bne.n	8004d8a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d78:	f383 8811 	msr	BASEPRI, r3
 8004d7c:	f3bf 8f6f 	isb	sy
 8004d80:	f3bf 8f4f 	dsb	sy
 8004d84:	623b      	str	r3, [r7, #32]
}
 8004d86:	bf00      	nop
 8004d88:	e7fe      	b.n	8004d88 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d102      	bne.n	8004d96 <xQueueGenericCreateStatic+0x7e>
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <xQueueGenericCreateStatic+0x82>
 8004d96:	2301      	movs	r3, #1
 8004d98:	e000      	b.n	8004d9c <xQueueGenericCreateStatic+0x84>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10a      	bne.n	8004db6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da4:	f383 8811 	msr	BASEPRI, r3
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	61fb      	str	r3, [r7, #28]
}
 8004db2:	bf00      	nop
 8004db4:	e7fe      	b.n	8004db4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004db6:	2350      	movs	r3, #80	; 0x50
 8004db8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2b50      	cmp	r3, #80	; 0x50
 8004dbe:	d00a      	beq.n	8004dd6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc4:	f383 8811 	msr	BASEPRI, r3
 8004dc8:	f3bf 8f6f 	isb	sy
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	61bb      	str	r3, [r7, #24]
}
 8004dd2:	bf00      	nop
 8004dd4:	e7fe      	b.n	8004dd4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004dd6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00d      	beq.n	8004dfe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004dea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	4613      	mov	r3, r2
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	68b9      	ldr	r1, [r7, #8]
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f000 f83f 	bl	8004e7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3730      	adds	r7, #48	; 0x30
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b08a      	sub	sp, #40	; 0x28
 8004e0c:	af02      	add	r7, sp, #8
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	4613      	mov	r3, r2
 8004e14:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10a      	bne.n	8004e32 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e20:	f383 8811 	msr	BASEPRI, r3
 8004e24:	f3bf 8f6f 	isb	sy
 8004e28:	f3bf 8f4f 	dsb	sy
 8004e2c:	613b      	str	r3, [r7, #16]
}
 8004e2e:	bf00      	nop
 8004e30:	e7fe      	b.n	8004e30 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	fb02 f303 	mul.w	r3, r2, r3
 8004e3a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	3350      	adds	r3, #80	; 0x50
 8004e40:	4618      	mov	r0, r3
 8004e42:	f002 f969 	bl	8007118 <pvPortMalloc>
 8004e46:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d011      	beq.n	8004e72 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	3350      	adds	r3, #80	; 0x50
 8004e56:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e60:	79fa      	ldrb	r2, [r7, #7]
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	4613      	mov	r3, r2
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	68b9      	ldr	r1, [r7, #8]
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f000 f805 	bl	8004e7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e72:	69bb      	ldr	r3, [r7, #24]
	}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3720      	adds	r7, #32
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
 8004e88:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d103      	bne.n	8004e98 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	69ba      	ldr	r2, [r7, #24]
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	e002      	b.n	8004e9e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004eaa:	2101      	movs	r1, #1
 8004eac:	69b8      	ldr	r0, [r7, #24]
 8004eae:	f7ff fecb 	bl	8004c48 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	78fa      	ldrb	r2, [r7, #3]
 8004eb6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004eba:	bf00      	nop
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
	...

08004ec4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b08e      	sub	sp, #56	; 0x38
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
 8004ed0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10a      	bne.n	8004ef6 <xQueueGenericSend+0x32>
	__asm volatile
 8004ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee4:	f383 8811 	msr	BASEPRI, r3
 8004ee8:	f3bf 8f6f 	isb	sy
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004ef2:	bf00      	nop
 8004ef4:	e7fe      	b.n	8004ef4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d103      	bne.n	8004f04 <xQueueGenericSend+0x40>
 8004efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <xQueueGenericSend+0x44>
 8004f04:	2301      	movs	r3, #1
 8004f06:	e000      	b.n	8004f0a <xQueueGenericSend+0x46>
 8004f08:	2300      	movs	r3, #0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10a      	bne.n	8004f24 <xQueueGenericSend+0x60>
	__asm volatile
 8004f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f12:	f383 8811 	msr	BASEPRI, r3
 8004f16:	f3bf 8f6f 	isb	sy
 8004f1a:	f3bf 8f4f 	dsb	sy
 8004f1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f20:	bf00      	nop
 8004f22:	e7fe      	b.n	8004f22 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d103      	bne.n	8004f32 <xQueueGenericSend+0x6e>
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d101      	bne.n	8004f36 <xQueueGenericSend+0x72>
 8004f32:	2301      	movs	r3, #1
 8004f34:	e000      	b.n	8004f38 <xQueueGenericSend+0x74>
 8004f36:	2300      	movs	r3, #0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d10a      	bne.n	8004f52 <xQueueGenericSend+0x8e>
	__asm volatile
 8004f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f40:	f383 8811 	msr	BASEPRI, r3
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	623b      	str	r3, [r7, #32]
}
 8004f4e:	bf00      	nop
 8004f50:	e7fe      	b.n	8004f50 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f52:	f001 fa67 	bl	8006424 <xTaskGetSchedulerState>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d102      	bne.n	8004f62 <xQueueGenericSend+0x9e>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <xQueueGenericSend+0xa2>
 8004f62:	2301      	movs	r3, #1
 8004f64:	e000      	b.n	8004f68 <xQueueGenericSend+0xa4>
 8004f66:	2300      	movs	r3, #0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10a      	bne.n	8004f82 <xQueueGenericSend+0xbe>
	__asm volatile
 8004f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f70:	f383 8811 	msr	BASEPRI, r3
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	61fb      	str	r3, [r7, #28]
}
 8004f7e:	bf00      	nop
 8004f80:	e7fe      	b.n	8004f80 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f82:	f001 ffa7 	bl	8006ed4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d302      	bcc.n	8004f98 <xQueueGenericSend+0xd4>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d129      	bne.n	8004fec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f98:	683a      	ldr	r2, [r7, #0]
 8004f9a:	68b9      	ldr	r1, [r7, #8]
 8004f9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f9e:	f000 fa8b 	bl	80054b8 <prvCopyDataToQueue>
 8004fa2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d010      	beq.n	8004fce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fae:	3324      	adds	r3, #36	; 0x24
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f001 f875 	bl	80060a0 <xTaskRemoveFromEventList>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d013      	beq.n	8004fe4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004fbc:	4b3f      	ldr	r3, [pc, #252]	; (80050bc <xQueueGenericSend+0x1f8>)
 8004fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	f3bf 8f4f 	dsb	sy
 8004fc8:	f3bf 8f6f 	isb	sy
 8004fcc:	e00a      	b.n	8004fe4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d007      	beq.n	8004fe4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004fd4:	4b39      	ldr	r3, [pc, #228]	; (80050bc <xQueueGenericSend+0x1f8>)
 8004fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004fe4:	f001 ffa6 	bl	8006f34 <vPortExitCritical>
				return pdPASS;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e063      	b.n	80050b4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d103      	bne.n	8004ffa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ff2:	f001 ff9f 	bl	8006f34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	e05c      	b.n	80050b4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d106      	bne.n	800500e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005000:	f107 0314 	add.w	r3, r7, #20
 8005004:	4618      	mov	r0, r3
 8005006:	f001 f8af 	bl	8006168 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800500a:	2301      	movs	r3, #1
 800500c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800500e:	f001 ff91 	bl	8006f34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005012:	f000 fe1b 	bl	8005c4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005016:	f001 ff5d 	bl	8006ed4 <vPortEnterCritical>
 800501a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005020:	b25b      	sxtb	r3, r3
 8005022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005026:	d103      	bne.n	8005030 <xQueueGenericSend+0x16c>
 8005028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502a:	2200      	movs	r2, #0
 800502c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005032:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005036:	b25b      	sxtb	r3, r3
 8005038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503c:	d103      	bne.n	8005046 <xQueueGenericSend+0x182>
 800503e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005046:	f001 ff75 	bl	8006f34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800504a:	1d3a      	adds	r2, r7, #4
 800504c:	f107 0314 	add.w	r3, r7, #20
 8005050:	4611      	mov	r1, r2
 8005052:	4618      	mov	r0, r3
 8005054:	f001 f89e 	bl	8006194 <xTaskCheckForTimeOut>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d124      	bne.n	80050a8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800505e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005060:	f000 fb22 	bl	80056a8 <prvIsQueueFull>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d018      	beq.n	800509c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800506a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506c:	3310      	adds	r3, #16
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	4611      	mov	r1, r2
 8005072:	4618      	mov	r0, r3
 8005074:	f000 ffc4 	bl	8006000 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005078:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800507a:	f000 faad 	bl	80055d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800507e:	f000 fdf3 	bl	8005c68 <xTaskResumeAll>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	f47f af7c 	bne.w	8004f82 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800508a:	4b0c      	ldr	r3, [pc, #48]	; (80050bc <xQueueGenericSend+0x1f8>)
 800508c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	f3bf 8f4f 	dsb	sy
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	e772      	b.n	8004f82 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800509c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800509e:	f000 fa9b 	bl	80055d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050a2:	f000 fde1 	bl	8005c68 <xTaskResumeAll>
 80050a6:	e76c      	b.n	8004f82 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80050a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050aa:	f000 fa95 	bl	80055d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050ae:	f000 fddb 	bl	8005c68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80050b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3738      	adds	r7, #56	; 0x38
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	e000ed04 	.word	0xe000ed04

080050c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b090      	sub	sp, #64	; 0x40
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
 80050cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80050d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10a      	bne.n	80050ee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80050d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050dc:	f383 8811 	msr	BASEPRI, r3
 80050e0:	f3bf 8f6f 	isb	sy
 80050e4:	f3bf 8f4f 	dsb	sy
 80050e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80050ea:	bf00      	nop
 80050ec:	e7fe      	b.n	80050ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d103      	bne.n	80050fc <xQueueGenericSendFromISR+0x3c>
 80050f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <xQueueGenericSendFromISR+0x40>
 80050fc:	2301      	movs	r3, #1
 80050fe:	e000      	b.n	8005102 <xQueueGenericSendFromISR+0x42>
 8005100:	2300      	movs	r3, #0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10a      	bne.n	800511c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510a:	f383 8811 	msr	BASEPRI, r3
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f3bf 8f4f 	dsb	sy
 8005116:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005118:	bf00      	nop
 800511a:	e7fe      	b.n	800511a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	2b02      	cmp	r3, #2
 8005120:	d103      	bne.n	800512a <xQueueGenericSendFromISR+0x6a>
 8005122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005126:	2b01      	cmp	r3, #1
 8005128:	d101      	bne.n	800512e <xQueueGenericSendFromISR+0x6e>
 800512a:	2301      	movs	r3, #1
 800512c:	e000      	b.n	8005130 <xQueueGenericSendFromISR+0x70>
 800512e:	2300      	movs	r3, #0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10a      	bne.n	800514a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005138:	f383 8811 	msr	BASEPRI, r3
 800513c:	f3bf 8f6f 	isb	sy
 8005140:	f3bf 8f4f 	dsb	sy
 8005144:	623b      	str	r3, [r7, #32]
}
 8005146:	bf00      	nop
 8005148:	e7fe      	b.n	8005148 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800514a:	f001 ffa5 	bl	8007098 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800514e:	f3ef 8211 	mrs	r2, BASEPRI
 8005152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	61fa      	str	r2, [r7, #28]
 8005164:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005166:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005168:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800516a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800516e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005172:	429a      	cmp	r2, r3
 8005174:	d302      	bcc.n	800517c <xQueueGenericSendFromISR+0xbc>
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b02      	cmp	r3, #2
 800517a:	d12f      	bne.n	80051dc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800517c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	68b9      	ldr	r1, [r7, #8]
 8005190:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005192:	f000 f991 	bl	80054b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005196:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800519a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519e:	d112      	bne.n	80051c6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d016      	beq.n	80051d6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051aa:	3324      	adds	r3, #36	; 0x24
 80051ac:	4618      	mov	r0, r3
 80051ae:	f000 ff77 	bl	80060a0 <xTaskRemoveFromEventList>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00e      	beq.n	80051d6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00b      	beq.n	80051d6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	601a      	str	r2, [r3, #0]
 80051c4:	e007      	b.n	80051d6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80051c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80051ca:	3301      	adds	r3, #1
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	b25a      	sxtb	r2, r3
 80051d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80051d6:	2301      	movs	r3, #1
 80051d8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80051da:	e001      	b.n	80051e0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80051dc:	2300      	movs	r3, #0
 80051de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051e2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80051ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80051ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3740      	adds	r7, #64	; 0x40
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
	...

080051f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b08c      	sub	sp, #48	; 0x30
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005204:	2300      	movs	r3, #0
 8005206:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10a      	bne.n	8005228 <xQueueReceive+0x30>
	__asm volatile
 8005212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005216:	f383 8811 	msr	BASEPRI, r3
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	623b      	str	r3, [r7, #32]
}
 8005224:	bf00      	nop
 8005226:	e7fe      	b.n	8005226 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d103      	bne.n	8005236 <xQueueReceive+0x3e>
 800522e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <xQueueReceive+0x42>
 8005236:	2301      	movs	r3, #1
 8005238:	e000      	b.n	800523c <xQueueReceive+0x44>
 800523a:	2300      	movs	r3, #0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10a      	bne.n	8005256 <xQueueReceive+0x5e>
	__asm volatile
 8005240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005244:	f383 8811 	msr	BASEPRI, r3
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	61fb      	str	r3, [r7, #28]
}
 8005252:	bf00      	nop
 8005254:	e7fe      	b.n	8005254 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005256:	f001 f8e5 	bl	8006424 <xTaskGetSchedulerState>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d102      	bne.n	8005266 <xQueueReceive+0x6e>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <xQueueReceive+0x72>
 8005266:	2301      	movs	r3, #1
 8005268:	e000      	b.n	800526c <xQueueReceive+0x74>
 800526a:	2300      	movs	r3, #0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10a      	bne.n	8005286 <xQueueReceive+0x8e>
	__asm volatile
 8005270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	61bb      	str	r3, [r7, #24]
}
 8005282:	bf00      	nop
 8005284:	e7fe      	b.n	8005284 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005286:	f001 fe25 	bl	8006ed4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800528a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	2b00      	cmp	r3, #0
 8005294:	d01f      	beq.n	80052d6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005296:	68b9      	ldr	r1, [r7, #8]
 8005298:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800529a:	f000 f977 	bl	800558c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	1e5a      	subs	r2, r3, #1
 80052a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00f      	beq.n	80052ce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b0:	3310      	adds	r3, #16
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 fef4 	bl	80060a0 <xTaskRemoveFromEventList>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d007      	beq.n	80052ce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80052be:	4b3d      	ldr	r3, [pc, #244]	; (80053b4 <xQueueReceive+0x1bc>)
 80052c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80052ce:	f001 fe31 	bl	8006f34 <vPortExitCritical>
				return pdPASS;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e069      	b.n	80053aa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d103      	bne.n	80052e4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052dc:	f001 fe2a 	bl	8006f34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80052e0:	2300      	movs	r3, #0
 80052e2:	e062      	b.n	80053aa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d106      	bne.n	80052f8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052ea:	f107 0310 	add.w	r3, r7, #16
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 ff3a 	bl	8006168 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052f4:	2301      	movs	r3, #1
 80052f6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052f8:	f001 fe1c 	bl	8006f34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052fc:	f000 fca6 	bl	8005c4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005300:	f001 fde8 	bl	8006ed4 <vPortEnterCritical>
 8005304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005306:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800530a:	b25b      	sxtb	r3, r3
 800530c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005310:	d103      	bne.n	800531a <xQueueReceive+0x122>
 8005312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800531a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005320:	b25b      	sxtb	r3, r3
 8005322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005326:	d103      	bne.n	8005330 <xQueueReceive+0x138>
 8005328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005330:	f001 fe00 	bl	8006f34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005334:	1d3a      	adds	r2, r7, #4
 8005336:	f107 0310 	add.w	r3, r7, #16
 800533a:	4611      	mov	r1, r2
 800533c:	4618      	mov	r0, r3
 800533e:	f000 ff29 	bl	8006194 <xTaskCheckForTimeOut>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d123      	bne.n	8005390 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005348:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800534a:	f000 f997 	bl	800567c <prvIsQueueEmpty>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d017      	beq.n	8005384 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005356:	3324      	adds	r3, #36	; 0x24
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	4611      	mov	r1, r2
 800535c:	4618      	mov	r0, r3
 800535e:	f000 fe4f 	bl	8006000 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005364:	f000 f938 	bl	80055d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005368:	f000 fc7e 	bl	8005c68 <xTaskResumeAll>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d189      	bne.n	8005286 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005372:	4b10      	ldr	r3, [pc, #64]	; (80053b4 <xQueueReceive+0x1bc>)
 8005374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005378:	601a      	str	r2, [r3, #0]
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	e780      	b.n	8005286 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005384:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005386:	f000 f927 	bl	80055d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800538a:	f000 fc6d 	bl	8005c68 <xTaskResumeAll>
 800538e:	e77a      	b.n	8005286 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005390:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005392:	f000 f921 	bl	80055d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005396:	f000 fc67 	bl	8005c68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800539a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800539c:	f000 f96e 	bl	800567c <prvIsQueueEmpty>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f43f af6f 	beq.w	8005286 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80053a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3730      	adds	r7, #48	; 0x30
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	e000ed04 	.word	0xe000ed04

080053b8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08e      	sub	sp, #56	; 0x38
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80053c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10a      	bne.n	80053e4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80053ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	623b      	str	r3, [r7, #32]
}
 80053e0:	bf00      	nop
 80053e2:	e7fe      	b.n	80053e2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d103      	bne.n	80053f2 <xQueueReceiveFromISR+0x3a>
 80053ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <xQueueReceiveFromISR+0x3e>
 80053f2:	2301      	movs	r3, #1
 80053f4:	e000      	b.n	80053f8 <xQueueReceiveFromISR+0x40>
 80053f6:	2300      	movs	r3, #0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10a      	bne.n	8005412 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80053fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005400:	f383 8811 	msr	BASEPRI, r3
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	f3bf 8f4f 	dsb	sy
 800540c:	61fb      	str	r3, [r7, #28]
}
 800540e:	bf00      	nop
 8005410:	e7fe      	b.n	8005410 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005412:	f001 fe41 	bl	8007098 <vPortValidateInterruptPriority>
	__asm volatile
 8005416:	f3ef 8211 	mrs	r2, BASEPRI
 800541a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541e:	f383 8811 	msr	BASEPRI, r3
 8005422:	f3bf 8f6f 	isb	sy
 8005426:	f3bf 8f4f 	dsb	sy
 800542a:	61ba      	str	r2, [r7, #24]
 800542c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800542e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005430:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005436:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543a:	2b00      	cmp	r3, #0
 800543c:	d02f      	beq.n	800549e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800543e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005440:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005448:	68b9      	ldr	r1, [r7, #8]
 800544a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800544c:	f000 f89e 	bl	800558c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005452:	1e5a      	subs	r2, r3, #1
 8005454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005456:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005458:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800545c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005460:	d112      	bne.n	8005488 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d016      	beq.n	8005498 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800546a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546c:	3310      	adds	r3, #16
 800546e:	4618      	mov	r0, r3
 8005470:	f000 fe16 	bl	80060a0 <xTaskRemoveFromEventList>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00e      	beq.n	8005498 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00b      	beq.n	8005498 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	601a      	str	r2, [r3, #0]
 8005486:	e007      	b.n	8005498 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800548c:	3301      	adds	r3, #1
 800548e:	b2db      	uxtb	r3, r3
 8005490:	b25a      	sxtb	r2, r3
 8005492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005498:	2301      	movs	r3, #1
 800549a:	637b      	str	r3, [r7, #52]	; 0x34
 800549c:	e001      	b.n	80054a2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800549e:	2300      	movs	r3, #0
 80054a0:	637b      	str	r3, [r7, #52]	; 0x34
 80054a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	f383 8811 	msr	BASEPRI, r3
}
 80054ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3738      	adds	r7, #56	; 0x38
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80054c4:	2300      	movs	r3, #0
 80054c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10d      	bne.n	80054f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d14d      	bne.n	800557a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f000 ffbc 	bl	8006460 <xTaskPriorityDisinherit>
 80054e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	609a      	str	r2, [r3, #8]
 80054f0:	e043      	b.n	800557a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d119      	bne.n	800552c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6858      	ldr	r0, [r3, #4]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005500:	461a      	mov	r2, r3
 8005502:	68b9      	ldr	r1, [r7, #8]
 8005504:	f002 fe57 	bl	80081b6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005510:	441a      	add	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	429a      	cmp	r2, r3
 8005520:	d32b      	bcc.n	800557a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	605a      	str	r2, [r3, #4]
 800552a:	e026      	b.n	800557a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	68d8      	ldr	r0, [r3, #12]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005534:	461a      	mov	r2, r3
 8005536:	68b9      	ldr	r1, [r7, #8]
 8005538:	f002 fe3d 	bl	80081b6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	68da      	ldr	r2, [r3, #12]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005544:	425b      	negs	r3, r3
 8005546:	441a      	add	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	68da      	ldr	r2, [r3, #12]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	429a      	cmp	r2, r3
 8005556:	d207      	bcs.n	8005568 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	689a      	ldr	r2, [r3, #8]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005560:	425b      	negs	r3, r3
 8005562:	441a      	add	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2b02      	cmp	r3, #2
 800556c:	d105      	bne.n	800557a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d002      	beq.n	800557a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	3b01      	subs	r3, #1
 8005578:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	1c5a      	adds	r2, r3, #1
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005582:	697b      	ldr	r3, [r7, #20]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3718      	adds	r7, #24
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559a:	2b00      	cmp	r3, #0
 800559c:	d018      	beq.n	80055d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68da      	ldr	r2, [r3, #12]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a6:	441a      	add	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68da      	ldr	r2, [r3, #12]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d303      	bcc.n	80055c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68d9      	ldr	r1, [r3, #12]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c8:	461a      	mov	r2, r3
 80055ca:	6838      	ldr	r0, [r7, #0]
 80055cc:	f002 fdf3 	bl	80081b6 <memcpy>
	}
}
 80055d0:	bf00      	nop
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80055e0:	f001 fc78 	bl	8006ed4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055ec:	e011      	b.n	8005612 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d012      	beq.n	800561c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	3324      	adds	r3, #36	; 0x24
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 fd50 	bl	80060a0 <xTaskRemoveFromEventList>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d001      	beq.n	800560a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005606:	f000 fe27 	bl	8006258 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800560a:	7bfb      	ldrb	r3, [r7, #15]
 800560c:	3b01      	subs	r3, #1
 800560e:	b2db      	uxtb	r3, r3
 8005610:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005616:	2b00      	cmp	r3, #0
 8005618:	dce9      	bgt.n	80055ee <prvUnlockQueue+0x16>
 800561a:	e000      	b.n	800561e <prvUnlockQueue+0x46>
					break;
 800561c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	22ff      	movs	r2, #255	; 0xff
 8005622:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005626:	f001 fc85 	bl	8006f34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800562a:	f001 fc53 	bl	8006ed4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005634:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005636:	e011      	b.n	800565c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d012      	beq.n	8005666 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	3310      	adds	r3, #16
 8005644:	4618      	mov	r0, r3
 8005646:	f000 fd2b 	bl	80060a0 <xTaskRemoveFromEventList>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d001      	beq.n	8005654 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005650:	f000 fe02 	bl	8006258 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005654:	7bbb      	ldrb	r3, [r7, #14]
 8005656:	3b01      	subs	r3, #1
 8005658:	b2db      	uxtb	r3, r3
 800565a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800565c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005660:	2b00      	cmp	r3, #0
 8005662:	dce9      	bgt.n	8005638 <prvUnlockQueue+0x60>
 8005664:	e000      	b.n	8005668 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005666:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	22ff      	movs	r2, #255	; 0xff
 800566c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005670:	f001 fc60 	bl	8006f34 <vPortExitCritical>
}
 8005674:	bf00      	nop
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005684:	f001 fc26 	bl	8006ed4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568c:	2b00      	cmp	r3, #0
 800568e:	d102      	bne.n	8005696 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005690:	2301      	movs	r3, #1
 8005692:	60fb      	str	r3, [r7, #12]
 8005694:	e001      	b.n	800569a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005696:	2300      	movs	r3, #0
 8005698:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800569a:	f001 fc4b 	bl	8006f34 <vPortExitCritical>

	return xReturn;
 800569e:	68fb      	ldr	r3, [r7, #12]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80056b0:	f001 fc10 	bl	8006ed4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056bc:	429a      	cmp	r2, r3
 80056be:	d102      	bne.n	80056c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80056c0:	2301      	movs	r3, #1
 80056c2:	60fb      	str	r3, [r7, #12]
 80056c4:	e001      	b.n	80056ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80056c6:	2300      	movs	r3, #0
 80056c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80056ca:	f001 fc33 	bl	8006f34 <vPortExitCritical>

	return xReturn;
 80056ce:	68fb      	ldr	r3, [r7, #12]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3710      	adds	r7, #16
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80056e2:	2300      	movs	r3, #0
 80056e4:	60fb      	str	r3, [r7, #12]
 80056e6:	e014      	b.n	8005712 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80056e8:	4a0f      	ldr	r2, [pc, #60]	; (8005728 <vQueueAddToRegistry+0x50>)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10b      	bne.n	800570c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80056f4:	490c      	ldr	r1, [pc, #48]	; (8005728 <vQueueAddToRegistry+0x50>)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80056fe:	4a0a      	ldr	r2, [pc, #40]	; (8005728 <vQueueAddToRegistry+0x50>)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	00db      	lsls	r3, r3, #3
 8005704:	4413      	add	r3, r2
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800570a:	e006      	b.n	800571a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	3301      	adds	r3, #1
 8005710:	60fb      	str	r3, [r7, #12]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2b07      	cmp	r3, #7
 8005716:	d9e7      	bls.n	80056e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005718:	bf00      	nop
 800571a:	bf00      	nop
 800571c:	3714      	adds	r7, #20
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	20000a74 	.word	0x20000a74

0800572c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800573c:	f001 fbca 	bl	8006ed4 <vPortEnterCritical>
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005746:	b25b      	sxtb	r3, r3
 8005748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800574c:	d103      	bne.n	8005756 <vQueueWaitForMessageRestricted+0x2a>
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800575c:	b25b      	sxtb	r3, r3
 800575e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005762:	d103      	bne.n	800576c <vQueueWaitForMessageRestricted+0x40>
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800576c:	f001 fbe2 	bl	8006f34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005774:	2b00      	cmp	r3, #0
 8005776:	d106      	bne.n	8005786 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	3324      	adds	r3, #36	; 0x24
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	68b9      	ldr	r1, [r7, #8]
 8005780:	4618      	mov	r0, r3
 8005782:	f000 fc61 	bl	8006048 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005786:	6978      	ldr	r0, [r7, #20]
 8005788:	f7ff ff26 	bl	80055d8 <prvUnlockQueue>
	}
 800578c:	bf00      	nop
 800578e:	3718      	adds	r7, #24
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005794:	b580      	push	{r7, lr}
 8005796:	b08e      	sub	sp, #56	; 0x38
 8005798:	af04      	add	r7, sp, #16
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
 80057a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80057a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10a      	bne.n	80057be <xTaskCreateStatic+0x2a>
	__asm volatile
 80057a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ac:	f383 8811 	msr	BASEPRI, r3
 80057b0:	f3bf 8f6f 	isb	sy
 80057b4:	f3bf 8f4f 	dsb	sy
 80057b8:	623b      	str	r3, [r7, #32]
}
 80057ba:	bf00      	nop
 80057bc:	e7fe      	b.n	80057bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80057be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10a      	bne.n	80057da <xTaskCreateStatic+0x46>
	__asm volatile
 80057c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c8:	f383 8811 	msr	BASEPRI, r3
 80057cc:	f3bf 8f6f 	isb	sy
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	61fb      	str	r3, [r7, #28]
}
 80057d6:	bf00      	nop
 80057d8:	e7fe      	b.n	80057d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80057da:	23b8      	movs	r3, #184	; 0xb8
 80057dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	2bb8      	cmp	r3, #184	; 0xb8
 80057e2:	d00a      	beq.n	80057fa <xTaskCreateStatic+0x66>
	__asm volatile
 80057e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e8:	f383 8811 	msr	BASEPRI, r3
 80057ec:	f3bf 8f6f 	isb	sy
 80057f0:	f3bf 8f4f 	dsb	sy
 80057f4:	61bb      	str	r3, [r7, #24]
}
 80057f6:	bf00      	nop
 80057f8:	e7fe      	b.n	80057f8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80057fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80057fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d01e      	beq.n	8005840 <xTaskCreateStatic+0xac>
 8005802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005804:	2b00      	cmp	r3, #0
 8005806:	d01b      	beq.n	8005840 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005810:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005814:	2202      	movs	r2, #2
 8005816:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800581a:	2300      	movs	r3, #0
 800581c:	9303      	str	r3, [sp, #12]
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	9302      	str	r3, [sp, #8]
 8005822:	f107 0314 	add.w	r3, r7, #20
 8005826:	9301      	str	r3, [sp, #4]
 8005828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582a:	9300      	str	r3, [sp, #0]
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	68b9      	ldr	r1, [r7, #8]
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f000 f850 	bl	80058d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005838:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800583a:	f000 f8f3 	bl	8005a24 <prvAddNewTaskToReadyList>
 800583e:	e001      	b.n	8005844 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005840:	2300      	movs	r3, #0
 8005842:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005844:	697b      	ldr	r3, [r7, #20]
	}
 8005846:	4618      	mov	r0, r3
 8005848:	3728      	adds	r7, #40	; 0x28
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800584e:	b580      	push	{r7, lr}
 8005850:	b08c      	sub	sp, #48	; 0x30
 8005852:	af04      	add	r7, sp, #16
 8005854:	60f8      	str	r0, [r7, #12]
 8005856:	60b9      	str	r1, [r7, #8]
 8005858:	603b      	str	r3, [r7, #0]
 800585a:	4613      	mov	r3, r2
 800585c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800585e:	88fb      	ldrh	r3, [r7, #6]
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4618      	mov	r0, r3
 8005864:	f001 fc58 	bl	8007118 <pvPortMalloc>
 8005868:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00e      	beq.n	800588e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005870:	20b8      	movs	r0, #184	; 0xb8
 8005872:	f001 fc51 	bl	8007118 <pvPortMalloc>
 8005876:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	631a      	str	r2, [r3, #48]	; 0x30
 8005884:	e005      	b.n	8005892 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005886:	6978      	ldr	r0, [r7, #20]
 8005888:	f001 fd12 	bl	80072b0 <vPortFree>
 800588c:	e001      	b.n	8005892 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800588e:	2300      	movs	r3, #0
 8005890:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d017      	beq.n	80058c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80058a0:	88fa      	ldrh	r2, [r7, #6]
 80058a2:	2300      	movs	r3, #0
 80058a4:	9303      	str	r3, [sp, #12]
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	9302      	str	r3, [sp, #8]
 80058aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ac:	9301      	str	r3, [sp, #4]
 80058ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	68b9      	ldr	r1, [r7, #8]
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f000 f80e 	bl	80058d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058bc:	69f8      	ldr	r0, [r7, #28]
 80058be:	f000 f8b1 	bl	8005a24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80058c2:	2301      	movs	r3, #1
 80058c4:	61bb      	str	r3, [r7, #24]
 80058c6:	e002      	b.n	80058ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80058c8:	f04f 33ff 	mov.w	r3, #4294967295
 80058cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80058ce:	69bb      	ldr	r3, [r7, #24]
	}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3720      	adds	r7, #32
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b088      	sub	sp, #32
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
 80058e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80058e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	461a      	mov	r2, r3
 80058f0:	21a5      	movs	r1, #165	; 0xa5
 80058f2:	f002 fb78 	bl	8007fe6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80058f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005900:	3b01      	subs	r3, #1
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4413      	add	r3, r2
 8005906:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	f023 0307 	bic.w	r3, r3, #7
 800590e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	f003 0307 	and.w	r3, r3, #7
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00a      	beq.n	8005930 <prvInitialiseNewTask+0x58>
	__asm volatile
 800591a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591e:	f383 8811 	msr	BASEPRI, r3
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	f3bf 8f4f 	dsb	sy
 800592a:	617b      	str	r3, [r7, #20]
}
 800592c:	bf00      	nop
 800592e:	e7fe      	b.n	800592e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d01f      	beq.n	8005976 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005936:	2300      	movs	r3, #0
 8005938:	61fb      	str	r3, [r7, #28]
 800593a:	e012      	b.n	8005962 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800593c:	68ba      	ldr	r2, [r7, #8]
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	4413      	add	r3, r2
 8005942:	7819      	ldrb	r1, [r3, #0]
 8005944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	4413      	add	r3, r2
 800594a:	3334      	adds	r3, #52	; 0x34
 800594c:	460a      	mov	r2, r1
 800594e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	4413      	add	r3, r2
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d006      	beq.n	800596a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	3301      	adds	r3, #1
 8005960:	61fb      	str	r3, [r7, #28]
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	2b1f      	cmp	r3, #31
 8005966:	d9e9      	bls.n	800593c <prvInitialiseNewTask+0x64>
 8005968:	e000      	b.n	800596c <prvInitialiseNewTask+0x94>
			{
				break;
 800596a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800596c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596e:	2200      	movs	r2, #0
 8005970:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8005974:	e003      	b.n	800597e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005978:	2200      	movs	r2, #0
 800597a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800597e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005980:	2b37      	cmp	r3, #55	; 0x37
 8005982:	d901      	bls.n	8005988 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005984:	2337      	movs	r3, #55	; 0x37
 8005986:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800598c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800598e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005990:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005992:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8005994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005996:	2200      	movs	r2, #0
 8005998:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800599a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599c:	3304      	adds	r3, #4
 800599e:	4618      	mov	r0, r3
 80059a0:	f7ff f8be 	bl	8004b20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80059a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a6:	3318      	adds	r3, #24
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7ff f8b9 	bl	8004b20 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80059ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80059ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80059be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80059c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c6:	2200      	movs	r2, #0
 80059c8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80059cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80059d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d6:	3364      	adds	r3, #100	; 0x64
 80059d8:	224c      	movs	r2, #76	; 0x4c
 80059da:	2100      	movs	r1, #0
 80059dc:	4618      	mov	r0, r3
 80059de:	f002 fb02 	bl	8007fe6 <memset>
 80059e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e4:	4a0c      	ldr	r2, [pc, #48]	; (8005a18 <prvInitialiseNewTask+0x140>)
 80059e6:	669a      	str	r2, [r3, #104]	; 0x68
 80059e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ea:	4a0c      	ldr	r2, [pc, #48]	; (8005a1c <prvInitialiseNewTask+0x144>)
 80059ec:	66da      	str	r2, [r3, #108]	; 0x6c
 80059ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f0:	4a0b      	ldr	r2, [pc, #44]	; (8005a20 <prvInitialiseNewTask+0x148>)
 80059f2:	671a      	str	r2, [r3, #112]	; 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	68f9      	ldr	r1, [r7, #12]
 80059f8:	69b8      	ldr	r0, [r7, #24]
 80059fa:	f001 f941 	bl	8006c80 <pxPortInitialiseStack>
 80059fe:	4602      	mov	r2, r0
 8005a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a02:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d002      	beq.n	8005a10 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a0e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a10:	bf00      	nop
 8005a12:	3720      	adds	r7, #32
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	20001cc0 	.word	0x20001cc0
 8005a1c:	20001d28 	.word	0x20001d28
 8005a20:	20001d90 	.word	0x20001d90

08005a24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a2c:	f001 fa52 	bl	8006ed4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a30:	4b2d      	ldr	r3, [pc, #180]	; (8005ae8 <prvAddNewTaskToReadyList+0xc4>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	3301      	adds	r3, #1
 8005a36:	4a2c      	ldr	r2, [pc, #176]	; (8005ae8 <prvAddNewTaskToReadyList+0xc4>)
 8005a38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a3a:	4b2c      	ldr	r3, [pc, #176]	; (8005aec <prvAddNewTaskToReadyList+0xc8>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d109      	bne.n	8005a56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a42:	4a2a      	ldr	r2, [pc, #168]	; (8005aec <prvAddNewTaskToReadyList+0xc8>)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a48:	4b27      	ldr	r3, [pc, #156]	; (8005ae8 <prvAddNewTaskToReadyList+0xc4>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d110      	bne.n	8005a72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a50:	f000 fc26 	bl	80062a0 <prvInitialiseTaskLists>
 8005a54:	e00d      	b.n	8005a72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a56:	4b26      	ldr	r3, [pc, #152]	; (8005af0 <prvAddNewTaskToReadyList+0xcc>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d109      	bne.n	8005a72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a5e:	4b23      	ldr	r3, [pc, #140]	; (8005aec <prvAddNewTaskToReadyList+0xc8>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d802      	bhi.n	8005a72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a6c:	4a1f      	ldr	r2, [pc, #124]	; (8005aec <prvAddNewTaskToReadyList+0xc8>)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a72:	4b20      	ldr	r3, [pc, #128]	; (8005af4 <prvAddNewTaskToReadyList+0xd0>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	3301      	adds	r3, #1
 8005a78:	4a1e      	ldr	r2, [pc, #120]	; (8005af4 <prvAddNewTaskToReadyList+0xd0>)
 8005a7a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005a7c:	4b1d      	ldr	r3, [pc, #116]	; (8005af4 <prvAddNewTaskToReadyList+0xd0>)
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a88:	4b1b      	ldr	r3, [pc, #108]	; (8005af8 <prvAddNewTaskToReadyList+0xd4>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d903      	bls.n	8005a98 <prvAddNewTaskToReadyList+0x74>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a94:	4a18      	ldr	r2, [pc, #96]	; (8005af8 <prvAddNewTaskToReadyList+0xd4>)
 8005a96:	6013      	str	r3, [r2, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4a15      	ldr	r2, [pc, #84]	; (8005afc <prvAddNewTaskToReadyList+0xd8>)
 8005aa6:	441a      	add	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	3304      	adds	r3, #4
 8005aac:	4619      	mov	r1, r3
 8005aae:	4610      	mov	r0, r2
 8005ab0:	f7ff f843 	bl	8004b3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005ab4:	f001 fa3e 	bl	8006f34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005ab8:	4b0d      	ldr	r3, [pc, #52]	; (8005af0 <prvAddNewTaskToReadyList+0xcc>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00e      	beq.n	8005ade <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ac0:	4b0a      	ldr	r3, [pc, #40]	; (8005aec <prvAddNewTaskToReadyList+0xc8>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d207      	bcs.n	8005ade <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005ace:	4b0c      	ldr	r3, [pc, #48]	; (8005b00 <prvAddNewTaskToReadyList+0xdc>)
 8005ad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ad4:	601a      	str	r2, [r3, #0]
 8005ad6:	f3bf 8f4f 	dsb	sy
 8005ada:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ade:	bf00      	nop
 8005ae0:	3708      	adds	r7, #8
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	20000f88 	.word	0x20000f88
 8005aec:	20000ab4 	.word	0x20000ab4
 8005af0:	20000f94 	.word	0x20000f94
 8005af4:	20000fa4 	.word	0x20000fa4
 8005af8:	20000f90 	.word	0x20000f90
 8005afc:	20000ab8 	.word	0x20000ab8
 8005b00:	e000ed04 	.word	0xe000ed04

08005b04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d017      	beq.n	8005b46 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b16:	4b13      	ldr	r3, [pc, #76]	; (8005b64 <vTaskDelay+0x60>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00a      	beq.n	8005b34 <vTaskDelay+0x30>
	__asm volatile
 8005b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	60bb      	str	r3, [r7, #8]
}
 8005b30:	bf00      	nop
 8005b32:	e7fe      	b.n	8005b32 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005b34:	f000 f88a 	bl	8005c4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b38:	2100      	movs	r1, #0
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 fcfe 	bl	800653c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b40:	f000 f892 	bl	8005c68 <xTaskResumeAll>
 8005b44:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d107      	bne.n	8005b5c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005b4c:	4b06      	ldr	r3, [pc, #24]	; (8005b68 <vTaskDelay+0x64>)
 8005b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b52:	601a      	str	r2, [r3, #0]
 8005b54:	f3bf 8f4f 	dsb	sy
 8005b58:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b5c:	bf00      	nop
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	20000fb0 	.word	0x20000fb0
 8005b68:	e000ed04 	.word	0xe000ed04

08005b6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b08a      	sub	sp, #40	; 0x28
 8005b70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b72:	2300      	movs	r3, #0
 8005b74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b76:	2300      	movs	r3, #0
 8005b78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b7a:	463a      	mov	r2, r7
 8005b7c:	1d39      	adds	r1, r7, #4
 8005b7e:	f107 0308 	add.w	r3, r7, #8
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7fe ff78 	bl	8004a78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b88:	6839      	ldr	r1, [r7, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	9202      	str	r2, [sp, #8]
 8005b90:	9301      	str	r3, [sp, #4]
 8005b92:	2300      	movs	r3, #0
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	2300      	movs	r3, #0
 8005b98:	460a      	mov	r2, r1
 8005b9a:	4924      	ldr	r1, [pc, #144]	; (8005c2c <vTaskStartScheduler+0xc0>)
 8005b9c:	4824      	ldr	r0, [pc, #144]	; (8005c30 <vTaskStartScheduler+0xc4>)
 8005b9e:	f7ff fdf9 	bl	8005794 <xTaskCreateStatic>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	4a23      	ldr	r2, [pc, #140]	; (8005c34 <vTaskStartScheduler+0xc8>)
 8005ba6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ba8:	4b22      	ldr	r3, [pc, #136]	; (8005c34 <vTaskStartScheduler+0xc8>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d002      	beq.n	8005bb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	617b      	str	r3, [r7, #20]
 8005bb4:	e001      	b.n	8005bba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d102      	bne.n	8005bc6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005bc0:	f000 fd10 	bl	80065e4 <xTimerCreateTimerTask>
 8005bc4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d11b      	bne.n	8005c04 <vTaskStartScheduler+0x98>
	__asm volatile
 8005bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd0:	f383 8811 	msr	BASEPRI, r3
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	613b      	str	r3, [r7, #16]
}
 8005bde:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005be0:	4b15      	ldr	r3, [pc, #84]	; (8005c38 <vTaskStartScheduler+0xcc>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	3364      	adds	r3, #100	; 0x64
 8005be6:	4a15      	ldr	r2, [pc, #84]	; (8005c3c <vTaskStartScheduler+0xd0>)
 8005be8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005bea:	4b15      	ldr	r3, [pc, #84]	; (8005c40 <vTaskStartScheduler+0xd4>)
 8005bec:	f04f 32ff 	mov.w	r2, #4294967295
 8005bf0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005bf2:	4b14      	ldr	r3, [pc, #80]	; (8005c44 <vTaskStartScheduler+0xd8>)
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005bf8:	4b13      	ldr	r3, [pc, #76]	; (8005c48 <vTaskStartScheduler+0xdc>)
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005bfe:	f001 f8c7 	bl	8006d90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c02:	e00e      	b.n	8005c22 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0a:	d10a      	bne.n	8005c22 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c10:	f383 8811 	msr	BASEPRI, r3
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	60fb      	str	r3, [r7, #12]
}
 8005c1e:	bf00      	nop
 8005c20:	e7fe      	b.n	8005c20 <vTaskStartScheduler+0xb4>
}
 8005c22:	bf00      	nop
 8005c24:	3718      	adds	r7, #24
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	08009fec 	.word	0x08009fec
 8005c30:	08006271 	.word	0x08006271
 8005c34:	20000fac 	.word	0x20000fac
 8005c38:	20000ab4 	.word	0x20000ab4
 8005c3c:	20000068 	.word	0x20000068
 8005c40:	20000fa8 	.word	0x20000fa8
 8005c44:	20000f94 	.word	0x20000f94
 8005c48:	20000f8c 	.word	0x20000f8c

08005c4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005c50:	4b04      	ldr	r3, [pc, #16]	; (8005c64 <vTaskSuspendAll+0x18>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3301      	adds	r3, #1
 8005c56:	4a03      	ldr	r2, [pc, #12]	; (8005c64 <vTaskSuspendAll+0x18>)
 8005c58:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005c5a:	bf00      	nop
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr
 8005c64:	20000fb0 	.word	0x20000fb0

08005c68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c72:	2300      	movs	r3, #0
 8005c74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c76:	4b42      	ldr	r3, [pc, #264]	; (8005d80 <xTaskResumeAll+0x118>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10a      	bne.n	8005c94 <xTaskResumeAll+0x2c>
	__asm volatile
 8005c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	603b      	str	r3, [r7, #0]
}
 8005c90:	bf00      	nop
 8005c92:	e7fe      	b.n	8005c92 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c94:	f001 f91e 	bl	8006ed4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c98:	4b39      	ldr	r3, [pc, #228]	; (8005d80 <xTaskResumeAll+0x118>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	4a38      	ldr	r2, [pc, #224]	; (8005d80 <xTaskResumeAll+0x118>)
 8005ca0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ca2:	4b37      	ldr	r3, [pc, #220]	; (8005d80 <xTaskResumeAll+0x118>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d162      	bne.n	8005d70 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005caa:	4b36      	ldr	r3, [pc, #216]	; (8005d84 <xTaskResumeAll+0x11c>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d05e      	beq.n	8005d70 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cb2:	e02f      	b.n	8005d14 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cb4:	4b34      	ldr	r3, [pc, #208]	; (8005d88 <xTaskResumeAll+0x120>)
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	3318      	adds	r3, #24
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7fe ff97 	bl	8004bf4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	3304      	adds	r3, #4
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7fe ff92 	bl	8004bf4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd4:	4b2d      	ldr	r3, [pc, #180]	; (8005d8c <xTaskResumeAll+0x124>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d903      	bls.n	8005ce4 <xTaskResumeAll+0x7c>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce0:	4a2a      	ldr	r2, [pc, #168]	; (8005d8c <xTaskResumeAll+0x124>)
 8005ce2:	6013      	str	r3, [r2, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce8:	4613      	mov	r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4a27      	ldr	r2, [pc, #156]	; (8005d90 <xTaskResumeAll+0x128>)
 8005cf2:	441a      	add	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	3304      	adds	r3, #4
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	4610      	mov	r0, r2
 8005cfc:	f7fe ff1d 	bl	8004b3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d04:	4b23      	ldr	r3, [pc, #140]	; (8005d94 <xTaskResumeAll+0x12c>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d302      	bcc.n	8005d14 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005d0e:	4b22      	ldr	r3, [pc, #136]	; (8005d98 <xTaskResumeAll+0x130>)
 8005d10:	2201      	movs	r2, #1
 8005d12:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d14:	4b1c      	ldr	r3, [pc, #112]	; (8005d88 <xTaskResumeAll+0x120>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1cb      	bne.n	8005cb4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d001      	beq.n	8005d26 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d22:	f000 fb5f 	bl	80063e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005d26:	4b1d      	ldr	r3, [pc, #116]	; (8005d9c <xTaskResumeAll+0x134>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d010      	beq.n	8005d54 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d32:	f000 f847 	bl	8005dc4 <xTaskIncrementTick>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d002      	beq.n	8005d42 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005d3c:	4b16      	ldr	r3, [pc, #88]	; (8005d98 <xTaskResumeAll+0x130>)
 8005d3e:	2201      	movs	r2, #1
 8005d40:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	3b01      	subs	r3, #1
 8005d46:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1f1      	bne.n	8005d32 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005d4e:	4b13      	ldr	r3, [pc, #76]	; (8005d9c <xTaskResumeAll+0x134>)
 8005d50:	2200      	movs	r2, #0
 8005d52:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d54:	4b10      	ldr	r3, [pc, #64]	; (8005d98 <xTaskResumeAll+0x130>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d009      	beq.n	8005d70 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d60:	4b0f      	ldr	r3, [pc, #60]	; (8005da0 <xTaskResumeAll+0x138>)
 8005d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d70:	f001 f8e0 	bl	8006f34 <vPortExitCritical>

	return xAlreadyYielded;
 8005d74:	68bb      	ldr	r3, [r7, #8]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	20000fb0 	.word	0x20000fb0
 8005d84:	20000f88 	.word	0x20000f88
 8005d88:	20000f48 	.word	0x20000f48
 8005d8c:	20000f90 	.word	0x20000f90
 8005d90:	20000ab8 	.word	0x20000ab8
 8005d94:	20000ab4 	.word	0x20000ab4
 8005d98:	20000f9c 	.word	0x20000f9c
 8005d9c:	20000f98 	.word	0x20000f98
 8005da0:	e000ed04 	.word	0xe000ed04

08005da4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005daa:	4b05      	ldr	r3, [pc, #20]	; (8005dc0 <xTaskGetTickCount+0x1c>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005db0:	687b      	ldr	r3, [r7, #4]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	370c      	adds	r7, #12
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	20000f8c 	.word	0x20000f8c

08005dc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dce:	4b4f      	ldr	r3, [pc, #316]	; (8005f0c <xTaskIncrementTick+0x148>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f040 808f 	bne.w	8005ef6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005dd8:	4b4d      	ldr	r3, [pc, #308]	; (8005f10 <xTaskIncrementTick+0x14c>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005de0:	4a4b      	ldr	r2, [pc, #300]	; (8005f10 <xTaskIncrementTick+0x14c>)
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d120      	bne.n	8005e2e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005dec:	4b49      	ldr	r3, [pc, #292]	; (8005f14 <xTaskIncrementTick+0x150>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00a      	beq.n	8005e0c <xTaskIncrementTick+0x48>
	__asm volatile
 8005df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfa:	f383 8811 	msr	BASEPRI, r3
 8005dfe:	f3bf 8f6f 	isb	sy
 8005e02:	f3bf 8f4f 	dsb	sy
 8005e06:	603b      	str	r3, [r7, #0]
}
 8005e08:	bf00      	nop
 8005e0a:	e7fe      	b.n	8005e0a <xTaskIncrementTick+0x46>
 8005e0c:	4b41      	ldr	r3, [pc, #260]	; (8005f14 <xTaskIncrementTick+0x150>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	60fb      	str	r3, [r7, #12]
 8005e12:	4b41      	ldr	r3, [pc, #260]	; (8005f18 <xTaskIncrementTick+0x154>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a3f      	ldr	r2, [pc, #252]	; (8005f14 <xTaskIncrementTick+0x150>)
 8005e18:	6013      	str	r3, [r2, #0]
 8005e1a:	4a3f      	ldr	r2, [pc, #252]	; (8005f18 <xTaskIncrementTick+0x154>)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6013      	str	r3, [r2, #0]
 8005e20:	4b3e      	ldr	r3, [pc, #248]	; (8005f1c <xTaskIncrementTick+0x158>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	3301      	adds	r3, #1
 8005e26:	4a3d      	ldr	r2, [pc, #244]	; (8005f1c <xTaskIncrementTick+0x158>)
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	f000 fadb 	bl	80063e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e2e:	4b3c      	ldr	r3, [pc, #240]	; (8005f20 <xTaskIncrementTick+0x15c>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d349      	bcc.n	8005ecc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e38:	4b36      	ldr	r3, [pc, #216]	; (8005f14 <xTaskIncrementTick+0x150>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d104      	bne.n	8005e4c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e42:	4b37      	ldr	r3, [pc, #220]	; (8005f20 <xTaskIncrementTick+0x15c>)
 8005e44:	f04f 32ff 	mov.w	r2, #4294967295
 8005e48:	601a      	str	r2, [r3, #0]
					break;
 8005e4a:	e03f      	b.n	8005ecc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e4c:	4b31      	ldr	r3, [pc, #196]	; (8005f14 <xTaskIncrementTick+0x150>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d203      	bcs.n	8005e6c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e64:	4a2e      	ldr	r2, [pc, #184]	; (8005f20 <xTaskIncrementTick+0x15c>)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e6a:	e02f      	b.n	8005ecc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	3304      	adds	r3, #4
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7fe febf 	bl	8004bf4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d004      	beq.n	8005e88 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	3318      	adds	r3, #24
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fe feb6 	bl	8004bf4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e8c:	4b25      	ldr	r3, [pc, #148]	; (8005f24 <xTaskIncrementTick+0x160>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d903      	bls.n	8005e9c <xTaskIncrementTick+0xd8>
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e98:	4a22      	ldr	r2, [pc, #136]	; (8005f24 <xTaskIncrementTick+0x160>)
 8005e9a:	6013      	str	r3, [r2, #0]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4413      	add	r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4a1f      	ldr	r2, [pc, #124]	; (8005f28 <xTaskIncrementTick+0x164>)
 8005eaa:	441a      	add	r2, r3
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	3304      	adds	r3, #4
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	4610      	mov	r0, r2
 8005eb4:	f7fe fe41 	bl	8004b3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ebc:	4b1b      	ldr	r3, [pc, #108]	; (8005f2c <xTaskIncrementTick+0x168>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d3b8      	bcc.n	8005e38 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005eca:	e7b5      	b.n	8005e38 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ecc:	4b17      	ldr	r3, [pc, #92]	; (8005f2c <xTaskIncrementTick+0x168>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed2:	4915      	ldr	r1, [pc, #84]	; (8005f28 <xTaskIncrementTick+0x164>)
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4413      	add	r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	440b      	add	r3, r1
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d901      	bls.n	8005ee8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005ee8:	4b11      	ldr	r3, [pc, #68]	; (8005f30 <xTaskIncrementTick+0x16c>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d007      	beq.n	8005f00 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	617b      	str	r3, [r7, #20]
 8005ef4:	e004      	b.n	8005f00 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005ef6:	4b0f      	ldr	r3, [pc, #60]	; (8005f34 <xTaskIncrementTick+0x170>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3301      	adds	r3, #1
 8005efc:	4a0d      	ldr	r2, [pc, #52]	; (8005f34 <xTaskIncrementTick+0x170>)
 8005efe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005f00:	697b      	ldr	r3, [r7, #20]
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3718      	adds	r7, #24
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	20000fb0 	.word	0x20000fb0
 8005f10:	20000f8c 	.word	0x20000f8c
 8005f14:	20000f40 	.word	0x20000f40
 8005f18:	20000f44 	.word	0x20000f44
 8005f1c:	20000fa0 	.word	0x20000fa0
 8005f20:	20000fa8 	.word	0x20000fa8
 8005f24:	20000f90 	.word	0x20000f90
 8005f28:	20000ab8 	.word	0x20000ab8
 8005f2c:	20000ab4 	.word	0x20000ab4
 8005f30:	20000f9c 	.word	0x20000f9c
 8005f34:	20000f98 	.word	0x20000f98

08005f38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f3e:	4b2a      	ldr	r3, [pc, #168]	; (8005fe8 <vTaskSwitchContext+0xb0>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f46:	4b29      	ldr	r3, [pc, #164]	; (8005fec <vTaskSwitchContext+0xb4>)
 8005f48:	2201      	movs	r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f4c:	e046      	b.n	8005fdc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005f4e:	4b27      	ldr	r3, [pc, #156]	; (8005fec <vTaskSwitchContext+0xb4>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f54:	4b26      	ldr	r3, [pc, #152]	; (8005ff0 <vTaskSwitchContext+0xb8>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	60fb      	str	r3, [r7, #12]
 8005f5a:	e010      	b.n	8005f7e <vTaskSwitchContext+0x46>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10a      	bne.n	8005f78 <vTaskSwitchContext+0x40>
	__asm volatile
 8005f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f66:	f383 8811 	msr	BASEPRI, r3
 8005f6a:	f3bf 8f6f 	isb	sy
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	607b      	str	r3, [r7, #4]
}
 8005f74:	bf00      	nop
 8005f76:	e7fe      	b.n	8005f76 <vTaskSwitchContext+0x3e>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	60fb      	str	r3, [r7, #12]
 8005f7e:	491d      	ldr	r1, [pc, #116]	; (8005ff4 <vTaskSwitchContext+0xbc>)
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	4613      	mov	r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4413      	add	r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	440b      	add	r3, r1
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d0e4      	beq.n	8005f5c <vTaskSwitchContext+0x24>
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	4613      	mov	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	4a15      	ldr	r2, [pc, #84]	; (8005ff4 <vTaskSwitchContext+0xbc>)
 8005f9e:	4413      	add	r3, r2
 8005fa0:	60bb      	str	r3, [r7, #8]
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	605a      	str	r2, [r3, #4]
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	3308      	adds	r3, #8
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d104      	bne.n	8005fc2 <vTaskSwitchContext+0x8a>
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	605a      	str	r2, [r3, #4]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	4a0b      	ldr	r2, [pc, #44]	; (8005ff8 <vTaskSwitchContext+0xc0>)
 8005fca:	6013      	str	r3, [r2, #0]
 8005fcc:	4a08      	ldr	r2, [pc, #32]	; (8005ff0 <vTaskSwitchContext+0xb8>)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005fd2:	4b09      	ldr	r3, [pc, #36]	; (8005ff8 <vTaskSwitchContext+0xc0>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	3364      	adds	r3, #100	; 0x64
 8005fd8:	4a08      	ldr	r2, [pc, #32]	; (8005ffc <vTaskSwitchContext+0xc4>)
 8005fda:	6013      	str	r3, [r2, #0]
}
 8005fdc:	bf00      	nop
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr
 8005fe8:	20000fb0 	.word	0x20000fb0
 8005fec:	20000f9c 	.word	0x20000f9c
 8005ff0:	20000f90 	.word	0x20000f90
 8005ff4:	20000ab8 	.word	0x20000ab8
 8005ff8:	20000ab4 	.word	0x20000ab4
 8005ffc:	20000068 	.word	0x20000068

08006000 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10a      	bne.n	8006026 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	60fb      	str	r3, [r7, #12]
}
 8006022:	bf00      	nop
 8006024:	e7fe      	b.n	8006024 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006026:	4b07      	ldr	r3, [pc, #28]	; (8006044 <vTaskPlaceOnEventList+0x44>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3318      	adds	r3, #24
 800602c:	4619      	mov	r1, r3
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7fe fda7 	bl	8004b82 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006034:	2101      	movs	r1, #1
 8006036:	6838      	ldr	r0, [r7, #0]
 8006038:	f000 fa80 	bl	800653c <prvAddCurrentTaskToDelayedList>
}
 800603c:	bf00      	nop
 800603e:	3710      	adds	r7, #16
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	20000ab4 	.word	0x20000ab4

08006048 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006048:	b580      	push	{r7, lr}
 800604a:	b086      	sub	sp, #24
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10a      	bne.n	8006070 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800605a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605e:	f383 8811 	msr	BASEPRI, r3
 8006062:	f3bf 8f6f 	isb	sy
 8006066:	f3bf 8f4f 	dsb	sy
 800606a:	617b      	str	r3, [r7, #20]
}
 800606c:	bf00      	nop
 800606e:	e7fe      	b.n	800606e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006070:	4b0a      	ldr	r3, [pc, #40]	; (800609c <vTaskPlaceOnEventListRestricted+0x54>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	3318      	adds	r3, #24
 8006076:	4619      	mov	r1, r3
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f7fe fd5e 	bl	8004b3a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d002      	beq.n	800608a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006084:	f04f 33ff 	mov.w	r3, #4294967295
 8006088:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800608a:	6879      	ldr	r1, [r7, #4]
 800608c:	68b8      	ldr	r0, [r7, #8]
 800608e:	f000 fa55 	bl	800653c <prvAddCurrentTaskToDelayedList>
	}
 8006092:	bf00      	nop
 8006094:	3718      	adds	r7, #24
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	20000ab4 	.word	0x20000ab4

080060a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d10a      	bne.n	80060cc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80060b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ba:	f383 8811 	msr	BASEPRI, r3
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	f3bf 8f4f 	dsb	sy
 80060c6:	60fb      	str	r3, [r7, #12]
}
 80060c8:	bf00      	nop
 80060ca:	e7fe      	b.n	80060ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	3318      	adds	r3, #24
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7fe fd8f 	bl	8004bf4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060d6:	4b1e      	ldr	r3, [pc, #120]	; (8006150 <xTaskRemoveFromEventList+0xb0>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d11d      	bne.n	800611a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	3304      	adds	r3, #4
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7fe fd86 	bl	8004bf4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ec:	4b19      	ldr	r3, [pc, #100]	; (8006154 <xTaskRemoveFromEventList+0xb4>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d903      	bls.n	80060fc <xTaskRemoveFromEventList+0x5c>
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f8:	4a16      	ldr	r2, [pc, #88]	; (8006154 <xTaskRemoveFromEventList+0xb4>)
 80060fa:	6013      	str	r3, [r2, #0]
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006100:	4613      	mov	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4a13      	ldr	r2, [pc, #76]	; (8006158 <xTaskRemoveFromEventList+0xb8>)
 800610a:	441a      	add	r2, r3
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	3304      	adds	r3, #4
 8006110:	4619      	mov	r1, r3
 8006112:	4610      	mov	r0, r2
 8006114:	f7fe fd11 	bl	8004b3a <vListInsertEnd>
 8006118:	e005      	b.n	8006126 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	3318      	adds	r3, #24
 800611e:	4619      	mov	r1, r3
 8006120:	480e      	ldr	r0, [pc, #56]	; (800615c <xTaskRemoveFromEventList+0xbc>)
 8006122:	f7fe fd0a 	bl	8004b3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800612a:	4b0d      	ldr	r3, [pc, #52]	; (8006160 <xTaskRemoveFromEventList+0xc0>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006130:	429a      	cmp	r2, r3
 8006132:	d905      	bls.n	8006140 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006134:	2301      	movs	r3, #1
 8006136:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006138:	4b0a      	ldr	r3, [pc, #40]	; (8006164 <xTaskRemoveFromEventList+0xc4>)
 800613a:	2201      	movs	r2, #1
 800613c:	601a      	str	r2, [r3, #0]
 800613e:	e001      	b.n	8006144 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006140:	2300      	movs	r3, #0
 8006142:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006144:	697b      	ldr	r3, [r7, #20]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3718      	adds	r7, #24
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	20000fb0 	.word	0x20000fb0
 8006154:	20000f90 	.word	0x20000f90
 8006158:	20000ab8 	.word	0x20000ab8
 800615c:	20000f48 	.word	0x20000f48
 8006160:	20000ab4 	.word	0x20000ab4
 8006164:	20000f9c 	.word	0x20000f9c

08006168 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006170:	4b06      	ldr	r3, [pc, #24]	; (800618c <vTaskInternalSetTimeOutState+0x24>)
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006178:	4b05      	ldr	r3, [pc, #20]	; (8006190 <vTaskInternalSetTimeOutState+0x28>)
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	605a      	str	r2, [r3, #4]
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr
 800618c:	20000fa0 	.word	0x20000fa0
 8006190:	20000f8c 	.word	0x20000f8c

08006194 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b088      	sub	sp, #32
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10a      	bne.n	80061ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80061a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a8:	f383 8811 	msr	BASEPRI, r3
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	613b      	str	r3, [r7, #16]
}
 80061b6:	bf00      	nop
 80061b8:	e7fe      	b.n	80061b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10a      	bne.n	80061d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80061c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c4:	f383 8811 	msr	BASEPRI, r3
 80061c8:	f3bf 8f6f 	isb	sy
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	60fb      	str	r3, [r7, #12]
}
 80061d2:	bf00      	nop
 80061d4:	e7fe      	b.n	80061d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80061d6:	f000 fe7d 	bl	8006ed4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80061da:	4b1d      	ldr	r3, [pc, #116]	; (8006250 <xTaskCheckForTimeOut+0xbc>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	69ba      	ldr	r2, [r7, #24]
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f2:	d102      	bne.n	80061fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80061f4:	2300      	movs	r3, #0
 80061f6:	61fb      	str	r3, [r7, #28]
 80061f8:	e023      	b.n	8006242 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	4b15      	ldr	r3, [pc, #84]	; (8006254 <xTaskCheckForTimeOut+0xc0>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	429a      	cmp	r2, r3
 8006204:	d007      	beq.n	8006216 <xTaskCheckForTimeOut+0x82>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	69ba      	ldr	r2, [r7, #24]
 800620c:	429a      	cmp	r2, r3
 800620e:	d302      	bcc.n	8006216 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006210:	2301      	movs	r3, #1
 8006212:	61fb      	str	r3, [r7, #28]
 8006214:	e015      	b.n	8006242 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	429a      	cmp	r2, r3
 800621e:	d20b      	bcs.n	8006238 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	1ad2      	subs	r2, r2, r3
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f7ff ff9b 	bl	8006168 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006232:	2300      	movs	r3, #0
 8006234:	61fb      	str	r3, [r7, #28]
 8006236:	e004      	b.n	8006242 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	2200      	movs	r2, #0
 800623c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800623e:	2301      	movs	r3, #1
 8006240:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006242:	f000 fe77 	bl	8006f34 <vPortExitCritical>

	return xReturn;
 8006246:	69fb      	ldr	r3, [r7, #28]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3720      	adds	r7, #32
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	20000f8c 	.word	0x20000f8c
 8006254:	20000fa0 	.word	0x20000fa0

08006258 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006258:	b480      	push	{r7}
 800625a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800625c:	4b03      	ldr	r3, [pc, #12]	; (800626c <vTaskMissedYield+0x14>)
 800625e:	2201      	movs	r2, #1
 8006260:	601a      	str	r2, [r3, #0]
}
 8006262:	bf00      	nop
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	20000f9c 	.word	0x20000f9c

08006270 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006278:	f000 f852 	bl	8006320 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800627c:	4b06      	ldr	r3, [pc, #24]	; (8006298 <prvIdleTask+0x28>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d9f9      	bls.n	8006278 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006284:	4b05      	ldr	r3, [pc, #20]	; (800629c <prvIdleTask+0x2c>)
 8006286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800628a:	601a      	str	r2, [r3, #0]
 800628c:	f3bf 8f4f 	dsb	sy
 8006290:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006294:	e7f0      	b.n	8006278 <prvIdleTask+0x8>
 8006296:	bf00      	nop
 8006298:	20000ab8 	.word	0x20000ab8
 800629c:	e000ed04 	.word	0xe000ed04

080062a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062a6:	2300      	movs	r3, #0
 80062a8:	607b      	str	r3, [r7, #4]
 80062aa:	e00c      	b.n	80062c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	4613      	mov	r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4413      	add	r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4a12      	ldr	r2, [pc, #72]	; (8006300 <prvInitialiseTaskLists+0x60>)
 80062b8:	4413      	add	r3, r2
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7fe fc10 	bl	8004ae0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	3301      	adds	r3, #1
 80062c4:	607b      	str	r3, [r7, #4]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b37      	cmp	r3, #55	; 0x37
 80062ca:	d9ef      	bls.n	80062ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80062cc:	480d      	ldr	r0, [pc, #52]	; (8006304 <prvInitialiseTaskLists+0x64>)
 80062ce:	f7fe fc07 	bl	8004ae0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80062d2:	480d      	ldr	r0, [pc, #52]	; (8006308 <prvInitialiseTaskLists+0x68>)
 80062d4:	f7fe fc04 	bl	8004ae0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80062d8:	480c      	ldr	r0, [pc, #48]	; (800630c <prvInitialiseTaskLists+0x6c>)
 80062da:	f7fe fc01 	bl	8004ae0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80062de:	480c      	ldr	r0, [pc, #48]	; (8006310 <prvInitialiseTaskLists+0x70>)
 80062e0:	f7fe fbfe 	bl	8004ae0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80062e4:	480b      	ldr	r0, [pc, #44]	; (8006314 <prvInitialiseTaskLists+0x74>)
 80062e6:	f7fe fbfb 	bl	8004ae0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80062ea:	4b0b      	ldr	r3, [pc, #44]	; (8006318 <prvInitialiseTaskLists+0x78>)
 80062ec:	4a05      	ldr	r2, [pc, #20]	; (8006304 <prvInitialiseTaskLists+0x64>)
 80062ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80062f0:	4b0a      	ldr	r3, [pc, #40]	; (800631c <prvInitialiseTaskLists+0x7c>)
 80062f2:	4a05      	ldr	r2, [pc, #20]	; (8006308 <prvInitialiseTaskLists+0x68>)
 80062f4:	601a      	str	r2, [r3, #0]
}
 80062f6:	bf00      	nop
 80062f8:	3708      	adds	r7, #8
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	20000ab8 	.word	0x20000ab8
 8006304:	20000f18 	.word	0x20000f18
 8006308:	20000f2c 	.word	0x20000f2c
 800630c:	20000f48 	.word	0x20000f48
 8006310:	20000f5c 	.word	0x20000f5c
 8006314:	20000f74 	.word	0x20000f74
 8006318:	20000f40 	.word	0x20000f40
 800631c:	20000f44 	.word	0x20000f44

08006320 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006326:	e019      	b.n	800635c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006328:	f000 fdd4 	bl	8006ed4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800632c:	4b10      	ldr	r3, [pc, #64]	; (8006370 <prvCheckTasksWaitingTermination+0x50>)
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	3304      	adds	r3, #4
 8006338:	4618      	mov	r0, r3
 800633a:	f7fe fc5b 	bl	8004bf4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800633e:	4b0d      	ldr	r3, [pc, #52]	; (8006374 <prvCheckTasksWaitingTermination+0x54>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	3b01      	subs	r3, #1
 8006344:	4a0b      	ldr	r2, [pc, #44]	; (8006374 <prvCheckTasksWaitingTermination+0x54>)
 8006346:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006348:	4b0b      	ldr	r3, [pc, #44]	; (8006378 <prvCheckTasksWaitingTermination+0x58>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3b01      	subs	r3, #1
 800634e:	4a0a      	ldr	r2, [pc, #40]	; (8006378 <prvCheckTasksWaitingTermination+0x58>)
 8006350:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006352:	f000 fdef 	bl	8006f34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f810 	bl	800637c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800635c:	4b06      	ldr	r3, [pc, #24]	; (8006378 <prvCheckTasksWaitingTermination+0x58>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1e1      	bne.n	8006328 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006364:	bf00      	nop
 8006366:	bf00      	nop
 8006368:	3708      	adds	r7, #8
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	20000f5c 	.word	0x20000f5c
 8006374:	20000f88 	.word	0x20000f88
 8006378:	20000f70 	.word	0x20000f70

0800637c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	3364      	adds	r3, #100	; 0x64
 8006388:	4618      	mov	r0, r3
 800638a:	f001 fe5b 	bl	8008044 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8006394:	2b00      	cmp	r3, #0
 8006396:	d108      	bne.n	80063aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639c:	4618      	mov	r0, r3
 800639e:	f000 ff87 	bl	80072b0 <vPortFree>
				vPortFree( pxTCB );
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 ff84 	bl	80072b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80063a8:	e018      	b.n	80063dc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d103      	bne.n	80063bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 ff7b 	bl	80072b0 <vPortFree>
	}
 80063ba:	e00f      	b.n	80063dc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d00a      	beq.n	80063dc <prvDeleteTCB+0x60>
	__asm volatile
 80063c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ca:	f383 8811 	msr	BASEPRI, r3
 80063ce:	f3bf 8f6f 	isb	sy
 80063d2:	f3bf 8f4f 	dsb	sy
 80063d6:	60fb      	str	r3, [r7, #12]
}
 80063d8:	bf00      	nop
 80063da:	e7fe      	b.n	80063da <prvDeleteTCB+0x5e>
	}
 80063dc:	bf00      	nop
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063ea:	4b0c      	ldr	r3, [pc, #48]	; (800641c <prvResetNextTaskUnblockTime+0x38>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d104      	bne.n	80063fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80063f4:	4b0a      	ldr	r3, [pc, #40]	; (8006420 <prvResetNextTaskUnblockTime+0x3c>)
 80063f6:	f04f 32ff 	mov.w	r2, #4294967295
 80063fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80063fc:	e008      	b.n	8006410 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063fe:	4b07      	ldr	r3, [pc, #28]	; (800641c <prvResetNextTaskUnblockTime+0x38>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	4a04      	ldr	r2, [pc, #16]	; (8006420 <prvResetNextTaskUnblockTime+0x3c>)
 800640e:	6013      	str	r3, [r2, #0]
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	20000f40 	.word	0x20000f40
 8006420:	20000fa8 	.word	0x20000fa8

08006424 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800642a:	4b0b      	ldr	r3, [pc, #44]	; (8006458 <xTaskGetSchedulerState+0x34>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d102      	bne.n	8006438 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006432:	2301      	movs	r3, #1
 8006434:	607b      	str	r3, [r7, #4]
 8006436:	e008      	b.n	800644a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006438:	4b08      	ldr	r3, [pc, #32]	; (800645c <xTaskGetSchedulerState+0x38>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d102      	bne.n	8006446 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006440:	2302      	movs	r3, #2
 8006442:	607b      	str	r3, [r7, #4]
 8006444:	e001      	b.n	800644a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006446:	2300      	movs	r3, #0
 8006448:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800644a:	687b      	ldr	r3, [r7, #4]
	}
 800644c:	4618      	mov	r0, r3
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr
 8006458:	20000f94 	.word	0x20000f94
 800645c:	20000fb0 	.word	0x20000fb0

08006460 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800646c:	2300      	movs	r3, #0
 800646e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d056      	beq.n	8006524 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006476:	4b2e      	ldr	r3, [pc, #184]	; (8006530 <xTaskPriorityDisinherit+0xd0>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	429a      	cmp	r2, r3
 800647e:	d00a      	beq.n	8006496 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006484:	f383 8811 	msr	BASEPRI, r3
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	60fb      	str	r3, [r7, #12]
}
 8006492:	bf00      	nop
 8006494:	e7fe      	b.n	8006494 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10a      	bne.n	80064b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800649e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a2:	f383 8811 	msr	BASEPRI, r3
 80064a6:	f3bf 8f6f 	isb	sy
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	60bb      	str	r3, [r7, #8]
}
 80064b0:	bf00      	nop
 80064b2:	e7fe      	b.n	80064b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064b8:	1e5a      	subs	r2, r3, #1
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d02c      	beq.n	8006524 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d128      	bne.n	8006524 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	3304      	adds	r3, #4
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7fe fb8c 	bl	8004bf4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f4:	4b0f      	ldr	r3, [pc, #60]	; (8006534 <xTaskPriorityDisinherit+0xd4>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d903      	bls.n	8006504 <xTaskPriorityDisinherit+0xa4>
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006500:	4a0c      	ldr	r2, [pc, #48]	; (8006534 <xTaskPriorityDisinherit+0xd4>)
 8006502:	6013      	str	r3, [r2, #0]
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006508:	4613      	mov	r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4413      	add	r3, r2
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4a09      	ldr	r2, [pc, #36]	; (8006538 <xTaskPriorityDisinherit+0xd8>)
 8006512:	441a      	add	r2, r3
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	3304      	adds	r3, #4
 8006518:	4619      	mov	r1, r3
 800651a:	4610      	mov	r0, r2
 800651c:	f7fe fb0d 	bl	8004b3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006520:	2301      	movs	r3, #1
 8006522:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006524:	697b      	ldr	r3, [r7, #20]
	}
 8006526:	4618      	mov	r0, r3
 8006528:	3718      	adds	r7, #24
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	20000ab4 	.word	0x20000ab4
 8006534:	20000f90 	.word	0x20000f90
 8006538:	20000ab8 	.word	0x20000ab8

0800653c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006546:	4b21      	ldr	r3, [pc, #132]	; (80065cc <prvAddCurrentTaskToDelayedList+0x90>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800654c:	4b20      	ldr	r3, [pc, #128]	; (80065d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	3304      	adds	r3, #4
 8006552:	4618      	mov	r0, r3
 8006554:	f7fe fb4e 	bl	8004bf4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800655e:	d10a      	bne.n	8006576 <prvAddCurrentTaskToDelayedList+0x3a>
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d007      	beq.n	8006576 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006566:	4b1a      	ldr	r3, [pc, #104]	; (80065d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	3304      	adds	r3, #4
 800656c:	4619      	mov	r1, r3
 800656e:	4819      	ldr	r0, [pc, #100]	; (80065d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006570:	f7fe fae3 	bl	8004b3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006574:	e026      	b.n	80065c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4413      	add	r3, r2
 800657c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800657e:	4b14      	ldr	r3, [pc, #80]	; (80065d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	429a      	cmp	r2, r3
 800658c:	d209      	bcs.n	80065a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800658e:	4b12      	ldr	r3, [pc, #72]	; (80065d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	4b0f      	ldr	r3, [pc, #60]	; (80065d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	3304      	adds	r3, #4
 8006598:	4619      	mov	r1, r3
 800659a:	4610      	mov	r0, r2
 800659c:	f7fe faf1 	bl	8004b82 <vListInsert>
}
 80065a0:	e010      	b.n	80065c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065a2:	4b0e      	ldr	r3, [pc, #56]	; (80065dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	4b0a      	ldr	r3, [pc, #40]	; (80065d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3304      	adds	r3, #4
 80065ac:	4619      	mov	r1, r3
 80065ae:	4610      	mov	r0, r2
 80065b0:	f7fe fae7 	bl	8004b82 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80065b4:	4b0a      	ldr	r3, [pc, #40]	; (80065e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d202      	bcs.n	80065c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80065be:	4a08      	ldr	r2, [pc, #32]	; (80065e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	6013      	str	r3, [r2, #0]
}
 80065c4:	bf00      	nop
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	20000f8c 	.word	0x20000f8c
 80065d0:	20000ab4 	.word	0x20000ab4
 80065d4:	20000f74 	.word	0x20000f74
 80065d8:	20000f44 	.word	0x20000f44
 80065dc:	20000f40 	.word	0x20000f40
 80065e0:	20000fa8 	.word	0x20000fa8

080065e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b08a      	sub	sp, #40	; 0x28
 80065e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80065ea:	2300      	movs	r3, #0
 80065ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80065ee:	f000 fb07 	bl	8006c00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80065f2:	4b1c      	ldr	r3, [pc, #112]	; (8006664 <xTimerCreateTimerTask+0x80>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d021      	beq.n	800663e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80065fa:	2300      	movs	r3, #0
 80065fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80065fe:	2300      	movs	r3, #0
 8006600:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006602:	1d3a      	adds	r2, r7, #4
 8006604:	f107 0108 	add.w	r1, r7, #8
 8006608:	f107 030c 	add.w	r3, r7, #12
 800660c:	4618      	mov	r0, r3
 800660e:	f7fe fa4d 	bl	8004aac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006612:	6879      	ldr	r1, [r7, #4]
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	9202      	str	r2, [sp, #8]
 800661a:	9301      	str	r3, [sp, #4]
 800661c:	2302      	movs	r3, #2
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	2300      	movs	r3, #0
 8006622:	460a      	mov	r2, r1
 8006624:	4910      	ldr	r1, [pc, #64]	; (8006668 <xTimerCreateTimerTask+0x84>)
 8006626:	4811      	ldr	r0, [pc, #68]	; (800666c <xTimerCreateTimerTask+0x88>)
 8006628:	f7ff f8b4 	bl	8005794 <xTaskCreateStatic>
 800662c:	4603      	mov	r3, r0
 800662e:	4a10      	ldr	r2, [pc, #64]	; (8006670 <xTimerCreateTimerTask+0x8c>)
 8006630:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006632:	4b0f      	ldr	r3, [pc, #60]	; (8006670 <xTimerCreateTimerTask+0x8c>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d001      	beq.n	800663e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800663a:	2301      	movs	r3, #1
 800663c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10a      	bne.n	800665a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	613b      	str	r3, [r7, #16]
}
 8006656:	bf00      	nop
 8006658:	e7fe      	b.n	8006658 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800665a:	697b      	ldr	r3, [r7, #20]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3718      	adds	r7, #24
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	20000fe4 	.word	0x20000fe4
 8006668:	08009ff4 	.word	0x08009ff4
 800666c:	080067a9 	.word	0x080067a9
 8006670:	20000fe8 	.word	0x20000fe8

08006674 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b08a      	sub	sp, #40	; 0x28
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]
 8006680:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006682:	2300      	movs	r3, #0
 8006684:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d10a      	bne.n	80066a2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800668c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006690:	f383 8811 	msr	BASEPRI, r3
 8006694:	f3bf 8f6f 	isb	sy
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	623b      	str	r3, [r7, #32]
}
 800669e:	bf00      	nop
 80066a0:	e7fe      	b.n	80066a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80066a2:	4b1a      	ldr	r3, [pc, #104]	; (800670c <xTimerGenericCommand+0x98>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d02a      	beq.n	8006700 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	2b05      	cmp	r3, #5
 80066ba:	dc18      	bgt.n	80066ee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80066bc:	f7ff feb2 	bl	8006424 <xTaskGetSchedulerState>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d109      	bne.n	80066da <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80066c6:	4b11      	ldr	r3, [pc, #68]	; (800670c <xTimerGenericCommand+0x98>)
 80066c8:	6818      	ldr	r0, [r3, #0]
 80066ca:	f107 0110 	add.w	r1, r7, #16
 80066ce:	2300      	movs	r3, #0
 80066d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066d2:	f7fe fbf7 	bl	8004ec4 <xQueueGenericSend>
 80066d6:	6278      	str	r0, [r7, #36]	; 0x24
 80066d8:	e012      	b.n	8006700 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80066da:	4b0c      	ldr	r3, [pc, #48]	; (800670c <xTimerGenericCommand+0x98>)
 80066dc:	6818      	ldr	r0, [r3, #0]
 80066de:	f107 0110 	add.w	r1, r7, #16
 80066e2:	2300      	movs	r3, #0
 80066e4:	2200      	movs	r2, #0
 80066e6:	f7fe fbed 	bl	8004ec4 <xQueueGenericSend>
 80066ea:	6278      	str	r0, [r7, #36]	; 0x24
 80066ec:	e008      	b.n	8006700 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80066ee:	4b07      	ldr	r3, [pc, #28]	; (800670c <xTimerGenericCommand+0x98>)
 80066f0:	6818      	ldr	r0, [r3, #0]
 80066f2:	f107 0110 	add.w	r1, r7, #16
 80066f6:	2300      	movs	r3, #0
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	f7fe fce1 	bl	80050c0 <xQueueGenericSendFromISR>
 80066fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006702:	4618      	mov	r0, r3
 8006704:	3728      	adds	r7, #40	; 0x28
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	20000fe4 	.word	0x20000fe4

08006710 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b088      	sub	sp, #32
 8006714:	af02      	add	r7, sp, #8
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800671a:	4b22      	ldr	r3, [pc, #136]	; (80067a4 <prvProcessExpiredTimer+0x94>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	3304      	adds	r3, #4
 8006728:	4618      	mov	r0, r3
 800672a:	f7fe fa63 	bl	8004bf4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006734:	f003 0304 	and.w	r3, r3, #4
 8006738:	2b00      	cmp	r3, #0
 800673a:	d022      	beq.n	8006782 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	699a      	ldr	r2, [r3, #24]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	18d1      	adds	r1, r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	6978      	ldr	r0, [r7, #20]
 800674a:	f000 f8d1 	bl	80068f0 <prvInsertTimerInActiveList>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d01f      	beq.n	8006794 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006754:	2300      	movs	r3, #0
 8006756:	9300      	str	r3, [sp, #0]
 8006758:	2300      	movs	r3, #0
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	2100      	movs	r1, #0
 800675e:	6978      	ldr	r0, [r7, #20]
 8006760:	f7ff ff88 	bl	8006674 <xTimerGenericCommand>
 8006764:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d113      	bne.n	8006794 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800676c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006770:	f383 8811 	msr	BASEPRI, r3
 8006774:	f3bf 8f6f 	isb	sy
 8006778:	f3bf 8f4f 	dsb	sy
 800677c:	60fb      	str	r3, [r7, #12]
}
 800677e:	bf00      	nop
 8006780:	e7fe      	b.n	8006780 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006788:	f023 0301 	bic.w	r3, r3, #1
 800678c:	b2da      	uxtb	r2, r3
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	6978      	ldr	r0, [r7, #20]
 800679a:	4798      	blx	r3
}
 800679c:	bf00      	nop
 800679e:	3718      	adds	r7, #24
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	20000fdc 	.word	0x20000fdc

080067a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80067b0:	f107 0308 	add.w	r3, r7, #8
 80067b4:	4618      	mov	r0, r3
 80067b6:	f000 f857 	bl	8006868 <prvGetNextExpireTime>
 80067ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	4619      	mov	r1, r3
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f000 f803 	bl	80067cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80067c6:	f000 f8d5 	bl	8006974 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80067ca:	e7f1      	b.n	80067b0 <prvTimerTask+0x8>

080067cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80067d6:	f7ff fa39 	bl	8005c4c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80067da:	f107 0308 	add.w	r3, r7, #8
 80067de:	4618      	mov	r0, r3
 80067e0:	f000 f866 	bl	80068b0 <prvSampleTimeNow>
 80067e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d130      	bne.n	800684e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10a      	bne.n	8006808 <prvProcessTimerOrBlockTask+0x3c>
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d806      	bhi.n	8006808 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80067fa:	f7ff fa35 	bl	8005c68 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80067fe:	68f9      	ldr	r1, [r7, #12]
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f7ff ff85 	bl	8006710 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006806:	e024      	b.n	8006852 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d008      	beq.n	8006820 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800680e:	4b13      	ldr	r3, [pc, #76]	; (800685c <prvProcessTimerOrBlockTask+0x90>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d101      	bne.n	800681c <prvProcessTimerOrBlockTask+0x50>
 8006818:	2301      	movs	r3, #1
 800681a:	e000      	b.n	800681e <prvProcessTimerOrBlockTask+0x52>
 800681c:	2300      	movs	r3, #0
 800681e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006820:	4b0f      	ldr	r3, [pc, #60]	; (8006860 <prvProcessTimerOrBlockTask+0x94>)
 8006822:	6818      	ldr	r0, [r3, #0]
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	683a      	ldr	r2, [r7, #0]
 800682c:	4619      	mov	r1, r3
 800682e:	f7fe ff7d 	bl	800572c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006832:	f7ff fa19 	bl	8005c68 <xTaskResumeAll>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10a      	bne.n	8006852 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800683c:	4b09      	ldr	r3, [pc, #36]	; (8006864 <prvProcessTimerOrBlockTask+0x98>)
 800683e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	f3bf 8f6f 	isb	sy
}
 800684c:	e001      	b.n	8006852 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800684e:	f7ff fa0b 	bl	8005c68 <xTaskResumeAll>
}
 8006852:	bf00      	nop
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	20000fe0 	.word	0x20000fe0
 8006860:	20000fe4 	.word	0x20000fe4
 8006864:	e000ed04 	.word	0xe000ed04

08006868 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006870:	4b0e      	ldr	r3, [pc, #56]	; (80068ac <prvGetNextExpireTime+0x44>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d101      	bne.n	800687e <prvGetNextExpireTime+0x16>
 800687a:	2201      	movs	r2, #1
 800687c:	e000      	b.n	8006880 <prvGetNextExpireTime+0x18>
 800687e:	2200      	movs	r2, #0
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d105      	bne.n	8006898 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800688c:	4b07      	ldr	r3, [pc, #28]	; (80068ac <prvGetNextExpireTime+0x44>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	60fb      	str	r3, [r7, #12]
 8006896:	e001      	b.n	800689c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006898:	2300      	movs	r3, #0
 800689a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800689c:	68fb      	ldr	r3, [r7, #12]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	20000fdc 	.word	0x20000fdc

080068b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80068b8:	f7ff fa74 	bl	8005da4 <xTaskGetTickCount>
 80068bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80068be:	4b0b      	ldr	r3, [pc, #44]	; (80068ec <prvSampleTimeNow+0x3c>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d205      	bcs.n	80068d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80068c8:	f000 f936 	bl	8006b38 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	601a      	str	r2, [r3, #0]
 80068d2:	e002      	b.n	80068da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80068da:	4a04      	ldr	r2, [pc, #16]	; (80068ec <prvSampleTimeNow+0x3c>)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80068e0:	68fb      	ldr	r3, [r7, #12]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	20000fec 	.word	0x20000fec

080068f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
 80068fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80068fe:	2300      	movs	r3, #0
 8006900:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	68ba      	ldr	r2, [r7, #8]
 8006906:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	429a      	cmp	r2, r3
 8006914:	d812      	bhi.n	800693c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	1ad2      	subs	r2, r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	699b      	ldr	r3, [r3, #24]
 8006920:	429a      	cmp	r2, r3
 8006922:	d302      	bcc.n	800692a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006924:	2301      	movs	r3, #1
 8006926:	617b      	str	r3, [r7, #20]
 8006928:	e01b      	b.n	8006962 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800692a:	4b10      	ldr	r3, [pc, #64]	; (800696c <prvInsertTimerInActiveList+0x7c>)
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	3304      	adds	r3, #4
 8006932:	4619      	mov	r1, r3
 8006934:	4610      	mov	r0, r2
 8006936:	f7fe f924 	bl	8004b82 <vListInsert>
 800693a:	e012      	b.n	8006962 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	429a      	cmp	r2, r3
 8006942:	d206      	bcs.n	8006952 <prvInsertTimerInActiveList+0x62>
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	429a      	cmp	r2, r3
 800694a:	d302      	bcc.n	8006952 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800694c:	2301      	movs	r3, #1
 800694e:	617b      	str	r3, [r7, #20]
 8006950:	e007      	b.n	8006962 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006952:	4b07      	ldr	r3, [pc, #28]	; (8006970 <prvInsertTimerInActiveList+0x80>)
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	3304      	adds	r3, #4
 800695a:	4619      	mov	r1, r3
 800695c:	4610      	mov	r0, r2
 800695e:	f7fe f910 	bl	8004b82 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006962:	697b      	ldr	r3, [r7, #20]
}
 8006964:	4618      	mov	r0, r3
 8006966:	3718      	adds	r7, #24
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	20000fe0 	.word	0x20000fe0
 8006970:	20000fdc 	.word	0x20000fdc

08006974 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b08e      	sub	sp, #56	; 0x38
 8006978:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800697a:	e0ca      	b.n	8006b12 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	da18      	bge.n	80069b4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006982:	1d3b      	adds	r3, r7, #4
 8006984:	3304      	adds	r3, #4
 8006986:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800698a:	2b00      	cmp	r3, #0
 800698c:	d10a      	bne.n	80069a4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800698e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	61fb      	str	r3, [r7, #28]
}
 80069a0:	bf00      	nop
 80069a2:	e7fe      	b.n	80069a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80069a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069aa:	6850      	ldr	r0, [r2, #4]
 80069ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069ae:	6892      	ldr	r2, [r2, #8]
 80069b0:	4611      	mov	r1, r2
 80069b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f2c0 80ab 	blt.w	8006b12 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80069c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c2:	695b      	ldr	r3, [r3, #20]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d004      	beq.n	80069d2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ca:	3304      	adds	r3, #4
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7fe f911 	bl	8004bf4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069d2:	463b      	mov	r3, r7
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7ff ff6b 	bl	80068b0 <prvSampleTimeNow>
 80069da:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b09      	cmp	r3, #9
 80069e0:	f200 8096 	bhi.w	8006b10 <prvProcessReceivedCommands+0x19c>
 80069e4:	a201      	add	r2, pc, #4	; (adr r2, 80069ec <prvProcessReceivedCommands+0x78>)
 80069e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ea:	bf00      	nop
 80069ec:	08006a15 	.word	0x08006a15
 80069f0:	08006a15 	.word	0x08006a15
 80069f4:	08006a15 	.word	0x08006a15
 80069f8:	08006a89 	.word	0x08006a89
 80069fc:	08006a9d 	.word	0x08006a9d
 8006a00:	08006ae7 	.word	0x08006ae7
 8006a04:	08006a15 	.word	0x08006a15
 8006a08:	08006a15 	.word	0x08006a15
 8006a0c:	08006a89 	.word	0x08006a89
 8006a10:	08006a9d 	.word	0x08006a9d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a1a:	f043 0301 	orr.w	r3, r3, #1
 8006a1e:	b2da      	uxtb	r2, r3
 8006a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	18d1      	adds	r1, r2, r3
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a34:	f7ff ff5c 	bl	80068f0 <prvInsertTimerInActiveList>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d069      	beq.n	8006b12 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a4c:	f003 0304 	and.w	r3, r3, #4
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d05e      	beq.n	8006b12 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006a54:	68ba      	ldr	r2, [r7, #8]
 8006a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	441a      	add	r2, r3
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	9300      	str	r3, [sp, #0]
 8006a60:	2300      	movs	r3, #0
 8006a62:	2100      	movs	r1, #0
 8006a64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a66:	f7ff fe05 	bl	8006674 <xTimerGenericCommand>
 8006a6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006a6c:	6a3b      	ldr	r3, [r7, #32]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d14f      	bne.n	8006b12 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a76:	f383 8811 	msr	BASEPRI, r3
 8006a7a:	f3bf 8f6f 	isb	sy
 8006a7e:	f3bf 8f4f 	dsb	sy
 8006a82:	61bb      	str	r3, [r7, #24]
}
 8006a84:	bf00      	nop
 8006a86:	e7fe      	b.n	8006a86 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a8e:	f023 0301 	bic.w	r3, r3, #1
 8006a92:	b2da      	uxtb	r2, r3
 8006a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006a9a:	e03a      	b.n	8006b12 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006aa2:	f043 0301 	orr.w	r3, r3, #1
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006aae:	68ba      	ldr	r2, [r7, #8]
 8006ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10a      	bne.n	8006ad2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac0:	f383 8811 	msr	BASEPRI, r3
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	617b      	str	r3, [r7, #20]
}
 8006ace:	bf00      	nop
 8006ad0:	e7fe      	b.n	8006ad0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad4:	699a      	ldr	r2, [r3, #24]
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad8:	18d1      	adds	r1, r2, r3
 8006ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ade:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ae0:	f7ff ff06 	bl	80068f0 <prvInsertTimerInActiveList>
					break;
 8006ae4:	e015      	b.n	8006b12 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006aec:	f003 0302 	and.w	r3, r3, #2
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d103      	bne.n	8006afc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006af4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006af6:	f000 fbdb 	bl	80072b0 <vPortFree>
 8006afa:	e00a      	b.n	8006b12 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b02:	f023 0301 	bic.w	r3, r3, #1
 8006b06:	b2da      	uxtb	r2, r3
 8006b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006b0e:	e000      	b.n	8006b12 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006b10:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b12:	4b08      	ldr	r3, [pc, #32]	; (8006b34 <prvProcessReceivedCommands+0x1c0>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	1d39      	adds	r1, r7, #4
 8006b18:	2200      	movs	r2, #0
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7fe fb6c 	bl	80051f8 <xQueueReceive>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f47f af2a 	bne.w	800697c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006b28:	bf00      	nop
 8006b2a:	bf00      	nop
 8006b2c:	3730      	adds	r7, #48	; 0x30
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	20000fe4 	.word	0x20000fe4

08006b38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b088      	sub	sp, #32
 8006b3c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b3e:	e048      	b.n	8006bd2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b40:	4b2d      	ldr	r3, [pc, #180]	; (8006bf8 <prvSwitchTimerLists+0xc0>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b4a:	4b2b      	ldr	r3, [pc, #172]	; (8006bf8 <prvSwitchTimerLists+0xc0>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	3304      	adds	r3, #4
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7fe f84b 	bl	8004bf4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b6c:	f003 0304 	and.w	r3, r3, #4
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d02e      	beq.n	8006bd2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	699b      	ldr	r3, [r3, #24]
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d90e      	bls.n	8006ba4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	68ba      	ldr	r2, [r7, #8]
 8006b8a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b92:	4b19      	ldr	r3, [pc, #100]	; (8006bf8 <prvSwitchTimerLists+0xc0>)
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	3304      	adds	r3, #4
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	4610      	mov	r0, r2
 8006b9e:	f7fd fff0 	bl	8004b82 <vListInsert>
 8006ba2:	e016      	b.n	8006bd2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	2300      	movs	r3, #0
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	2100      	movs	r1, #0
 8006bae:	68f8      	ldr	r0, [r7, #12]
 8006bb0:	f7ff fd60 	bl	8006674 <xTimerGenericCommand>
 8006bb4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d10a      	bne.n	8006bd2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc0:	f383 8811 	msr	BASEPRI, r3
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	603b      	str	r3, [r7, #0]
}
 8006bce:	bf00      	nop
 8006bd0:	e7fe      	b.n	8006bd0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006bd2:	4b09      	ldr	r3, [pc, #36]	; (8006bf8 <prvSwitchTimerLists+0xc0>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1b1      	bne.n	8006b40 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006bdc:	4b06      	ldr	r3, [pc, #24]	; (8006bf8 <prvSwitchTimerLists+0xc0>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006be2:	4b06      	ldr	r3, [pc, #24]	; (8006bfc <prvSwitchTimerLists+0xc4>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a04      	ldr	r2, [pc, #16]	; (8006bf8 <prvSwitchTimerLists+0xc0>)
 8006be8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006bea:	4a04      	ldr	r2, [pc, #16]	; (8006bfc <prvSwitchTimerLists+0xc4>)
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	6013      	str	r3, [r2, #0]
}
 8006bf0:	bf00      	nop
 8006bf2:	3718      	adds	r7, #24
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	20000fdc 	.word	0x20000fdc
 8006bfc:	20000fe0 	.word	0x20000fe0

08006c00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006c06:	f000 f965 	bl	8006ed4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006c0a:	4b15      	ldr	r3, [pc, #84]	; (8006c60 <prvCheckForValidListAndQueue+0x60>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d120      	bne.n	8006c54 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006c12:	4814      	ldr	r0, [pc, #80]	; (8006c64 <prvCheckForValidListAndQueue+0x64>)
 8006c14:	f7fd ff64 	bl	8004ae0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006c18:	4813      	ldr	r0, [pc, #76]	; (8006c68 <prvCheckForValidListAndQueue+0x68>)
 8006c1a:	f7fd ff61 	bl	8004ae0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006c1e:	4b13      	ldr	r3, [pc, #76]	; (8006c6c <prvCheckForValidListAndQueue+0x6c>)
 8006c20:	4a10      	ldr	r2, [pc, #64]	; (8006c64 <prvCheckForValidListAndQueue+0x64>)
 8006c22:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006c24:	4b12      	ldr	r3, [pc, #72]	; (8006c70 <prvCheckForValidListAndQueue+0x70>)
 8006c26:	4a10      	ldr	r2, [pc, #64]	; (8006c68 <prvCheckForValidListAndQueue+0x68>)
 8006c28:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	4b11      	ldr	r3, [pc, #68]	; (8006c74 <prvCheckForValidListAndQueue+0x74>)
 8006c30:	4a11      	ldr	r2, [pc, #68]	; (8006c78 <prvCheckForValidListAndQueue+0x78>)
 8006c32:	2110      	movs	r1, #16
 8006c34:	200a      	movs	r0, #10
 8006c36:	f7fe f86f 	bl	8004d18 <xQueueGenericCreateStatic>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	4a08      	ldr	r2, [pc, #32]	; (8006c60 <prvCheckForValidListAndQueue+0x60>)
 8006c3e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006c40:	4b07      	ldr	r3, [pc, #28]	; (8006c60 <prvCheckForValidListAndQueue+0x60>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d005      	beq.n	8006c54 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006c48:	4b05      	ldr	r3, [pc, #20]	; (8006c60 <prvCheckForValidListAndQueue+0x60>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	490b      	ldr	r1, [pc, #44]	; (8006c7c <prvCheckForValidListAndQueue+0x7c>)
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7fe fd42 	bl	80056d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c54:	f000 f96e 	bl	8006f34 <vPortExitCritical>
}
 8006c58:	bf00      	nop
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	20000fe4 	.word	0x20000fe4
 8006c64:	20000fb4 	.word	0x20000fb4
 8006c68:	20000fc8 	.word	0x20000fc8
 8006c6c:	20000fdc 	.word	0x20000fdc
 8006c70:	20000fe0 	.word	0x20000fe0
 8006c74:	20001090 	.word	0x20001090
 8006c78:	20000ff0 	.word	0x20000ff0
 8006c7c:	08009ffc 	.word	0x08009ffc

08006c80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	3b04      	subs	r3, #4
 8006c90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	3b04      	subs	r3, #4
 8006c9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	f023 0201 	bic.w	r2, r3, #1
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	3b04      	subs	r3, #4
 8006cae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006cb0:	4a0c      	ldr	r2, [pc, #48]	; (8006ce4 <pxPortInitialiseStack+0x64>)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	3b14      	subs	r3, #20
 8006cba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	3b04      	subs	r3, #4
 8006cc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f06f 0202 	mvn.w	r2, #2
 8006cce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	3b20      	subs	r3, #32
 8006cd4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3714      	adds	r7, #20
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr
 8006ce4:	08006ce9 	.word	0x08006ce9

08006ce8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006cf2:	4b12      	ldr	r3, [pc, #72]	; (8006d3c <prvTaskExitError+0x54>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cfa:	d00a      	beq.n	8006d12 <prvTaskExitError+0x2a>
	__asm volatile
 8006cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d00:	f383 8811 	msr	BASEPRI, r3
 8006d04:	f3bf 8f6f 	isb	sy
 8006d08:	f3bf 8f4f 	dsb	sy
 8006d0c:	60fb      	str	r3, [r7, #12]
}
 8006d0e:	bf00      	nop
 8006d10:	e7fe      	b.n	8006d10 <prvTaskExitError+0x28>
	__asm volatile
 8006d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d16:	f383 8811 	msr	BASEPRI, r3
 8006d1a:	f3bf 8f6f 	isb	sy
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	60bb      	str	r3, [r7, #8]
}
 8006d24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006d26:	bf00      	nop
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d0fc      	beq.n	8006d28 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006d2e:	bf00      	nop
 8006d30:	bf00      	nop
 8006d32:	3714      	adds	r7, #20
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr
 8006d3c:	2000000c 	.word	0x2000000c

08006d40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006d40:	4b07      	ldr	r3, [pc, #28]	; (8006d60 <pxCurrentTCBConst2>)
 8006d42:	6819      	ldr	r1, [r3, #0]
 8006d44:	6808      	ldr	r0, [r1, #0]
 8006d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d4a:	f380 8809 	msr	PSP, r0
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	f04f 0000 	mov.w	r0, #0
 8006d56:	f380 8811 	msr	BASEPRI, r0
 8006d5a:	4770      	bx	lr
 8006d5c:	f3af 8000 	nop.w

08006d60 <pxCurrentTCBConst2>:
 8006d60:	20000ab4 	.word	0x20000ab4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006d64:	bf00      	nop
 8006d66:	bf00      	nop

08006d68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006d68:	4808      	ldr	r0, [pc, #32]	; (8006d8c <prvPortStartFirstTask+0x24>)
 8006d6a:	6800      	ldr	r0, [r0, #0]
 8006d6c:	6800      	ldr	r0, [r0, #0]
 8006d6e:	f380 8808 	msr	MSP, r0
 8006d72:	f04f 0000 	mov.w	r0, #0
 8006d76:	f380 8814 	msr	CONTROL, r0
 8006d7a:	b662      	cpsie	i
 8006d7c:	b661      	cpsie	f
 8006d7e:	f3bf 8f4f 	dsb	sy
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	df00      	svc	0
 8006d88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006d8a:	bf00      	nop
 8006d8c:	e000ed08 	.word	0xe000ed08

08006d90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006d96:	4b46      	ldr	r3, [pc, #280]	; (8006eb0 <xPortStartScheduler+0x120>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a46      	ldr	r2, [pc, #280]	; (8006eb4 <xPortStartScheduler+0x124>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d10a      	bne.n	8006db6 <xPortStartScheduler+0x26>
	__asm volatile
 8006da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da4:	f383 8811 	msr	BASEPRI, r3
 8006da8:	f3bf 8f6f 	isb	sy
 8006dac:	f3bf 8f4f 	dsb	sy
 8006db0:	613b      	str	r3, [r7, #16]
}
 8006db2:	bf00      	nop
 8006db4:	e7fe      	b.n	8006db4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006db6:	4b3e      	ldr	r3, [pc, #248]	; (8006eb0 <xPortStartScheduler+0x120>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a3f      	ldr	r2, [pc, #252]	; (8006eb8 <xPortStartScheduler+0x128>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d10a      	bne.n	8006dd6 <xPortStartScheduler+0x46>
	__asm volatile
 8006dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc4:	f383 8811 	msr	BASEPRI, r3
 8006dc8:	f3bf 8f6f 	isb	sy
 8006dcc:	f3bf 8f4f 	dsb	sy
 8006dd0:	60fb      	str	r3, [r7, #12]
}
 8006dd2:	bf00      	nop
 8006dd4:	e7fe      	b.n	8006dd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006dd6:	4b39      	ldr	r3, [pc, #228]	; (8006ebc <xPortStartScheduler+0x12c>)
 8006dd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	22ff      	movs	r2, #255	; 0xff
 8006de6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006df0:	78fb      	ldrb	r3, [r7, #3]
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006df8:	b2da      	uxtb	r2, r3
 8006dfa:	4b31      	ldr	r3, [pc, #196]	; (8006ec0 <xPortStartScheduler+0x130>)
 8006dfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006dfe:	4b31      	ldr	r3, [pc, #196]	; (8006ec4 <xPortStartScheduler+0x134>)
 8006e00:	2207      	movs	r2, #7
 8006e02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e04:	e009      	b.n	8006e1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006e06:	4b2f      	ldr	r3, [pc, #188]	; (8006ec4 <xPortStartScheduler+0x134>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	4a2d      	ldr	r2, [pc, #180]	; (8006ec4 <xPortStartScheduler+0x134>)
 8006e0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e10:	78fb      	ldrb	r3, [r7, #3]
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	005b      	lsls	r3, r3, #1
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e1a:	78fb      	ldrb	r3, [r7, #3]
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e22:	2b80      	cmp	r3, #128	; 0x80
 8006e24:	d0ef      	beq.n	8006e06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006e26:	4b27      	ldr	r3, [pc, #156]	; (8006ec4 <xPortStartScheduler+0x134>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f1c3 0307 	rsb	r3, r3, #7
 8006e2e:	2b04      	cmp	r3, #4
 8006e30:	d00a      	beq.n	8006e48 <xPortStartScheduler+0xb8>
	__asm volatile
 8006e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e36:	f383 8811 	msr	BASEPRI, r3
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	60bb      	str	r3, [r7, #8]
}
 8006e44:	bf00      	nop
 8006e46:	e7fe      	b.n	8006e46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006e48:	4b1e      	ldr	r3, [pc, #120]	; (8006ec4 <xPortStartScheduler+0x134>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	021b      	lsls	r3, r3, #8
 8006e4e:	4a1d      	ldr	r2, [pc, #116]	; (8006ec4 <xPortStartScheduler+0x134>)
 8006e50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e52:	4b1c      	ldr	r3, [pc, #112]	; (8006ec4 <xPortStartScheduler+0x134>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e5a:	4a1a      	ldr	r2, [pc, #104]	; (8006ec4 <xPortStartScheduler+0x134>)
 8006e5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	b2da      	uxtb	r2, r3
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006e66:	4b18      	ldr	r3, [pc, #96]	; (8006ec8 <xPortStartScheduler+0x138>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a17      	ldr	r2, [pc, #92]	; (8006ec8 <xPortStartScheduler+0x138>)
 8006e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006e72:	4b15      	ldr	r3, [pc, #84]	; (8006ec8 <xPortStartScheduler+0x138>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a14      	ldr	r2, [pc, #80]	; (8006ec8 <xPortStartScheduler+0x138>)
 8006e78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006e7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006e7e:	f000 f8dd 	bl	800703c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006e82:	4b12      	ldr	r3, [pc, #72]	; (8006ecc <xPortStartScheduler+0x13c>)
 8006e84:	2200      	movs	r2, #0
 8006e86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006e88:	f000 f8fc 	bl	8007084 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006e8c:	4b10      	ldr	r3, [pc, #64]	; (8006ed0 <xPortStartScheduler+0x140>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a0f      	ldr	r2, [pc, #60]	; (8006ed0 <xPortStartScheduler+0x140>)
 8006e92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006e96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006e98:	f7ff ff66 	bl	8006d68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006e9c:	f7ff f84c 	bl	8005f38 <vTaskSwitchContext>
	prvTaskExitError();
 8006ea0:	f7ff ff22 	bl	8006ce8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3718      	adds	r7, #24
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	e000ed00 	.word	0xe000ed00
 8006eb4:	410fc271 	.word	0x410fc271
 8006eb8:	410fc270 	.word	0x410fc270
 8006ebc:	e000e400 	.word	0xe000e400
 8006ec0:	200010e0 	.word	0x200010e0
 8006ec4:	200010e4 	.word	0x200010e4
 8006ec8:	e000ed20 	.word	0xe000ed20
 8006ecc:	2000000c 	.word	0x2000000c
 8006ed0:	e000ef34 	.word	0xe000ef34

08006ed4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
	__asm volatile
 8006eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	607b      	str	r3, [r7, #4]
}
 8006eec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006eee:	4b0f      	ldr	r3, [pc, #60]	; (8006f2c <vPortEnterCritical+0x58>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	4a0d      	ldr	r2, [pc, #52]	; (8006f2c <vPortEnterCritical+0x58>)
 8006ef6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006ef8:	4b0c      	ldr	r3, [pc, #48]	; (8006f2c <vPortEnterCritical+0x58>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d10f      	bne.n	8006f20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f00:	4b0b      	ldr	r3, [pc, #44]	; (8006f30 <vPortEnterCritical+0x5c>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00a      	beq.n	8006f20 <vPortEnterCritical+0x4c>
	__asm volatile
 8006f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0e:	f383 8811 	msr	BASEPRI, r3
 8006f12:	f3bf 8f6f 	isb	sy
 8006f16:	f3bf 8f4f 	dsb	sy
 8006f1a:	603b      	str	r3, [r7, #0]
}
 8006f1c:	bf00      	nop
 8006f1e:	e7fe      	b.n	8006f1e <vPortEnterCritical+0x4a>
	}
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr
 8006f2c:	2000000c 	.word	0x2000000c
 8006f30:	e000ed04 	.word	0xe000ed04

08006f34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006f3a:	4b12      	ldr	r3, [pc, #72]	; (8006f84 <vPortExitCritical+0x50>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d10a      	bne.n	8006f58 <vPortExitCritical+0x24>
	__asm volatile
 8006f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f46:	f383 8811 	msr	BASEPRI, r3
 8006f4a:	f3bf 8f6f 	isb	sy
 8006f4e:	f3bf 8f4f 	dsb	sy
 8006f52:	607b      	str	r3, [r7, #4]
}
 8006f54:	bf00      	nop
 8006f56:	e7fe      	b.n	8006f56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006f58:	4b0a      	ldr	r3, [pc, #40]	; (8006f84 <vPortExitCritical+0x50>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	4a09      	ldr	r2, [pc, #36]	; (8006f84 <vPortExitCritical+0x50>)
 8006f60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006f62:	4b08      	ldr	r3, [pc, #32]	; (8006f84 <vPortExitCritical+0x50>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d105      	bne.n	8006f76 <vPortExitCritical+0x42>
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	f383 8811 	msr	BASEPRI, r3
}
 8006f74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006f76:	bf00      	nop
 8006f78:	370c      	adds	r7, #12
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	2000000c 	.word	0x2000000c
	...

08006f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006f90:	f3ef 8009 	mrs	r0, PSP
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	4b15      	ldr	r3, [pc, #84]	; (8006ff0 <pxCurrentTCBConst>)
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	f01e 0f10 	tst.w	lr, #16
 8006fa0:	bf08      	it	eq
 8006fa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006fa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006faa:	6010      	str	r0, [r2, #0]
 8006fac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006fb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006fb4:	f380 8811 	msr	BASEPRI, r0
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	f3bf 8f6f 	isb	sy
 8006fc0:	f7fe ffba 	bl	8005f38 <vTaskSwitchContext>
 8006fc4:	f04f 0000 	mov.w	r0, #0
 8006fc8:	f380 8811 	msr	BASEPRI, r0
 8006fcc:	bc09      	pop	{r0, r3}
 8006fce:	6819      	ldr	r1, [r3, #0]
 8006fd0:	6808      	ldr	r0, [r1, #0]
 8006fd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd6:	f01e 0f10 	tst.w	lr, #16
 8006fda:	bf08      	it	eq
 8006fdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006fe0:	f380 8809 	msr	PSP, r0
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	f3af 8000 	nop.w

08006ff0 <pxCurrentTCBConst>:
 8006ff0:	20000ab4 	.word	0x20000ab4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ff4:	bf00      	nop
 8006ff6:	bf00      	nop

08006ff8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8006ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007002:	f383 8811 	msr	BASEPRI, r3
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	607b      	str	r3, [r7, #4]
}
 8007010:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007012:	f7fe fed7 	bl	8005dc4 <xTaskIncrementTick>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d003      	beq.n	8007024 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800701c:	4b06      	ldr	r3, [pc, #24]	; (8007038 <xPortSysTickHandler+0x40>)
 800701e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007022:	601a      	str	r2, [r3, #0]
 8007024:	2300      	movs	r3, #0
 8007026:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	f383 8811 	msr	BASEPRI, r3
}
 800702e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007030:	bf00      	nop
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	e000ed04 	.word	0xe000ed04

0800703c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800703c:	b480      	push	{r7}
 800703e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007040:	4b0b      	ldr	r3, [pc, #44]	; (8007070 <vPortSetupTimerInterrupt+0x34>)
 8007042:	2200      	movs	r2, #0
 8007044:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007046:	4b0b      	ldr	r3, [pc, #44]	; (8007074 <vPortSetupTimerInterrupt+0x38>)
 8007048:	2200      	movs	r2, #0
 800704a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800704c:	4b0a      	ldr	r3, [pc, #40]	; (8007078 <vPortSetupTimerInterrupt+0x3c>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a0a      	ldr	r2, [pc, #40]	; (800707c <vPortSetupTimerInterrupt+0x40>)
 8007052:	fba2 2303 	umull	r2, r3, r2, r3
 8007056:	099b      	lsrs	r3, r3, #6
 8007058:	4a09      	ldr	r2, [pc, #36]	; (8007080 <vPortSetupTimerInterrupt+0x44>)
 800705a:	3b01      	subs	r3, #1
 800705c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800705e:	4b04      	ldr	r3, [pc, #16]	; (8007070 <vPortSetupTimerInterrupt+0x34>)
 8007060:	2207      	movs	r2, #7
 8007062:	601a      	str	r2, [r3, #0]
}
 8007064:	bf00      	nop
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	e000e010 	.word	0xe000e010
 8007074:	e000e018 	.word	0xe000e018
 8007078:	20000000 	.word	0x20000000
 800707c:	10624dd3 	.word	0x10624dd3
 8007080:	e000e014 	.word	0xe000e014

08007084 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007084:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007094 <vPortEnableVFP+0x10>
 8007088:	6801      	ldr	r1, [r0, #0]
 800708a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800708e:	6001      	str	r1, [r0, #0]
 8007090:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007092:	bf00      	nop
 8007094:	e000ed88 	.word	0xe000ed88

08007098 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800709e:	f3ef 8305 	mrs	r3, IPSR
 80070a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2b0f      	cmp	r3, #15
 80070a8:	d914      	bls.n	80070d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80070aa:	4a17      	ldr	r2, [pc, #92]	; (8007108 <vPortValidateInterruptPriority+0x70>)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	4413      	add	r3, r2
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80070b4:	4b15      	ldr	r3, [pc, #84]	; (800710c <vPortValidateInterruptPriority+0x74>)
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	7afa      	ldrb	r2, [r7, #11]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d20a      	bcs.n	80070d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80070be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c2:	f383 8811 	msr	BASEPRI, r3
 80070c6:	f3bf 8f6f 	isb	sy
 80070ca:	f3bf 8f4f 	dsb	sy
 80070ce:	607b      	str	r3, [r7, #4]
}
 80070d0:	bf00      	nop
 80070d2:	e7fe      	b.n	80070d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80070d4:	4b0e      	ldr	r3, [pc, #56]	; (8007110 <vPortValidateInterruptPriority+0x78>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80070dc:	4b0d      	ldr	r3, [pc, #52]	; (8007114 <vPortValidateInterruptPriority+0x7c>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d90a      	bls.n	80070fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80070e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	603b      	str	r3, [r7, #0]
}
 80070f6:	bf00      	nop
 80070f8:	e7fe      	b.n	80070f8 <vPortValidateInterruptPriority+0x60>
	}
 80070fa:	bf00      	nop
 80070fc:	3714      	adds	r7, #20
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	e000e3f0 	.word	0xe000e3f0
 800710c:	200010e0 	.word	0x200010e0
 8007110:	e000ed0c 	.word	0xe000ed0c
 8007114:	200010e4 	.word	0x200010e4

08007118 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b08a      	sub	sp, #40	; 0x28
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007120:	2300      	movs	r3, #0
 8007122:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007124:	f7fe fd92 	bl	8005c4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007128:	4b5b      	ldr	r3, [pc, #364]	; (8007298 <pvPortMalloc+0x180>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d101      	bne.n	8007134 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007130:	f000 f920 	bl	8007374 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007134:	4b59      	ldr	r3, [pc, #356]	; (800729c <pvPortMalloc+0x184>)
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4013      	ands	r3, r2
 800713c:	2b00      	cmp	r3, #0
 800713e:	f040 8093 	bne.w	8007268 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d01d      	beq.n	8007184 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007148:	2208      	movs	r2, #8
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4413      	add	r3, r2
 800714e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f003 0307 	and.w	r3, r3, #7
 8007156:	2b00      	cmp	r3, #0
 8007158:	d014      	beq.n	8007184 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f023 0307 	bic.w	r3, r3, #7
 8007160:	3308      	adds	r3, #8
 8007162:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f003 0307 	and.w	r3, r3, #7
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00a      	beq.n	8007184 <pvPortMalloc+0x6c>
	__asm volatile
 800716e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007172:	f383 8811 	msr	BASEPRI, r3
 8007176:	f3bf 8f6f 	isb	sy
 800717a:	f3bf 8f4f 	dsb	sy
 800717e:	617b      	str	r3, [r7, #20]
}
 8007180:	bf00      	nop
 8007182:	e7fe      	b.n	8007182 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d06e      	beq.n	8007268 <pvPortMalloc+0x150>
 800718a:	4b45      	ldr	r3, [pc, #276]	; (80072a0 <pvPortMalloc+0x188>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	429a      	cmp	r2, r3
 8007192:	d869      	bhi.n	8007268 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007194:	4b43      	ldr	r3, [pc, #268]	; (80072a4 <pvPortMalloc+0x18c>)
 8007196:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007198:	4b42      	ldr	r3, [pc, #264]	; (80072a4 <pvPortMalloc+0x18c>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800719e:	e004      	b.n	80071aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80071a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80071a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d903      	bls.n	80071bc <pvPortMalloc+0xa4>
 80071b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1f1      	bne.n	80071a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80071bc:	4b36      	ldr	r3, [pc, #216]	; (8007298 <pvPortMalloc+0x180>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d050      	beq.n	8007268 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80071c6:	6a3b      	ldr	r3, [r7, #32]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2208      	movs	r2, #8
 80071cc:	4413      	add	r3, r2
 80071ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80071d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	6a3b      	ldr	r3, [r7, #32]
 80071d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80071d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071da:	685a      	ldr	r2, [r3, #4]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	1ad2      	subs	r2, r2, r3
 80071e0:	2308      	movs	r3, #8
 80071e2:	005b      	lsls	r3, r3, #1
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d91f      	bls.n	8007228 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80071e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4413      	add	r3, r2
 80071ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	f003 0307 	and.w	r3, r3, #7
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00a      	beq.n	8007210 <pvPortMalloc+0xf8>
	__asm volatile
 80071fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fe:	f383 8811 	msr	BASEPRI, r3
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	613b      	str	r3, [r7, #16]
}
 800720c:	bf00      	nop
 800720e:	e7fe      	b.n	800720e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007212:	685a      	ldr	r2, [r3, #4]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	1ad2      	subs	r2, r2, r3
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800721c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007222:	69b8      	ldr	r0, [r7, #24]
 8007224:	f000 f908 	bl	8007438 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007228:	4b1d      	ldr	r3, [pc, #116]	; (80072a0 <pvPortMalloc+0x188>)
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	4a1b      	ldr	r2, [pc, #108]	; (80072a0 <pvPortMalloc+0x188>)
 8007234:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007236:	4b1a      	ldr	r3, [pc, #104]	; (80072a0 <pvPortMalloc+0x188>)
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	4b1b      	ldr	r3, [pc, #108]	; (80072a8 <pvPortMalloc+0x190>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	429a      	cmp	r2, r3
 8007240:	d203      	bcs.n	800724a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007242:	4b17      	ldr	r3, [pc, #92]	; (80072a0 <pvPortMalloc+0x188>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a18      	ldr	r2, [pc, #96]	; (80072a8 <pvPortMalloc+0x190>)
 8007248:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800724a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724c:	685a      	ldr	r2, [r3, #4]
 800724e:	4b13      	ldr	r3, [pc, #76]	; (800729c <pvPortMalloc+0x184>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	431a      	orrs	r2, r3
 8007254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007256:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725a:	2200      	movs	r2, #0
 800725c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800725e:	4b13      	ldr	r3, [pc, #76]	; (80072ac <pvPortMalloc+0x194>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	3301      	adds	r3, #1
 8007264:	4a11      	ldr	r2, [pc, #68]	; (80072ac <pvPortMalloc+0x194>)
 8007266:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007268:	f7fe fcfe 	bl	8005c68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	f003 0307 	and.w	r3, r3, #7
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00a      	beq.n	800728c <pvPortMalloc+0x174>
	__asm volatile
 8007276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727a:	f383 8811 	msr	BASEPRI, r3
 800727e:	f3bf 8f6f 	isb	sy
 8007282:	f3bf 8f4f 	dsb	sy
 8007286:	60fb      	str	r3, [r7, #12]
}
 8007288:	bf00      	nop
 800728a:	e7fe      	b.n	800728a <pvPortMalloc+0x172>
	return pvReturn;
 800728c:	69fb      	ldr	r3, [r7, #28]
}
 800728e:	4618      	mov	r0, r3
 8007290:	3728      	adds	r7, #40	; 0x28
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	20001ca8 	.word	0x20001ca8
 800729c:	20001cbc 	.word	0x20001cbc
 80072a0:	20001cac 	.word	0x20001cac
 80072a4:	20001ca0 	.word	0x20001ca0
 80072a8:	20001cb0 	.word	0x20001cb0
 80072ac:	20001cb4 	.word	0x20001cb4

080072b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b086      	sub	sp, #24
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d04d      	beq.n	800735e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80072c2:	2308      	movs	r3, #8
 80072c4:	425b      	negs	r3, r3
 80072c6:	697a      	ldr	r2, [r7, #20]
 80072c8:	4413      	add	r3, r2
 80072ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	685a      	ldr	r2, [r3, #4]
 80072d4:	4b24      	ldr	r3, [pc, #144]	; (8007368 <vPortFree+0xb8>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4013      	ands	r3, r2
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10a      	bne.n	80072f4 <vPortFree+0x44>
	__asm volatile
 80072de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e2:	f383 8811 	msr	BASEPRI, r3
 80072e6:	f3bf 8f6f 	isb	sy
 80072ea:	f3bf 8f4f 	dsb	sy
 80072ee:	60fb      	str	r3, [r7, #12]
}
 80072f0:	bf00      	nop
 80072f2:	e7fe      	b.n	80072f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00a      	beq.n	8007312 <vPortFree+0x62>
	__asm volatile
 80072fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007300:	f383 8811 	msr	BASEPRI, r3
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	60bb      	str	r3, [r7, #8]
}
 800730e:	bf00      	nop
 8007310:	e7fe      	b.n	8007310 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	685a      	ldr	r2, [r3, #4]
 8007316:	4b14      	ldr	r3, [pc, #80]	; (8007368 <vPortFree+0xb8>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4013      	ands	r3, r2
 800731c:	2b00      	cmp	r3, #0
 800731e:	d01e      	beq.n	800735e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d11a      	bne.n	800735e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	685a      	ldr	r2, [r3, #4]
 800732c:	4b0e      	ldr	r3, [pc, #56]	; (8007368 <vPortFree+0xb8>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	43db      	mvns	r3, r3
 8007332:	401a      	ands	r2, r3
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007338:	f7fe fc88 	bl	8005c4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	685a      	ldr	r2, [r3, #4]
 8007340:	4b0a      	ldr	r3, [pc, #40]	; (800736c <vPortFree+0xbc>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4413      	add	r3, r2
 8007346:	4a09      	ldr	r2, [pc, #36]	; (800736c <vPortFree+0xbc>)
 8007348:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800734a:	6938      	ldr	r0, [r7, #16]
 800734c:	f000 f874 	bl	8007438 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007350:	4b07      	ldr	r3, [pc, #28]	; (8007370 <vPortFree+0xc0>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	3301      	adds	r3, #1
 8007356:	4a06      	ldr	r2, [pc, #24]	; (8007370 <vPortFree+0xc0>)
 8007358:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800735a:	f7fe fc85 	bl	8005c68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800735e:	bf00      	nop
 8007360:	3718      	adds	r7, #24
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	20001cbc 	.word	0x20001cbc
 800736c:	20001cac 	.word	0x20001cac
 8007370:	20001cb8 	.word	0x20001cb8

08007374 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800737a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800737e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007380:	4b27      	ldr	r3, [pc, #156]	; (8007420 <prvHeapInit+0xac>)
 8007382:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f003 0307 	and.w	r3, r3, #7
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00c      	beq.n	80073a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	3307      	adds	r3, #7
 8007392:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f023 0307 	bic.w	r3, r3, #7
 800739a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	4a1f      	ldr	r2, [pc, #124]	; (8007420 <prvHeapInit+0xac>)
 80073a4:	4413      	add	r3, r2
 80073a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80073ac:	4a1d      	ldr	r2, [pc, #116]	; (8007424 <prvHeapInit+0xb0>)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80073b2:	4b1c      	ldr	r3, [pc, #112]	; (8007424 <prvHeapInit+0xb0>)
 80073b4:	2200      	movs	r2, #0
 80073b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	68ba      	ldr	r2, [r7, #8]
 80073bc:	4413      	add	r3, r2
 80073be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80073c0:	2208      	movs	r2, #8
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	1a9b      	subs	r3, r3, r2
 80073c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f023 0307 	bic.w	r3, r3, #7
 80073ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	4a15      	ldr	r2, [pc, #84]	; (8007428 <prvHeapInit+0xb4>)
 80073d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80073d6:	4b14      	ldr	r3, [pc, #80]	; (8007428 <prvHeapInit+0xb4>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2200      	movs	r2, #0
 80073dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80073de:	4b12      	ldr	r3, [pc, #72]	; (8007428 <prvHeapInit+0xb4>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2200      	movs	r2, #0
 80073e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	1ad2      	subs	r2, r2, r3
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80073f4:	4b0c      	ldr	r3, [pc, #48]	; (8007428 <prvHeapInit+0xb4>)
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	4a0a      	ldr	r2, [pc, #40]	; (800742c <prvHeapInit+0xb8>)
 8007402:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	4a09      	ldr	r2, [pc, #36]	; (8007430 <prvHeapInit+0xbc>)
 800740a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800740c:	4b09      	ldr	r3, [pc, #36]	; (8007434 <prvHeapInit+0xc0>)
 800740e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007412:	601a      	str	r2, [r3, #0]
}
 8007414:	bf00      	nop
 8007416:	3714      	adds	r7, #20
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr
 8007420:	200010e8 	.word	0x200010e8
 8007424:	20001ca0 	.word	0x20001ca0
 8007428:	20001ca8 	.word	0x20001ca8
 800742c:	20001cb0 	.word	0x20001cb0
 8007430:	20001cac 	.word	0x20001cac
 8007434:	20001cbc 	.word	0x20001cbc

08007438 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007438:	b480      	push	{r7}
 800743a:	b085      	sub	sp, #20
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007440:	4b28      	ldr	r3, [pc, #160]	; (80074e4 <prvInsertBlockIntoFreeList+0xac>)
 8007442:	60fb      	str	r3, [r7, #12]
 8007444:	e002      	b.n	800744c <prvInsertBlockIntoFreeList+0x14>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	60fb      	str	r3, [r7, #12]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	429a      	cmp	r2, r3
 8007454:	d8f7      	bhi.n	8007446 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	68ba      	ldr	r2, [r7, #8]
 8007460:	4413      	add	r3, r2
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	429a      	cmp	r2, r3
 8007466:	d108      	bne.n	800747a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	685a      	ldr	r2, [r3, #4]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	441a      	add	r2, r3
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	441a      	add	r2, r3
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	429a      	cmp	r2, r3
 800748c:	d118      	bne.n	80074c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	4b15      	ldr	r3, [pc, #84]	; (80074e8 <prvInsertBlockIntoFreeList+0xb0>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	429a      	cmp	r2, r3
 8007498:	d00d      	beq.n	80074b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	685a      	ldr	r2, [r3, #4]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	441a      	add	r2, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	601a      	str	r2, [r3, #0]
 80074b4:	e008      	b.n	80074c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80074b6:	4b0c      	ldr	r3, [pc, #48]	; (80074e8 <prvInsertBlockIntoFreeList+0xb0>)
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	601a      	str	r2, [r3, #0]
 80074be:	e003      	b.n	80074c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d002      	beq.n	80074d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074d6:	bf00      	nop
 80074d8:	3714      	adds	r7, #20
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	20001ca0 	.word	0x20001ca0
 80074e8:	20001ca8 	.word	0x20001ca8

080074ec <__cvt>:
 80074ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074f0:	ec55 4b10 	vmov	r4, r5, d0
 80074f4:	2d00      	cmp	r5, #0
 80074f6:	460e      	mov	r6, r1
 80074f8:	4619      	mov	r1, r3
 80074fa:	462b      	mov	r3, r5
 80074fc:	bfbb      	ittet	lt
 80074fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007502:	461d      	movlt	r5, r3
 8007504:	2300      	movge	r3, #0
 8007506:	232d      	movlt	r3, #45	; 0x2d
 8007508:	700b      	strb	r3, [r1, #0]
 800750a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800750c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007510:	4691      	mov	r9, r2
 8007512:	f023 0820 	bic.w	r8, r3, #32
 8007516:	bfbc      	itt	lt
 8007518:	4622      	movlt	r2, r4
 800751a:	4614      	movlt	r4, r2
 800751c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007520:	d005      	beq.n	800752e <__cvt+0x42>
 8007522:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007526:	d100      	bne.n	800752a <__cvt+0x3e>
 8007528:	3601      	adds	r6, #1
 800752a:	2102      	movs	r1, #2
 800752c:	e000      	b.n	8007530 <__cvt+0x44>
 800752e:	2103      	movs	r1, #3
 8007530:	ab03      	add	r3, sp, #12
 8007532:	9301      	str	r3, [sp, #4]
 8007534:	ab02      	add	r3, sp, #8
 8007536:	9300      	str	r3, [sp, #0]
 8007538:	ec45 4b10 	vmov	d0, r4, r5
 800753c:	4653      	mov	r3, sl
 800753e:	4632      	mov	r2, r6
 8007540:	f000 fed2 	bl	80082e8 <_dtoa_r>
 8007544:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007548:	4607      	mov	r7, r0
 800754a:	d102      	bne.n	8007552 <__cvt+0x66>
 800754c:	f019 0f01 	tst.w	r9, #1
 8007550:	d022      	beq.n	8007598 <__cvt+0xac>
 8007552:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007556:	eb07 0906 	add.w	r9, r7, r6
 800755a:	d110      	bne.n	800757e <__cvt+0x92>
 800755c:	783b      	ldrb	r3, [r7, #0]
 800755e:	2b30      	cmp	r3, #48	; 0x30
 8007560:	d10a      	bne.n	8007578 <__cvt+0x8c>
 8007562:	2200      	movs	r2, #0
 8007564:	2300      	movs	r3, #0
 8007566:	4620      	mov	r0, r4
 8007568:	4629      	mov	r1, r5
 800756a:	f7f9 fabd 	bl	8000ae8 <__aeabi_dcmpeq>
 800756e:	b918      	cbnz	r0, 8007578 <__cvt+0x8c>
 8007570:	f1c6 0601 	rsb	r6, r6, #1
 8007574:	f8ca 6000 	str.w	r6, [sl]
 8007578:	f8da 3000 	ldr.w	r3, [sl]
 800757c:	4499      	add	r9, r3
 800757e:	2200      	movs	r2, #0
 8007580:	2300      	movs	r3, #0
 8007582:	4620      	mov	r0, r4
 8007584:	4629      	mov	r1, r5
 8007586:	f7f9 faaf 	bl	8000ae8 <__aeabi_dcmpeq>
 800758a:	b108      	cbz	r0, 8007590 <__cvt+0xa4>
 800758c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007590:	2230      	movs	r2, #48	; 0x30
 8007592:	9b03      	ldr	r3, [sp, #12]
 8007594:	454b      	cmp	r3, r9
 8007596:	d307      	bcc.n	80075a8 <__cvt+0xbc>
 8007598:	9b03      	ldr	r3, [sp, #12]
 800759a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800759c:	1bdb      	subs	r3, r3, r7
 800759e:	4638      	mov	r0, r7
 80075a0:	6013      	str	r3, [r2, #0]
 80075a2:	b004      	add	sp, #16
 80075a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075a8:	1c59      	adds	r1, r3, #1
 80075aa:	9103      	str	r1, [sp, #12]
 80075ac:	701a      	strb	r2, [r3, #0]
 80075ae:	e7f0      	b.n	8007592 <__cvt+0xa6>

080075b0 <__exponent>:
 80075b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075b2:	4603      	mov	r3, r0
 80075b4:	2900      	cmp	r1, #0
 80075b6:	bfb8      	it	lt
 80075b8:	4249      	neglt	r1, r1
 80075ba:	f803 2b02 	strb.w	r2, [r3], #2
 80075be:	bfb4      	ite	lt
 80075c0:	222d      	movlt	r2, #45	; 0x2d
 80075c2:	222b      	movge	r2, #43	; 0x2b
 80075c4:	2909      	cmp	r1, #9
 80075c6:	7042      	strb	r2, [r0, #1]
 80075c8:	dd2a      	ble.n	8007620 <__exponent+0x70>
 80075ca:	f10d 0207 	add.w	r2, sp, #7
 80075ce:	4617      	mov	r7, r2
 80075d0:	260a      	movs	r6, #10
 80075d2:	4694      	mov	ip, r2
 80075d4:	fb91 f5f6 	sdiv	r5, r1, r6
 80075d8:	fb06 1415 	mls	r4, r6, r5, r1
 80075dc:	3430      	adds	r4, #48	; 0x30
 80075de:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80075e2:	460c      	mov	r4, r1
 80075e4:	2c63      	cmp	r4, #99	; 0x63
 80075e6:	f102 32ff 	add.w	r2, r2, #4294967295
 80075ea:	4629      	mov	r1, r5
 80075ec:	dcf1      	bgt.n	80075d2 <__exponent+0x22>
 80075ee:	3130      	adds	r1, #48	; 0x30
 80075f0:	f1ac 0402 	sub.w	r4, ip, #2
 80075f4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80075f8:	1c41      	adds	r1, r0, #1
 80075fa:	4622      	mov	r2, r4
 80075fc:	42ba      	cmp	r2, r7
 80075fe:	d30a      	bcc.n	8007616 <__exponent+0x66>
 8007600:	f10d 0209 	add.w	r2, sp, #9
 8007604:	eba2 020c 	sub.w	r2, r2, ip
 8007608:	42bc      	cmp	r4, r7
 800760a:	bf88      	it	hi
 800760c:	2200      	movhi	r2, #0
 800760e:	4413      	add	r3, r2
 8007610:	1a18      	subs	r0, r3, r0
 8007612:	b003      	add	sp, #12
 8007614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007616:	f812 5b01 	ldrb.w	r5, [r2], #1
 800761a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800761e:	e7ed      	b.n	80075fc <__exponent+0x4c>
 8007620:	2330      	movs	r3, #48	; 0x30
 8007622:	3130      	adds	r1, #48	; 0x30
 8007624:	7083      	strb	r3, [r0, #2]
 8007626:	70c1      	strb	r1, [r0, #3]
 8007628:	1d03      	adds	r3, r0, #4
 800762a:	e7f1      	b.n	8007610 <__exponent+0x60>

0800762c <_printf_float>:
 800762c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007630:	ed2d 8b02 	vpush	{d8}
 8007634:	b08d      	sub	sp, #52	; 0x34
 8007636:	460c      	mov	r4, r1
 8007638:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800763c:	4616      	mov	r6, r2
 800763e:	461f      	mov	r7, r3
 8007640:	4605      	mov	r5, r0
 8007642:	f000 fceb 	bl	800801c <_localeconv_r>
 8007646:	f8d0 a000 	ldr.w	sl, [r0]
 800764a:	4650      	mov	r0, sl
 800764c:	f7f8 fe20 	bl	8000290 <strlen>
 8007650:	2300      	movs	r3, #0
 8007652:	930a      	str	r3, [sp, #40]	; 0x28
 8007654:	6823      	ldr	r3, [r4, #0]
 8007656:	9305      	str	r3, [sp, #20]
 8007658:	f8d8 3000 	ldr.w	r3, [r8]
 800765c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007660:	3307      	adds	r3, #7
 8007662:	f023 0307 	bic.w	r3, r3, #7
 8007666:	f103 0208 	add.w	r2, r3, #8
 800766a:	f8c8 2000 	str.w	r2, [r8]
 800766e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007672:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007676:	9307      	str	r3, [sp, #28]
 8007678:	f8cd 8018 	str.w	r8, [sp, #24]
 800767c:	ee08 0a10 	vmov	s16, r0
 8007680:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007684:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007688:	4b9e      	ldr	r3, [pc, #632]	; (8007904 <_printf_float+0x2d8>)
 800768a:	f04f 32ff 	mov.w	r2, #4294967295
 800768e:	f7f9 fa5d 	bl	8000b4c <__aeabi_dcmpun>
 8007692:	bb88      	cbnz	r0, 80076f8 <_printf_float+0xcc>
 8007694:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007698:	4b9a      	ldr	r3, [pc, #616]	; (8007904 <_printf_float+0x2d8>)
 800769a:	f04f 32ff 	mov.w	r2, #4294967295
 800769e:	f7f9 fa37 	bl	8000b10 <__aeabi_dcmple>
 80076a2:	bb48      	cbnz	r0, 80076f8 <_printf_float+0xcc>
 80076a4:	2200      	movs	r2, #0
 80076a6:	2300      	movs	r3, #0
 80076a8:	4640      	mov	r0, r8
 80076aa:	4649      	mov	r1, r9
 80076ac:	f7f9 fa26 	bl	8000afc <__aeabi_dcmplt>
 80076b0:	b110      	cbz	r0, 80076b8 <_printf_float+0x8c>
 80076b2:	232d      	movs	r3, #45	; 0x2d
 80076b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076b8:	4a93      	ldr	r2, [pc, #588]	; (8007908 <_printf_float+0x2dc>)
 80076ba:	4b94      	ldr	r3, [pc, #592]	; (800790c <_printf_float+0x2e0>)
 80076bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80076c0:	bf94      	ite	ls
 80076c2:	4690      	movls	r8, r2
 80076c4:	4698      	movhi	r8, r3
 80076c6:	2303      	movs	r3, #3
 80076c8:	6123      	str	r3, [r4, #16]
 80076ca:	9b05      	ldr	r3, [sp, #20]
 80076cc:	f023 0304 	bic.w	r3, r3, #4
 80076d0:	6023      	str	r3, [r4, #0]
 80076d2:	f04f 0900 	mov.w	r9, #0
 80076d6:	9700      	str	r7, [sp, #0]
 80076d8:	4633      	mov	r3, r6
 80076da:	aa0b      	add	r2, sp, #44	; 0x2c
 80076dc:	4621      	mov	r1, r4
 80076de:	4628      	mov	r0, r5
 80076e0:	f000 f9da 	bl	8007a98 <_printf_common>
 80076e4:	3001      	adds	r0, #1
 80076e6:	f040 8090 	bne.w	800780a <_printf_float+0x1de>
 80076ea:	f04f 30ff 	mov.w	r0, #4294967295
 80076ee:	b00d      	add	sp, #52	; 0x34
 80076f0:	ecbd 8b02 	vpop	{d8}
 80076f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076f8:	4642      	mov	r2, r8
 80076fa:	464b      	mov	r3, r9
 80076fc:	4640      	mov	r0, r8
 80076fe:	4649      	mov	r1, r9
 8007700:	f7f9 fa24 	bl	8000b4c <__aeabi_dcmpun>
 8007704:	b140      	cbz	r0, 8007718 <_printf_float+0xec>
 8007706:	464b      	mov	r3, r9
 8007708:	2b00      	cmp	r3, #0
 800770a:	bfbc      	itt	lt
 800770c:	232d      	movlt	r3, #45	; 0x2d
 800770e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007712:	4a7f      	ldr	r2, [pc, #508]	; (8007910 <_printf_float+0x2e4>)
 8007714:	4b7f      	ldr	r3, [pc, #508]	; (8007914 <_printf_float+0x2e8>)
 8007716:	e7d1      	b.n	80076bc <_printf_float+0x90>
 8007718:	6863      	ldr	r3, [r4, #4]
 800771a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800771e:	9206      	str	r2, [sp, #24]
 8007720:	1c5a      	adds	r2, r3, #1
 8007722:	d13f      	bne.n	80077a4 <_printf_float+0x178>
 8007724:	2306      	movs	r3, #6
 8007726:	6063      	str	r3, [r4, #4]
 8007728:	9b05      	ldr	r3, [sp, #20]
 800772a:	6861      	ldr	r1, [r4, #4]
 800772c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007730:	2300      	movs	r3, #0
 8007732:	9303      	str	r3, [sp, #12]
 8007734:	ab0a      	add	r3, sp, #40	; 0x28
 8007736:	e9cd b301 	strd	fp, r3, [sp, #4]
 800773a:	ab09      	add	r3, sp, #36	; 0x24
 800773c:	ec49 8b10 	vmov	d0, r8, r9
 8007740:	9300      	str	r3, [sp, #0]
 8007742:	6022      	str	r2, [r4, #0]
 8007744:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007748:	4628      	mov	r0, r5
 800774a:	f7ff fecf 	bl	80074ec <__cvt>
 800774e:	9b06      	ldr	r3, [sp, #24]
 8007750:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007752:	2b47      	cmp	r3, #71	; 0x47
 8007754:	4680      	mov	r8, r0
 8007756:	d108      	bne.n	800776a <_printf_float+0x13e>
 8007758:	1cc8      	adds	r0, r1, #3
 800775a:	db02      	blt.n	8007762 <_printf_float+0x136>
 800775c:	6863      	ldr	r3, [r4, #4]
 800775e:	4299      	cmp	r1, r3
 8007760:	dd41      	ble.n	80077e6 <_printf_float+0x1ba>
 8007762:	f1ab 0302 	sub.w	r3, fp, #2
 8007766:	fa5f fb83 	uxtb.w	fp, r3
 800776a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800776e:	d820      	bhi.n	80077b2 <_printf_float+0x186>
 8007770:	3901      	subs	r1, #1
 8007772:	465a      	mov	r2, fp
 8007774:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007778:	9109      	str	r1, [sp, #36]	; 0x24
 800777a:	f7ff ff19 	bl	80075b0 <__exponent>
 800777e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007780:	1813      	adds	r3, r2, r0
 8007782:	2a01      	cmp	r2, #1
 8007784:	4681      	mov	r9, r0
 8007786:	6123      	str	r3, [r4, #16]
 8007788:	dc02      	bgt.n	8007790 <_printf_float+0x164>
 800778a:	6822      	ldr	r2, [r4, #0]
 800778c:	07d2      	lsls	r2, r2, #31
 800778e:	d501      	bpl.n	8007794 <_printf_float+0x168>
 8007790:	3301      	adds	r3, #1
 8007792:	6123      	str	r3, [r4, #16]
 8007794:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007798:	2b00      	cmp	r3, #0
 800779a:	d09c      	beq.n	80076d6 <_printf_float+0xaa>
 800779c:	232d      	movs	r3, #45	; 0x2d
 800779e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077a2:	e798      	b.n	80076d6 <_printf_float+0xaa>
 80077a4:	9a06      	ldr	r2, [sp, #24]
 80077a6:	2a47      	cmp	r2, #71	; 0x47
 80077a8:	d1be      	bne.n	8007728 <_printf_float+0xfc>
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d1bc      	bne.n	8007728 <_printf_float+0xfc>
 80077ae:	2301      	movs	r3, #1
 80077b0:	e7b9      	b.n	8007726 <_printf_float+0xfa>
 80077b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80077b6:	d118      	bne.n	80077ea <_printf_float+0x1be>
 80077b8:	2900      	cmp	r1, #0
 80077ba:	6863      	ldr	r3, [r4, #4]
 80077bc:	dd0b      	ble.n	80077d6 <_printf_float+0x1aa>
 80077be:	6121      	str	r1, [r4, #16]
 80077c0:	b913      	cbnz	r3, 80077c8 <_printf_float+0x19c>
 80077c2:	6822      	ldr	r2, [r4, #0]
 80077c4:	07d0      	lsls	r0, r2, #31
 80077c6:	d502      	bpl.n	80077ce <_printf_float+0x1a2>
 80077c8:	3301      	adds	r3, #1
 80077ca:	440b      	add	r3, r1
 80077cc:	6123      	str	r3, [r4, #16]
 80077ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80077d0:	f04f 0900 	mov.w	r9, #0
 80077d4:	e7de      	b.n	8007794 <_printf_float+0x168>
 80077d6:	b913      	cbnz	r3, 80077de <_printf_float+0x1b2>
 80077d8:	6822      	ldr	r2, [r4, #0]
 80077da:	07d2      	lsls	r2, r2, #31
 80077dc:	d501      	bpl.n	80077e2 <_printf_float+0x1b6>
 80077de:	3302      	adds	r3, #2
 80077e0:	e7f4      	b.n	80077cc <_printf_float+0x1a0>
 80077e2:	2301      	movs	r3, #1
 80077e4:	e7f2      	b.n	80077cc <_printf_float+0x1a0>
 80077e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80077ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077ec:	4299      	cmp	r1, r3
 80077ee:	db05      	blt.n	80077fc <_printf_float+0x1d0>
 80077f0:	6823      	ldr	r3, [r4, #0]
 80077f2:	6121      	str	r1, [r4, #16]
 80077f4:	07d8      	lsls	r0, r3, #31
 80077f6:	d5ea      	bpl.n	80077ce <_printf_float+0x1a2>
 80077f8:	1c4b      	adds	r3, r1, #1
 80077fa:	e7e7      	b.n	80077cc <_printf_float+0x1a0>
 80077fc:	2900      	cmp	r1, #0
 80077fe:	bfd4      	ite	le
 8007800:	f1c1 0202 	rsble	r2, r1, #2
 8007804:	2201      	movgt	r2, #1
 8007806:	4413      	add	r3, r2
 8007808:	e7e0      	b.n	80077cc <_printf_float+0x1a0>
 800780a:	6823      	ldr	r3, [r4, #0]
 800780c:	055a      	lsls	r2, r3, #21
 800780e:	d407      	bmi.n	8007820 <_printf_float+0x1f4>
 8007810:	6923      	ldr	r3, [r4, #16]
 8007812:	4642      	mov	r2, r8
 8007814:	4631      	mov	r1, r6
 8007816:	4628      	mov	r0, r5
 8007818:	47b8      	blx	r7
 800781a:	3001      	adds	r0, #1
 800781c:	d12c      	bne.n	8007878 <_printf_float+0x24c>
 800781e:	e764      	b.n	80076ea <_printf_float+0xbe>
 8007820:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007824:	f240 80e0 	bls.w	80079e8 <_printf_float+0x3bc>
 8007828:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800782c:	2200      	movs	r2, #0
 800782e:	2300      	movs	r3, #0
 8007830:	f7f9 f95a 	bl	8000ae8 <__aeabi_dcmpeq>
 8007834:	2800      	cmp	r0, #0
 8007836:	d034      	beq.n	80078a2 <_printf_float+0x276>
 8007838:	4a37      	ldr	r2, [pc, #220]	; (8007918 <_printf_float+0x2ec>)
 800783a:	2301      	movs	r3, #1
 800783c:	4631      	mov	r1, r6
 800783e:	4628      	mov	r0, r5
 8007840:	47b8      	blx	r7
 8007842:	3001      	adds	r0, #1
 8007844:	f43f af51 	beq.w	80076ea <_printf_float+0xbe>
 8007848:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800784c:	429a      	cmp	r2, r3
 800784e:	db02      	blt.n	8007856 <_printf_float+0x22a>
 8007850:	6823      	ldr	r3, [r4, #0]
 8007852:	07d8      	lsls	r0, r3, #31
 8007854:	d510      	bpl.n	8007878 <_printf_float+0x24c>
 8007856:	ee18 3a10 	vmov	r3, s16
 800785a:	4652      	mov	r2, sl
 800785c:	4631      	mov	r1, r6
 800785e:	4628      	mov	r0, r5
 8007860:	47b8      	blx	r7
 8007862:	3001      	adds	r0, #1
 8007864:	f43f af41 	beq.w	80076ea <_printf_float+0xbe>
 8007868:	f04f 0800 	mov.w	r8, #0
 800786c:	f104 091a 	add.w	r9, r4, #26
 8007870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007872:	3b01      	subs	r3, #1
 8007874:	4543      	cmp	r3, r8
 8007876:	dc09      	bgt.n	800788c <_printf_float+0x260>
 8007878:	6823      	ldr	r3, [r4, #0]
 800787a:	079b      	lsls	r3, r3, #30
 800787c:	f100 8107 	bmi.w	8007a8e <_printf_float+0x462>
 8007880:	68e0      	ldr	r0, [r4, #12]
 8007882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007884:	4298      	cmp	r0, r3
 8007886:	bfb8      	it	lt
 8007888:	4618      	movlt	r0, r3
 800788a:	e730      	b.n	80076ee <_printf_float+0xc2>
 800788c:	2301      	movs	r3, #1
 800788e:	464a      	mov	r2, r9
 8007890:	4631      	mov	r1, r6
 8007892:	4628      	mov	r0, r5
 8007894:	47b8      	blx	r7
 8007896:	3001      	adds	r0, #1
 8007898:	f43f af27 	beq.w	80076ea <_printf_float+0xbe>
 800789c:	f108 0801 	add.w	r8, r8, #1
 80078a0:	e7e6      	b.n	8007870 <_printf_float+0x244>
 80078a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	dc39      	bgt.n	800791c <_printf_float+0x2f0>
 80078a8:	4a1b      	ldr	r2, [pc, #108]	; (8007918 <_printf_float+0x2ec>)
 80078aa:	2301      	movs	r3, #1
 80078ac:	4631      	mov	r1, r6
 80078ae:	4628      	mov	r0, r5
 80078b0:	47b8      	blx	r7
 80078b2:	3001      	adds	r0, #1
 80078b4:	f43f af19 	beq.w	80076ea <_printf_float+0xbe>
 80078b8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80078bc:	4313      	orrs	r3, r2
 80078be:	d102      	bne.n	80078c6 <_printf_float+0x29a>
 80078c0:	6823      	ldr	r3, [r4, #0]
 80078c2:	07d9      	lsls	r1, r3, #31
 80078c4:	d5d8      	bpl.n	8007878 <_printf_float+0x24c>
 80078c6:	ee18 3a10 	vmov	r3, s16
 80078ca:	4652      	mov	r2, sl
 80078cc:	4631      	mov	r1, r6
 80078ce:	4628      	mov	r0, r5
 80078d0:	47b8      	blx	r7
 80078d2:	3001      	adds	r0, #1
 80078d4:	f43f af09 	beq.w	80076ea <_printf_float+0xbe>
 80078d8:	f04f 0900 	mov.w	r9, #0
 80078dc:	f104 0a1a 	add.w	sl, r4, #26
 80078e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078e2:	425b      	negs	r3, r3
 80078e4:	454b      	cmp	r3, r9
 80078e6:	dc01      	bgt.n	80078ec <_printf_float+0x2c0>
 80078e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078ea:	e792      	b.n	8007812 <_printf_float+0x1e6>
 80078ec:	2301      	movs	r3, #1
 80078ee:	4652      	mov	r2, sl
 80078f0:	4631      	mov	r1, r6
 80078f2:	4628      	mov	r0, r5
 80078f4:	47b8      	blx	r7
 80078f6:	3001      	adds	r0, #1
 80078f8:	f43f aef7 	beq.w	80076ea <_printf_float+0xbe>
 80078fc:	f109 0901 	add.w	r9, r9, #1
 8007900:	e7ee      	b.n	80078e0 <_printf_float+0x2b4>
 8007902:	bf00      	nop
 8007904:	7fefffff 	.word	0x7fefffff
 8007908:	0800a0d0 	.word	0x0800a0d0
 800790c:	0800a0d4 	.word	0x0800a0d4
 8007910:	0800a0d8 	.word	0x0800a0d8
 8007914:	0800a0dc 	.word	0x0800a0dc
 8007918:	0800a0e0 	.word	0x0800a0e0
 800791c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800791e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007920:	429a      	cmp	r2, r3
 8007922:	bfa8      	it	ge
 8007924:	461a      	movge	r2, r3
 8007926:	2a00      	cmp	r2, #0
 8007928:	4691      	mov	r9, r2
 800792a:	dc37      	bgt.n	800799c <_printf_float+0x370>
 800792c:	f04f 0b00 	mov.w	fp, #0
 8007930:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007934:	f104 021a 	add.w	r2, r4, #26
 8007938:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800793a:	9305      	str	r3, [sp, #20]
 800793c:	eba3 0309 	sub.w	r3, r3, r9
 8007940:	455b      	cmp	r3, fp
 8007942:	dc33      	bgt.n	80079ac <_printf_float+0x380>
 8007944:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007948:	429a      	cmp	r2, r3
 800794a:	db3b      	blt.n	80079c4 <_printf_float+0x398>
 800794c:	6823      	ldr	r3, [r4, #0]
 800794e:	07da      	lsls	r2, r3, #31
 8007950:	d438      	bmi.n	80079c4 <_printf_float+0x398>
 8007952:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007956:	eba2 0903 	sub.w	r9, r2, r3
 800795a:	9b05      	ldr	r3, [sp, #20]
 800795c:	1ad2      	subs	r2, r2, r3
 800795e:	4591      	cmp	r9, r2
 8007960:	bfa8      	it	ge
 8007962:	4691      	movge	r9, r2
 8007964:	f1b9 0f00 	cmp.w	r9, #0
 8007968:	dc35      	bgt.n	80079d6 <_printf_float+0x3aa>
 800796a:	f04f 0800 	mov.w	r8, #0
 800796e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007972:	f104 0a1a 	add.w	sl, r4, #26
 8007976:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800797a:	1a9b      	subs	r3, r3, r2
 800797c:	eba3 0309 	sub.w	r3, r3, r9
 8007980:	4543      	cmp	r3, r8
 8007982:	f77f af79 	ble.w	8007878 <_printf_float+0x24c>
 8007986:	2301      	movs	r3, #1
 8007988:	4652      	mov	r2, sl
 800798a:	4631      	mov	r1, r6
 800798c:	4628      	mov	r0, r5
 800798e:	47b8      	blx	r7
 8007990:	3001      	adds	r0, #1
 8007992:	f43f aeaa 	beq.w	80076ea <_printf_float+0xbe>
 8007996:	f108 0801 	add.w	r8, r8, #1
 800799a:	e7ec      	b.n	8007976 <_printf_float+0x34a>
 800799c:	4613      	mov	r3, r2
 800799e:	4631      	mov	r1, r6
 80079a0:	4642      	mov	r2, r8
 80079a2:	4628      	mov	r0, r5
 80079a4:	47b8      	blx	r7
 80079a6:	3001      	adds	r0, #1
 80079a8:	d1c0      	bne.n	800792c <_printf_float+0x300>
 80079aa:	e69e      	b.n	80076ea <_printf_float+0xbe>
 80079ac:	2301      	movs	r3, #1
 80079ae:	4631      	mov	r1, r6
 80079b0:	4628      	mov	r0, r5
 80079b2:	9205      	str	r2, [sp, #20]
 80079b4:	47b8      	blx	r7
 80079b6:	3001      	adds	r0, #1
 80079b8:	f43f ae97 	beq.w	80076ea <_printf_float+0xbe>
 80079bc:	9a05      	ldr	r2, [sp, #20]
 80079be:	f10b 0b01 	add.w	fp, fp, #1
 80079c2:	e7b9      	b.n	8007938 <_printf_float+0x30c>
 80079c4:	ee18 3a10 	vmov	r3, s16
 80079c8:	4652      	mov	r2, sl
 80079ca:	4631      	mov	r1, r6
 80079cc:	4628      	mov	r0, r5
 80079ce:	47b8      	blx	r7
 80079d0:	3001      	adds	r0, #1
 80079d2:	d1be      	bne.n	8007952 <_printf_float+0x326>
 80079d4:	e689      	b.n	80076ea <_printf_float+0xbe>
 80079d6:	9a05      	ldr	r2, [sp, #20]
 80079d8:	464b      	mov	r3, r9
 80079da:	4442      	add	r2, r8
 80079dc:	4631      	mov	r1, r6
 80079de:	4628      	mov	r0, r5
 80079e0:	47b8      	blx	r7
 80079e2:	3001      	adds	r0, #1
 80079e4:	d1c1      	bne.n	800796a <_printf_float+0x33e>
 80079e6:	e680      	b.n	80076ea <_printf_float+0xbe>
 80079e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079ea:	2a01      	cmp	r2, #1
 80079ec:	dc01      	bgt.n	80079f2 <_printf_float+0x3c6>
 80079ee:	07db      	lsls	r3, r3, #31
 80079f0:	d53a      	bpl.n	8007a68 <_printf_float+0x43c>
 80079f2:	2301      	movs	r3, #1
 80079f4:	4642      	mov	r2, r8
 80079f6:	4631      	mov	r1, r6
 80079f8:	4628      	mov	r0, r5
 80079fa:	47b8      	blx	r7
 80079fc:	3001      	adds	r0, #1
 80079fe:	f43f ae74 	beq.w	80076ea <_printf_float+0xbe>
 8007a02:	ee18 3a10 	vmov	r3, s16
 8007a06:	4652      	mov	r2, sl
 8007a08:	4631      	mov	r1, r6
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	47b8      	blx	r7
 8007a0e:	3001      	adds	r0, #1
 8007a10:	f43f ae6b 	beq.w	80076ea <_printf_float+0xbe>
 8007a14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a18:	2200      	movs	r2, #0
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007a20:	f7f9 f862 	bl	8000ae8 <__aeabi_dcmpeq>
 8007a24:	b9d8      	cbnz	r0, 8007a5e <_printf_float+0x432>
 8007a26:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007a2a:	f108 0201 	add.w	r2, r8, #1
 8007a2e:	4631      	mov	r1, r6
 8007a30:	4628      	mov	r0, r5
 8007a32:	47b8      	blx	r7
 8007a34:	3001      	adds	r0, #1
 8007a36:	d10e      	bne.n	8007a56 <_printf_float+0x42a>
 8007a38:	e657      	b.n	80076ea <_printf_float+0xbe>
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	4652      	mov	r2, sl
 8007a3e:	4631      	mov	r1, r6
 8007a40:	4628      	mov	r0, r5
 8007a42:	47b8      	blx	r7
 8007a44:	3001      	adds	r0, #1
 8007a46:	f43f ae50 	beq.w	80076ea <_printf_float+0xbe>
 8007a4a:	f108 0801 	add.w	r8, r8, #1
 8007a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a50:	3b01      	subs	r3, #1
 8007a52:	4543      	cmp	r3, r8
 8007a54:	dcf1      	bgt.n	8007a3a <_printf_float+0x40e>
 8007a56:	464b      	mov	r3, r9
 8007a58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007a5c:	e6da      	b.n	8007814 <_printf_float+0x1e8>
 8007a5e:	f04f 0800 	mov.w	r8, #0
 8007a62:	f104 0a1a 	add.w	sl, r4, #26
 8007a66:	e7f2      	b.n	8007a4e <_printf_float+0x422>
 8007a68:	2301      	movs	r3, #1
 8007a6a:	4642      	mov	r2, r8
 8007a6c:	e7df      	b.n	8007a2e <_printf_float+0x402>
 8007a6e:	2301      	movs	r3, #1
 8007a70:	464a      	mov	r2, r9
 8007a72:	4631      	mov	r1, r6
 8007a74:	4628      	mov	r0, r5
 8007a76:	47b8      	blx	r7
 8007a78:	3001      	adds	r0, #1
 8007a7a:	f43f ae36 	beq.w	80076ea <_printf_float+0xbe>
 8007a7e:	f108 0801 	add.w	r8, r8, #1
 8007a82:	68e3      	ldr	r3, [r4, #12]
 8007a84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a86:	1a5b      	subs	r3, r3, r1
 8007a88:	4543      	cmp	r3, r8
 8007a8a:	dcf0      	bgt.n	8007a6e <_printf_float+0x442>
 8007a8c:	e6f8      	b.n	8007880 <_printf_float+0x254>
 8007a8e:	f04f 0800 	mov.w	r8, #0
 8007a92:	f104 0919 	add.w	r9, r4, #25
 8007a96:	e7f4      	b.n	8007a82 <_printf_float+0x456>

08007a98 <_printf_common>:
 8007a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a9c:	4616      	mov	r6, r2
 8007a9e:	4699      	mov	r9, r3
 8007aa0:	688a      	ldr	r2, [r1, #8]
 8007aa2:	690b      	ldr	r3, [r1, #16]
 8007aa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	bfb8      	it	lt
 8007aac:	4613      	movlt	r3, r2
 8007aae:	6033      	str	r3, [r6, #0]
 8007ab0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ab4:	4607      	mov	r7, r0
 8007ab6:	460c      	mov	r4, r1
 8007ab8:	b10a      	cbz	r2, 8007abe <_printf_common+0x26>
 8007aba:	3301      	adds	r3, #1
 8007abc:	6033      	str	r3, [r6, #0]
 8007abe:	6823      	ldr	r3, [r4, #0]
 8007ac0:	0699      	lsls	r1, r3, #26
 8007ac2:	bf42      	ittt	mi
 8007ac4:	6833      	ldrmi	r3, [r6, #0]
 8007ac6:	3302      	addmi	r3, #2
 8007ac8:	6033      	strmi	r3, [r6, #0]
 8007aca:	6825      	ldr	r5, [r4, #0]
 8007acc:	f015 0506 	ands.w	r5, r5, #6
 8007ad0:	d106      	bne.n	8007ae0 <_printf_common+0x48>
 8007ad2:	f104 0a19 	add.w	sl, r4, #25
 8007ad6:	68e3      	ldr	r3, [r4, #12]
 8007ad8:	6832      	ldr	r2, [r6, #0]
 8007ada:	1a9b      	subs	r3, r3, r2
 8007adc:	42ab      	cmp	r3, r5
 8007ade:	dc26      	bgt.n	8007b2e <_printf_common+0x96>
 8007ae0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ae4:	1e13      	subs	r3, r2, #0
 8007ae6:	6822      	ldr	r2, [r4, #0]
 8007ae8:	bf18      	it	ne
 8007aea:	2301      	movne	r3, #1
 8007aec:	0692      	lsls	r2, r2, #26
 8007aee:	d42b      	bmi.n	8007b48 <_printf_common+0xb0>
 8007af0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007af4:	4649      	mov	r1, r9
 8007af6:	4638      	mov	r0, r7
 8007af8:	47c0      	blx	r8
 8007afa:	3001      	adds	r0, #1
 8007afc:	d01e      	beq.n	8007b3c <_printf_common+0xa4>
 8007afe:	6823      	ldr	r3, [r4, #0]
 8007b00:	6922      	ldr	r2, [r4, #16]
 8007b02:	f003 0306 	and.w	r3, r3, #6
 8007b06:	2b04      	cmp	r3, #4
 8007b08:	bf02      	ittt	eq
 8007b0a:	68e5      	ldreq	r5, [r4, #12]
 8007b0c:	6833      	ldreq	r3, [r6, #0]
 8007b0e:	1aed      	subeq	r5, r5, r3
 8007b10:	68a3      	ldr	r3, [r4, #8]
 8007b12:	bf0c      	ite	eq
 8007b14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b18:	2500      	movne	r5, #0
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	bfc4      	itt	gt
 8007b1e:	1a9b      	subgt	r3, r3, r2
 8007b20:	18ed      	addgt	r5, r5, r3
 8007b22:	2600      	movs	r6, #0
 8007b24:	341a      	adds	r4, #26
 8007b26:	42b5      	cmp	r5, r6
 8007b28:	d11a      	bne.n	8007b60 <_printf_common+0xc8>
 8007b2a:	2000      	movs	r0, #0
 8007b2c:	e008      	b.n	8007b40 <_printf_common+0xa8>
 8007b2e:	2301      	movs	r3, #1
 8007b30:	4652      	mov	r2, sl
 8007b32:	4649      	mov	r1, r9
 8007b34:	4638      	mov	r0, r7
 8007b36:	47c0      	blx	r8
 8007b38:	3001      	adds	r0, #1
 8007b3a:	d103      	bne.n	8007b44 <_printf_common+0xac>
 8007b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b44:	3501      	adds	r5, #1
 8007b46:	e7c6      	b.n	8007ad6 <_printf_common+0x3e>
 8007b48:	18e1      	adds	r1, r4, r3
 8007b4a:	1c5a      	adds	r2, r3, #1
 8007b4c:	2030      	movs	r0, #48	; 0x30
 8007b4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b52:	4422      	add	r2, r4
 8007b54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b5c:	3302      	adds	r3, #2
 8007b5e:	e7c7      	b.n	8007af0 <_printf_common+0x58>
 8007b60:	2301      	movs	r3, #1
 8007b62:	4622      	mov	r2, r4
 8007b64:	4649      	mov	r1, r9
 8007b66:	4638      	mov	r0, r7
 8007b68:	47c0      	blx	r8
 8007b6a:	3001      	adds	r0, #1
 8007b6c:	d0e6      	beq.n	8007b3c <_printf_common+0xa4>
 8007b6e:	3601      	adds	r6, #1
 8007b70:	e7d9      	b.n	8007b26 <_printf_common+0x8e>
	...

08007b74 <_printf_i>:
 8007b74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b78:	7e0f      	ldrb	r7, [r1, #24]
 8007b7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b7c:	2f78      	cmp	r7, #120	; 0x78
 8007b7e:	4691      	mov	r9, r2
 8007b80:	4680      	mov	r8, r0
 8007b82:	460c      	mov	r4, r1
 8007b84:	469a      	mov	sl, r3
 8007b86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007b8a:	d807      	bhi.n	8007b9c <_printf_i+0x28>
 8007b8c:	2f62      	cmp	r7, #98	; 0x62
 8007b8e:	d80a      	bhi.n	8007ba6 <_printf_i+0x32>
 8007b90:	2f00      	cmp	r7, #0
 8007b92:	f000 80d4 	beq.w	8007d3e <_printf_i+0x1ca>
 8007b96:	2f58      	cmp	r7, #88	; 0x58
 8007b98:	f000 80c0 	beq.w	8007d1c <_printf_i+0x1a8>
 8007b9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ba0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ba4:	e03a      	b.n	8007c1c <_printf_i+0xa8>
 8007ba6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007baa:	2b15      	cmp	r3, #21
 8007bac:	d8f6      	bhi.n	8007b9c <_printf_i+0x28>
 8007bae:	a101      	add	r1, pc, #4	; (adr r1, 8007bb4 <_printf_i+0x40>)
 8007bb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007bb4:	08007c0d 	.word	0x08007c0d
 8007bb8:	08007c21 	.word	0x08007c21
 8007bbc:	08007b9d 	.word	0x08007b9d
 8007bc0:	08007b9d 	.word	0x08007b9d
 8007bc4:	08007b9d 	.word	0x08007b9d
 8007bc8:	08007b9d 	.word	0x08007b9d
 8007bcc:	08007c21 	.word	0x08007c21
 8007bd0:	08007b9d 	.word	0x08007b9d
 8007bd4:	08007b9d 	.word	0x08007b9d
 8007bd8:	08007b9d 	.word	0x08007b9d
 8007bdc:	08007b9d 	.word	0x08007b9d
 8007be0:	08007d25 	.word	0x08007d25
 8007be4:	08007c4d 	.word	0x08007c4d
 8007be8:	08007cdf 	.word	0x08007cdf
 8007bec:	08007b9d 	.word	0x08007b9d
 8007bf0:	08007b9d 	.word	0x08007b9d
 8007bf4:	08007d47 	.word	0x08007d47
 8007bf8:	08007b9d 	.word	0x08007b9d
 8007bfc:	08007c4d 	.word	0x08007c4d
 8007c00:	08007b9d 	.word	0x08007b9d
 8007c04:	08007b9d 	.word	0x08007b9d
 8007c08:	08007ce7 	.word	0x08007ce7
 8007c0c:	682b      	ldr	r3, [r5, #0]
 8007c0e:	1d1a      	adds	r2, r3, #4
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	602a      	str	r2, [r5, #0]
 8007c14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e09f      	b.n	8007d60 <_printf_i+0x1ec>
 8007c20:	6820      	ldr	r0, [r4, #0]
 8007c22:	682b      	ldr	r3, [r5, #0]
 8007c24:	0607      	lsls	r7, r0, #24
 8007c26:	f103 0104 	add.w	r1, r3, #4
 8007c2a:	6029      	str	r1, [r5, #0]
 8007c2c:	d501      	bpl.n	8007c32 <_printf_i+0xbe>
 8007c2e:	681e      	ldr	r6, [r3, #0]
 8007c30:	e003      	b.n	8007c3a <_printf_i+0xc6>
 8007c32:	0646      	lsls	r6, r0, #25
 8007c34:	d5fb      	bpl.n	8007c2e <_printf_i+0xba>
 8007c36:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007c3a:	2e00      	cmp	r6, #0
 8007c3c:	da03      	bge.n	8007c46 <_printf_i+0xd2>
 8007c3e:	232d      	movs	r3, #45	; 0x2d
 8007c40:	4276      	negs	r6, r6
 8007c42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c46:	485a      	ldr	r0, [pc, #360]	; (8007db0 <_printf_i+0x23c>)
 8007c48:	230a      	movs	r3, #10
 8007c4a:	e012      	b.n	8007c72 <_printf_i+0xfe>
 8007c4c:	682b      	ldr	r3, [r5, #0]
 8007c4e:	6820      	ldr	r0, [r4, #0]
 8007c50:	1d19      	adds	r1, r3, #4
 8007c52:	6029      	str	r1, [r5, #0]
 8007c54:	0605      	lsls	r5, r0, #24
 8007c56:	d501      	bpl.n	8007c5c <_printf_i+0xe8>
 8007c58:	681e      	ldr	r6, [r3, #0]
 8007c5a:	e002      	b.n	8007c62 <_printf_i+0xee>
 8007c5c:	0641      	lsls	r1, r0, #25
 8007c5e:	d5fb      	bpl.n	8007c58 <_printf_i+0xe4>
 8007c60:	881e      	ldrh	r6, [r3, #0]
 8007c62:	4853      	ldr	r0, [pc, #332]	; (8007db0 <_printf_i+0x23c>)
 8007c64:	2f6f      	cmp	r7, #111	; 0x6f
 8007c66:	bf0c      	ite	eq
 8007c68:	2308      	moveq	r3, #8
 8007c6a:	230a      	movne	r3, #10
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c72:	6865      	ldr	r5, [r4, #4]
 8007c74:	60a5      	str	r5, [r4, #8]
 8007c76:	2d00      	cmp	r5, #0
 8007c78:	bfa2      	ittt	ge
 8007c7a:	6821      	ldrge	r1, [r4, #0]
 8007c7c:	f021 0104 	bicge.w	r1, r1, #4
 8007c80:	6021      	strge	r1, [r4, #0]
 8007c82:	b90e      	cbnz	r6, 8007c88 <_printf_i+0x114>
 8007c84:	2d00      	cmp	r5, #0
 8007c86:	d04b      	beq.n	8007d20 <_printf_i+0x1ac>
 8007c88:	4615      	mov	r5, r2
 8007c8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007c8e:	fb03 6711 	mls	r7, r3, r1, r6
 8007c92:	5dc7      	ldrb	r7, [r0, r7]
 8007c94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007c98:	4637      	mov	r7, r6
 8007c9a:	42bb      	cmp	r3, r7
 8007c9c:	460e      	mov	r6, r1
 8007c9e:	d9f4      	bls.n	8007c8a <_printf_i+0x116>
 8007ca0:	2b08      	cmp	r3, #8
 8007ca2:	d10b      	bne.n	8007cbc <_printf_i+0x148>
 8007ca4:	6823      	ldr	r3, [r4, #0]
 8007ca6:	07de      	lsls	r6, r3, #31
 8007ca8:	d508      	bpl.n	8007cbc <_printf_i+0x148>
 8007caa:	6923      	ldr	r3, [r4, #16]
 8007cac:	6861      	ldr	r1, [r4, #4]
 8007cae:	4299      	cmp	r1, r3
 8007cb0:	bfde      	ittt	le
 8007cb2:	2330      	movle	r3, #48	; 0x30
 8007cb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007cb8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007cbc:	1b52      	subs	r2, r2, r5
 8007cbe:	6122      	str	r2, [r4, #16]
 8007cc0:	f8cd a000 	str.w	sl, [sp]
 8007cc4:	464b      	mov	r3, r9
 8007cc6:	aa03      	add	r2, sp, #12
 8007cc8:	4621      	mov	r1, r4
 8007cca:	4640      	mov	r0, r8
 8007ccc:	f7ff fee4 	bl	8007a98 <_printf_common>
 8007cd0:	3001      	adds	r0, #1
 8007cd2:	d14a      	bne.n	8007d6a <_printf_i+0x1f6>
 8007cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd8:	b004      	add	sp, #16
 8007cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cde:	6823      	ldr	r3, [r4, #0]
 8007ce0:	f043 0320 	orr.w	r3, r3, #32
 8007ce4:	6023      	str	r3, [r4, #0]
 8007ce6:	4833      	ldr	r0, [pc, #204]	; (8007db4 <_printf_i+0x240>)
 8007ce8:	2778      	movs	r7, #120	; 0x78
 8007cea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007cee:	6823      	ldr	r3, [r4, #0]
 8007cf0:	6829      	ldr	r1, [r5, #0]
 8007cf2:	061f      	lsls	r7, r3, #24
 8007cf4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007cf8:	d402      	bmi.n	8007d00 <_printf_i+0x18c>
 8007cfa:	065f      	lsls	r7, r3, #25
 8007cfc:	bf48      	it	mi
 8007cfe:	b2b6      	uxthmi	r6, r6
 8007d00:	07df      	lsls	r7, r3, #31
 8007d02:	bf48      	it	mi
 8007d04:	f043 0320 	orrmi.w	r3, r3, #32
 8007d08:	6029      	str	r1, [r5, #0]
 8007d0a:	bf48      	it	mi
 8007d0c:	6023      	strmi	r3, [r4, #0]
 8007d0e:	b91e      	cbnz	r6, 8007d18 <_printf_i+0x1a4>
 8007d10:	6823      	ldr	r3, [r4, #0]
 8007d12:	f023 0320 	bic.w	r3, r3, #32
 8007d16:	6023      	str	r3, [r4, #0]
 8007d18:	2310      	movs	r3, #16
 8007d1a:	e7a7      	b.n	8007c6c <_printf_i+0xf8>
 8007d1c:	4824      	ldr	r0, [pc, #144]	; (8007db0 <_printf_i+0x23c>)
 8007d1e:	e7e4      	b.n	8007cea <_printf_i+0x176>
 8007d20:	4615      	mov	r5, r2
 8007d22:	e7bd      	b.n	8007ca0 <_printf_i+0x12c>
 8007d24:	682b      	ldr	r3, [r5, #0]
 8007d26:	6826      	ldr	r6, [r4, #0]
 8007d28:	6961      	ldr	r1, [r4, #20]
 8007d2a:	1d18      	adds	r0, r3, #4
 8007d2c:	6028      	str	r0, [r5, #0]
 8007d2e:	0635      	lsls	r5, r6, #24
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	d501      	bpl.n	8007d38 <_printf_i+0x1c4>
 8007d34:	6019      	str	r1, [r3, #0]
 8007d36:	e002      	b.n	8007d3e <_printf_i+0x1ca>
 8007d38:	0670      	lsls	r0, r6, #25
 8007d3a:	d5fb      	bpl.n	8007d34 <_printf_i+0x1c0>
 8007d3c:	8019      	strh	r1, [r3, #0]
 8007d3e:	2300      	movs	r3, #0
 8007d40:	6123      	str	r3, [r4, #16]
 8007d42:	4615      	mov	r5, r2
 8007d44:	e7bc      	b.n	8007cc0 <_printf_i+0x14c>
 8007d46:	682b      	ldr	r3, [r5, #0]
 8007d48:	1d1a      	adds	r2, r3, #4
 8007d4a:	602a      	str	r2, [r5, #0]
 8007d4c:	681d      	ldr	r5, [r3, #0]
 8007d4e:	6862      	ldr	r2, [r4, #4]
 8007d50:	2100      	movs	r1, #0
 8007d52:	4628      	mov	r0, r5
 8007d54:	f7f8 fa4c 	bl	80001f0 <memchr>
 8007d58:	b108      	cbz	r0, 8007d5e <_printf_i+0x1ea>
 8007d5a:	1b40      	subs	r0, r0, r5
 8007d5c:	6060      	str	r0, [r4, #4]
 8007d5e:	6863      	ldr	r3, [r4, #4]
 8007d60:	6123      	str	r3, [r4, #16]
 8007d62:	2300      	movs	r3, #0
 8007d64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d68:	e7aa      	b.n	8007cc0 <_printf_i+0x14c>
 8007d6a:	6923      	ldr	r3, [r4, #16]
 8007d6c:	462a      	mov	r2, r5
 8007d6e:	4649      	mov	r1, r9
 8007d70:	4640      	mov	r0, r8
 8007d72:	47d0      	blx	sl
 8007d74:	3001      	adds	r0, #1
 8007d76:	d0ad      	beq.n	8007cd4 <_printf_i+0x160>
 8007d78:	6823      	ldr	r3, [r4, #0]
 8007d7a:	079b      	lsls	r3, r3, #30
 8007d7c:	d413      	bmi.n	8007da6 <_printf_i+0x232>
 8007d7e:	68e0      	ldr	r0, [r4, #12]
 8007d80:	9b03      	ldr	r3, [sp, #12]
 8007d82:	4298      	cmp	r0, r3
 8007d84:	bfb8      	it	lt
 8007d86:	4618      	movlt	r0, r3
 8007d88:	e7a6      	b.n	8007cd8 <_printf_i+0x164>
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	4632      	mov	r2, r6
 8007d8e:	4649      	mov	r1, r9
 8007d90:	4640      	mov	r0, r8
 8007d92:	47d0      	blx	sl
 8007d94:	3001      	adds	r0, #1
 8007d96:	d09d      	beq.n	8007cd4 <_printf_i+0x160>
 8007d98:	3501      	adds	r5, #1
 8007d9a:	68e3      	ldr	r3, [r4, #12]
 8007d9c:	9903      	ldr	r1, [sp, #12]
 8007d9e:	1a5b      	subs	r3, r3, r1
 8007da0:	42ab      	cmp	r3, r5
 8007da2:	dcf2      	bgt.n	8007d8a <_printf_i+0x216>
 8007da4:	e7eb      	b.n	8007d7e <_printf_i+0x20a>
 8007da6:	2500      	movs	r5, #0
 8007da8:	f104 0619 	add.w	r6, r4, #25
 8007dac:	e7f5      	b.n	8007d9a <_printf_i+0x226>
 8007dae:	bf00      	nop
 8007db0:	0800a0e2 	.word	0x0800a0e2
 8007db4:	0800a0f3 	.word	0x0800a0f3

08007db8 <std>:
 8007db8:	2300      	movs	r3, #0
 8007dba:	b510      	push	{r4, lr}
 8007dbc:	4604      	mov	r4, r0
 8007dbe:	e9c0 3300 	strd	r3, r3, [r0]
 8007dc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007dc6:	6083      	str	r3, [r0, #8]
 8007dc8:	8181      	strh	r1, [r0, #12]
 8007dca:	6643      	str	r3, [r0, #100]	; 0x64
 8007dcc:	81c2      	strh	r2, [r0, #14]
 8007dce:	6183      	str	r3, [r0, #24]
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	2208      	movs	r2, #8
 8007dd4:	305c      	adds	r0, #92	; 0x5c
 8007dd6:	f000 f906 	bl	8007fe6 <memset>
 8007dda:	4b0d      	ldr	r3, [pc, #52]	; (8007e10 <std+0x58>)
 8007ddc:	6263      	str	r3, [r4, #36]	; 0x24
 8007dde:	4b0d      	ldr	r3, [pc, #52]	; (8007e14 <std+0x5c>)
 8007de0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007de2:	4b0d      	ldr	r3, [pc, #52]	; (8007e18 <std+0x60>)
 8007de4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007de6:	4b0d      	ldr	r3, [pc, #52]	; (8007e1c <std+0x64>)
 8007de8:	6323      	str	r3, [r4, #48]	; 0x30
 8007dea:	4b0d      	ldr	r3, [pc, #52]	; (8007e20 <std+0x68>)
 8007dec:	6224      	str	r4, [r4, #32]
 8007dee:	429c      	cmp	r4, r3
 8007df0:	d006      	beq.n	8007e00 <std+0x48>
 8007df2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007df6:	4294      	cmp	r4, r2
 8007df8:	d002      	beq.n	8007e00 <std+0x48>
 8007dfa:	33d0      	adds	r3, #208	; 0xd0
 8007dfc:	429c      	cmp	r4, r3
 8007dfe:	d105      	bne.n	8007e0c <std+0x54>
 8007e00:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e08:	f000 b9d2 	b.w	80081b0 <__retarget_lock_init_recursive>
 8007e0c:	bd10      	pop	{r4, pc}
 8007e0e:	bf00      	nop
 8007e10:	08007f61 	.word	0x08007f61
 8007e14:	08007f83 	.word	0x08007f83
 8007e18:	08007fbb 	.word	0x08007fbb
 8007e1c:	08007fdf 	.word	0x08007fdf
 8007e20:	20001cc0 	.word	0x20001cc0

08007e24 <stdio_exit_handler>:
 8007e24:	4a02      	ldr	r2, [pc, #8]	; (8007e30 <stdio_exit_handler+0xc>)
 8007e26:	4903      	ldr	r1, [pc, #12]	; (8007e34 <stdio_exit_handler+0x10>)
 8007e28:	4803      	ldr	r0, [pc, #12]	; (8007e38 <stdio_exit_handler+0x14>)
 8007e2a:	f000 b869 	b.w	8007f00 <_fwalk_sglue>
 8007e2e:	bf00      	nop
 8007e30:	20000010 	.word	0x20000010
 8007e34:	08009b59 	.word	0x08009b59
 8007e38:	2000001c 	.word	0x2000001c

08007e3c <cleanup_stdio>:
 8007e3c:	6841      	ldr	r1, [r0, #4]
 8007e3e:	4b0c      	ldr	r3, [pc, #48]	; (8007e70 <cleanup_stdio+0x34>)
 8007e40:	4299      	cmp	r1, r3
 8007e42:	b510      	push	{r4, lr}
 8007e44:	4604      	mov	r4, r0
 8007e46:	d001      	beq.n	8007e4c <cleanup_stdio+0x10>
 8007e48:	f001 fe86 	bl	8009b58 <_fflush_r>
 8007e4c:	68a1      	ldr	r1, [r4, #8]
 8007e4e:	4b09      	ldr	r3, [pc, #36]	; (8007e74 <cleanup_stdio+0x38>)
 8007e50:	4299      	cmp	r1, r3
 8007e52:	d002      	beq.n	8007e5a <cleanup_stdio+0x1e>
 8007e54:	4620      	mov	r0, r4
 8007e56:	f001 fe7f 	bl	8009b58 <_fflush_r>
 8007e5a:	68e1      	ldr	r1, [r4, #12]
 8007e5c:	4b06      	ldr	r3, [pc, #24]	; (8007e78 <cleanup_stdio+0x3c>)
 8007e5e:	4299      	cmp	r1, r3
 8007e60:	d004      	beq.n	8007e6c <cleanup_stdio+0x30>
 8007e62:	4620      	mov	r0, r4
 8007e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e68:	f001 be76 	b.w	8009b58 <_fflush_r>
 8007e6c:	bd10      	pop	{r4, pc}
 8007e6e:	bf00      	nop
 8007e70:	20001cc0 	.word	0x20001cc0
 8007e74:	20001d28 	.word	0x20001d28
 8007e78:	20001d90 	.word	0x20001d90

08007e7c <global_stdio_init.part.0>:
 8007e7c:	b510      	push	{r4, lr}
 8007e7e:	4b0b      	ldr	r3, [pc, #44]	; (8007eac <global_stdio_init.part.0+0x30>)
 8007e80:	4c0b      	ldr	r4, [pc, #44]	; (8007eb0 <global_stdio_init.part.0+0x34>)
 8007e82:	4a0c      	ldr	r2, [pc, #48]	; (8007eb4 <global_stdio_init.part.0+0x38>)
 8007e84:	601a      	str	r2, [r3, #0]
 8007e86:	4620      	mov	r0, r4
 8007e88:	2200      	movs	r2, #0
 8007e8a:	2104      	movs	r1, #4
 8007e8c:	f7ff ff94 	bl	8007db8 <std>
 8007e90:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007e94:	2201      	movs	r2, #1
 8007e96:	2109      	movs	r1, #9
 8007e98:	f7ff ff8e 	bl	8007db8 <std>
 8007e9c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007ea0:	2202      	movs	r2, #2
 8007ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ea6:	2112      	movs	r1, #18
 8007ea8:	f7ff bf86 	b.w	8007db8 <std>
 8007eac:	20001df8 	.word	0x20001df8
 8007eb0:	20001cc0 	.word	0x20001cc0
 8007eb4:	08007e25 	.word	0x08007e25

08007eb8 <__sfp_lock_acquire>:
 8007eb8:	4801      	ldr	r0, [pc, #4]	; (8007ec0 <__sfp_lock_acquire+0x8>)
 8007eba:	f000 b97a 	b.w	80081b2 <__retarget_lock_acquire_recursive>
 8007ebe:	bf00      	nop
 8007ec0:	20001e01 	.word	0x20001e01

08007ec4 <__sfp_lock_release>:
 8007ec4:	4801      	ldr	r0, [pc, #4]	; (8007ecc <__sfp_lock_release+0x8>)
 8007ec6:	f000 b975 	b.w	80081b4 <__retarget_lock_release_recursive>
 8007eca:	bf00      	nop
 8007ecc:	20001e01 	.word	0x20001e01

08007ed0 <__sinit>:
 8007ed0:	b510      	push	{r4, lr}
 8007ed2:	4604      	mov	r4, r0
 8007ed4:	f7ff fff0 	bl	8007eb8 <__sfp_lock_acquire>
 8007ed8:	6a23      	ldr	r3, [r4, #32]
 8007eda:	b11b      	cbz	r3, 8007ee4 <__sinit+0x14>
 8007edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ee0:	f7ff bff0 	b.w	8007ec4 <__sfp_lock_release>
 8007ee4:	4b04      	ldr	r3, [pc, #16]	; (8007ef8 <__sinit+0x28>)
 8007ee6:	6223      	str	r3, [r4, #32]
 8007ee8:	4b04      	ldr	r3, [pc, #16]	; (8007efc <__sinit+0x2c>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1f5      	bne.n	8007edc <__sinit+0xc>
 8007ef0:	f7ff ffc4 	bl	8007e7c <global_stdio_init.part.0>
 8007ef4:	e7f2      	b.n	8007edc <__sinit+0xc>
 8007ef6:	bf00      	nop
 8007ef8:	08007e3d 	.word	0x08007e3d
 8007efc:	20001df8 	.word	0x20001df8

08007f00 <_fwalk_sglue>:
 8007f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f04:	4607      	mov	r7, r0
 8007f06:	4688      	mov	r8, r1
 8007f08:	4614      	mov	r4, r2
 8007f0a:	2600      	movs	r6, #0
 8007f0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f10:	f1b9 0901 	subs.w	r9, r9, #1
 8007f14:	d505      	bpl.n	8007f22 <_fwalk_sglue+0x22>
 8007f16:	6824      	ldr	r4, [r4, #0]
 8007f18:	2c00      	cmp	r4, #0
 8007f1a:	d1f7      	bne.n	8007f0c <_fwalk_sglue+0xc>
 8007f1c:	4630      	mov	r0, r6
 8007f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f22:	89ab      	ldrh	r3, [r5, #12]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d907      	bls.n	8007f38 <_fwalk_sglue+0x38>
 8007f28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	d003      	beq.n	8007f38 <_fwalk_sglue+0x38>
 8007f30:	4629      	mov	r1, r5
 8007f32:	4638      	mov	r0, r7
 8007f34:	47c0      	blx	r8
 8007f36:	4306      	orrs	r6, r0
 8007f38:	3568      	adds	r5, #104	; 0x68
 8007f3a:	e7e9      	b.n	8007f10 <_fwalk_sglue+0x10>

08007f3c <iprintf>:
 8007f3c:	b40f      	push	{r0, r1, r2, r3}
 8007f3e:	b507      	push	{r0, r1, r2, lr}
 8007f40:	4906      	ldr	r1, [pc, #24]	; (8007f5c <iprintf+0x20>)
 8007f42:	ab04      	add	r3, sp, #16
 8007f44:	6808      	ldr	r0, [r1, #0]
 8007f46:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f4a:	6881      	ldr	r1, [r0, #8]
 8007f4c:	9301      	str	r3, [sp, #4]
 8007f4e:	f001 fc63 	bl	8009818 <_vfiprintf_r>
 8007f52:	b003      	add	sp, #12
 8007f54:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f58:	b004      	add	sp, #16
 8007f5a:	4770      	bx	lr
 8007f5c:	20000068 	.word	0x20000068

08007f60 <__sread>:
 8007f60:	b510      	push	{r4, lr}
 8007f62:	460c      	mov	r4, r1
 8007f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f68:	f000 f8d4 	bl	8008114 <_read_r>
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	bfab      	itete	ge
 8007f70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f72:	89a3      	ldrhlt	r3, [r4, #12]
 8007f74:	181b      	addge	r3, r3, r0
 8007f76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f7a:	bfac      	ite	ge
 8007f7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f7e:	81a3      	strhlt	r3, [r4, #12]
 8007f80:	bd10      	pop	{r4, pc}

08007f82 <__swrite>:
 8007f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f86:	461f      	mov	r7, r3
 8007f88:	898b      	ldrh	r3, [r1, #12]
 8007f8a:	05db      	lsls	r3, r3, #23
 8007f8c:	4605      	mov	r5, r0
 8007f8e:	460c      	mov	r4, r1
 8007f90:	4616      	mov	r6, r2
 8007f92:	d505      	bpl.n	8007fa0 <__swrite+0x1e>
 8007f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f98:	2302      	movs	r3, #2
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f000 f8a8 	bl	80080f0 <_lseek_r>
 8007fa0:	89a3      	ldrh	r3, [r4, #12]
 8007fa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007faa:	81a3      	strh	r3, [r4, #12]
 8007fac:	4632      	mov	r2, r6
 8007fae:	463b      	mov	r3, r7
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fb6:	f000 b8bf 	b.w	8008138 <_write_r>

08007fba <__sseek>:
 8007fba:	b510      	push	{r4, lr}
 8007fbc:	460c      	mov	r4, r1
 8007fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fc2:	f000 f895 	bl	80080f0 <_lseek_r>
 8007fc6:	1c43      	adds	r3, r0, #1
 8007fc8:	89a3      	ldrh	r3, [r4, #12]
 8007fca:	bf15      	itete	ne
 8007fcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8007fce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007fd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007fd6:	81a3      	strheq	r3, [r4, #12]
 8007fd8:	bf18      	it	ne
 8007fda:	81a3      	strhne	r3, [r4, #12]
 8007fdc:	bd10      	pop	{r4, pc}

08007fde <__sclose>:
 8007fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fe2:	f000 b81f 	b.w	8008024 <_close_r>

08007fe6 <memset>:
 8007fe6:	4402      	add	r2, r0
 8007fe8:	4603      	mov	r3, r0
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d100      	bne.n	8007ff0 <memset+0xa>
 8007fee:	4770      	bx	lr
 8007ff0:	f803 1b01 	strb.w	r1, [r3], #1
 8007ff4:	e7f9      	b.n	8007fea <memset+0x4>

08007ff6 <strncpy>:
 8007ff6:	b510      	push	{r4, lr}
 8007ff8:	3901      	subs	r1, #1
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	b132      	cbz	r2, 800800c <strncpy+0x16>
 8007ffe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008002:	f803 4b01 	strb.w	r4, [r3], #1
 8008006:	3a01      	subs	r2, #1
 8008008:	2c00      	cmp	r4, #0
 800800a:	d1f7      	bne.n	8007ffc <strncpy+0x6>
 800800c:	441a      	add	r2, r3
 800800e:	2100      	movs	r1, #0
 8008010:	4293      	cmp	r3, r2
 8008012:	d100      	bne.n	8008016 <strncpy+0x20>
 8008014:	bd10      	pop	{r4, pc}
 8008016:	f803 1b01 	strb.w	r1, [r3], #1
 800801a:	e7f9      	b.n	8008010 <strncpy+0x1a>

0800801c <_localeconv_r>:
 800801c:	4800      	ldr	r0, [pc, #0]	; (8008020 <_localeconv_r+0x4>)
 800801e:	4770      	bx	lr
 8008020:	2000015c 	.word	0x2000015c

08008024 <_close_r>:
 8008024:	b538      	push	{r3, r4, r5, lr}
 8008026:	4d06      	ldr	r5, [pc, #24]	; (8008040 <_close_r+0x1c>)
 8008028:	2300      	movs	r3, #0
 800802a:	4604      	mov	r4, r0
 800802c:	4608      	mov	r0, r1
 800802e:	602b      	str	r3, [r5, #0]
 8008030:	f7f9 fa91 	bl	8001556 <_close>
 8008034:	1c43      	adds	r3, r0, #1
 8008036:	d102      	bne.n	800803e <_close_r+0x1a>
 8008038:	682b      	ldr	r3, [r5, #0]
 800803a:	b103      	cbz	r3, 800803e <_close_r+0x1a>
 800803c:	6023      	str	r3, [r4, #0]
 800803e:	bd38      	pop	{r3, r4, r5, pc}
 8008040:	20001dfc 	.word	0x20001dfc

08008044 <_reclaim_reent>:
 8008044:	4b29      	ldr	r3, [pc, #164]	; (80080ec <_reclaim_reent+0xa8>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4283      	cmp	r3, r0
 800804a:	b570      	push	{r4, r5, r6, lr}
 800804c:	4604      	mov	r4, r0
 800804e:	d04b      	beq.n	80080e8 <_reclaim_reent+0xa4>
 8008050:	69c3      	ldr	r3, [r0, #28]
 8008052:	b143      	cbz	r3, 8008066 <_reclaim_reent+0x22>
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d144      	bne.n	80080e4 <_reclaim_reent+0xa0>
 800805a:	69e3      	ldr	r3, [r4, #28]
 800805c:	6819      	ldr	r1, [r3, #0]
 800805e:	b111      	cbz	r1, 8008066 <_reclaim_reent+0x22>
 8008060:	4620      	mov	r0, r4
 8008062:	f000 ff33 	bl	8008ecc <_free_r>
 8008066:	6961      	ldr	r1, [r4, #20]
 8008068:	b111      	cbz	r1, 8008070 <_reclaim_reent+0x2c>
 800806a:	4620      	mov	r0, r4
 800806c:	f000 ff2e 	bl	8008ecc <_free_r>
 8008070:	69e1      	ldr	r1, [r4, #28]
 8008072:	b111      	cbz	r1, 800807a <_reclaim_reent+0x36>
 8008074:	4620      	mov	r0, r4
 8008076:	f000 ff29 	bl	8008ecc <_free_r>
 800807a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800807c:	b111      	cbz	r1, 8008084 <_reclaim_reent+0x40>
 800807e:	4620      	mov	r0, r4
 8008080:	f000 ff24 	bl	8008ecc <_free_r>
 8008084:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008086:	b111      	cbz	r1, 800808e <_reclaim_reent+0x4a>
 8008088:	4620      	mov	r0, r4
 800808a:	f000 ff1f 	bl	8008ecc <_free_r>
 800808e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008090:	b111      	cbz	r1, 8008098 <_reclaim_reent+0x54>
 8008092:	4620      	mov	r0, r4
 8008094:	f000 ff1a 	bl	8008ecc <_free_r>
 8008098:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800809a:	b111      	cbz	r1, 80080a2 <_reclaim_reent+0x5e>
 800809c:	4620      	mov	r0, r4
 800809e:	f000 ff15 	bl	8008ecc <_free_r>
 80080a2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80080a4:	b111      	cbz	r1, 80080ac <_reclaim_reent+0x68>
 80080a6:	4620      	mov	r0, r4
 80080a8:	f000 ff10 	bl	8008ecc <_free_r>
 80080ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80080ae:	b111      	cbz	r1, 80080b6 <_reclaim_reent+0x72>
 80080b0:	4620      	mov	r0, r4
 80080b2:	f000 ff0b 	bl	8008ecc <_free_r>
 80080b6:	6a23      	ldr	r3, [r4, #32]
 80080b8:	b1b3      	cbz	r3, 80080e8 <_reclaim_reent+0xa4>
 80080ba:	4620      	mov	r0, r4
 80080bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80080c0:	4718      	bx	r3
 80080c2:	5949      	ldr	r1, [r1, r5]
 80080c4:	b941      	cbnz	r1, 80080d8 <_reclaim_reent+0x94>
 80080c6:	3504      	adds	r5, #4
 80080c8:	69e3      	ldr	r3, [r4, #28]
 80080ca:	2d80      	cmp	r5, #128	; 0x80
 80080cc:	68d9      	ldr	r1, [r3, #12]
 80080ce:	d1f8      	bne.n	80080c2 <_reclaim_reent+0x7e>
 80080d0:	4620      	mov	r0, r4
 80080d2:	f000 fefb 	bl	8008ecc <_free_r>
 80080d6:	e7c0      	b.n	800805a <_reclaim_reent+0x16>
 80080d8:	680e      	ldr	r6, [r1, #0]
 80080da:	4620      	mov	r0, r4
 80080dc:	f000 fef6 	bl	8008ecc <_free_r>
 80080e0:	4631      	mov	r1, r6
 80080e2:	e7ef      	b.n	80080c4 <_reclaim_reent+0x80>
 80080e4:	2500      	movs	r5, #0
 80080e6:	e7ef      	b.n	80080c8 <_reclaim_reent+0x84>
 80080e8:	bd70      	pop	{r4, r5, r6, pc}
 80080ea:	bf00      	nop
 80080ec:	20000068 	.word	0x20000068

080080f0 <_lseek_r>:
 80080f0:	b538      	push	{r3, r4, r5, lr}
 80080f2:	4d07      	ldr	r5, [pc, #28]	; (8008110 <_lseek_r+0x20>)
 80080f4:	4604      	mov	r4, r0
 80080f6:	4608      	mov	r0, r1
 80080f8:	4611      	mov	r1, r2
 80080fa:	2200      	movs	r2, #0
 80080fc:	602a      	str	r2, [r5, #0]
 80080fe:	461a      	mov	r2, r3
 8008100:	f7f9 fa50 	bl	80015a4 <_lseek>
 8008104:	1c43      	adds	r3, r0, #1
 8008106:	d102      	bne.n	800810e <_lseek_r+0x1e>
 8008108:	682b      	ldr	r3, [r5, #0]
 800810a:	b103      	cbz	r3, 800810e <_lseek_r+0x1e>
 800810c:	6023      	str	r3, [r4, #0]
 800810e:	bd38      	pop	{r3, r4, r5, pc}
 8008110:	20001dfc 	.word	0x20001dfc

08008114 <_read_r>:
 8008114:	b538      	push	{r3, r4, r5, lr}
 8008116:	4d07      	ldr	r5, [pc, #28]	; (8008134 <_read_r+0x20>)
 8008118:	4604      	mov	r4, r0
 800811a:	4608      	mov	r0, r1
 800811c:	4611      	mov	r1, r2
 800811e:	2200      	movs	r2, #0
 8008120:	602a      	str	r2, [r5, #0]
 8008122:	461a      	mov	r2, r3
 8008124:	f7f9 f9de 	bl	80014e4 <_read>
 8008128:	1c43      	adds	r3, r0, #1
 800812a:	d102      	bne.n	8008132 <_read_r+0x1e>
 800812c:	682b      	ldr	r3, [r5, #0]
 800812e:	b103      	cbz	r3, 8008132 <_read_r+0x1e>
 8008130:	6023      	str	r3, [r4, #0]
 8008132:	bd38      	pop	{r3, r4, r5, pc}
 8008134:	20001dfc 	.word	0x20001dfc

08008138 <_write_r>:
 8008138:	b538      	push	{r3, r4, r5, lr}
 800813a:	4d07      	ldr	r5, [pc, #28]	; (8008158 <_write_r+0x20>)
 800813c:	4604      	mov	r4, r0
 800813e:	4608      	mov	r0, r1
 8008140:	4611      	mov	r1, r2
 8008142:	2200      	movs	r2, #0
 8008144:	602a      	str	r2, [r5, #0]
 8008146:	461a      	mov	r2, r3
 8008148:	f7f9 f9e9 	bl	800151e <_write>
 800814c:	1c43      	adds	r3, r0, #1
 800814e:	d102      	bne.n	8008156 <_write_r+0x1e>
 8008150:	682b      	ldr	r3, [r5, #0]
 8008152:	b103      	cbz	r3, 8008156 <_write_r+0x1e>
 8008154:	6023      	str	r3, [r4, #0]
 8008156:	bd38      	pop	{r3, r4, r5, pc}
 8008158:	20001dfc 	.word	0x20001dfc

0800815c <__errno>:
 800815c:	4b01      	ldr	r3, [pc, #4]	; (8008164 <__errno+0x8>)
 800815e:	6818      	ldr	r0, [r3, #0]
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	20000068 	.word	0x20000068

08008168 <__libc_init_array>:
 8008168:	b570      	push	{r4, r5, r6, lr}
 800816a:	4d0d      	ldr	r5, [pc, #52]	; (80081a0 <__libc_init_array+0x38>)
 800816c:	4c0d      	ldr	r4, [pc, #52]	; (80081a4 <__libc_init_array+0x3c>)
 800816e:	1b64      	subs	r4, r4, r5
 8008170:	10a4      	asrs	r4, r4, #2
 8008172:	2600      	movs	r6, #0
 8008174:	42a6      	cmp	r6, r4
 8008176:	d109      	bne.n	800818c <__libc_init_array+0x24>
 8008178:	4d0b      	ldr	r5, [pc, #44]	; (80081a8 <__libc_init_array+0x40>)
 800817a:	4c0c      	ldr	r4, [pc, #48]	; (80081ac <__libc_init_array+0x44>)
 800817c:	f001 fef0 	bl	8009f60 <_init>
 8008180:	1b64      	subs	r4, r4, r5
 8008182:	10a4      	asrs	r4, r4, #2
 8008184:	2600      	movs	r6, #0
 8008186:	42a6      	cmp	r6, r4
 8008188:	d105      	bne.n	8008196 <__libc_init_array+0x2e>
 800818a:	bd70      	pop	{r4, r5, r6, pc}
 800818c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008190:	4798      	blx	r3
 8008192:	3601      	adds	r6, #1
 8008194:	e7ee      	b.n	8008174 <__libc_init_array+0xc>
 8008196:	f855 3b04 	ldr.w	r3, [r5], #4
 800819a:	4798      	blx	r3
 800819c:	3601      	adds	r6, #1
 800819e:	e7f2      	b.n	8008186 <__libc_init_array+0x1e>
 80081a0:	0800a44c 	.word	0x0800a44c
 80081a4:	0800a44c 	.word	0x0800a44c
 80081a8:	0800a44c 	.word	0x0800a44c
 80081ac:	0800a450 	.word	0x0800a450

080081b0 <__retarget_lock_init_recursive>:
 80081b0:	4770      	bx	lr

080081b2 <__retarget_lock_acquire_recursive>:
 80081b2:	4770      	bx	lr

080081b4 <__retarget_lock_release_recursive>:
 80081b4:	4770      	bx	lr

080081b6 <memcpy>:
 80081b6:	440a      	add	r2, r1
 80081b8:	4291      	cmp	r1, r2
 80081ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80081be:	d100      	bne.n	80081c2 <memcpy+0xc>
 80081c0:	4770      	bx	lr
 80081c2:	b510      	push	{r4, lr}
 80081c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081cc:	4291      	cmp	r1, r2
 80081ce:	d1f9      	bne.n	80081c4 <memcpy+0xe>
 80081d0:	bd10      	pop	{r4, pc}

080081d2 <quorem>:
 80081d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d6:	6903      	ldr	r3, [r0, #16]
 80081d8:	690c      	ldr	r4, [r1, #16]
 80081da:	42a3      	cmp	r3, r4
 80081dc:	4607      	mov	r7, r0
 80081de:	db7e      	blt.n	80082de <quorem+0x10c>
 80081e0:	3c01      	subs	r4, #1
 80081e2:	f101 0814 	add.w	r8, r1, #20
 80081e6:	f100 0514 	add.w	r5, r0, #20
 80081ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081ee:	9301      	str	r3, [sp, #4]
 80081f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80081f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081f8:	3301      	adds	r3, #1
 80081fa:	429a      	cmp	r2, r3
 80081fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008200:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008204:	fbb2 f6f3 	udiv	r6, r2, r3
 8008208:	d331      	bcc.n	800826e <quorem+0x9c>
 800820a:	f04f 0e00 	mov.w	lr, #0
 800820e:	4640      	mov	r0, r8
 8008210:	46ac      	mov	ip, r5
 8008212:	46f2      	mov	sl, lr
 8008214:	f850 2b04 	ldr.w	r2, [r0], #4
 8008218:	b293      	uxth	r3, r2
 800821a:	fb06 e303 	mla	r3, r6, r3, lr
 800821e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008222:	0c1a      	lsrs	r2, r3, #16
 8008224:	b29b      	uxth	r3, r3
 8008226:	ebaa 0303 	sub.w	r3, sl, r3
 800822a:	f8dc a000 	ldr.w	sl, [ip]
 800822e:	fa13 f38a 	uxtah	r3, r3, sl
 8008232:	fb06 220e 	mla	r2, r6, lr, r2
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	9b00      	ldr	r3, [sp, #0]
 800823a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800823e:	b292      	uxth	r2, r2
 8008240:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008244:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008248:	f8bd 3000 	ldrh.w	r3, [sp]
 800824c:	4581      	cmp	r9, r0
 800824e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008252:	f84c 3b04 	str.w	r3, [ip], #4
 8008256:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800825a:	d2db      	bcs.n	8008214 <quorem+0x42>
 800825c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008260:	b92b      	cbnz	r3, 800826e <quorem+0x9c>
 8008262:	9b01      	ldr	r3, [sp, #4]
 8008264:	3b04      	subs	r3, #4
 8008266:	429d      	cmp	r5, r3
 8008268:	461a      	mov	r2, r3
 800826a:	d32c      	bcc.n	80082c6 <quorem+0xf4>
 800826c:	613c      	str	r4, [r7, #16]
 800826e:	4638      	mov	r0, r7
 8008270:	f001 f9a8 	bl	80095c4 <__mcmp>
 8008274:	2800      	cmp	r0, #0
 8008276:	db22      	blt.n	80082be <quorem+0xec>
 8008278:	3601      	adds	r6, #1
 800827a:	4629      	mov	r1, r5
 800827c:	2000      	movs	r0, #0
 800827e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008282:	f8d1 c000 	ldr.w	ip, [r1]
 8008286:	b293      	uxth	r3, r2
 8008288:	1ac3      	subs	r3, r0, r3
 800828a:	0c12      	lsrs	r2, r2, #16
 800828c:	fa13 f38c 	uxtah	r3, r3, ip
 8008290:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008294:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008298:	b29b      	uxth	r3, r3
 800829a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800829e:	45c1      	cmp	r9, r8
 80082a0:	f841 3b04 	str.w	r3, [r1], #4
 80082a4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80082a8:	d2e9      	bcs.n	800827e <quorem+0xac>
 80082aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082b2:	b922      	cbnz	r2, 80082be <quorem+0xec>
 80082b4:	3b04      	subs	r3, #4
 80082b6:	429d      	cmp	r5, r3
 80082b8:	461a      	mov	r2, r3
 80082ba:	d30a      	bcc.n	80082d2 <quorem+0x100>
 80082bc:	613c      	str	r4, [r7, #16]
 80082be:	4630      	mov	r0, r6
 80082c0:	b003      	add	sp, #12
 80082c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c6:	6812      	ldr	r2, [r2, #0]
 80082c8:	3b04      	subs	r3, #4
 80082ca:	2a00      	cmp	r2, #0
 80082cc:	d1ce      	bne.n	800826c <quorem+0x9a>
 80082ce:	3c01      	subs	r4, #1
 80082d0:	e7c9      	b.n	8008266 <quorem+0x94>
 80082d2:	6812      	ldr	r2, [r2, #0]
 80082d4:	3b04      	subs	r3, #4
 80082d6:	2a00      	cmp	r2, #0
 80082d8:	d1f0      	bne.n	80082bc <quorem+0xea>
 80082da:	3c01      	subs	r4, #1
 80082dc:	e7eb      	b.n	80082b6 <quorem+0xe4>
 80082de:	2000      	movs	r0, #0
 80082e0:	e7ee      	b.n	80082c0 <quorem+0xee>
 80082e2:	0000      	movs	r0, r0
 80082e4:	0000      	movs	r0, r0
	...

080082e8 <_dtoa_r>:
 80082e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ec:	ed2d 8b04 	vpush	{d8-d9}
 80082f0:	69c5      	ldr	r5, [r0, #28]
 80082f2:	b093      	sub	sp, #76	; 0x4c
 80082f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80082f8:	ec57 6b10 	vmov	r6, r7, d0
 80082fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008300:	9107      	str	r1, [sp, #28]
 8008302:	4604      	mov	r4, r0
 8008304:	920a      	str	r2, [sp, #40]	; 0x28
 8008306:	930d      	str	r3, [sp, #52]	; 0x34
 8008308:	b975      	cbnz	r5, 8008328 <_dtoa_r+0x40>
 800830a:	2010      	movs	r0, #16
 800830c:	f000 fe2a 	bl	8008f64 <malloc>
 8008310:	4602      	mov	r2, r0
 8008312:	61e0      	str	r0, [r4, #28]
 8008314:	b920      	cbnz	r0, 8008320 <_dtoa_r+0x38>
 8008316:	4bae      	ldr	r3, [pc, #696]	; (80085d0 <_dtoa_r+0x2e8>)
 8008318:	21ef      	movs	r1, #239	; 0xef
 800831a:	48ae      	ldr	r0, [pc, #696]	; (80085d4 <_dtoa_r+0x2ec>)
 800831c:	f001 fcea 	bl	8009cf4 <__assert_func>
 8008320:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008324:	6005      	str	r5, [r0, #0]
 8008326:	60c5      	str	r5, [r0, #12]
 8008328:	69e3      	ldr	r3, [r4, #28]
 800832a:	6819      	ldr	r1, [r3, #0]
 800832c:	b151      	cbz	r1, 8008344 <_dtoa_r+0x5c>
 800832e:	685a      	ldr	r2, [r3, #4]
 8008330:	604a      	str	r2, [r1, #4]
 8008332:	2301      	movs	r3, #1
 8008334:	4093      	lsls	r3, r2
 8008336:	608b      	str	r3, [r1, #8]
 8008338:	4620      	mov	r0, r4
 800833a:	f000 ff07 	bl	800914c <_Bfree>
 800833e:	69e3      	ldr	r3, [r4, #28]
 8008340:	2200      	movs	r2, #0
 8008342:	601a      	str	r2, [r3, #0]
 8008344:	1e3b      	subs	r3, r7, #0
 8008346:	bfbb      	ittet	lt
 8008348:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800834c:	9303      	strlt	r3, [sp, #12]
 800834e:	2300      	movge	r3, #0
 8008350:	2201      	movlt	r2, #1
 8008352:	bfac      	ite	ge
 8008354:	f8c8 3000 	strge.w	r3, [r8]
 8008358:	f8c8 2000 	strlt.w	r2, [r8]
 800835c:	4b9e      	ldr	r3, [pc, #632]	; (80085d8 <_dtoa_r+0x2f0>)
 800835e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008362:	ea33 0308 	bics.w	r3, r3, r8
 8008366:	d11b      	bne.n	80083a0 <_dtoa_r+0xb8>
 8008368:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800836a:	f242 730f 	movw	r3, #9999	; 0x270f
 800836e:	6013      	str	r3, [r2, #0]
 8008370:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008374:	4333      	orrs	r3, r6
 8008376:	f000 8593 	beq.w	8008ea0 <_dtoa_r+0xbb8>
 800837a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800837c:	b963      	cbnz	r3, 8008398 <_dtoa_r+0xb0>
 800837e:	4b97      	ldr	r3, [pc, #604]	; (80085dc <_dtoa_r+0x2f4>)
 8008380:	e027      	b.n	80083d2 <_dtoa_r+0xea>
 8008382:	4b97      	ldr	r3, [pc, #604]	; (80085e0 <_dtoa_r+0x2f8>)
 8008384:	9300      	str	r3, [sp, #0]
 8008386:	3308      	adds	r3, #8
 8008388:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800838a:	6013      	str	r3, [r2, #0]
 800838c:	9800      	ldr	r0, [sp, #0]
 800838e:	b013      	add	sp, #76	; 0x4c
 8008390:	ecbd 8b04 	vpop	{d8-d9}
 8008394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008398:	4b90      	ldr	r3, [pc, #576]	; (80085dc <_dtoa_r+0x2f4>)
 800839a:	9300      	str	r3, [sp, #0]
 800839c:	3303      	adds	r3, #3
 800839e:	e7f3      	b.n	8008388 <_dtoa_r+0xa0>
 80083a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80083a4:	2200      	movs	r2, #0
 80083a6:	ec51 0b17 	vmov	r0, r1, d7
 80083aa:	eeb0 8a47 	vmov.f32	s16, s14
 80083ae:	eef0 8a67 	vmov.f32	s17, s15
 80083b2:	2300      	movs	r3, #0
 80083b4:	f7f8 fb98 	bl	8000ae8 <__aeabi_dcmpeq>
 80083b8:	4681      	mov	r9, r0
 80083ba:	b160      	cbz	r0, 80083d6 <_dtoa_r+0xee>
 80083bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80083be:	2301      	movs	r3, #1
 80083c0:	6013      	str	r3, [r2, #0]
 80083c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f000 8568 	beq.w	8008e9a <_dtoa_r+0xbb2>
 80083ca:	4b86      	ldr	r3, [pc, #536]	; (80085e4 <_dtoa_r+0x2fc>)
 80083cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80083ce:	6013      	str	r3, [r2, #0]
 80083d0:	3b01      	subs	r3, #1
 80083d2:	9300      	str	r3, [sp, #0]
 80083d4:	e7da      	b.n	800838c <_dtoa_r+0xa4>
 80083d6:	aa10      	add	r2, sp, #64	; 0x40
 80083d8:	a911      	add	r1, sp, #68	; 0x44
 80083da:	4620      	mov	r0, r4
 80083dc:	eeb0 0a48 	vmov.f32	s0, s16
 80083e0:	eef0 0a68 	vmov.f32	s1, s17
 80083e4:	f001 f994 	bl	8009710 <__d2b>
 80083e8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80083ec:	4682      	mov	sl, r0
 80083ee:	2d00      	cmp	r5, #0
 80083f0:	d07f      	beq.n	80084f2 <_dtoa_r+0x20a>
 80083f2:	ee18 3a90 	vmov	r3, s17
 80083f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083fa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80083fe:	ec51 0b18 	vmov	r0, r1, d8
 8008402:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008406:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800840a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800840e:	4619      	mov	r1, r3
 8008410:	2200      	movs	r2, #0
 8008412:	4b75      	ldr	r3, [pc, #468]	; (80085e8 <_dtoa_r+0x300>)
 8008414:	f7f7 ff48 	bl	80002a8 <__aeabi_dsub>
 8008418:	a367      	add	r3, pc, #412	; (adr r3, 80085b8 <_dtoa_r+0x2d0>)
 800841a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841e:	f7f8 f8fb 	bl	8000618 <__aeabi_dmul>
 8008422:	a367      	add	r3, pc, #412	; (adr r3, 80085c0 <_dtoa_r+0x2d8>)
 8008424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008428:	f7f7 ff40 	bl	80002ac <__adddf3>
 800842c:	4606      	mov	r6, r0
 800842e:	4628      	mov	r0, r5
 8008430:	460f      	mov	r7, r1
 8008432:	f7f8 f887 	bl	8000544 <__aeabi_i2d>
 8008436:	a364      	add	r3, pc, #400	; (adr r3, 80085c8 <_dtoa_r+0x2e0>)
 8008438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843c:	f7f8 f8ec 	bl	8000618 <__aeabi_dmul>
 8008440:	4602      	mov	r2, r0
 8008442:	460b      	mov	r3, r1
 8008444:	4630      	mov	r0, r6
 8008446:	4639      	mov	r1, r7
 8008448:	f7f7 ff30 	bl	80002ac <__adddf3>
 800844c:	4606      	mov	r6, r0
 800844e:	460f      	mov	r7, r1
 8008450:	f7f8 fb92 	bl	8000b78 <__aeabi_d2iz>
 8008454:	2200      	movs	r2, #0
 8008456:	4683      	mov	fp, r0
 8008458:	2300      	movs	r3, #0
 800845a:	4630      	mov	r0, r6
 800845c:	4639      	mov	r1, r7
 800845e:	f7f8 fb4d 	bl	8000afc <__aeabi_dcmplt>
 8008462:	b148      	cbz	r0, 8008478 <_dtoa_r+0x190>
 8008464:	4658      	mov	r0, fp
 8008466:	f7f8 f86d 	bl	8000544 <__aeabi_i2d>
 800846a:	4632      	mov	r2, r6
 800846c:	463b      	mov	r3, r7
 800846e:	f7f8 fb3b 	bl	8000ae8 <__aeabi_dcmpeq>
 8008472:	b908      	cbnz	r0, 8008478 <_dtoa_r+0x190>
 8008474:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008478:	f1bb 0f16 	cmp.w	fp, #22
 800847c:	d857      	bhi.n	800852e <_dtoa_r+0x246>
 800847e:	4b5b      	ldr	r3, [pc, #364]	; (80085ec <_dtoa_r+0x304>)
 8008480:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008488:	ec51 0b18 	vmov	r0, r1, d8
 800848c:	f7f8 fb36 	bl	8000afc <__aeabi_dcmplt>
 8008490:	2800      	cmp	r0, #0
 8008492:	d04e      	beq.n	8008532 <_dtoa_r+0x24a>
 8008494:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008498:	2300      	movs	r3, #0
 800849a:	930c      	str	r3, [sp, #48]	; 0x30
 800849c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800849e:	1b5b      	subs	r3, r3, r5
 80084a0:	1e5a      	subs	r2, r3, #1
 80084a2:	bf45      	ittet	mi
 80084a4:	f1c3 0301 	rsbmi	r3, r3, #1
 80084a8:	9305      	strmi	r3, [sp, #20]
 80084aa:	2300      	movpl	r3, #0
 80084ac:	2300      	movmi	r3, #0
 80084ae:	9206      	str	r2, [sp, #24]
 80084b0:	bf54      	ite	pl
 80084b2:	9305      	strpl	r3, [sp, #20]
 80084b4:	9306      	strmi	r3, [sp, #24]
 80084b6:	f1bb 0f00 	cmp.w	fp, #0
 80084ba:	db3c      	blt.n	8008536 <_dtoa_r+0x24e>
 80084bc:	9b06      	ldr	r3, [sp, #24]
 80084be:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80084c2:	445b      	add	r3, fp
 80084c4:	9306      	str	r3, [sp, #24]
 80084c6:	2300      	movs	r3, #0
 80084c8:	9308      	str	r3, [sp, #32]
 80084ca:	9b07      	ldr	r3, [sp, #28]
 80084cc:	2b09      	cmp	r3, #9
 80084ce:	d868      	bhi.n	80085a2 <_dtoa_r+0x2ba>
 80084d0:	2b05      	cmp	r3, #5
 80084d2:	bfc4      	itt	gt
 80084d4:	3b04      	subgt	r3, #4
 80084d6:	9307      	strgt	r3, [sp, #28]
 80084d8:	9b07      	ldr	r3, [sp, #28]
 80084da:	f1a3 0302 	sub.w	r3, r3, #2
 80084de:	bfcc      	ite	gt
 80084e0:	2500      	movgt	r5, #0
 80084e2:	2501      	movle	r5, #1
 80084e4:	2b03      	cmp	r3, #3
 80084e6:	f200 8085 	bhi.w	80085f4 <_dtoa_r+0x30c>
 80084ea:	e8df f003 	tbb	[pc, r3]
 80084ee:	3b2e      	.short	0x3b2e
 80084f0:	5839      	.short	0x5839
 80084f2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80084f6:	441d      	add	r5, r3
 80084f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80084fc:	2b20      	cmp	r3, #32
 80084fe:	bfc1      	itttt	gt
 8008500:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008504:	fa08 f803 	lslgt.w	r8, r8, r3
 8008508:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800850c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008510:	bfd6      	itet	le
 8008512:	f1c3 0320 	rsble	r3, r3, #32
 8008516:	ea48 0003 	orrgt.w	r0, r8, r3
 800851a:	fa06 f003 	lslle.w	r0, r6, r3
 800851e:	f7f8 f801 	bl	8000524 <__aeabi_ui2d>
 8008522:	2201      	movs	r2, #1
 8008524:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008528:	3d01      	subs	r5, #1
 800852a:	920e      	str	r2, [sp, #56]	; 0x38
 800852c:	e76f      	b.n	800840e <_dtoa_r+0x126>
 800852e:	2301      	movs	r3, #1
 8008530:	e7b3      	b.n	800849a <_dtoa_r+0x1b2>
 8008532:	900c      	str	r0, [sp, #48]	; 0x30
 8008534:	e7b2      	b.n	800849c <_dtoa_r+0x1b4>
 8008536:	9b05      	ldr	r3, [sp, #20]
 8008538:	eba3 030b 	sub.w	r3, r3, fp
 800853c:	9305      	str	r3, [sp, #20]
 800853e:	f1cb 0300 	rsb	r3, fp, #0
 8008542:	9308      	str	r3, [sp, #32]
 8008544:	2300      	movs	r3, #0
 8008546:	930b      	str	r3, [sp, #44]	; 0x2c
 8008548:	e7bf      	b.n	80084ca <_dtoa_r+0x1e2>
 800854a:	2300      	movs	r3, #0
 800854c:	9309      	str	r3, [sp, #36]	; 0x24
 800854e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008550:	2b00      	cmp	r3, #0
 8008552:	dc52      	bgt.n	80085fa <_dtoa_r+0x312>
 8008554:	2301      	movs	r3, #1
 8008556:	9301      	str	r3, [sp, #4]
 8008558:	9304      	str	r3, [sp, #16]
 800855a:	461a      	mov	r2, r3
 800855c:	920a      	str	r2, [sp, #40]	; 0x28
 800855e:	e00b      	b.n	8008578 <_dtoa_r+0x290>
 8008560:	2301      	movs	r3, #1
 8008562:	e7f3      	b.n	800854c <_dtoa_r+0x264>
 8008564:	2300      	movs	r3, #0
 8008566:	9309      	str	r3, [sp, #36]	; 0x24
 8008568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800856a:	445b      	add	r3, fp
 800856c:	9301      	str	r3, [sp, #4]
 800856e:	3301      	adds	r3, #1
 8008570:	2b01      	cmp	r3, #1
 8008572:	9304      	str	r3, [sp, #16]
 8008574:	bfb8      	it	lt
 8008576:	2301      	movlt	r3, #1
 8008578:	69e0      	ldr	r0, [r4, #28]
 800857a:	2100      	movs	r1, #0
 800857c:	2204      	movs	r2, #4
 800857e:	f102 0614 	add.w	r6, r2, #20
 8008582:	429e      	cmp	r6, r3
 8008584:	d93d      	bls.n	8008602 <_dtoa_r+0x31a>
 8008586:	6041      	str	r1, [r0, #4]
 8008588:	4620      	mov	r0, r4
 800858a:	f000 fd9f 	bl	80090cc <_Balloc>
 800858e:	9000      	str	r0, [sp, #0]
 8008590:	2800      	cmp	r0, #0
 8008592:	d139      	bne.n	8008608 <_dtoa_r+0x320>
 8008594:	4b16      	ldr	r3, [pc, #88]	; (80085f0 <_dtoa_r+0x308>)
 8008596:	4602      	mov	r2, r0
 8008598:	f240 11af 	movw	r1, #431	; 0x1af
 800859c:	e6bd      	b.n	800831a <_dtoa_r+0x32>
 800859e:	2301      	movs	r3, #1
 80085a0:	e7e1      	b.n	8008566 <_dtoa_r+0x27e>
 80085a2:	2501      	movs	r5, #1
 80085a4:	2300      	movs	r3, #0
 80085a6:	9307      	str	r3, [sp, #28]
 80085a8:	9509      	str	r5, [sp, #36]	; 0x24
 80085aa:	f04f 33ff 	mov.w	r3, #4294967295
 80085ae:	9301      	str	r3, [sp, #4]
 80085b0:	9304      	str	r3, [sp, #16]
 80085b2:	2200      	movs	r2, #0
 80085b4:	2312      	movs	r3, #18
 80085b6:	e7d1      	b.n	800855c <_dtoa_r+0x274>
 80085b8:	636f4361 	.word	0x636f4361
 80085bc:	3fd287a7 	.word	0x3fd287a7
 80085c0:	8b60c8b3 	.word	0x8b60c8b3
 80085c4:	3fc68a28 	.word	0x3fc68a28
 80085c8:	509f79fb 	.word	0x509f79fb
 80085cc:	3fd34413 	.word	0x3fd34413
 80085d0:	0800a111 	.word	0x0800a111
 80085d4:	0800a128 	.word	0x0800a128
 80085d8:	7ff00000 	.word	0x7ff00000
 80085dc:	0800a10d 	.word	0x0800a10d
 80085e0:	0800a104 	.word	0x0800a104
 80085e4:	0800a0e1 	.word	0x0800a0e1
 80085e8:	3ff80000 	.word	0x3ff80000
 80085ec:	0800a218 	.word	0x0800a218
 80085f0:	0800a180 	.word	0x0800a180
 80085f4:	2301      	movs	r3, #1
 80085f6:	9309      	str	r3, [sp, #36]	; 0x24
 80085f8:	e7d7      	b.n	80085aa <_dtoa_r+0x2c2>
 80085fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085fc:	9301      	str	r3, [sp, #4]
 80085fe:	9304      	str	r3, [sp, #16]
 8008600:	e7ba      	b.n	8008578 <_dtoa_r+0x290>
 8008602:	3101      	adds	r1, #1
 8008604:	0052      	lsls	r2, r2, #1
 8008606:	e7ba      	b.n	800857e <_dtoa_r+0x296>
 8008608:	69e3      	ldr	r3, [r4, #28]
 800860a:	9a00      	ldr	r2, [sp, #0]
 800860c:	601a      	str	r2, [r3, #0]
 800860e:	9b04      	ldr	r3, [sp, #16]
 8008610:	2b0e      	cmp	r3, #14
 8008612:	f200 80a8 	bhi.w	8008766 <_dtoa_r+0x47e>
 8008616:	2d00      	cmp	r5, #0
 8008618:	f000 80a5 	beq.w	8008766 <_dtoa_r+0x47e>
 800861c:	f1bb 0f00 	cmp.w	fp, #0
 8008620:	dd38      	ble.n	8008694 <_dtoa_r+0x3ac>
 8008622:	4bc0      	ldr	r3, [pc, #768]	; (8008924 <_dtoa_r+0x63c>)
 8008624:	f00b 020f 	and.w	r2, fp, #15
 8008628:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800862c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008630:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008634:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008638:	d019      	beq.n	800866e <_dtoa_r+0x386>
 800863a:	4bbb      	ldr	r3, [pc, #748]	; (8008928 <_dtoa_r+0x640>)
 800863c:	ec51 0b18 	vmov	r0, r1, d8
 8008640:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008644:	f7f8 f912 	bl	800086c <__aeabi_ddiv>
 8008648:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800864c:	f008 080f 	and.w	r8, r8, #15
 8008650:	2503      	movs	r5, #3
 8008652:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008928 <_dtoa_r+0x640>
 8008656:	f1b8 0f00 	cmp.w	r8, #0
 800865a:	d10a      	bne.n	8008672 <_dtoa_r+0x38a>
 800865c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008660:	4632      	mov	r2, r6
 8008662:	463b      	mov	r3, r7
 8008664:	f7f8 f902 	bl	800086c <__aeabi_ddiv>
 8008668:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800866c:	e02b      	b.n	80086c6 <_dtoa_r+0x3de>
 800866e:	2502      	movs	r5, #2
 8008670:	e7ef      	b.n	8008652 <_dtoa_r+0x36a>
 8008672:	f018 0f01 	tst.w	r8, #1
 8008676:	d008      	beq.n	800868a <_dtoa_r+0x3a2>
 8008678:	4630      	mov	r0, r6
 800867a:	4639      	mov	r1, r7
 800867c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008680:	f7f7 ffca 	bl	8000618 <__aeabi_dmul>
 8008684:	3501      	adds	r5, #1
 8008686:	4606      	mov	r6, r0
 8008688:	460f      	mov	r7, r1
 800868a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800868e:	f109 0908 	add.w	r9, r9, #8
 8008692:	e7e0      	b.n	8008656 <_dtoa_r+0x36e>
 8008694:	f000 809f 	beq.w	80087d6 <_dtoa_r+0x4ee>
 8008698:	f1cb 0600 	rsb	r6, fp, #0
 800869c:	4ba1      	ldr	r3, [pc, #644]	; (8008924 <_dtoa_r+0x63c>)
 800869e:	4fa2      	ldr	r7, [pc, #648]	; (8008928 <_dtoa_r+0x640>)
 80086a0:	f006 020f 	and.w	r2, r6, #15
 80086a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ac:	ec51 0b18 	vmov	r0, r1, d8
 80086b0:	f7f7 ffb2 	bl	8000618 <__aeabi_dmul>
 80086b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086b8:	1136      	asrs	r6, r6, #4
 80086ba:	2300      	movs	r3, #0
 80086bc:	2502      	movs	r5, #2
 80086be:	2e00      	cmp	r6, #0
 80086c0:	d17e      	bne.n	80087c0 <_dtoa_r+0x4d8>
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d1d0      	bne.n	8008668 <_dtoa_r+0x380>
 80086c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086c8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f000 8084 	beq.w	80087da <_dtoa_r+0x4f2>
 80086d2:	4b96      	ldr	r3, [pc, #600]	; (800892c <_dtoa_r+0x644>)
 80086d4:	2200      	movs	r2, #0
 80086d6:	4640      	mov	r0, r8
 80086d8:	4649      	mov	r1, r9
 80086da:	f7f8 fa0f 	bl	8000afc <__aeabi_dcmplt>
 80086de:	2800      	cmp	r0, #0
 80086e0:	d07b      	beq.n	80087da <_dtoa_r+0x4f2>
 80086e2:	9b04      	ldr	r3, [sp, #16]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d078      	beq.n	80087da <_dtoa_r+0x4f2>
 80086e8:	9b01      	ldr	r3, [sp, #4]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	dd39      	ble.n	8008762 <_dtoa_r+0x47a>
 80086ee:	4b90      	ldr	r3, [pc, #576]	; (8008930 <_dtoa_r+0x648>)
 80086f0:	2200      	movs	r2, #0
 80086f2:	4640      	mov	r0, r8
 80086f4:	4649      	mov	r1, r9
 80086f6:	f7f7 ff8f 	bl	8000618 <__aeabi_dmul>
 80086fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086fe:	9e01      	ldr	r6, [sp, #4]
 8008700:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008704:	3501      	adds	r5, #1
 8008706:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800870a:	4628      	mov	r0, r5
 800870c:	f7f7 ff1a 	bl	8000544 <__aeabi_i2d>
 8008710:	4642      	mov	r2, r8
 8008712:	464b      	mov	r3, r9
 8008714:	f7f7 ff80 	bl	8000618 <__aeabi_dmul>
 8008718:	4b86      	ldr	r3, [pc, #536]	; (8008934 <_dtoa_r+0x64c>)
 800871a:	2200      	movs	r2, #0
 800871c:	f7f7 fdc6 	bl	80002ac <__adddf3>
 8008720:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008724:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008728:	9303      	str	r3, [sp, #12]
 800872a:	2e00      	cmp	r6, #0
 800872c:	d158      	bne.n	80087e0 <_dtoa_r+0x4f8>
 800872e:	4b82      	ldr	r3, [pc, #520]	; (8008938 <_dtoa_r+0x650>)
 8008730:	2200      	movs	r2, #0
 8008732:	4640      	mov	r0, r8
 8008734:	4649      	mov	r1, r9
 8008736:	f7f7 fdb7 	bl	80002a8 <__aeabi_dsub>
 800873a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800873e:	4680      	mov	r8, r0
 8008740:	4689      	mov	r9, r1
 8008742:	f7f8 f9f9 	bl	8000b38 <__aeabi_dcmpgt>
 8008746:	2800      	cmp	r0, #0
 8008748:	f040 8296 	bne.w	8008c78 <_dtoa_r+0x990>
 800874c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008750:	4640      	mov	r0, r8
 8008752:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008756:	4649      	mov	r1, r9
 8008758:	f7f8 f9d0 	bl	8000afc <__aeabi_dcmplt>
 800875c:	2800      	cmp	r0, #0
 800875e:	f040 8289 	bne.w	8008c74 <_dtoa_r+0x98c>
 8008762:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008766:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008768:	2b00      	cmp	r3, #0
 800876a:	f2c0 814e 	blt.w	8008a0a <_dtoa_r+0x722>
 800876e:	f1bb 0f0e 	cmp.w	fp, #14
 8008772:	f300 814a 	bgt.w	8008a0a <_dtoa_r+0x722>
 8008776:	4b6b      	ldr	r3, [pc, #428]	; (8008924 <_dtoa_r+0x63c>)
 8008778:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800877c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008782:	2b00      	cmp	r3, #0
 8008784:	f280 80dc 	bge.w	8008940 <_dtoa_r+0x658>
 8008788:	9b04      	ldr	r3, [sp, #16]
 800878a:	2b00      	cmp	r3, #0
 800878c:	f300 80d8 	bgt.w	8008940 <_dtoa_r+0x658>
 8008790:	f040 826f 	bne.w	8008c72 <_dtoa_r+0x98a>
 8008794:	4b68      	ldr	r3, [pc, #416]	; (8008938 <_dtoa_r+0x650>)
 8008796:	2200      	movs	r2, #0
 8008798:	4640      	mov	r0, r8
 800879a:	4649      	mov	r1, r9
 800879c:	f7f7 ff3c 	bl	8000618 <__aeabi_dmul>
 80087a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087a4:	f7f8 f9be 	bl	8000b24 <__aeabi_dcmpge>
 80087a8:	9e04      	ldr	r6, [sp, #16]
 80087aa:	4637      	mov	r7, r6
 80087ac:	2800      	cmp	r0, #0
 80087ae:	f040 8245 	bne.w	8008c3c <_dtoa_r+0x954>
 80087b2:	9d00      	ldr	r5, [sp, #0]
 80087b4:	2331      	movs	r3, #49	; 0x31
 80087b6:	f805 3b01 	strb.w	r3, [r5], #1
 80087ba:	f10b 0b01 	add.w	fp, fp, #1
 80087be:	e241      	b.n	8008c44 <_dtoa_r+0x95c>
 80087c0:	07f2      	lsls	r2, r6, #31
 80087c2:	d505      	bpl.n	80087d0 <_dtoa_r+0x4e8>
 80087c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087c8:	f7f7 ff26 	bl	8000618 <__aeabi_dmul>
 80087cc:	3501      	adds	r5, #1
 80087ce:	2301      	movs	r3, #1
 80087d0:	1076      	asrs	r6, r6, #1
 80087d2:	3708      	adds	r7, #8
 80087d4:	e773      	b.n	80086be <_dtoa_r+0x3d6>
 80087d6:	2502      	movs	r5, #2
 80087d8:	e775      	b.n	80086c6 <_dtoa_r+0x3de>
 80087da:	9e04      	ldr	r6, [sp, #16]
 80087dc:	465f      	mov	r7, fp
 80087de:	e792      	b.n	8008706 <_dtoa_r+0x41e>
 80087e0:	9900      	ldr	r1, [sp, #0]
 80087e2:	4b50      	ldr	r3, [pc, #320]	; (8008924 <_dtoa_r+0x63c>)
 80087e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80087e8:	4431      	add	r1, r6
 80087ea:	9102      	str	r1, [sp, #8]
 80087ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087ee:	eeb0 9a47 	vmov.f32	s18, s14
 80087f2:	eef0 9a67 	vmov.f32	s19, s15
 80087f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80087fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80087fe:	2900      	cmp	r1, #0
 8008800:	d044      	beq.n	800888c <_dtoa_r+0x5a4>
 8008802:	494e      	ldr	r1, [pc, #312]	; (800893c <_dtoa_r+0x654>)
 8008804:	2000      	movs	r0, #0
 8008806:	f7f8 f831 	bl	800086c <__aeabi_ddiv>
 800880a:	ec53 2b19 	vmov	r2, r3, d9
 800880e:	f7f7 fd4b 	bl	80002a8 <__aeabi_dsub>
 8008812:	9d00      	ldr	r5, [sp, #0]
 8008814:	ec41 0b19 	vmov	d9, r0, r1
 8008818:	4649      	mov	r1, r9
 800881a:	4640      	mov	r0, r8
 800881c:	f7f8 f9ac 	bl	8000b78 <__aeabi_d2iz>
 8008820:	4606      	mov	r6, r0
 8008822:	f7f7 fe8f 	bl	8000544 <__aeabi_i2d>
 8008826:	4602      	mov	r2, r0
 8008828:	460b      	mov	r3, r1
 800882a:	4640      	mov	r0, r8
 800882c:	4649      	mov	r1, r9
 800882e:	f7f7 fd3b 	bl	80002a8 <__aeabi_dsub>
 8008832:	3630      	adds	r6, #48	; 0x30
 8008834:	f805 6b01 	strb.w	r6, [r5], #1
 8008838:	ec53 2b19 	vmov	r2, r3, d9
 800883c:	4680      	mov	r8, r0
 800883e:	4689      	mov	r9, r1
 8008840:	f7f8 f95c 	bl	8000afc <__aeabi_dcmplt>
 8008844:	2800      	cmp	r0, #0
 8008846:	d164      	bne.n	8008912 <_dtoa_r+0x62a>
 8008848:	4642      	mov	r2, r8
 800884a:	464b      	mov	r3, r9
 800884c:	4937      	ldr	r1, [pc, #220]	; (800892c <_dtoa_r+0x644>)
 800884e:	2000      	movs	r0, #0
 8008850:	f7f7 fd2a 	bl	80002a8 <__aeabi_dsub>
 8008854:	ec53 2b19 	vmov	r2, r3, d9
 8008858:	f7f8 f950 	bl	8000afc <__aeabi_dcmplt>
 800885c:	2800      	cmp	r0, #0
 800885e:	f040 80b6 	bne.w	80089ce <_dtoa_r+0x6e6>
 8008862:	9b02      	ldr	r3, [sp, #8]
 8008864:	429d      	cmp	r5, r3
 8008866:	f43f af7c 	beq.w	8008762 <_dtoa_r+0x47a>
 800886a:	4b31      	ldr	r3, [pc, #196]	; (8008930 <_dtoa_r+0x648>)
 800886c:	ec51 0b19 	vmov	r0, r1, d9
 8008870:	2200      	movs	r2, #0
 8008872:	f7f7 fed1 	bl	8000618 <__aeabi_dmul>
 8008876:	4b2e      	ldr	r3, [pc, #184]	; (8008930 <_dtoa_r+0x648>)
 8008878:	ec41 0b19 	vmov	d9, r0, r1
 800887c:	2200      	movs	r2, #0
 800887e:	4640      	mov	r0, r8
 8008880:	4649      	mov	r1, r9
 8008882:	f7f7 fec9 	bl	8000618 <__aeabi_dmul>
 8008886:	4680      	mov	r8, r0
 8008888:	4689      	mov	r9, r1
 800888a:	e7c5      	b.n	8008818 <_dtoa_r+0x530>
 800888c:	ec51 0b17 	vmov	r0, r1, d7
 8008890:	f7f7 fec2 	bl	8000618 <__aeabi_dmul>
 8008894:	9b02      	ldr	r3, [sp, #8]
 8008896:	9d00      	ldr	r5, [sp, #0]
 8008898:	930f      	str	r3, [sp, #60]	; 0x3c
 800889a:	ec41 0b19 	vmov	d9, r0, r1
 800889e:	4649      	mov	r1, r9
 80088a0:	4640      	mov	r0, r8
 80088a2:	f7f8 f969 	bl	8000b78 <__aeabi_d2iz>
 80088a6:	4606      	mov	r6, r0
 80088a8:	f7f7 fe4c 	bl	8000544 <__aeabi_i2d>
 80088ac:	3630      	adds	r6, #48	; 0x30
 80088ae:	4602      	mov	r2, r0
 80088b0:	460b      	mov	r3, r1
 80088b2:	4640      	mov	r0, r8
 80088b4:	4649      	mov	r1, r9
 80088b6:	f7f7 fcf7 	bl	80002a8 <__aeabi_dsub>
 80088ba:	f805 6b01 	strb.w	r6, [r5], #1
 80088be:	9b02      	ldr	r3, [sp, #8]
 80088c0:	429d      	cmp	r5, r3
 80088c2:	4680      	mov	r8, r0
 80088c4:	4689      	mov	r9, r1
 80088c6:	f04f 0200 	mov.w	r2, #0
 80088ca:	d124      	bne.n	8008916 <_dtoa_r+0x62e>
 80088cc:	4b1b      	ldr	r3, [pc, #108]	; (800893c <_dtoa_r+0x654>)
 80088ce:	ec51 0b19 	vmov	r0, r1, d9
 80088d2:	f7f7 fceb 	bl	80002ac <__adddf3>
 80088d6:	4602      	mov	r2, r0
 80088d8:	460b      	mov	r3, r1
 80088da:	4640      	mov	r0, r8
 80088dc:	4649      	mov	r1, r9
 80088de:	f7f8 f92b 	bl	8000b38 <__aeabi_dcmpgt>
 80088e2:	2800      	cmp	r0, #0
 80088e4:	d173      	bne.n	80089ce <_dtoa_r+0x6e6>
 80088e6:	ec53 2b19 	vmov	r2, r3, d9
 80088ea:	4914      	ldr	r1, [pc, #80]	; (800893c <_dtoa_r+0x654>)
 80088ec:	2000      	movs	r0, #0
 80088ee:	f7f7 fcdb 	bl	80002a8 <__aeabi_dsub>
 80088f2:	4602      	mov	r2, r0
 80088f4:	460b      	mov	r3, r1
 80088f6:	4640      	mov	r0, r8
 80088f8:	4649      	mov	r1, r9
 80088fa:	f7f8 f8ff 	bl	8000afc <__aeabi_dcmplt>
 80088fe:	2800      	cmp	r0, #0
 8008900:	f43f af2f 	beq.w	8008762 <_dtoa_r+0x47a>
 8008904:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008906:	1e6b      	subs	r3, r5, #1
 8008908:	930f      	str	r3, [sp, #60]	; 0x3c
 800890a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800890e:	2b30      	cmp	r3, #48	; 0x30
 8008910:	d0f8      	beq.n	8008904 <_dtoa_r+0x61c>
 8008912:	46bb      	mov	fp, r7
 8008914:	e04a      	b.n	80089ac <_dtoa_r+0x6c4>
 8008916:	4b06      	ldr	r3, [pc, #24]	; (8008930 <_dtoa_r+0x648>)
 8008918:	f7f7 fe7e 	bl	8000618 <__aeabi_dmul>
 800891c:	4680      	mov	r8, r0
 800891e:	4689      	mov	r9, r1
 8008920:	e7bd      	b.n	800889e <_dtoa_r+0x5b6>
 8008922:	bf00      	nop
 8008924:	0800a218 	.word	0x0800a218
 8008928:	0800a1f0 	.word	0x0800a1f0
 800892c:	3ff00000 	.word	0x3ff00000
 8008930:	40240000 	.word	0x40240000
 8008934:	401c0000 	.word	0x401c0000
 8008938:	40140000 	.word	0x40140000
 800893c:	3fe00000 	.word	0x3fe00000
 8008940:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008944:	9d00      	ldr	r5, [sp, #0]
 8008946:	4642      	mov	r2, r8
 8008948:	464b      	mov	r3, r9
 800894a:	4630      	mov	r0, r6
 800894c:	4639      	mov	r1, r7
 800894e:	f7f7 ff8d 	bl	800086c <__aeabi_ddiv>
 8008952:	f7f8 f911 	bl	8000b78 <__aeabi_d2iz>
 8008956:	9001      	str	r0, [sp, #4]
 8008958:	f7f7 fdf4 	bl	8000544 <__aeabi_i2d>
 800895c:	4642      	mov	r2, r8
 800895e:	464b      	mov	r3, r9
 8008960:	f7f7 fe5a 	bl	8000618 <__aeabi_dmul>
 8008964:	4602      	mov	r2, r0
 8008966:	460b      	mov	r3, r1
 8008968:	4630      	mov	r0, r6
 800896a:	4639      	mov	r1, r7
 800896c:	f7f7 fc9c 	bl	80002a8 <__aeabi_dsub>
 8008970:	9e01      	ldr	r6, [sp, #4]
 8008972:	9f04      	ldr	r7, [sp, #16]
 8008974:	3630      	adds	r6, #48	; 0x30
 8008976:	f805 6b01 	strb.w	r6, [r5], #1
 800897a:	9e00      	ldr	r6, [sp, #0]
 800897c:	1bae      	subs	r6, r5, r6
 800897e:	42b7      	cmp	r7, r6
 8008980:	4602      	mov	r2, r0
 8008982:	460b      	mov	r3, r1
 8008984:	d134      	bne.n	80089f0 <_dtoa_r+0x708>
 8008986:	f7f7 fc91 	bl	80002ac <__adddf3>
 800898a:	4642      	mov	r2, r8
 800898c:	464b      	mov	r3, r9
 800898e:	4606      	mov	r6, r0
 8008990:	460f      	mov	r7, r1
 8008992:	f7f8 f8d1 	bl	8000b38 <__aeabi_dcmpgt>
 8008996:	b9c8      	cbnz	r0, 80089cc <_dtoa_r+0x6e4>
 8008998:	4642      	mov	r2, r8
 800899a:	464b      	mov	r3, r9
 800899c:	4630      	mov	r0, r6
 800899e:	4639      	mov	r1, r7
 80089a0:	f7f8 f8a2 	bl	8000ae8 <__aeabi_dcmpeq>
 80089a4:	b110      	cbz	r0, 80089ac <_dtoa_r+0x6c4>
 80089a6:	9b01      	ldr	r3, [sp, #4]
 80089a8:	07db      	lsls	r3, r3, #31
 80089aa:	d40f      	bmi.n	80089cc <_dtoa_r+0x6e4>
 80089ac:	4651      	mov	r1, sl
 80089ae:	4620      	mov	r0, r4
 80089b0:	f000 fbcc 	bl	800914c <_Bfree>
 80089b4:	2300      	movs	r3, #0
 80089b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80089b8:	702b      	strb	r3, [r5, #0]
 80089ba:	f10b 0301 	add.w	r3, fp, #1
 80089be:	6013      	str	r3, [r2, #0]
 80089c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	f43f ace2 	beq.w	800838c <_dtoa_r+0xa4>
 80089c8:	601d      	str	r5, [r3, #0]
 80089ca:	e4df      	b.n	800838c <_dtoa_r+0xa4>
 80089cc:	465f      	mov	r7, fp
 80089ce:	462b      	mov	r3, r5
 80089d0:	461d      	mov	r5, r3
 80089d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089d6:	2a39      	cmp	r2, #57	; 0x39
 80089d8:	d106      	bne.n	80089e8 <_dtoa_r+0x700>
 80089da:	9a00      	ldr	r2, [sp, #0]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d1f7      	bne.n	80089d0 <_dtoa_r+0x6e8>
 80089e0:	9900      	ldr	r1, [sp, #0]
 80089e2:	2230      	movs	r2, #48	; 0x30
 80089e4:	3701      	adds	r7, #1
 80089e6:	700a      	strb	r2, [r1, #0]
 80089e8:	781a      	ldrb	r2, [r3, #0]
 80089ea:	3201      	adds	r2, #1
 80089ec:	701a      	strb	r2, [r3, #0]
 80089ee:	e790      	b.n	8008912 <_dtoa_r+0x62a>
 80089f0:	4ba3      	ldr	r3, [pc, #652]	; (8008c80 <_dtoa_r+0x998>)
 80089f2:	2200      	movs	r2, #0
 80089f4:	f7f7 fe10 	bl	8000618 <__aeabi_dmul>
 80089f8:	2200      	movs	r2, #0
 80089fa:	2300      	movs	r3, #0
 80089fc:	4606      	mov	r6, r0
 80089fe:	460f      	mov	r7, r1
 8008a00:	f7f8 f872 	bl	8000ae8 <__aeabi_dcmpeq>
 8008a04:	2800      	cmp	r0, #0
 8008a06:	d09e      	beq.n	8008946 <_dtoa_r+0x65e>
 8008a08:	e7d0      	b.n	80089ac <_dtoa_r+0x6c4>
 8008a0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a0c:	2a00      	cmp	r2, #0
 8008a0e:	f000 80ca 	beq.w	8008ba6 <_dtoa_r+0x8be>
 8008a12:	9a07      	ldr	r2, [sp, #28]
 8008a14:	2a01      	cmp	r2, #1
 8008a16:	f300 80ad 	bgt.w	8008b74 <_dtoa_r+0x88c>
 8008a1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a1c:	2a00      	cmp	r2, #0
 8008a1e:	f000 80a5 	beq.w	8008b6c <_dtoa_r+0x884>
 8008a22:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008a26:	9e08      	ldr	r6, [sp, #32]
 8008a28:	9d05      	ldr	r5, [sp, #20]
 8008a2a:	9a05      	ldr	r2, [sp, #20]
 8008a2c:	441a      	add	r2, r3
 8008a2e:	9205      	str	r2, [sp, #20]
 8008a30:	9a06      	ldr	r2, [sp, #24]
 8008a32:	2101      	movs	r1, #1
 8008a34:	441a      	add	r2, r3
 8008a36:	4620      	mov	r0, r4
 8008a38:	9206      	str	r2, [sp, #24]
 8008a3a:	f000 fc3d 	bl	80092b8 <__i2b>
 8008a3e:	4607      	mov	r7, r0
 8008a40:	b165      	cbz	r5, 8008a5c <_dtoa_r+0x774>
 8008a42:	9b06      	ldr	r3, [sp, #24]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	dd09      	ble.n	8008a5c <_dtoa_r+0x774>
 8008a48:	42ab      	cmp	r3, r5
 8008a4a:	9a05      	ldr	r2, [sp, #20]
 8008a4c:	bfa8      	it	ge
 8008a4e:	462b      	movge	r3, r5
 8008a50:	1ad2      	subs	r2, r2, r3
 8008a52:	9205      	str	r2, [sp, #20]
 8008a54:	9a06      	ldr	r2, [sp, #24]
 8008a56:	1aed      	subs	r5, r5, r3
 8008a58:	1ad3      	subs	r3, r2, r3
 8008a5a:	9306      	str	r3, [sp, #24]
 8008a5c:	9b08      	ldr	r3, [sp, #32]
 8008a5e:	b1f3      	cbz	r3, 8008a9e <_dtoa_r+0x7b6>
 8008a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	f000 80a3 	beq.w	8008bae <_dtoa_r+0x8c6>
 8008a68:	2e00      	cmp	r6, #0
 8008a6a:	dd10      	ble.n	8008a8e <_dtoa_r+0x7a6>
 8008a6c:	4639      	mov	r1, r7
 8008a6e:	4632      	mov	r2, r6
 8008a70:	4620      	mov	r0, r4
 8008a72:	f000 fce1 	bl	8009438 <__pow5mult>
 8008a76:	4652      	mov	r2, sl
 8008a78:	4601      	mov	r1, r0
 8008a7a:	4607      	mov	r7, r0
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	f000 fc31 	bl	80092e4 <__multiply>
 8008a82:	4651      	mov	r1, sl
 8008a84:	4680      	mov	r8, r0
 8008a86:	4620      	mov	r0, r4
 8008a88:	f000 fb60 	bl	800914c <_Bfree>
 8008a8c:	46c2      	mov	sl, r8
 8008a8e:	9b08      	ldr	r3, [sp, #32]
 8008a90:	1b9a      	subs	r2, r3, r6
 8008a92:	d004      	beq.n	8008a9e <_dtoa_r+0x7b6>
 8008a94:	4651      	mov	r1, sl
 8008a96:	4620      	mov	r0, r4
 8008a98:	f000 fcce 	bl	8009438 <__pow5mult>
 8008a9c:	4682      	mov	sl, r0
 8008a9e:	2101      	movs	r1, #1
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	f000 fc09 	bl	80092b8 <__i2b>
 8008aa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	4606      	mov	r6, r0
 8008aac:	f340 8081 	ble.w	8008bb2 <_dtoa_r+0x8ca>
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	4601      	mov	r1, r0
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	f000 fcbf 	bl	8009438 <__pow5mult>
 8008aba:	9b07      	ldr	r3, [sp, #28]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	4606      	mov	r6, r0
 8008ac0:	dd7a      	ble.n	8008bb8 <_dtoa_r+0x8d0>
 8008ac2:	f04f 0800 	mov.w	r8, #0
 8008ac6:	6933      	ldr	r3, [r6, #16]
 8008ac8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008acc:	6918      	ldr	r0, [r3, #16]
 8008ace:	f000 fba5 	bl	800921c <__hi0bits>
 8008ad2:	f1c0 0020 	rsb	r0, r0, #32
 8008ad6:	9b06      	ldr	r3, [sp, #24]
 8008ad8:	4418      	add	r0, r3
 8008ada:	f010 001f 	ands.w	r0, r0, #31
 8008ade:	f000 8094 	beq.w	8008c0a <_dtoa_r+0x922>
 8008ae2:	f1c0 0320 	rsb	r3, r0, #32
 8008ae6:	2b04      	cmp	r3, #4
 8008ae8:	f340 8085 	ble.w	8008bf6 <_dtoa_r+0x90e>
 8008aec:	9b05      	ldr	r3, [sp, #20]
 8008aee:	f1c0 001c 	rsb	r0, r0, #28
 8008af2:	4403      	add	r3, r0
 8008af4:	9305      	str	r3, [sp, #20]
 8008af6:	9b06      	ldr	r3, [sp, #24]
 8008af8:	4403      	add	r3, r0
 8008afa:	4405      	add	r5, r0
 8008afc:	9306      	str	r3, [sp, #24]
 8008afe:	9b05      	ldr	r3, [sp, #20]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	dd05      	ble.n	8008b10 <_dtoa_r+0x828>
 8008b04:	4651      	mov	r1, sl
 8008b06:	461a      	mov	r2, r3
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f000 fcef 	bl	80094ec <__lshift>
 8008b0e:	4682      	mov	sl, r0
 8008b10:	9b06      	ldr	r3, [sp, #24]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	dd05      	ble.n	8008b22 <_dtoa_r+0x83a>
 8008b16:	4631      	mov	r1, r6
 8008b18:	461a      	mov	r2, r3
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f000 fce6 	bl	80094ec <__lshift>
 8008b20:	4606      	mov	r6, r0
 8008b22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d072      	beq.n	8008c0e <_dtoa_r+0x926>
 8008b28:	4631      	mov	r1, r6
 8008b2a:	4650      	mov	r0, sl
 8008b2c:	f000 fd4a 	bl	80095c4 <__mcmp>
 8008b30:	2800      	cmp	r0, #0
 8008b32:	da6c      	bge.n	8008c0e <_dtoa_r+0x926>
 8008b34:	2300      	movs	r3, #0
 8008b36:	4651      	mov	r1, sl
 8008b38:	220a      	movs	r2, #10
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	f000 fb28 	bl	8009190 <__multadd>
 8008b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b42:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b46:	4682      	mov	sl, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f000 81b0 	beq.w	8008eae <_dtoa_r+0xbc6>
 8008b4e:	2300      	movs	r3, #0
 8008b50:	4639      	mov	r1, r7
 8008b52:	220a      	movs	r2, #10
 8008b54:	4620      	mov	r0, r4
 8008b56:	f000 fb1b 	bl	8009190 <__multadd>
 8008b5a:	9b01      	ldr	r3, [sp, #4]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	4607      	mov	r7, r0
 8008b60:	f300 8096 	bgt.w	8008c90 <_dtoa_r+0x9a8>
 8008b64:	9b07      	ldr	r3, [sp, #28]
 8008b66:	2b02      	cmp	r3, #2
 8008b68:	dc59      	bgt.n	8008c1e <_dtoa_r+0x936>
 8008b6a:	e091      	b.n	8008c90 <_dtoa_r+0x9a8>
 8008b6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008b72:	e758      	b.n	8008a26 <_dtoa_r+0x73e>
 8008b74:	9b04      	ldr	r3, [sp, #16]
 8008b76:	1e5e      	subs	r6, r3, #1
 8008b78:	9b08      	ldr	r3, [sp, #32]
 8008b7a:	42b3      	cmp	r3, r6
 8008b7c:	bfbf      	itttt	lt
 8008b7e:	9b08      	ldrlt	r3, [sp, #32]
 8008b80:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008b82:	9608      	strlt	r6, [sp, #32]
 8008b84:	1af3      	sublt	r3, r6, r3
 8008b86:	bfb4      	ite	lt
 8008b88:	18d2      	addlt	r2, r2, r3
 8008b8a:	1b9e      	subge	r6, r3, r6
 8008b8c:	9b04      	ldr	r3, [sp, #16]
 8008b8e:	bfbc      	itt	lt
 8008b90:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008b92:	2600      	movlt	r6, #0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	bfb7      	itett	lt
 8008b98:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008b9c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008ba0:	1a9d      	sublt	r5, r3, r2
 8008ba2:	2300      	movlt	r3, #0
 8008ba4:	e741      	b.n	8008a2a <_dtoa_r+0x742>
 8008ba6:	9e08      	ldr	r6, [sp, #32]
 8008ba8:	9d05      	ldr	r5, [sp, #20]
 8008baa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008bac:	e748      	b.n	8008a40 <_dtoa_r+0x758>
 8008bae:	9a08      	ldr	r2, [sp, #32]
 8008bb0:	e770      	b.n	8008a94 <_dtoa_r+0x7ac>
 8008bb2:	9b07      	ldr	r3, [sp, #28]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	dc19      	bgt.n	8008bec <_dtoa_r+0x904>
 8008bb8:	9b02      	ldr	r3, [sp, #8]
 8008bba:	b9bb      	cbnz	r3, 8008bec <_dtoa_r+0x904>
 8008bbc:	9b03      	ldr	r3, [sp, #12]
 8008bbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bc2:	b99b      	cbnz	r3, 8008bec <_dtoa_r+0x904>
 8008bc4:	9b03      	ldr	r3, [sp, #12]
 8008bc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008bca:	0d1b      	lsrs	r3, r3, #20
 8008bcc:	051b      	lsls	r3, r3, #20
 8008bce:	b183      	cbz	r3, 8008bf2 <_dtoa_r+0x90a>
 8008bd0:	9b05      	ldr	r3, [sp, #20]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	9305      	str	r3, [sp, #20]
 8008bd6:	9b06      	ldr	r3, [sp, #24]
 8008bd8:	3301      	adds	r3, #1
 8008bda:	9306      	str	r3, [sp, #24]
 8008bdc:	f04f 0801 	mov.w	r8, #1
 8008be0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	f47f af6f 	bne.w	8008ac6 <_dtoa_r+0x7de>
 8008be8:	2001      	movs	r0, #1
 8008bea:	e774      	b.n	8008ad6 <_dtoa_r+0x7ee>
 8008bec:	f04f 0800 	mov.w	r8, #0
 8008bf0:	e7f6      	b.n	8008be0 <_dtoa_r+0x8f8>
 8008bf2:	4698      	mov	r8, r3
 8008bf4:	e7f4      	b.n	8008be0 <_dtoa_r+0x8f8>
 8008bf6:	d082      	beq.n	8008afe <_dtoa_r+0x816>
 8008bf8:	9a05      	ldr	r2, [sp, #20]
 8008bfa:	331c      	adds	r3, #28
 8008bfc:	441a      	add	r2, r3
 8008bfe:	9205      	str	r2, [sp, #20]
 8008c00:	9a06      	ldr	r2, [sp, #24]
 8008c02:	441a      	add	r2, r3
 8008c04:	441d      	add	r5, r3
 8008c06:	9206      	str	r2, [sp, #24]
 8008c08:	e779      	b.n	8008afe <_dtoa_r+0x816>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	e7f4      	b.n	8008bf8 <_dtoa_r+0x910>
 8008c0e:	9b04      	ldr	r3, [sp, #16]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	dc37      	bgt.n	8008c84 <_dtoa_r+0x99c>
 8008c14:	9b07      	ldr	r3, [sp, #28]
 8008c16:	2b02      	cmp	r3, #2
 8008c18:	dd34      	ble.n	8008c84 <_dtoa_r+0x99c>
 8008c1a:	9b04      	ldr	r3, [sp, #16]
 8008c1c:	9301      	str	r3, [sp, #4]
 8008c1e:	9b01      	ldr	r3, [sp, #4]
 8008c20:	b963      	cbnz	r3, 8008c3c <_dtoa_r+0x954>
 8008c22:	4631      	mov	r1, r6
 8008c24:	2205      	movs	r2, #5
 8008c26:	4620      	mov	r0, r4
 8008c28:	f000 fab2 	bl	8009190 <__multadd>
 8008c2c:	4601      	mov	r1, r0
 8008c2e:	4606      	mov	r6, r0
 8008c30:	4650      	mov	r0, sl
 8008c32:	f000 fcc7 	bl	80095c4 <__mcmp>
 8008c36:	2800      	cmp	r0, #0
 8008c38:	f73f adbb 	bgt.w	80087b2 <_dtoa_r+0x4ca>
 8008c3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c3e:	9d00      	ldr	r5, [sp, #0]
 8008c40:	ea6f 0b03 	mvn.w	fp, r3
 8008c44:	f04f 0800 	mov.w	r8, #0
 8008c48:	4631      	mov	r1, r6
 8008c4a:	4620      	mov	r0, r4
 8008c4c:	f000 fa7e 	bl	800914c <_Bfree>
 8008c50:	2f00      	cmp	r7, #0
 8008c52:	f43f aeab 	beq.w	80089ac <_dtoa_r+0x6c4>
 8008c56:	f1b8 0f00 	cmp.w	r8, #0
 8008c5a:	d005      	beq.n	8008c68 <_dtoa_r+0x980>
 8008c5c:	45b8      	cmp	r8, r7
 8008c5e:	d003      	beq.n	8008c68 <_dtoa_r+0x980>
 8008c60:	4641      	mov	r1, r8
 8008c62:	4620      	mov	r0, r4
 8008c64:	f000 fa72 	bl	800914c <_Bfree>
 8008c68:	4639      	mov	r1, r7
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	f000 fa6e 	bl	800914c <_Bfree>
 8008c70:	e69c      	b.n	80089ac <_dtoa_r+0x6c4>
 8008c72:	2600      	movs	r6, #0
 8008c74:	4637      	mov	r7, r6
 8008c76:	e7e1      	b.n	8008c3c <_dtoa_r+0x954>
 8008c78:	46bb      	mov	fp, r7
 8008c7a:	4637      	mov	r7, r6
 8008c7c:	e599      	b.n	80087b2 <_dtoa_r+0x4ca>
 8008c7e:	bf00      	nop
 8008c80:	40240000 	.word	0x40240000
 8008c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	f000 80c8 	beq.w	8008e1c <_dtoa_r+0xb34>
 8008c8c:	9b04      	ldr	r3, [sp, #16]
 8008c8e:	9301      	str	r3, [sp, #4]
 8008c90:	2d00      	cmp	r5, #0
 8008c92:	dd05      	ble.n	8008ca0 <_dtoa_r+0x9b8>
 8008c94:	4639      	mov	r1, r7
 8008c96:	462a      	mov	r2, r5
 8008c98:	4620      	mov	r0, r4
 8008c9a:	f000 fc27 	bl	80094ec <__lshift>
 8008c9e:	4607      	mov	r7, r0
 8008ca0:	f1b8 0f00 	cmp.w	r8, #0
 8008ca4:	d05b      	beq.n	8008d5e <_dtoa_r+0xa76>
 8008ca6:	6879      	ldr	r1, [r7, #4]
 8008ca8:	4620      	mov	r0, r4
 8008caa:	f000 fa0f 	bl	80090cc <_Balloc>
 8008cae:	4605      	mov	r5, r0
 8008cb0:	b928      	cbnz	r0, 8008cbe <_dtoa_r+0x9d6>
 8008cb2:	4b83      	ldr	r3, [pc, #524]	; (8008ec0 <_dtoa_r+0xbd8>)
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008cba:	f7ff bb2e 	b.w	800831a <_dtoa_r+0x32>
 8008cbe:	693a      	ldr	r2, [r7, #16]
 8008cc0:	3202      	adds	r2, #2
 8008cc2:	0092      	lsls	r2, r2, #2
 8008cc4:	f107 010c 	add.w	r1, r7, #12
 8008cc8:	300c      	adds	r0, #12
 8008cca:	f7ff fa74 	bl	80081b6 <memcpy>
 8008cce:	2201      	movs	r2, #1
 8008cd0:	4629      	mov	r1, r5
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	f000 fc0a 	bl	80094ec <__lshift>
 8008cd8:	9b00      	ldr	r3, [sp, #0]
 8008cda:	3301      	adds	r3, #1
 8008cdc:	9304      	str	r3, [sp, #16]
 8008cde:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	9308      	str	r3, [sp, #32]
 8008ce6:	9b02      	ldr	r3, [sp, #8]
 8008ce8:	f003 0301 	and.w	r3, r3, #1
 8008cec:	46b8      	mov	r8, r7
 8008cee:	9306      	str	r3, [sp, #24]
 8008cf0:	4607      	mov	r7, r0
 8008cf2:	9b04      	ldr	r3, [sp, #16]
 8008cf4:	4631      	mov	r1, r6
 8008cf6:	3b01      	subs	r3, #1
 8008cf8:	4650      	mov	r0, sl
 8008cfa:	9301      	str	r3, [sp, #4]
 8008cfc:	f7ff fa69 	bl	80081d2 <quorem>
 8008d00:	4641      	mov	r1, r8
 8008d02:	9002      	str	r0, [sp, #8]
 8008d04:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008d08:	4650      	mov	r0, sl
 8008d0a:	f000 fc5b 	bl	80095c4 <__mcmp>
 8008d0e:	463a      	mov	r2, r7
 8008d10:	9005      	str	r0, [sp, #20]
 8008d12:	4631      	mov	r1, r6
 8008d14:	4620      	mov	r0, r4
 8008d16:	f000 fc71 	bl	80095fc <__mdiff>
 8008d1a:	68c2      	ldr	r2, [r0, #12]
 8008d1c:	4605      	mov	r5, r0
 8008d1e:	bb02      	cbnz	r2, 8008d62 <_dtoa_r+0xa7a>
 8008d20:	4601      	mov	r1, r0
 8008d22:	4650      	mov	r0, sl
 8008d24:	f000 fc4e 	bl	80095c4 <__mcmp>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	4629      	mov	r1, r5
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	9209      	str	r2, [sp, #36]	; 0x24
 8008d30:	f000 fa0c 	bl	800914c <_Bfree>
 8008d34:	9b07      	ldr	r3, [sp, #28]
 8008d36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d38:	9d04      	ldr	r5, [sp, #16]
 8008d3a:	ea43 0102 	orr.w	r1, r3, r2
 8008d3e:	9b06      	ldr	r3, [sp, #24]
 8008d40:	4319      	orrs	r1, r3
 8008d42:	d110      	bne.n	8008d66 <_dtoa_r+0xa7e>
 8008d44:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008d48:	d029      	beq.n	8008d9e <_dtoa_r+0xab6>
 8008d4a:	9b05      	ldr	r3, [sp, #20]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	dd02      	ble.n	8008d56 <_dtoa_r+0xa6e>
 8008d50:	9b02      	ldr	r3, [sp, #8]
 8008d52:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008d56:	9b01      	ldr	r3, [sp, #4]
 8008d58:	f883 9000 	strb.w	r9, [r3]
 8008d5c:	e774      	b.n	8008c48 <_dtoa_r+0x960>
 8008d5e:	4638      	mov	r0, r7
 8008d60:	e7ba      	b.n	8008cd8 <_dtoa_r+0x9f0>
 8008d62:	2201      	movs	r2, #1
 8008d64:	e7e1      	b.n	8008d2a <_dtoa_r+0xa42>
 8008d66:	9b05      	ldr	r3, [sp, #20]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	db04      	blt.n	8008d76 <_dtoa_r+0xa8e>
 8008d6c:	9907      	ldr	r1, [sp, #28]
 8008d6e:	430b      	orrs	r3, r1
 8008d70:	9906      	ldr	r1, [sp, #24]
 8008d72:	430b      	orrs	r3, r1
 8008d74:	d120      	bne.n	8008db8 <_dtoa_r+0xad0>
 8008d76:	2a00      	cmp	r2, #0
 8008d78:	dded      	ble.n	8008d56 <_dtoa_r+0xa6e>
 8008d7a:	4651      	mov	r1, sl
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	4620      	mov	r0, r4
 8008d80:	f000 fbb4 	bl	80094ec <__lshift>
 8008d84:	4631      	mov	r1, r6
 8008d86:	4682      	mov	sl, r0
 8008d88:	f000 fc1c 	bl	80095c4 <__mcmp>
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	dc03      	bgt.n	8008d98 <_dtoa_r+0xab0>
 8008d90:	d1e1      	bne.n	8008d56 <_dtoa_r+0xa6e>
 8008d92:	f019 0f01 	tst.w	r9, #1
 8008d96:	d0de      	beq.n	8008d56 <_dtoa_r+0xa6e>
 8008d98:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008d9c:	d1d8      	bne.n	8008d50 <_dtoa_r+0xa68>
 8008d9e:	9a01      	ldr	r2, [sp, #4]
 8008da0:	2339      	movs	r3, #57	; 0x39
 8008da2:	7013      	strb	r3, [r2, #0]
 8008da4:	462b      	mov	r3, r5
 8008da6:	461d      	mov	r5, r3
 8008da8:	3b01      	subs	r3, #1
 8008daa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008dae:	2a39      	cmp	r2, #57	; 0x39
 8008db0:	d06c      	beq.n	8008e8c <_dtoa_r+0xba4>
 8008db2:	3201      	adds	r2, #1
 8008db4:	701a      	strb	r2, [r3, #0]
 8008db6:	e747      	b.n	8008c48 <_dtoa_r+0x960>
 8008db8:	2a00      	cmp	r2, #0
 8008dba:	dd07      	ble.n	8008dcc <_dtoa_r+0xae4>
 8008dbc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008dc0:	d0ed      	beq.n	8008d9e <_dtoa_r+0xab6>
 8008dc2:	9a01      	ldr	r2, [sp, #4]
 8008dc4:	f109 0301 	add.w	r3, r9, #1
 8008dc8:	7013      	strb	r3, [r2, #0]
 8008dca:	e73d      	b.n	8008c48 <_dtoa_r+0x960>
 8008dcc:	9b04      	ldr	r3, [sp, #16]
 8008dce:	9a08      	ldr	r2, [sp, #32]
 8008dd0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d043      	beq.n	8008e60 <_dtoa_r+0xb78>
 8008dd8:	4651      	mov	r1, sl
 8008dda:	2300      	movs	r3, #0
 8008ddc:	220a      	movs	r2, #10
 8008dde:	4620      	mov	r0, r4
 8008de0:	f000 f9d6 	bl	8009190 <__multadd>
 8008de4:	45b8      	cmp	r8, r7
 8008de6:	4682      	mov	sl, r0
 8008de8:	f04f 0300 	mov.w	r3, #0
 8008dec:	f04f 020a 	mov.w	r2, #10
 8008df0:	4641      	mov	r1, r8
 8008df2:	4620      	mov	r0, r4
 8008df4:	d107      	bne.n	8008e06 <_dtoa_r+0xb1e>
 8008df6:	f000 f9cb 	bl	8009190 <__multadd>
 8008dfa:	4680      	mov	r8, r0
 8008dfc:	4607      	mov	r7, r0
 8008dfe:	9b04      	ldr	r3, [sp, #16]
 8008e00:	3301      	adds	r3, #1
 8008e02:	9304      	str	r3, [sp, #16]
 8008e04:	e775      	b.n	8008cf2 <_dtoa_r+0xa0a>
 8008e06:	f000 f9c3 	bl	8009190 <__multadd>
 8008e0a:	4639      	mov	r1, r7
 8008e0c:	4680      	mov	r8, r0
 8008e0e:	2300      	movs	r3, #0
 8008e10:	220a      	movs	r2, #10
 8008e12:	4620      	mov	r0, r4
 8008e14:	f000 f9bc 	bl	8009190 <__multadd>
 8008e18:	4607      	mov	r7, r0
 8008e1a:	e7f0      	b.n	8008dfe <_dtoa_r+0xb16>
 8008e1c:	9b04      	ldr	r3, [sp, #16]
 8008e1e:	9301      	str	r3, [sp, #4]
 8008e20:	9d00      	ldr	r5, [sp, #0]
 8008e22:	4631      	mov	r1, r6
 8008e24:	4650      	mov	r0, sl
 8008e26:	f7ff f9d4 	bl	80081d2 <quorem>
 8008e2a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008e2e:	9b00      	ldr	r3, [sp, #0]
 8008e30:	f805 9b01 	strb.w	r9, [r5], #1
 8008e34:	1aea      	subs	r2, r5, r3
 8008e36:	9b01      	ldr	r3, [sp, #4]
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	dd07      	ble.n	8008e4c <_dtoa_r+0xb64>
 8008e3c:	4651      	mov	r1, sl
 8008e3e:	2300      	movs	r3, #0
 8008e40:	220a      	movs	r2, #10
 8008e42:	4620      	mov	r0, r4
 8008e44:	f000 f9a4 	bl	8009190 <__multadd>
 8008e48:	4682      	mov	sl, r0
 8008e4a:	e7ea      	b.n	8008e22 <_dtoa_r+0xb3a>
 8008e4c:	9b01      	ldr	r3, [sp, #4]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	bfc8      	it	gt
 8008e52:	461d      	movgt	r5, r3
 8008e54:	9b00      	ldr	r3, [sp, #0]
 8008e56:	bfd8      	it	le
 8008e58:	2501      	movle	r5, #1
 8008e5a:	441d      	add	r5, r3
 8008e5c:	f04f 0800 	mov.w	r8, #0
 8008e60:	4651      	mov	r1, sl
 8008e62:	2201      	movs	r2, #1
 8008e64:	4620      	mov	r0, r4
 8008e66:	f000 fb41 	bl	80094ec <__lshift>
 8008e6a:	4631      	mov	r1, r6
 8008e6c:	4682      	mov	sl, r0
 8008e6e:	f000 fba9 	bl	80095c4 <__mcmp>
 8008e72:	2800      	cmp	r0, #0
 8008e74:	dc96      	bgt.n	8008da4 <_dtoa_r+0xabc>
 8008e76:	d102      	bne.n	8008e7e <_dtoa_r+0xb96>
 8008e78:	f019 0f01 	tst.w	r9, #1
 8008e7c:	d192      	bne.n	8008da4 <_dtoa_r+0xabc>
 8008e7e:	462b      	mov	r3, r5
 8008e80:	461d      	mov	r5, r3
 8008e82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e86:	2a30      	cmp	r2, #48	; 0x30
 8008e88:	d0fa      	beq.n	8008e80 <_dtoa_r+0xb98>
 8008e8a:	e6dd      	b.n	8008c48 <_dtoa_r+0x960>
 8008e8c:	9a00      	ldr	r2, [sp, #0]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d189      	bne.n	8008da6 <_dtoa_r+0xabe>
 8008e92:	f10b 0b01 	add.w	fp, fp, #1
 8008e96:	2331      	movs	r3, #49	; 0x31
 8008e98:	e796      	b.n	8008dc8 <_dtoa_r+0xae0>
 8008e9a:	4b0a      	ldr	r3, [pc, #40]	; (8008ec4 <_dtoa_r+0xbdc>)
 8008e9c:	f7ff ba99 	b.w	80083d2 <_dtoa_r+0xea>
 8008ea0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	f47f aa6d 	bne.w	8008382 <_dtoa_r+0x9a>
 8008ea8:	4b07      	ldr	r3, [pc, #28]	; (8008ec8 <_dtoa_r+0xbe0>)
 8008eaa:	f7ff ba92 	b.w	80083d2 <_dtoa_r+0xea>
 8008eae:	9b01      	ldr	r3, [sp, #4]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	dcb5      	bgt.n	8008e20 <_dtoa_r+0xb38>
 8008eb4:	9b07      	ldr	r3, [sp, #28]
 8008eb6:	2b02      	cmp	r3, #2
 8008eb8:	f73f aeb1 	bgt.w	8008c1e <_dtoa_r+0x936>
 8008ebc:	e7b0      	b.n	8008e20 <_dtoa_r+0xb38>
 8008ebe:	bf00      	nop
 8008ec0:	0800a180 	.word	0x0800a180
 8008ec4:	0800a0e0 	.word	0x0800a0e0
 8008ec8:	0800a104 	.word	0x0800a104

08008ecc <_free_r>:
 8008ecc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ece:	2900      	cmp	r1, #0
 8008ed0:	d044      	beq.n	8008f5c <_free_r+0x90>
 8008ed2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ed6:	9001      	str	r0, [sp, #4]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f1a1 0404 	sub.w	r4, r1, #4
 8008ede:	bfb8      	it	lt
 8008ee0:	18e4      	addlt	r4, r4, r3
 8008ee2:	f000 f8e7 	bl	80090b4 <__malloc_lock>
 8008ee6:	4a1e      	ldr	r2, [pc, #120]	; (8008f60 <_free_r+0x94>)
 8008ee8:	9801      	ldr	r0, [sp, #4]
 8008eea:	6813      	ldr	r3, [r2, #0]
 8008eec:	b933      	cbnz	r3, 8008efc <_free_r+0x30>
 8008eee:	6063      	str	r3, [r4, #4]
 8008ef0:	6014      	str	r4, [r2, #0]
 8008ef2:	b003      	add	sp, #12
 8008ef4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ef8:	f000 b8e2 	b.w	80090c0 <__malloc_unlock>
 8008efc:	42a3      	cmp	r3, r4
 8008efe:	d908      	bls.n	8008f12 <_free_r+0x46>
 8008f00:	6825      	ldr	r5, [r4, #0]
 8008f02:	1961      	adds	r1, r4, r5
 8008f04:	428b      	cmp	r3, r1
 8008f06:	bf01      	itttt	eq
 8008f08:	6819      	ldreq	r1, [r3, #0]
 8008f0a:	685b      	ldreq	r3, [r3, #4]
 8008f0c:	1949      	addeq	r1, r1, r5
 8008f0e:	6021      	streq	r1, [r4, #0]
 8008f10:	e7ed      	b.n	8008eee <_free_r+0x22>
 8008f12:	461a      	mov	r2, r3
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	b10b      	cbz	r3, 8008f1c <_free_r+0x50>
 8008f18:	42a3      	cmp	r3, r4
 8008f1a:	d9fa      	bls.n	8008f12 <_free_r+0x46>
 8008f1c:	6811      	ldr	r1, [r2, #0]
 8008f1e:	1855      	adds	r5, r2, r1
 8008f20:	42a5      	cmp	r5, r4
 8008f22:	d10b      	bne.n	8008f3c <_free_r+0x70>
 8008f24:	6824      	ldr	r4, [r4, #0]
 8008f26:	4421      	add	r1, r4
 8008f28:	1854      	adds	r4, r2, r1
 8008f2a:	42a3      	cmp	r3, r4
 8008f2c:	6011      	str	r1, [r2, #0]
 8008f2e:	d1e0      	bne.n	8008ef2 <_free_r+0x26>
 8008f30:	681c      	ldr	r4, [r3, #0]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	6053      	str	r3, [r2, #4]
 8008f36:	440c      	add	r4, r1
 8008f38:	6014      	str	r4, [r2, #0]
 8008f3a:	e7da      	b.n	8008ef2 <_free_r+0x26>
 8008f3c:	d902      	bls.n	8008f44 <_free_r+0x78>
 8008f3e:	230c      	movs	r3, #12
 8008f40:	6003      	str	r3, [r0, #0]
 8008f42:	e7d6      	b.n	8008ef2 <_free_r+0x26>
 8008f44:	6825      	ldr	r5, [r4, #0]
 8008f46:	1961      	adds	r1, r4, r5
 8008f48:	428b      	cmp	r3, r1
 8008f4a:	bf04      	itt	eq
 8008f4c:	6819      	ldreq	r1, [r3, #0]
 8008f4e:	685b      	ldreq	r3, [r3, #4]
 8008f50:	6063      	str	r3, [r4, #4]
 8008f52:	bf04      	itt	eq
 8008f54:	1949      	addeq	r1, r1, r5
 8008f56:	6021      	streq	r1, [r4, #0]
 8008f58:	6054      	str	r4, [r2, #4]
 8008f5a:	e7ca      	b.n	8008ef2 <_free_r+0x26>
 8008f5c:	b003      	add	sp, #12
 8008f5e:	bd30      	pop	{r4, r5, pc}
 8008f60:	20001e04 	.word	0x20001e04

08008f64 <malloc>:
 8008f64:	4b02      	ldr	r3, [pc, #8]	; (8008f70 <malloc+0xc>)
 8008f66:	4601      	mov	r1, r0
 8008f68:	6818      	ldr	r0, [r3, #0]
 8008f6a:	f000 b823 	b.w	8008fb4 <_malloc_r>
 8008f6e:	bf00      	nop
 8008f70:	20000068 	.word	0x20000068

08008f74 <sbrk_aligned>:
 8008f74:	b570      	push	{r4, r5, r6, lr}
 8008f76:	4e0e      	ldr	r6, [pc, #56]	; (8008fb0 <sbrk_aligned+0x3c>)
 8008f78:	460c      	mov	r4, r1
 8008f7a:	6831      	ldr	r1, [r6, #0]
 8008f7c:	4605      	mov	r5, r0
 8008f7e:	b911      	cbnz	r1, 8008f86 <sbrk_aligned+0x12>
 8008f80:	f000 fea8 	bl	8009cd4 <_sbrk_r>
 8008f84:	6030      	str	r0, [r6, #0]
 8008f86:	4621      	mov	r1, r4
 8008f88:	4628      	mov	r0, r5
 8008f8a:	f000 fea3 	bl	8009cd4 <_sbrk_r>
 8008f8e:	1c43      	adds	r3, r0, #1
 8008f90:	d00a      	beq.n	8008fa8 <sbrk_aligned+0x34>
 8008f92:	1cc4      	adds	r4, r0, #3
 8008f94:	f024 0403 	bic.w	r4, r4, #3
 8008f98:	42a0      	cmp	r0, r4
 8008f9a:	d007      	beq.n	8008fac <sbrk_aligned+0x38>
 8008f9c:	1a21      	subs	r1, r4, r0
 8008f9e:	4628      	mov	r0, r5
 8008fa0:	f000 fe98 	bl	8009cd4 <_sbrk_r>
 8008fa4:	3001      	adds	r0, #1
 8008fa6:	d101      	bne.n	8008fac <sbrk_aligned+0x38>
 8008fa8:	f04f 34ff 	mov.w	r4, #4294967295
 8008fac:	4620      	mov	r0, r4
 8008fae:	bd70      	pop	{r4, r5, r6, pc}
 8008fb0:	20001e08 	.word	0x20001e08

08008fb4 <_malloc_r>:
 8008fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fb8:	1ccd      	adds	r5, r1, #3
 8008fba:	f025 0503 	bic.w	r5, r5, #3
 8008fbe:	3508      	adds	r5, #8
 8008fc0:	2d0c      	cmp	r5, #12
 8008fc2:	bf38      	it	cc
 8008fc4:	250c      	movcc	r5, #12
 8008fc6:	2d00      	cmp	r5, #0
 8008fc8:	4607      	mov	r7, r0
 8008fca:	db01      	blt.n	8008fd0 <_malloc_r+0x1c>
 8008fcc:	42a9      	cmp	r1, r5
 8008fce:	d905      	bls.n	8008fdc <_malloc_r+0x28>
 8008fd0:	230c      	movs	r3, #12
 8008fd2:	603b      	str	r3, [r7, #0]
 8008fd4:	2600      	movs	r6, #0
 8008fd6:	4630      	mov	r0, r6
 8008fd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fdc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80090b0 <_malloc_r+0xfc>
 8008fe0:	f000 f868 	bl	80090b4 <__malloc_lock>
 8008fe4:	f8d8 3000 	ldr.w	r3, [r8]
 8008fe8:	461c      	mov	r4, r3
 8008fea:	bb5c      	cbnz	r4, 8009044 <_malloc_r+0x90>
 8008fec:	4629      	mov	r1, r5
 8008fee:	4638      	mov	r0, r7
 8008ff0:	f7ff ffc0 	bl	8008f74 <sbrk_aligned>
 8008ff4:	1c43      	adds	r3, r0, #1
 8008ff6:	4604      	mov	r4, r0
 8008ff8:	d155      	bne.n	80090a6 <_malloc_r+0xf2>
 8008ffa:	f8d8 4000 	ldr.w	r4, [r8]
 8008ffe:	4626      	mov	r6, r4
 8009000:	2e00      	cmp	r6, #0
 8009002:	d145      	bne.n	8009090 <_malloc_r+0xdc>
 8009004:	2c00      	cmp	r4, #0
 8009006:	d048      	beq.n	800909a <_malloc_r+0xe6>
 8009008:	6823      	ldr	r3, [r4, #0]
 800900a:	4631      	mov	r1, r6
 800900c:	4638      	mov	r0, r7
 800900e:	eb04 0903 	add.w	r9, r4, r3
 8009012:	f000 fe5f 	bl	8009cd4 <_sbrk_r>
 8009016:	4581      	cmp	r9, r0
 8009018:	d13f      	bne.n	800909a <_malloc_r+0xe6>
 800901a:	6821      	ldr	r1, [r4, #0]
 800901c:	1a6d      	subs	r5, r5, r1
 800901e:	4629      	mov	r1, r5
 8009020:	4638      	mov	r0, r7
 8009022:	f7ff ffa7 	bl	8008f74 <sbrk_aligned>
 8009026:	3001      	adds	r0, #1
 8009028:	d037      	beq.n	800909a <_malloc_r+0xe6>
 800902a:	6823      	ldr	r3, [r4, #0]
 800902c:	442b      	add	r3, r5
 800902e:	6023      	str	r3, [r4, #0]
 8009030:	f8d8 3000 	ldr.w	r3, [r8]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d038      	beq.n	80090aa <_malloc_r+0xf6>
 8009038:	685a      	ldr	r2, [r3, #4]
 800903a:	42a2      	cmp	r2, r4
 800903c:	d12b      	bne.n	8009096 <_malloc_r+0xe2>
 800903e:	2200      	movs	r2, #0
 8009040:	605a      	str	r2, [r3, #4]
 8009042:	e00f      	b.n	8009064 <_malloc_r+0xb0>
 8009044:	6822      	ldr	r2, [r4, #0]
 8009046:	1b52      	subs	r2, r2, r5
 8009048:	d41f      	bmi.n	800908a <_malloc_r+0xd6>
 800904a:	2a0b      	cmp	r2, #11
 800904c:	d917      	bls.n	800907e <_malloc_r+0xca>
 800904e:	1961      	adds	r1, r4, r5
 8009050:	42a3      	cmp	r3, r4
 8009052:	6025      	str	r5, [r4, #0]
 8009054:	bf18      	it	ne
 8009056:	6059      	strne	r1, [r3, #4]
 8009058:	6863      	ldr	r3, [r4, #4]
 800905a:	bf08      	it	eq
 800905c:	f8c8 1000 	streq.w	r1, [r8]
 8009060:	5162      	str	r2, [r4, r5]
 8009062:	604b      	str	r3, [r1, #4]
 8009064:	4638      	mov	r0, r7
 8009066:	f104 060b 	add.w	r6, r4, #11
 800906a:	f000 f829 	bl	80090c0 <__malloc_unlock>
 800906e:	f026 0607 	bic.w	r6, r6, #7
 8009072:	1d23      	adds	r3, r4, #4
 8009074:	1af2      	subs	r2, r6, r3
 8009076:	d0ae      	beq.n	8008fd6 <_malloc_r+0x22>
 8009078:	1b9b      	subs	r3, r3, r6
 800907a:	50a3      	str	r3, [r4, r2]
 800907c:	e7ab      	b.n	8008fd6 <_malloc_r+0x22>
 800907e:	42a3      	cmp	r3, r4
 8009080:	6862      	ldr	r2, [r4, #4]
 8009082:	d1dd      	bne.n	8009040 <_malloc_r+0x8c>
 8009084:	f8c8 2000 	str.w	r2, [r8]
 8009088:	e7ec      	b.n	8009064 <_malloc_r+0xb0>
 800908a:	4623      	mov	r3, r4
 800908c:	6864      	ldr	r4, [r4, #4]
 800908e:	e7ac      	b.n	8008fea <_malloc_r+0x36>
 8009090:	4634      	mov	r4, r6
 8009092:	6876      	ldr	r6, [r6, #4]
 8009094:	e7b4      	b.n	8009000 <_malloc_r+0x4c>
 8009096:	4613      	mov	r3, r2
 8009098:	e7cc      	b.n	8009034 <_malloc_r+0x80>
 800909a:	230c      	movs	r3, #12
 800909c:	603b      	str	r3, [r7, #0]
 800909e:	4638      	mov	r0, r7
 80090a0:	f000 f80e 	bl	80090c0 <__malloc_unlock>
 80090a4:	e797      	b.n	8008fd6 <_malloc_r+0x22>
 80090a6:	6025      	str	r5, [r4, #0]
 80090a8:	e7dc      	b.n	8009064 <_malloc_r+0xb0>
 80090aa:	605b      	str	r3, [r3, #4]
 80090ac:	deff      	udf	#255	; 0xff
 80090ae:	bf00      	nop
 80090b0:	20001e04 	.word	0x20001e04

080090b4 <__malloc_lock>:
 80090b4:	4801      	ldr	r0, [pc, #4]	; (80090bc <__malloc_lock+0x8>)
 80090b6:	f7ff b87c 	b.w	80081b2 <__retarget_lock_acquire_recursive>
 80090ba:	bf00      	nop
 80090bc:	20001e00 	.word	0x20001e00

080090c0 <__malloc_unlock>:
 80090c0:	4801      	ldr	r0, [pc, #4]	; (80090c8 <__malloc_unlock+0x8>)
 80090c2:	f7ff b877 	b.w	80081b4 <__retarget_lock_release_recursive>
 80090c6:	bf00      	nop
 80090c8:	20001e00 	.word	0x20001e00

080090cc <_Balloc>:
 80090cc:	b570      	push	{r4, r5, r6, lr}
 80090ce:	69c6      	ldr	r6, [r0, #28]
 80090d0:	4604      	mov	r4, r0
 80090d2:	460d      	mov	r5, r1
 80090d4:	b976      	cbnz	r6, 80090f4 <_Balloc+0x28>
 80090d6:	2010      	movs	r0, #16
 80090d8:	f7ff ff44 	bl	8008f64 <malloc>
 80090dc:	4602      	mov	r2, r0
 80090de:	61e0      	str	r0, [r4, #28]
 80090e0:	b920      	cbnz	r0, 80090ec <_Balloc+0x20>
 80090e2:	4b18      	ldr	r3, [pc, #96]	; (8009144 <_Balloc+0x78>)
 80090e4:	4818      	ldr	r0, [pc, #96]	; (8009148 <_Balloc+0x7c>)
 80090e6:	216b      	movs	r1, #107	; 0x6b
 80090e8:	f000 fe04 	bl	8009cf4 <__assert_func>
 80090ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090f0:	6006      	str	r6, [r0, #0]
 80090f2:	60c6      	str	r6, [r0, #12]
 80090f4:	69e6      	ldr	r6, [r4, #28]
 80090f6:	68f3      	ldr	r3, [r6, #12]
 80090f8:	b183      	cbz	r3, 800911c <_Balloc+0x50>
 80090fa:	69e3      	ldr	r3, [r4, #28]
 80090fc:	68db      	ldr	r3, [r3, #12]
 80090fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009102:	b9b8      	cbnz	r0, 8009134 <_Balloc+0x68>
 8009104:	2101      	movs	r1, #1
 8009106:	fa01 f605 	lsl.w	r6, r1, r5
 800910a:	1d72      	adds	r2, r6, #5
 800910c:	0092      	lsls	r2, r2, #2
 800910e:	4620      	mov	r0, r4
 8009110:	f000 fe0e 	bl	8009d30 <_calloc_r>
 8009114:	b160      	cbz	r0, 8009130 <_Balloc+0x64>
 8009116:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800911a:	e00e      	b.n	800913a <_Balloc+0x6e>
 800911c:	2221      	movs	r2, #33	; 0x21
 800911e:	2104      	movs	r1, #4
 8009120:	4620      	mov	r0, r4
 8009122:	f000 fe05 	bl	8009d30 <_calloc_r>
 8009126:	69e3      	ldr	r3, [r4, #28]
 8009128:	60f0      	str	r0, [r6, #12]
 800912a:	68db      	ldr	r3, [r3, #12]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d1e4      	bne.n	80090fa <_Balloc+0x2e>
 8009130:	2000      	movs	r0, #0
 8009132:	bd70      	pop	{r4, r5, r6, pc}
 8009134:	6802      	ldr	r2, [r0, #0]
 8009136:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800913a:	2300      	movs	r3, #0
 800913c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009140:	e7f7      	b.n	8009132 <_Balloc+0x66>
 8009142:	bf00      	nop
 8009144:	0800a111 	.word	0x0800a111
 8009148:	0800a191 	.word	0x0800a191

0800914c <_Bfree>:
 800914c:	b570      	push	{r4, r5, r6, lr}
 800914e:	69c6      	ldr	r6, [r0, #28]
 8009150:	4605      	mov	r5, r0
 8009152:	460c      	mov	r4, r1
 8009154:	b976      	cbnz	r6, 8009174 <_Bfree+0x28>
 8009156:	2010      	movs	r0, #16
 8009158:	f7ff ff04 	bl	8008f64 <malloc>
 800915c:	4602      	mov	r2, r0
 800915e:	61e8      	str	r0, [r5, #28]
 8009160:	b920      	cbnz	r0, 800916c <_Bfree+0x20>
 8009162:	4b09      	ldr	r3, [pc, #36]	; (8009188 <_Bfree+0x3c>)
 8009164:	4809      	ldr	r0, [pc, #36]	; (800918c <_Bfree+0x40>)
 8009166:	218f      	movs	r1, #143	; 0x8f
 8009168:	f000 fdc4 	bl	8009cf4 <__assert_func>
 800916c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009170:	6006      	str	r6, [r0, #0]
 8009172:	60c6      	str	r6, [r0, #12]
 8009174:	b13c      	cbz	r4, 8009186 <_Bfree+0x3a>
 8009176:	69eb      	ldr	r3, [r5, #28]
 8009178:	6862      	ldr	r2, [r4, #4]
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009180:	6021      	str	r1, [r4, #0]
 8009182:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009186:	bd70      	pop	{r4, r5, r6, pc}
 8009188:	0800a111 	.word	0x0800a111
 800918c:	0800a191 	.word	0x0800a191

08009190 <__multadd>:
 8009190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009194:	690d      	ldr	r5, [r1, #16]
 8009196:	4607      	mov	r7, r0
 8009198:	460c      	mov	r4, r1
 800919a:	461e      	mov	r6, r3
 800919c:	f101 0c14 	add.w	ip, r1, #20
 80091a0:	2000      	movs	r0, #0
 80091a2:	f8dc 3000 	ldr.w	r3, [ip]
 80091a6:	b299      	uxth	r1, r3
 80091a8:	fb02 6101 	mla	r1, r2, r1, r6
 80091ac:	0c1e      	lsrs	r6, r3, #16
 80091ae:	0c0b      	lsrs	r3, r1, #16
 80091b0:	fb02 3306 	mla	r3, r2, r6, r3
 80091b4:	b289      	uxth	r1, r1
 80091b6:	3001      	adds	r0, #1
 80091b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80091bc:	4285      	cmp	r5, r0
 80091be:	f84c 1b04 	str.w	r1, [ip], #4
 80091c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80091c6:	dcec      	bgt.n	80091a2 <__multadd+0x12>
 80091c8:	b30e      	cbz	r6, 800920e <__multadd+0x7e>
 80091ca:	68a3      	ldr	r3, [r4, #8]
 80091cc:	42ab      	cmp	r3, r5
 80091ce:	dc19      	bgt.n	8009204 <__multadd+0x74>
 80091d0:	6861      	ldr	r1, [r4, #4]
 80091d2:	4638      	mov	r0, r7
 80091d4:	3101      	adds	r1, #1
 80091d6:	f7ff ff79 	bl	80090cc <_Balloc>
 80091da:	4680      	mov	r8, r0
 80091dc:	b928      	cbnz	r0, 80091ea <__multadd+0x5a>
 80091de:	4602      	mov	r2, r0
 80091e0:	4b0c      	ldr	r3, [pc, #48]	; (8009214 <__multadd+0x84>)
 80091e2:	480d      	ldr	r0, [pc, #52]	; (8009218 <__multadd+0x88>)
 80091e4:	21ba      	movs	r1, #186	; 0xba
 80091e6:	f000 fd85 	bl	8009cf4 <__assert_func>
 80091ea:	6922      	ldr	r2, [r4, #16]
 80091ec:	3202      	adds	r2, #2
 80091ee:	f104 010c 	add.w	r1, r4, #12
 80091f2:	0092      	lsls	r2, r2, #2
 80091f4:	300c      	adds	r0, #12
 80091f6:	f7fe ffde 	bl	80081b6 <memcpy>
 80091fa:	4621      	mov	r1, r4
 80091fc:	4638      	mov	r0, r7
 80091fe:	f7ff ffa5 	bl	800914c <_Bfree>
 8009202:	4644      	mov	r4, r8
 8009204:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009208:	3501      	adds	r5, #1
 800920a:	615e      	str	r6, [r3, #20]
 800920c:	6125      	str	r5, [r4, #16]
 800920e:	4620      	mov	r0, r4
 8009210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009214:	0800a180 	.word	0x0800a180
 8009218:	0800a191 	.word	0x0800a191

0800921c <__hi0bits>:
 800921c:	0c03      	lsrs	r3, r0, #16
 800921e:	041b      	lsls	r3, r3, #16
 8009220:	b9d3      	cbnz	r3, 8009258 <__hi0bits+0x3c>
 8009222:	0400      	lsls	r0, r0, #16
 8009224:	2310      	movs	r3, #16
 8009226:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800922a:	bf04      	itt	eq
 800922c:	0200      	lsleq	r0, r0, #8
 800922e:	3308      	addeq	r3, #8
 8009230:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009234:	bf04      	itt	eq
 8009236:	0100      	lsleq	r0, r0, #4
 8009238:	3304      	addeq	r3, #4
 800923a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800923e:	bf04      	itt	eq
 8009240:	0080      	lsleq	r0, r0, #2
 8009242:	3302      	addeq	r3, #2
 8009244:	2800      	cmp	r0, #0
 8009246:	db05      	blt.n	8009254 <__hi0bits+0x38>
 8009248:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800924c:	f103 0301 	add.w	r3, r3, #1
 8009250:	bf08      	it	eq
 8009252:	2320      	moveq	r3, #32
 8009254:	4618      	mov	r0, r3
 8009256:	4770      	bx	lr
 8009258:	2300      	movs	r3, #0
 800925a:	e7e4      	b.n	8009226 <__hi0bits+0xa>

0800925c <__lo0bits>:
 800925c:	6803      	ldr	r3, [r0, #0]
 800925e:	f013 0207 	ands.w	r2, r3, #7
 8009262:	d00c      	beq.n	800927e <__lo0bits+0x22>
 8009264:	07d9      	lsls	r1, r3, #31
 8009266:	d422      	bmi.n	80092ae <__lo0bits+0x52>
 8009268:	079a      	lsls	r2, r3, #30
 800926a:	bf49      	itett	mi
 800926c:	085b      	lsrmi	r3, r3, #1
 800926e:	089b      	lsrpl	r3, r3, #2
 8009270:	6003      	strmi	r3, [r0, #0]
 8009272:	2201      	movmi	r2, #1
 8009274:	bf5c      	itt	pl
 8009276:	6003      	strpl	r3, [r0, #0]
 8009278:	2202      	movpl	r2, #2
 800927a:	4610      	mov	r0, r2
 800927c:	4770      	bx	lr
 800927e:	b299      	uxth	r1, r3
 8009280:	b909      	cbnz	r1, 8009286 <__lo0bits+0x2a>
 8009282:	0c1b      	lsrs	r3, r3, #16
 8009284:	2210      	movs	r2, #16
 8009286:	b2d9      	uxtb	r1, r3
 8009288:	b909      	cbnz	r1, 800928e <__lo0bits+0x32>
 800928a:	3208      	adds	r2, #8
 800928c:	0a1b      	lsrs	r3, r3, #8
 800928e:	0719      	lsls	r1, r3, #28
 8009290:	bf04      	itt	eq
 8009292:	091b      	lsreq	r3, r3, #4
 8009294:	3204      	addeq	r2, #4
 8009296:	0799      	lsls	r1, r3, #30
 8009298:	bf04      	itt	eq
 800929a:	089b      	lsreq	r3, r3, #2
 800929c:	3202      	addeq	r2, #2
 800929e:	07d9      	lsls	r1, r3, #31
 80092a0:	d403      	bmi.n	80092aa <__lo0bits+0x4e>
 80092a2:	085b      	lsrs	r3, r3, #1
 80092a4:	f102 0201 	add.w	r2, r2, #1
 80092a8:	d003      	beq.n	80092b2 <__lo0bits+0x56>
 80092aa:	6003      	str	r3, [r0, #0]
 80092ac:	e7e5      	b.n	800927a <__lo0bits+0x1e>
 80092ae:	2200      	movs	r2, #0
 80092b0:	e7e3      	b.n	800927a <__lo0bits+0x1e>
 80092b2:	2220      	movs	r2, #32
 80092b4:	e7e1      	b.n	800927a <__lo0bits+0x1e>
	...

080092b8 <__i2b>:
 80092b8:	b510      	push	{r4, lr}
 80092ba:	460c      	mov	r4, r1
 80092bc:	2101      	movs	r1, #1
 80092be:	f7ff ff05 	bl	80090cc <_Balloc>
 80092c2:	4602      	mov	r2, r0
 80092c4:	b928      	cbnz	r0, 80092d2 <__i2b+0x1a>
 80092c6:	4b05      	ldr	r3, [pc, #20]	; (80092dc <__i2b+0x24>)
 80092c8:	4805      	ldr	r0, [pc, #20]	; (80092e0 <__i2b+0x28>)
 80092ca:	f240 1145 	movw	r1, #325	; 0x145
 80092ce:	f000 fd11 	bl	8009cf4 <__assert_func>
 80092d2:	2301      	movs	r3, #1
 80092d4:	6144      	str	r4, [r0, #20]
 80092d6:	6103      	str	r3, [r0, #16]
 80092d8:	bd10      	pop	{r4, pc}
 80092da:	bf00      	nop
 80092dc:	0800a180 	.word	0x0800a180
 80092e0:	0800a191 	.word	0x0800a191

080092e4 <__multiply>:
 80092e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e8:	4691      	mov	r9, r2
 80092ea:	690a      	ldr	r2, [r1, #16]
 80092ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	bfb8      	it	lt
 80092f4:	460b      	movlt	r3, r1
 80092f6:	460c      	mov	r4, r1
 80092f8:	bfbc      	itt	lt
 80092fa:	464c      	movlt	r4, r9
 80092fc:	4699      	movlt	r9, r3
 80092fe:	6927      	ldr	r7, [r4, #16]
 8009300:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009304:	68a3      	ldr	r3, [r4, #8]
 8009306:	6861      	ldr	r1, [r4, #4]
 8009308:	eb07 060a 	add.w	r6, r7, sl
 800930c:	42b3      	cmp	r3, r6
 800930e:	b085      	sub	sp, #20
 8009310:	bfb8      	it	lt
 8009312:	3101      	addlt	r1, #1
 8009314:	f7ff feda 	bl	80090cc <_Balloc>
 8009318:	b930      	cbnz	r0, 8009328 <__multiply+0x44>
 800931a:	4602      	mov	r2, r0
 800931c:	4b44      	ldr	r3, [pc, #272]	; (8009430 <__multiply+0x14c>)
 800931e:	4845      	ldr	r0, [pc, #276]	; (8009434 <__multiply+0x150>)
 8009320:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009324:	f000 fce6 	bl	8009cf4 <__assert_func>
 8009328:	f100 0514 	add.w	r5, r0, #20
 800932c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009330:	462b      	mov	r3, r5
 8009332:	2200      	movs	r2, #0
 8009334:	4543      	cmp	r3, r8
 8009336:	d321      	bcc.n	800937c <__multiply+0x98>
 8009338:	f104 0314 	add.w	r3, r4, #20
 800933c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009340:	f109 0314 	add.w	r3, r9, #20
 8009344:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009348:	9202      	str	r2, [sp, #8]
 800934a:	1b3a      	subs	r2, r7, r4
 800934c:	3a15      	subs	r2, #21
 800934e:	f022 0203 	bic.w	r2, r2, #3
 8009352:	3204      	adds	r2, #4
 8009354:	f104 0115 	add.w	r1, r4, #21
 8009358:	428f      	cmp	r7, r1
 800935a:	bf38      	it	cc
 800935c:	2204      	movcc	r2, #4
 800935e:	9201      	str	r2, [sp, #4]
 8009360:	9a02      	ldr	r2, [sp, #8]
 8009362:	9303      	str	r3, [sp, #12]
 8009364:	429a      	cmp	r2, r3
 8009366:	d80c      	bhi.n	8009382 <__multiply+0x9e>
 8009368:	2e00      	cmp	r6, #0
 800936a:	dd03      	ble.n	8009374 <__multiply+0x90>
 800936c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009370:	2b00      	cmp	r3, #0
 8009372:	d05b      	beq.n	800942c <__multiply+0x148>
 8009374:	6106      	str	r6, [r0, #16]
 8009376:	b005      	add	sp, #20
 8009378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800937c:	f843 2b04 	str.w	r2, [r3], #4
 8009380:	e7d8      	b.n	8009334 <__multiply+0x50>
 8009382:	f8b3 a000 	ldrh.w	sl, [r3]
 8009386:	f1ba 0f00 	cmp.w	sl, #0
 800938a:	d024      	beq.n	80093d6 <__multiply+0xf2>
 800938c:	f104 0e14 	add.w	lr, r4, #20
 8009390:	46a9      	mov	r9, r5
 8009392:	f04f 0c00 	mov.w	ip, #0
 8009396:	f85e 2b04 	ldr.w	r2, [lr], #4
 800939a:	f8d9 1000 	ldr.w	r1, [r9]
 800939e:	fa1f fb82 	uxth.w	fp, r2
 80093a2:	b289      	uxth	r1, r1
 80093a4:	fb0a 110b 	mla	r1, sl, fp, r1
 80093a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80093ac:	f8d9 2000 	ldr.w	r2, [r9]
 80093b0:	4461      	add	r1, ip
 80093b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80093b6:	fb0a c20b 	mla	r2, sl, fp, ip
 80093ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80093be:	b289      	uxth	r1, r1
 80093c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80093c4:	4577      	cmp	r7, lr
 80093c6:	f849 1b04 	str.w	r1, [r9], #4
 80093ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80093ce:	d8e2      	bhi.n	8009396 <__multiply+0xb2>
 80093d0:	9a01      	ldr	r2, [sp, #4]
 80093d2:	f845 c002 	str.w	ip, [r5, r2]
 80093d6:	9a03      	ldr	r2, [sp, #12]
 80093d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80093dc:	3304      	adds	r3, #4
 80093de:	f1b9 0f00 	cmp.w	r9, #0
 80093e2:	d021      	beq.n	8009428 <__multiply+0x144>
 80093e4:	6829      	ldr	r1, [r5, #0]
 80093e6:	f104 0c14 	add.w	ip, r4, #20
 80093ea:	46ae      	mov	lr, r5
 80093ec:	f04f 0a00 	mov.w	sl, #0
 80093f0:	f8bc b000 	ldrh.w	fp, [ip]
 80093f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80093f8:	fb09 220b 	mla	r2, r9, fp, r2
 80093fc:	4452      	add	r2, sl
 80093fe:	b289      	uxth	r1, r1
 8009400:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009404:	f84e 1b04 	str.w	r1, [lr], #4
 8009408:	f85c 1b04 	ldr.w	r1, [ip], #4
 800940c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009410:	f8be 1000 	ldrh.w	r1, [lr]
 8009414:	fb09 110a 	mla	r1, r9, sl, r1
 8009418:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800941c:	4567      	cmp	r7, ip
 800941e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009422:	d8e5      	bhi.n	80093f0 <__multiply+0x10c>
 8009424:	9a01      	ldr	r2, [sp, #4]
 8009426:	50a9      	str	r1, [r5, r2]
 8009428:	3504      	adds	r5, #4
 800942a:	e799      	b.n	8009360 <__multiply+0x7c>
 800942c:	3e01      	subs	r6, #1
 800942e:	e79b      	b.n	8009368 <__multiply+0x84>
 8009430:	0800a180 	.word	0x0800a180
 8009434:	0800a191 	.word	0x0800a191

08009438 <__pow5mult>:
 8009438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800943c:	4615      	mov	r5, r2
 800943e:	f012 0203 	ands.w	r2, r2, #3
 8009442:	4606      	mov	r6, r0
 8009444:	460f      	mov	r7, r1
 8009446:	d007      	beq.n	8009458 <__pow5mult+0x20>
 8009448:	4c25      	ldr	r4, [pc, #148]	; (80094e0 <__pow5mult+0xa8>)
 800944a:	3a01      	subs	r2, #1
 800944c:	2300      	movs	r3, #0
 800944e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009452:	f7ff fe9d 	bl	8009190 <__multadd>
 8009456:	4607      	mov	r7, r0
 8009458:	10ad      	asrs	r5, r5, #2
 800945a:	d03d      	beq.n	80094d8 <__pow5mult+0xa0>
 800945c:	69f4      	ldr	r4, [r6, #28]
 800945e:	b97c      	cbnz	r4, 8009480 <__pow5mult+0x48>
 8009460:	2010      	movs	r0, #16
 8009462:	f7ff fd7f 	bl	8008f64 <malloc>
 8009466:	4602      	mov	r2, r0
 8009468:	61f0      	str	r0, [r6, #28]
 800946a:	b928      	cbnz	r0, 8009478 <__pow5mult+0x40>
 800946c:	4b1d      	ldr	r3, [pc, #116]	; (80094e4 <__pow5mult+0xac>)
 800946e:	481e      	ldr	r0, [pc, #120]	; (80094e8 <__pow5mult+0xb0>)
 8009470:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009474:	f000 fc3e 	bl	8009cf4 <__assert_func>
 8009478:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800947c:	6004      	str	r4, [r0, #0]
 800947e:	60c4      	str	r4, [r0, #12]
 8009480:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009484:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009488:	b94c      	cbnz	r4, 800949e <__pow5mult+0x66>
 800948a:	f240 2171 	movw	r1, #625	; 0x271
 800948e:	4630      	mov	r0, r6
 8009490:	f7ff ff12 	bl	80092b8 <__i2b>
 8009494:	2300      	movs	r3, #0
 8009496:	f8c8 0008 	str.w	r0, [r8, #8]
 800949a:	4604      	mov	r4, r0
 800949c:	6003      	str	r3, [r0, #0]
 800949e:	f04f 0900 	mov.w	r9, #0
 80094a2:	07eb      	lsls	r3, r5, #31
 80094a4:	d50a      	bpl.n	80094bc <__pow5mult+0x84>
 80094a6:	4639      	mov	r1, r7
 80094a8:	4622      	mov	r2, r4
 80094aa:	4630      	mov	r0, r6
 80094ac:	f7ff ff1a 	bl	80092e4 <__multiply>
 80094b0:	4639      	mov	r1, r7
 80094b2:	4680      	mov	r8, r0
 80094b4:	4630      	mov	r0, r6
 80094b6:	f7ff fe49 	bl	800914c <_Bfree>
 80094ba:	4647      	mov	r7, r8
 80094bc:	106d      	asrs	r5, r5, #1
 80094be:	d00b      	beq.n	80094d8 <__pow5mult+0xa0>
 80094c0:	6820      	ldr	r0, [r4, #0]
 80094c2:	b938      	cbnz	r0, 80094d4 <__pow5mult+0x9c>
 80094c4:	4622      	mov	r2, r4
 80094c6:	4621      	mov	r1, r4
 80094c8:	4630      	mov	r0, r6
 80094ca:	f7ff ff0b 	bl	80092e4 <__multiply>
 80094ce:	6020      	str	r0, [r4, #0]
 80094d0:	f8c0 9000 	str.w	r9, [r0]
 80094d4:	4604      	mov	r4, r0
 80094d6:	e7e4      	b.n	80094a2 <__pow5mult+0x6a>
 80094d8:	4638      	mov	r0, r7
 80094da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094de:	bf00      	nop
 80094e0:	0800a2e0 	.word	0x0800a2e0
 80094e4:	0800a111 	.word	0x0800a111
 80094e8:	0800a191 	.word	0x0800a191

080094ec <__lshift>:
 80094ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094f0:	460c      	mov	r4, r1
 80094f2:	6849      	ldr	r1, [r1, #4]
 80094f4:	6923      	ldr	r3, [r4, #16]
 80094f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80094fa:	68a3      	ldr	r3, [r4, #8]
 80094fc:	4607      	mov	r7, r0
 80094fe:	4691      	mov	r9, r2
 8009500:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009504:	f108 0601 	add.w	r6, r8, #1
 8009508:	42b3      	cmp	r3, r6
 800950a:	db0b      	blt.n	8009524 <__lshift+0x38>
 800950c:	4638      	mov	r0, r7
 800950e:	f7ff fddd 	bl	80090cc <_Balloc>
 8009512:	4605      	mov	r5, r0
 8009514:	b948      	cbnz	r0, 800952a <__lshift+0x3e>
 8009516:	4602      	mov	r2, r0
 8009518:	4b28      	ldr	r3, [pc, #160]	; (80095bc <__lshift+0xd0>)
 800951a:	4829      	ldr	r0, [pc, #164]	; (80095c0 <__lshift+0xd4>)
 800951c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009520:	f000 fbe8 	bl	8009cf4 <__assert_func>
 8009524:	3101      	adds	r1, #1
 8009526:	005b      	lsls	r3, r3, #1
 8009528:	e7ee      	b.n	8009508 <__lshift+0x1c>
 800952a:	2300      	movs	r3, #0
 800952c:	f100 0114 	add.w	r1, r0, #20
 8009530:	f100 0210 	add.w	r2, r0, #16
 8009534:	4618      	mov	r0, r3
 8009536:	4553      	cmp	r3, sl
 8009538:	db33      	blt.n	80095a2 <__lshift+0xb6>
 800953a:	6920      	ldr	r0, [r4, #16]
 800953c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009540:	f104 0314 	add.w	r3, r4, #20
 8009544:	f019 091f 	ands.w	r9, r9, #31
 8009548:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800954c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009550:	d02b      	beq.n	80095aa <__lshift+0xbe>
 8009552:	f1c9 0e20 	rsb	lr, r9, #32
 8009556:	468a      	mov	sl, r1
 8009558:	2200      	movs	r2, #0
 800955a:	6818      	ldr	r0, [r3, #0]
 800955c:	fa00 f009 	lsl.w	r0, r0, r9
 8009560:	4310      	orrs	r0, r2
 8009562:	f84a 0b04 	str.w	r0, [sl], #4
 8009566:	f853 2b04 	ldr.w	r2, [r3], #4
 800956a:	459c      	cmp	ip, r3
 800956c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009570:	d8f3      	bhi.n	800955a <__lshift+0x6e>
 8009572:	ebac 0304 	sub.w	r3, ip, r4
 8009576:	3b15      	subs	r3, #21
 8009578:	f023 0303 	bic.w	r3, r3, #3
 800957c:	3304      	adds	r3, #4
 800957e:	f104 0015 	add.w	r0, r4, #21
 8009582:	4584      	cmp	ip, r0
 8009584:	bf38      	it	cc
 8009586:	2304      	movcc	r3, #4
 8009588:	50ca      	str	r2, [r1, r3]
 800958a:	b10a      	cbz	r2, 8009590 <__lshift+0xa4>
 800958c:	f108 0602 	add.w	r6, r8, #2
 8009590:	3e01      	subs	r6, #1
 8009592:	4638      	mov	r0, r7
 8009594:	612e      	str	r6, [r5, #16]
 8009596:	4621      	mov	r1, r4
 8009598:	f7ff fdd8 	bl	800914c <_Bfree>
 800959c:	4628      	mov	r0, r5
 800959e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80095a6:	3301      	adds	r3, #1
 80095a8:	e7c5      	b.n	8009536 <__lshift+0x4a>
 80095aa:	3904      	subs	r1, #4
 80095ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80095b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80095b4:	459c      	cmp	ip, r3
 80095b6:	d8f9      	bhi.n	80095ac <__lshift+0xc0>
 80095b8:	e7ea      	b.n	8009590 <__lshift+0xa4>
 80095ba:	bf00      	nop
 80095bc:	0800a180 	.word	0x0800a180
 80095c0:	0800a191 	.word	0x0800a191

080095c4 <__mcmp>:
 80095c4:	b530      	push	{r4, r5, lr}
 80095c6:	6902      	ldr	r2, [r0, #16]
 80095c8:	690c      	ldr	r4, [r1, #16]
 80095ca:	1b12      	subs	r2, r2, r4
 80095cc:	d10e      	bne.n	80095ec <__mcmp+0x28>
 80095ce:	f100 0314 	add.w	r3, r0, #20
 80095d2:	3114      	adds	r1, #20
 80095d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80095d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80095dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80095e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80095e4:	42a5      	cmp	r5, r4
 80095e6:	d003      	beq.n	80095f0 <__mcmp+0x2c>
 80095e8:	d305      	bcc.n	80095f6 <__mcmp+0x32>
 80095ea:	2201      	movs	r2, #1
 80095ec:	4610      	mov	r0, r2
 80095ee:	bd30      	pop	{r4, r5, pc}
 80095f0:	4283      	cmp	r3, r0
 80095f2:	d3f3      	bcc.n	80095dc <__mcmp+0x18>
 80095f4:	e7fa      	b.n	80095ec <__mcmp+0x28>
 80095f6:	f04f 32ff 	mov.w	r2, #4294967295
 80095fa:	e7f7      	b.n	80095ec <__mcmp+0x28>

080095fc <__mdiff>:
 80095fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009600:	460c      	mov	r4, r1
 8009602:	4606      	mov	r6, r0
 8009604:	4611      	mov	r1, r2
 8009606:	4620      	mov	r0, r4
 8009608:	4690      	mov	r8, r2
 800960a:	f7ff ffdb 	bl	80095c4 <__mcmp>
 800960e:	1e05      	subs	r5, r0, #0
 8009610:	d110      	bne.n	8009634 <__mdiff+0x38>
 8009612:	4629      	mov	r1, r5
 8009614:	4630      	mov	r0, r6
 8009616:	f7ff fd59 	bl	80090cc <_Balloc>
 800961a:	b930      	cbnz	r0, 800962a <__mdiff+0x2e>
 800961c:	4b3a      	ldr	r3, [pc, #232]	; (8009708 <__mdiff+0x10c>)
 800961e:	4602      	mov	r2, r0
 8009620:	f240 2137 	movw	r1, #567	; 0x237
 8009624:	4839      	ldr	r0, [pc, #228]	; (800970c <__mdiff+0x110>)
 8009626:	f000 fb65 	bl	8009cf4 <__assert_func>
 800962a:	2301      	movs	r3, #1
 800962c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009630:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009634:	bfa4      	itt	ge
 8009636:	4643      	movge	r3, r8
 8009638:	46a0      	movge	r8, r4
 800963a:	4630      	mov	r0, r6
 800963c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009640:	bfa6      	itte	ge
 8009642:	461c      	movge	r4, r3
 8009644:	2500      	movge	r5, #0
 8009646:	2501      	movlt	r5, #1
 8009648:	f7ff fd40 	bl	80090cc <_Balloc>
 800964c:	b920      	cbnz	r0, 8009658 <__mdiff+0x5c>
 800964e:	4b2e      	ldr	r3, [pc, #184]	; (8009708 <__mdiff+0x10c>)
 8009650:	4602      	mov	r2, r0
 8009652:	f240 2145 	movw	r1, #581	; 0x245
 8009656:	e7e5      	b.n	8009624 <__mdiff+0x28>
 8009658:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800965c:	6926      	ldr	r6, [r4, #16]
 800965e:	60c5      	str	r5, [r0, #12]
 8009660:	f104 0914 	add.w	r9, r4, #20
 8009664:	f108 0514 	add.w	r5, r8, #20
 8009668:	f100 0e14 	add.w	lr, r0, #20
 800966c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009670:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009674:	f108 0210 	add.w	r2, r8, #16
 8009678:	46f2      	mov	sl, lr
 800967a:	2100      	movs	r1, #0
 800967c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009680:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009684:	fa11 f88b 	uxtah	r8, r1, fp
 8009688:	b299      	uxth	r1, r3
 800968a:	0c1b      	lsrs	r3, r3, #16
 800968c:	eba8 0801 	sub.w	r8, r8, r1
 8009690:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009694:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009698:	fa1f f888 	uxth.w	r8, r8
 800969c:	1419      	asrs	r1, r3, #16
 800969e:	454e      	cmp	r6, r9
 80096a0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80096a4:	f84a 3b04 	str.w	r3, [sl], #4
 80096a8:	d8e8      	bhi.n	800967c <__mdiff+0x80>
 80096aa:	1b33      	subs	r3, r6, r4
 80096ac:	3b15      	subs	r3, #21
 80096ae:	f023 0303 	bic.w	r3, r3, #3
 80096b2:	3304      	adds	r3, #4
 80096b4:	3415      	adds	r4, #21
 80096b6:	42a6      	cmp	r6, r4
 80096b8:	bf38      	it	cc
 80096ba:	2304      	movcc	r3, #4
 80096bc:	441d      	add	r5, r3
 80096be:	4473      	add	r3, lr
 80096c0:	469e      	mov	lr, r3
 80096c2:	462e      	mov	r6, r5
 80096c4:	4566      	cmp	r6, ip
 80096c6:	d30e      	bcc.n	80096e6 <__mdiff+0xea>
 80096c8:	f10c 0203 	add.w	r2, ip, #3
 80096cc:	1b52      	subs	r2, r2, r5
 80096ce:	f022 0203 	bic.w	r2, r2, #3
 80096d2:	3d03      	subs	r5, #3
 80096d4:	45ac      	cmp	ip, r5
 80096d6:	bf38      	it	cc
 80096d8:	2200      	movcc	r2, #0
 80096da:	4413      	add	r3, r2
 80096dc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80096e0:	b17a      	cbz	r2, 8009702 <__mdiff+0x106>
 80096e2:	6107      	str	r7, [r0, #16]
 80096e4:	e7a4      	b.n	8009630 <__mdiff+0x34>
 80096e6:	f856 8b04 	ldr.w	r8, [r6], #4
 80096ea:	fa11 f288 	uxtah	r2, r1, r8
 80096ee:	1414      	asrs	r4, r2, #16
 80096f0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80096f4:	b292      	uxth	r2, r2
 80096f6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80096fa:	f84e 2b04 	str.w	r2, [lr], #4
 80096fe:	1421      	asrs	r1, r4, #16
 8009700:	e7e0      	b.n	80096c4 <__mdiff+0xc8>
 8009702:	3f01      	subs	r7, #1
 8009704:	e7ea      	b.n	80096dc <__mdiff+0xe0>
 8009706:	bf00      	nop
 8009708:	0800a180 	.word	0x0800a180
 800970c:	0800a191 	.word	0x0800a191

08009710 <__d2b>:
 8009710:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009714:	460f      	mov	r7, r1
 8009716:	2101      	movs	r1, #1
 8009718:	ec59 8b10 	vmov	r8, r9, d0
 800971c:	4616      	mov	r6, r2
 800971e:	f7ff fcd5 	bl	80090cc <_Balloc>
 8009722:	4604      	mov	r4, r0
 8009724:	b930      	cbnz	r0, 8009734 <__d2b+0x24>
 8009726:	4602      	mov	r2, r0
 8009728:	4b24      	ldr	r3, [pc, #144]	; (80097bc <__d2b+0xac>)
 800972a:	4825      	ldr	r0, [pc, #148]	; (80097c0 <__d2b+0xb0>)
 800972c:	f240 310f 	movw	r1, #783	; 0x30f
 8009730:	f000 fae0 	bl	8009cf4 <__assert_func>
 8009734:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009738:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800973c:	bb2d      	cbnz	r5, 800978a <__d2b+0x7a>
 800973e:	9301      	str	r3, [sp, #4]
 8009740:	f1b8 0300 	subs.w	r3, r8, #0
 8009744:	d026      	beq.n	8009794 <__d2b+0x84>
 8009746:	4668      	mov	r0, sp
 8009748:	9300      	str	r3, [sp, #0]
 800974a:	f7ff fd87 	bl	800925c <__lo0bits>
 800974e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009752:	b1e8      	cbz	r0, 8009790 <__d2b+0x80>
 8009754:	f1c0 0320 	rsb	r3, r0, #32
 8009758:	fa02 f303 	lsl.w	r3, r2, r3
 800975c:	430b      	orrs	r3, r1
 800975e:	40c2      	lsrs	r2, r0
 8009760:	6163      	str	r3, [r4, #20]
 8009762:	9201      	str	r2, [sp, #4]
 8009764:	9b01      	ldr	r3, [sp, #4]
 8009766:	61a3      	str	r3, [r4, #24]
 8009768:	2b00      	cmp	r3, #0
 800976a:	bf14      	ite	ne
 800976c:	2202      	movne	r2, #2
 800976e:	2201      	moveq	r2, #1
 8009770:	6122      	str	r2, [r4, #16]
 8009772:	b1bd      	cbz	r5, 80097a4 <__d2b+0x94>
 8009774:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009778:	4405      	add	r5, r0
 800977a:	603d      	str	r5, [r7, #0]
 800977c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009780:	6030      	str	r0, [r6, #0]
 8009782:	4620      	mov	r0, r4
 8009784:	b003      	add	sp, #12
 8009786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800978a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800978e:	e7d6      	b.n	800973e <__d2b+0x2e>
 8009790:	6161      	str	r1, [r4, #20]
 8009792:	e7e7      	b.n	8009764 <__d2b+0x54>
 8009794:	a801      	add	r0, sp, #4
 8009796:	f7ff fd61 	bl	800925c <__lo0bits>
 800979a:	9b01      	ldr	r3, [sp, #4]
 800979c:	6163      	str	r3, [r4, #20]
 800979e:	3020      	adds	r0, #32
 80097a0:	2201      	movs	r2, #1
 80097a2:	e7e5      	b.n	8009770 <__d2b+0x60>
 80097a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80097a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80097ac:	6038      	str	r0, [r7, #0]
 80097ae:	6918      	ldr	r0, [r3, #16]
 80097b0:	f7ff fd34 	bl	800921c <__hi0bits>
 80097b4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80097b8:	e7e2      	b.n	8009780 <__d2b+0x70>
 80097ba:	bf00      	nop
 80097bc:	0800a180 	.word	0x0800a180
 80097c0:	0800a191 	.word	0x0800a191

080097c4 <__sfputc_r>:
 80097c4:	6893      	ldr	r3, [r2, #8]
 80097c6:	3b01      	subs	r3, #1
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	b410      	push	{r4}
 80097cc:	6093      	str	r3, [r2, #8]
 80097ce:	da08      	bge.n	80097e2 <__sfputc_r+0x1e>
 80097d0:	6994      	ldr	r4, [r2, #24]
 80097d2:	42a3      	cmp	r3, r4
 80097d4:	db01      	blt.n	80097da <__sfputc_r+0x16>
 80097d6:	290a      	cmp	r1, #10
 80097d8:	d103      	bne.n	80097e2 <__sfputc_r+0x1e>
 80097da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097de:	f000 b9e3 	b.w	8009ba8 <__swbuf_r>
 80097e2:	6813      	ldr	r3, [r2, #0]
 80097e4:	1c58      	adds	r0, r3, #1
 80097e6:	6010      	str	r0, [r2, #0]
 80097e8:	7019      	strb	r1, [r3, #0]
 80097ea:	4608      	mov	r0, r1
 80097ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097f0:	4770      	bx	lr

080097f2 <__sfputs_r>:
 80097f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097f4:	4606      	mov	r6, r0
 80097f6:	460f      	mov	r7, r1
 80097f8:	4614      	mov	r4, r2
 80097fa:	18d5      	adds	r5, r2, r3
 80097fc:	42ac      	cmp	r4, r5
 80097fe:	d101      	bne.n	8009804 <__sfputs_r+0x12>
 8009800:	2000      	movs	r0, #0
 8009802:	e007      	b.n	8009814 <__sfputs_r+0x22>
 8009804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009808:	463a      	mov	r2, r7
 800980a:	4630      	mov	r0, r6
 800980c:	f7ff ffda 	bl	80097c4 <__sfputc_r>
 8009810:	1c43      	adds	r3, r0, #1
 8009812:	d1f3      	bne.n	80097fc <__sfputs_r+0xa>
 8009814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009818 <_vfiprintf_r>:
 8009818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800981c:	460d      	mov	r5, r1
 800981e:	b09d      	sub	sp, #116	; 0x74
 8009820:	4614      	mov	r4, r2
 8009822:	4698      	mov	r8, r3
 8009824:	4606      	mov	r6, r0
 8009826:	b118      	cbz	r0, 8009830 <_vfiprintf_r+0x18>
 8009828:	6a03      	ldr	r3, [r0, #32]
 800982a:	b90b      	cbnz	r3, 8009830 <_vfiprintf_r+0x18>
 800982c:	f7fe fb50 	bl	8007ed0 <__sinit>
 8009830:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009832:	07d9      	lsls	r1, r3, #31
 8009834:	d405      	bmi.n	8009842 <_vfiprintf_r+0x2a>
 8009836:	89ab      	ldrh	r3, [r5, #12]
 8009838:	059a      	lsls	r2, r3, #22
 800983a:	d402      	bmi.n	8009842 <_vfiprintf_r+0x2a>
 800983c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800983e:	f7fe fcb8 	bl	80081b2 <__retarget_lock_acquire_recursive>
 8009842:	89ab      	ldrh	r3, [r5, #12]
 8009844:	071b      	lsls	r3, r3, #28
 8009846:	d501      	bpl.n	800984c <_vfiprintf_r+0x34>
 8009848:	692b      	ldr	r3, [r5, #16]
 800984a:	b99b      	cbnz	r3, 8009874 <_vfiprintf_r+0x5c>
 800984c:	4629      	mov	r1, r5
 800984e:	4630      	mov	r0, r6
 8009850:	f000 f9e8 	bl	8009c24 <__swsetup_r>
 8009854:	b170      	cbz	r0, 8009874 <_vfiprintf_r+0x5c>
 8009856:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009858:	07dc      	lsls	r4, r3, #31
 800985a:	d504      	bpl.n	8009866 <_vfiprintf_r+0x4e>
 800985c:	f04f 30ff 	mov.w	r0, #4294967295
 8009860:	b01d      	add	sp, #116	; 0x74
 8009862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009866:	89ab      	ldrh	r3, [r5, #12]
 8009868:	0598      	lsls	r0, r3, #22
 800986a:	d4f7      	bmi.n	800985c <_vfiprintf_r+0x44>
 800986c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800986e:	f7fe fca1 	bl	80081b4 <__retarget_lock_release_recursive>
 8009872:	e7f3      	b.n	800985c <_vfiprintf_r+0x44>
 8009874:	2300      	movs	r3, #0
 8009876:	9309      	str	r3, [sp, #36]	; 0x24
 8009878:	2320      	movs	r3, #32
 800987a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800987e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009882:	2330      	movs	r3, #48	; 0x30
 8009884:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009a38 <_vfiprintf_r+0x220>
 8009888:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800988c:	f04f 0901 	mov.w	r9, #1
 8009890:	4623      	mov	r3, r4
 8009892:	469a      	mov	sl, r3
 8009894:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009898:	b10a      	cbz	r2, 800989e <_vfiprintf_r+0x86>
 800989a:	2a25      	cmp	r2, #37	; 0x25
 800989c:	d1f9      	bne.n	8009892 <_vfiprintf_r+0x7a>
 800989e:	ebba 0b04 	subs.w	fp, sl, r4
 80098a2:	d00b      	beq.n	80098bc <_vfiprintf_r+0xa4>
 80098a4:	465b      	mov	r3, fp
 80098a6:	4622      	mov	r2, r4
 80098a8:	4629      	mov	r1, r5
 80098aa:	4630      	mov	r0, r6
 80098ac:	f7ff ffa1 	bl	80097f2 <__sfputs_r>
 80098b0:	3001      	adds	r0, #1
 80098b2:	f000 80a9 	beq.w	8009a08 <_vfiprintf_r+0x1f0>
 80098b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098b8:	445a      	add	r2, fp
 80098ba:	9209      	str	r2, [sp, #36]	; 0x24
 80098bc:	f89a 3000 	ldrb.w	r3, [sl]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	f000 80a1 	beq.w	8009a08 <_vfiprintf_r+0x1f0>
 80098c6:	2300      	movs	r3, #0
 80098c8:	f04f 32ff 	mov.w	r2, #4294967295
 80098cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098d0:	f10a 0a01 	add.w	sl, sl, #1
 80098d4:	9304      	str	r3, [sp, #16]
 80098d6:	9307      	str	r3, [sp, #28]
 80098d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098dc:	931a      	str	r3, [sp, #104]	; 0x68
 80098de:	4654      	mov	r4, sl
 80098e0:	2205      	movs	r2, #5
 80098e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098e6:	4854      	ldr	r0, [pc, #336]	; (8009a38 <_vfiprintf_r+0x220>)
 80098e8:	f7f6 fc82 	bl	80001f0 <memchr>
 80098ec:	9a04      	ldr	r2, [sp, #16]
 80098ee:	b9d8      	cbnz	r0, 8009928 <_vfiprintf_r+0x110>
 80098f0:	06d1      	lsls	r1, r2, #27
 80098f2:	bf44      	itt	mi
 80098f4:	2320      	movmi	r3, #32
 80098f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098fa:	0713      	lsls	r3, r2, #28
 80098fc:	bf44      	itt	mi
 80098fe:	232b      	movmi	r3, #43	; 0x2b
 8009900:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009904:	f89a 3000 	ldrb.w	r3, [sl]
 8009908:	2b2a      	cmp	r3, #42	; 0x2a
 800990a:	d015      	beq.n	8009938 <_vfiprintf_r+0x120>
 800990c:	9a07      	ldr	r2, [sp, #28]
 800990e:	4654      	mov	r4, sl
 8009910:	2000      	movs	r0, #0
 8009912:	f04f 0c0a 	mov.w	ip, #10
 8009916:	4621      	mov	r1, r4
 8009918:	f811 3b01 	ldrb.w	r3, [r1], #1
 800991c:	3b30      	subs	r3, #48	; 0x30
 800991e:	2b09      	cmp	r3, #9
 8009920:	d94d      	bls.n	80099be <_vfiprintf_r+0x1a6>
 8009922:	b1b0      	cbz	r0, 8009952 <_vfiprintf_r+0x13a>
 8009924:	9207      	str	r2, [sp, #28]
 8009926:	e014      	b.n	8009952 <_vfiprintf_r+0x13a>
 8009928:	eba0 0308 	sub.w	r3, r0, r8
 800992c:	fa09 f303 	lsl.w	r3, r9, r3
 8009930:	4313      	orrs	r3, r2
 8009932:	9304      	str	r3, [sp, #16]
 8009934:	46a2      	mov	sl, r4
 8009936:	e7d2      	b.n	80098de <_vfiprintf_r+0xc6>
 8009938:	9b03      	ldr	r3, [sp, #12]
 800993a:	1d19      	adds	r1, r3, #4
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	9103      	str	r1, [sp, #12]
 8009940:	2b00      	cmp	r3, #0
 8009942:	bfbb      	ittet	lt
 8009944:	425b      	neglt	r3, r3
 8009946:	f042 0202 	orrlt.w	r2, r2, #2
 800994a:	9307      	strge	r3, [sp, #28]
 800994c:	9307      	strlt	r3, [sp, #28]
 800994e:	bfb8      	it	lt
 8009950:	9204      	strlt	r2, [sp, #16]
 8009952:	7823      	ldrb	r3, [r4, #0]
 8009954:	2b2e      	cmp	r3, #46	; 0x2e
 8009956:	d10c      	bne.n	8009972 <_vfiprintf_r+0x15a>
 8009958:	7863      	ldrb	r3, [r4, #1]
 800995a:	2b2a      	cmp	r3, #42	; 0x2a
 800995c:	d134      	bne.n	80099c8 <_vfiprintf_r+0x1b0>
 800995e:	9b03      	ldr	r3, [sp, #12]
 8009960:	1d1a      	adds	r2, r3, #4
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	9203      	str	r2, [sp, #12]
 8009966:	2b00      	cmp	r3, #0
 8009968:	bfb8      	it	lt
 800996a:	f04f 33ff 	movlt.w	r3, #4294967295
 800996e:	3402      	adds	r4, #2
 8009970:	9305      	str	r3, [sp, #20]
 8009972:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009a48 <_vfiprintf_r+0x230>
 8009976:	7821      	ldrb	r1, [r4, #0]
 8009978:	2203      	movs	r2, #3
 800997a:	4650      	mov	r0, sl
 800997c:	f7f6 fc38 	bl	80001f0 <memchr>
 8009980:	b138      	cbz	r0, 8009992 <_vfiprintf_r+0x17a>
 8009982:	9b04      	ldr	r3, [sp, #16]
 8009984:	eba0 000a 	sub.w	r0, r0, sl
 8009988:	2240      	movs	r2, #64	; 0x40
 800998a:	4082      	lsls	r2, r0
 800998c:	4313      	orrs	r3, r2
 800998e:	3401      	adds	r4, #1
 8009990:	9304      	str	r3, [sp, #16]
 8009992:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009996:	4829      	ldr	r0, [pc, #164]	; (8009a3c <_vfiprintf_r+0x224>)
 8009998:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800999c:	2206      	movs	r2, #6
 800999e:	f7f6 fc27 	bl	80001f0 <memchr>
 80099a2:	2800      	cmp	r0, #0
 80099a4:	d03f      	beq.n	8009a26 <_vfiprintf_r+0x20e>
 80099a6:	4b26      	ldr	r3, [pc, #152]	; (8009a40 <_vfiprintf_r+0x228>)
 80099a8:	bb1b      	cbnz	r3, 80099f2 <_vfiprintf_r+0x1da>
 80099aa:	9b03      	ldr	r3, [sp, #12]
 80099ac:	3307      	adds	r3, #7
 80099ae:	f023 0307 	bic.w	r3, r3, #7
 80099b2:	3308      	adds	r3, #8
 80099b4:	9303      	str	r3, [sp, #12]
 80099b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099b8:	443b      	add	r3, r7
 80099ba:	9309      	str	r3, [sp, #36]	; 0x24
 80099bc:	e768      	b.n	8009890 <_vfiprintf_r+0x78>
 80099be:	fb0c 3202 	mla	r2, ip, r2, r3
 80099c2:	460c      	mov	r4, r1
 80099c4:	2001      	movs	r0, #1
 80099c6:	e7a6      	b.n	8009916 <_vfiprintf_r+0xfe>
 80099c8:	2300      	movs	r3, #0
 80099ca:	3401      	adds	r4, #1
 80099cc:	9305      	str	r3, [sp, #20]
 80099ce:	4619      	mov	r1, r3
 80099d0:	f04f 0c0a 	mov.w	ip, #10
 80099d4:	4620      	mov	r0, r4
 80099d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099da:	3a30      	subs	r2, #48	; 0x30
 80099dc:	2a09      	cmp	r2, #9
 80099de:	d903      	bls.n	80099e8 <_vfiprintf_r+0x1d0>
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d0c6      	beq.n	8009972 <_vfiprintf_r+0x15a>
 80099e4:	9105      	str	r1, [sp, #20]
 80099e6:	e7c4      	b.n	8009972 <_vfiprintf_r+0x15a>
 80099e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80099ec:	4604      	mov	r4, r0
 80099ee:	2301      	movs	r3, #1
 80099f0:	e7f0      	b.n	80099d4 <_vfiprintf_r+0x1bc>
 80099f2:	ab03      	add	r3, sp, #12
 80099f4:	9300      	str	r3, [sp, #0]
 80099f6:	462a      	mov	r2, r5
 80099f8:	4b12      	ldr	r3, [pc, #72]	; (8009a44 <_vfiprintf_r+0x22c>)
 80099fa:	a904      	add	r1, sp, #16
 80099fc:	4630      	mov	r0, r6
 80099fe:	f7fd fe15 	bl	800762c <_printf_float>
 8009a02:	4607      	mov	r7, r0
 8009a04:	1c78      	adds	r0, r7, #1
 8009a06:	d1d6      	bne.n	80099b6 <_vfiprintf_r+0x19e>
 8009a08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a0a:	07d9      	lsls	r1, r3, #31
 8009a0c:	d405      	bmi.n	8009a1a <_vfiprintf_r+0x202>
 8009a0e:	89ab      	ldrh	r3, [r5, #12]
 8009a10:	059a      	lsls	r2, r3, #22
 8009a12:	d402      	bmi.n	8009a1a <_vfiprintf_r+0x202>
 8009a14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a16:	f7fe fbcd 	bl	80081b4 <__retarget_lock_release_recursive>
 8009a1a:	89ab      	ldrh	r3, [r5, #12]
 8009a1c:	065b      	lsls	r3, r3, #25
 8009a1e:	f53f af1d 	bmi.w	800985c <_vfiprintf_r+0x44>
 8009a22:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a24:	e71c      	b.n	8009860 <_vfiprintf_r+0x48>
 8009a26:	ab03      	add	r3, sp, #12
 8009a28:	9300      	str	r3, [sp, #0]
 8009a2a:	462a      	mov	r2, r5
 8009a2c:	4b05      	ldr	r3, [pc, #20]	; (8009a44 <_vfiprintf_r+0x22c>)
 8009a2e:	a904      	add	r1, sp, #16
 8009a30:	4630      	mov	r0, r6
 8009a32:	f7fe f89f 	bl	8007b74 <_printf_i>
 8009a36:	e7e4      	b.n	8009a02 <_vfiprintf_r+0x1ea>
 8009a38:	0800a2ec 	.word	0x0800a2ec
 8009a3c:	0800a2f6 	.word	0x0800a2f6
 8009a40:	0800762d 	.word	0x0800762d
 8009a44:	080097f3 	.word	0x080097f3
 8009a48:	0800a2f2 	.word	0x0800a2f2

08009a4c <__sflush_r>:
 8009a4c:	898a      	ldrh	r2, [r1, #12]
 8009a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a52:	4605      	mov	r5, r0
 8009a54:	0710      	lsls	r0, r2, #28
 8009a56:	460c      	mov	r4, r1
 8009a58:	d458      	bmi.n	8009b0c <__sflush_r+0xc0>
 8009a5a:	684b      	ldr	r3, [r1, #4]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	dc05      	bgt.n	8009a6c <__sflush_r+0x20>
 8009a60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	dc02      	bgt.n	8009a6c <__sflush_r+0x20>
 8009a66:	2000      	movs	r0, #0
 8009a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a6e:	2e00      	cmp	r6, #0
 8009a70:	d0f9      	beq.n	8009a66 <__sflush_r+0x1a>
 8009a72:	2300      	movs	r3, #0
 8009a74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009a78:	682f      	ldr	r7, [r5, #0]
 8009a7a:	6a21      	ldr	r1, [r4, #32]
 8009a7c:	602b      	str	r3, [r5, #0]
 8009a7e:	d032      	beq.n	8009ae6 <__sflush_r+0x9a>
 8009a80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a82:	89a3      	ldrh	r3, [r4, #12]
 8009a84:	075a      	lsls	r2, r3, #29
 8009a86:	d505      	bpl.n	8009a94 <__sflush_r+0x48>
 8009a88:	6863      	ldr	r3, [r4, #4]
 8009a8a:	1ac0      	subs	r0, r0, r3
 8009a8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a8e:	b10b      	cbz	r3, 8009a94 <__sflush_r+0x48>
 8009a90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a92:	1ac0      	subs	r0, r0, r3
 8009a94:	2300      	movs	r3, #0
 8009a96:	4602      	mov	r2, r0
 8009a98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a9a:	6a21      	ldr	r1, [r4, #32]
 8009a9c:	4628      	mov	r0, r5
 8009a9e:	47b0      	blx	r6
 8009aa0:	1c43      	adds	r3, r0, #1
 8009aa2:	89a3      	ldrh	r3, [r4, #12]
 8009aa4:	d106      	bne.n	8009ab4 <__sflush_r+0x68>
 8009aa6:	6829      	ldr	r1, [r5, #0]
 8009aa8:	291d      	cmp	r1, #29
 8009aaa:	d82b      	bhi.n	8009b04 <__sflush_r+0xb8>
 8009aac:	4a29      	ldr	r2, [pc, #164]	; (8009b54 <__sflush_r+0x108>)
 8009aae:	410a      	asrs	r2, r1
 8009ab0:	07d6      	lsls	r6, r2, #31
 8009ab2:	d427      	bmi.n	8009b04 <__sflush_r+0xb8>
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	6062      	str	r2, [r4, #4]
 8009ab8:	04d9      	lsls	r1, r3, #19
 8009aba:	6922      	ldr	r2, [r4, #16]
 8009abc:	6022      	str	r2, [r4, #0]
 8009abe:	d504      	bpl.n	8009aca <__sflush_r+0x7e>
 8009ac0:	1c42      	adds	r2, r0, #1
 8009ac2:	d101      	bne.n	8009ac8 <__sflush_r+0x7c>
 8009ac4:	682b      	ldr	r3, [r5, #0]
 8009ac6:	b903      	cbnz	r3, 8009aca <__sflush_r+0x7e>
 8009ac8:	6560      	str	r0, [r4, #84]	; 0x54
 8009aca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009acc:	602f      	str	r7, [r5, #0]
 8009ace:	2900      	cmp	r1, #0
 8009ad0:	d0c9      	beq.n	8009a66 <__sflush_r+0x1a>
 8009ad2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ad6:	4299      	cmp	r1, r3
 8009ad8:	d002      	beq.n	8009ae0 <__sflush_r+0x94>
 8009ada:	4628      	mov	r0, r5
 8009adc:	f7ff f9f6 	bl	8008ecc <_free_r>
 8009ae0:	2000      	movs	r0, #0
 8009ae2:	6360      	str	r0, [r4, #52]	; 0x34
 8009ae4:	e7c0      	b.n	8009a68 <__sflush_r+0x1c>
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	4628      	mov	r0, r5
 8009aea:	47b0      	blx	r6
 8009aec:	1c41      	adds	r1, r0, #1
 8009aee:	d1c8      	bne.n	8009a82 <__sflush_r+0x36>
 8009af0:	682b      	ldr	r3, [r5, #0]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d0c5      	beq.n	8009a82 <__sflush_r+0x36>
 8009af6:	2b1d      	cmp	r3, #29
 8009af8:	d001      	beq.n	8009afe <__sflush_r+0xb2>
 8009afa:	2b16      	cmp	r3, #22
 8009afc:	d101      	bne.n	8009b02 <__sflush_r+0xb6>
 8009afe:	602f      	str	r7, [r5, #0]
 8009b00:	e7b1      	b.n	8009a66 <__sflush_r+0x1a>
 8009b02:	89a3      	ldrh	r3, [r4, #12]
 8009b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b08:	81a3      	strh	r3, [r4, #12]
 8009b0a:	e7ad      	b.n	8009a68 <__sflush_r+0x1c>
 8009b0c:	690f      	ldr	r7, [r1, #16]
 8009b0e:	2f00      	cmp	r7, #0
 8009b10:	d0a9      	beq.n	8009a66 <__sflush_r+0x1a>
 8009b12:	0793      	lsls	r3, r2, #30
 8009b14:	680e      	ldr	r6, [r1, #0]
 8009b16:	bf08      	it	eq
 8009b18:	694b      	ldreq	r3, [r1, #20]
 8009b1a:	600f      	str	r7, [r1, #0]
 8009b1c:	bf18      	it	ne
 8009b1e:	2300      	movne	r3, #0
 8009b20:	eba6 0807 	sub.w	r8, r6, r7
 8009b24:	608b      	str	r3, [r1, #8]
 8009b26:	f1b8 0f00 	cmp.w	r8, #0
 8009b2a:	dd9c      	ble.n	8009a66 <__sflush_r+0x1a>
 8009b2c:	6a21      	ldr	r1, [r4, #32]
 8009b2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009b30:	4643      	mov	r3, r8
 8009b32:	463a      	mov	r2, r7
 8009b34:	4628      	mov	r0, r5
 8009b36:	47b0      	blx	r6
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	dc06      	bgt.n	8009b4a <__sflush_r+0xfe>
 8009b3c:	89a3      	ldrh	r3, [r4, #12]
 8009b3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b42:	81a3      	strh	r3, [r4, #12]
 8009b44:	f04f 30ff 	mov.w	r0, #4294967295
 8009b48:	e78e      	b.n	8009a68 <__sflush_r+0x1c>
 8009b4a:	4407      	add	r7, r0
 8009b4c:	eba8 0800 	sub.w	r8, r8, r0
 8009b50:	e7e9      	b.n	8009b26 <__sflush_r+0xda>
 8009b52:	bf00      	nop
 8009b54:	dfbffffe 	.word	0xdfbffffe

08009b58 <_fflush_r>:
 8009b58:	b538      	push	{r3, r4, r5, lr}
 8009b5a:	690b      	ldr	r3, [r1, #16]
 8009b5c:	4605      	mov	r5, r0
 8009b5e:	460c      	mov	r4, r1
 8009b60:	b913      	cbnz	r3, 8009b68 <_fflush_r+0x10>
 8009b62:	2500      	movs	r5, #0
 8009b64:	4628      	mov	r0, r5
 8009b66:	bd38      	pop	{r3, r4, r5, pc}
 8009b68:	b118      	cbz	r0, 8009b72 <_fflush_r+0x1a>
 8009b6a:	6a03      	ldr	r3, [r0, #32]
 8009b6c:	b90b      	cbnz	r3, 8009b72 <_fflush_r+0x1a>
 8009b6e:	f7fe f9af 	bl	8007ed0 <__sinit>
 8009b72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d0f3      	beq.n	8009b62 <_fflush_r+0xa>
 8009b7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b7c:	07d0      	lsls	r0, r2, #31
 8009b7e:	d404      	bmi.n	8009b8a <_fflush_r+0x32>
 8009b80:	0599      	lsls	r1, r3, #22
 8009b82:	d402      	bmi.n	8009b8a <_fflush_r+0x32>
 8009b84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b86:	f7fe fb14 	bl	80081b2 <__retarget_lock_acquire_recursive>
 8009b8a:	4628      	mov	r0, r5
 8009b8c:	4621      	mov	r1, r4
 8009b8e:	f7ff ff5d 	bl	8009a4c <__sflush_r>
 8009b92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b94:	07da      	lsls	r2, r3, #31
 8009b96:	4605      	mov	r5, r0
 8009b98:	d4e4      	bmi.n	8009b64 <_fflush_r+0xc>
 8009b9a:	89a3      	ldrh	r3, [r4, #12]
 8009b9c:	059b      	lsls	r3, r3, #22
 8009b9e:	d4e1      	bmi.n	8009b64 <_fflush_r+0xc>
 8009ba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ba2:	f7fe fb07 	bl	80081b4 <__retarget_lock_release_recursive>
 8009ba6:	e7dd      	b.n	8009b64 <_fflush_r+0xc>

08009ba8 <__swbuf_r>:
 8009ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009baa:	460e      	mov	r6, r1
 8009bac:	4614      	mov	r4, r2
 8009bae:	4605      	mov	r5, r0
 8009bb0:	b118      	cbz	r0, 8009bba <__swbuf_r+0x12>
 8009bb2:	6a03      	ldr	r3, [r0, #32]
 8009bb4:	b90b      	cbnz	r3, 8009bba <__swbuf_r+0x12>
 8009bb6:	f7fe f98b 	bl	8007ed0 <__sinit>
 8009bba:	69a3      	ldr	r3, [r4, #24]
 8009bbc:	60a3      	str	r3, [r4, #8]
 8009bbe:	89a3      	ldrh	r3, [r4, #12]
 8009bc0:	071a      	lsls	r2, r3, #28
 8009bc2:	d525      	bpl.n	8009c10 <__swbuf_r+0x68>
 8009bc4:	6923      	ldr	r3, [r4, #16]
 8009bc6:	b31b      	cbz	r3, 8009c10 <__swbuf_r+0x68>
 8009bc8:	6823      	ldr	r3, [r4, #0]
 8009bca:	6922      	ldr	r2, [r4, #16]
 8009bcc:	1a98      	subs	r0, r3, r2
 8009bce:	6963      	ldr	r3, [r4, #20]
 8009bd0:	b2f6      	uxtb	r6, r6
 8009bd2:	4283      	cmp	r3, r0
 8009bd4:	4637      	mov	r7, r6
 8009bd6:	dc04      	bgt.n	8009be2 <__swbuf_r+0x3a>
 8009bd8:	4621      	mov	r1, r4
 8009bda:	4628      	mov	r0, r5
 8009bdc:	f7ff ffbc 	bl	8009b58 <_fflush_r>
 8009be0:	b9e0      	cbnz	r0, 8009c1c <__swbuf_r+0x74>
 8009be2:	68a3      	ldr	r3, [r4, #8]
 8009be4:	3b01      	subs	r3, #1
 8009be6:	60a3      	str	r3, [r4, #8]
 8009be8:	6823      	ldr	r3, [r4, #0]
 8009bea:	1c5a      	adds	r2, r3, #1
 8009bec:	6022      	str	r2, [r4, #0]
 8009bee:	701e      	strb	r6, [r3, #0]
 8009bf0:	6962      	ldr	r2, [r4, #20]
 8009bf2:	1c43      	adds	r3, r0, #1
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d004      	beq.n	8009c02 <__swbuf_r+0x5a>
 8009bf8:	89a3      	ldrh	r3, [r4, #12]
 8009bfa:	07db      	lsls	r3, r3, #31
 8009bfc:	d506      	bpl.n	8009c0c <__swbuf_r+0x64>
 8009bfe:	2e0a      	cmp	r6, #10
 8009c00:	d104      	bne.n	8009c0c <__swbuf_r+0x64>
 8009c02:	4621      	mov	r1, r4
 8009c04:	4628      	mov	r0, r5
 8009c06:	f7ff ffa7 	bl	8009b58 <_fflush_r>
 8009c0a:	b938      	cbnz	r0, 8009c1c <__swbuf_r+0x74>
 8009c0c:	4638      	mov	r0, r7
 8009c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c10:	4621      	mov	r1, r4
 8009c12:	4628      	mov	r0, r5
 8009c14:	f000 f806 	bl	8009c24 <__swsetup_r>
 8009c18:	2800      	cmp	r0, #0
 8009c1a:	d0d5      	beq.n	8009bc8 <__swbuf_r+0x20>
 8009c1c:	f04f 37ff 	mov.w	r7, #4294967295
 8009c20:	e7f4      	b.n	8009c0c <__swbuf_r+0x64>
	...

08009c24 <__swsetup_r>:
 8009c24:	b538      	push	{r3, r4, r5, lr}
 8009c26:	4b2a      	ldr	r3, [pc, #168]	; (8009cd0 <__swsetup_r+0xac>)
 8009c28:	4605      	mov	r5, r0
 8009c2a:	6818      	ldr	r0, [r3, #0]
 8009c2c:	460c      	mov	r4, r1
 8009c2e:	b118      	cbz	r0, 8009c38 <__swsetup_r+0x14>
 8009c30:	6a03      	ldr	r3, [r0, #32]
 8009c32:	b90b      	cbnz	r3, 8009c38 <__swsetup_r+0x14>
 8009c34:	f7fe f94c 	bl	8007ed0 <__sinit>
 8009c38:	89a3      	ldrh	r3, [r4, #12]
 8009c3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c3e:	0718      	lsls	r0, r3, #28
 8009c40:	d422      	bmi.n	8009c88 <__swsetup_r+0x64>
 8009c42:	06d9      	lsls	r1, r3, #27
 8009c44:	d407      	bmi.n	8009c56 <__swsetup_r+0x32>
 8009c46:	2309      	movs	r3, #9
 8009c48:	602b      	str	r3, [r5, #0]
 8009c4a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009c4e:	81a3      	strh	r3, [r4, #12]
 8009c50:	f04f 30ff 	mov.w	r0, #4294967295
 8009c54:	e034      	b.n	8009cc0 <__swsetup_r+0x9c>
 8009c56:	0758      	lsls	r0, r3, #29
 8009c58:	d512      	bpl.n	8009c80 <__swsetup_r+0x5c>
 8009c5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c5c:	b141      	cbz	r1, 8009c70 <__swsetup_r+0x4c>
 8009c5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c62:	4299      	cmp	r1, r3
 8009c64:	d002      	beq.n	8009c6c <__swsetup_r+0x48>
 8009c66:	4628      	mov	r0, r5
 8009c68:	f7ff f930 	bl	8008ecc <_free_r>
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	6363      	str	r3, [r4, #52]	; 0x34
 8009c70:	89a3      	ldrh	r3, [r4, #12]
 8009c72:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c76:	81a3      	strh	r3, [r4, #12]
 8009c78:	2300      	movs	r3, #0
 8009c7a:	6063      	str	r3, [r4, #4]
 8009c7c:	6923      	ldr	r3, [r4, #16]
 8009c7e:	6023      	str	r3, [r4, #0]
 8009c80:	89a3      	ldrh	r3, [r4, #12]
 8009c82:	f043 0308 	orr.w	r3, r3, #8
 8009c86:	81a3      	strh	r3, [r4, #12]
 8009c88:	6923      	ldr	r3, [r4, #16]
 8009c8a:	b94b      	cbnz	r3, 8009ca0 <__swsetup_r+0x7c>
 8009c8c:	89a3      	ldrh	r3, [r4, #12]
 8009c8e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c96:	d003      	beq.n	8009ca0 <__swsetup_r+0x7c>
 8009c98:	4621      	mov	r1, r4
 8009c9a:	4628      	mov	r0, r5
 8009c9c:	f000 f8b6 	bl	8009e0c <__smakebuf_r>
 8009ca0:	89a0      	ldrh	r0, [r4, #12]
 8009ca2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ca6:	f010 0301 	ands.w	r3, r0, #1
 8009caa:	d00a      	beq.n	8009cc2 <__swsetup_r+0x9e>
 8009cac:	2300      	movs	r3, #0
 8009cae:	60a3      	str	r3, [r4, #8]
 8009cb0:	6963      	ldr	r3, [r4, #20]
 8009cb2:	425b      	negs	r3, r3
 8009cb4:	61a3      	str	r3, [r4, #24]
 8009cb6:	6923      	ldr	r3, [r4, #16]
 8009cb8:	b943      	cbnz	r3, 8009ccc <__swsetup_r+0xa8>
 8009cba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009cbe:	d1c4      	bne.n	8009c4a <__swsetup_r+0x26>
 8009cc0:	bd38      	pop	{r3, r4, r5, pc}
 8009cc2:	0781      	lsls	r1, r0, #30
 8009cc4:	bf58      	it	pl
 8009cc6:	6963      	ldrpl	r3, [r4, #20]
 8009cc8:	60a3      	str	r3, [r4, #8]
 8009cca:	e7f4      	b.n	8009cb6 <__swsetup_r+0x92>
 8009ccc:	2000      	movs	r0, #0
 8009cce:	e7f7      	b.n	8009cc0 <__swsetup_r+0x9c>
 8009cd0:	20000068 	.word	0x20000068

08009cd4 <_sbrk_r>:
 8009cd4:	b538      	push	{r3, r4, r5, lr}
 8009cd6:	4d06      	ldr	r5, [pc, #24]	; (8009cf0 <_sbrk_r+0x1c>)
 8009cd8:	2300      	movs	r3, #0
 8009cda:	4604      	mov	r4, r0
 8009cdc:	4608      	mov	r0, r1
 8009cde:	602b      	str	r3, [r5, #0]
 8009ce0:	f7f7 fc6e 	bl	80015c0 <_sbrk>
 8009ce4:	1c43      	adds	r3, r0, #1
 8009ce6:	d102      	bne.n	8009cee <_sbrk_r+0x1a>
 8009ce8:	682b      	ldr	r3, [r5, #0]
 8009cea:	b103      	cbz	r3, 8009cee <_sbrk_r+0x1a>
 8009cec:	6023      	str	r3, [r4, #0]
 8009cee:	bd38      	pop	{r3, r4, r5, pc}
 8009cf0:	20001dfc 	.word	0x20001dfc

08009cf4 <__assert_func>:
 8009cf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009cf6:	4614      	mov	r4, r2
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	4b09      	ldr	r3, [pc, #36]	; (8009d20 <__assert_func+0x2c>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4605      	mov	r5, r0
 8009d00:	68d8      	ldr	r0, [r3, #12]
 8009d02:	b14c      	cbz	r4, 8009d18 <__assert_func+0x24>
 8009d04:	4b07      	ldr	r3, [pc, #28]	; (8009d24 <__assert_func+0x30>)
 8009d06:	9100      	str	r1, [sp, #0]
 8009d08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d0c:	4906      	ldr	r1, [pc, #24]	; (8009d28 <__assert_func+0x34>)
 8009d0e:	462b      	mov	r3, r5
 8009d10:	f000 f844 	bl	8009d9c <fiprintf>
 8009d14:	f000 f8d8 	bl	8009ec8 <abort>
 8009d18:	4b04      	ldr	r3, [pc, #16]	; (8009d2c <__assert_func+0x38>)
 8009d1a:	461c      	mov	r4, r3
 8009d1c:	e7f3      	b.n	8009d06 <__assert_func+0x12>
 8009d1e:	bf00      	nop
 8009d20:	20000068 	.word	0x20000068
 8009d24:	0800a307 	.word	0x0800a307
 8009d28:	0800a314 	.word	0x0800a314
 8009d2c:	0800a342 	.word	0x0800a342

08009d30 <_calloc_r>:
 8009d30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d32:	fba1 2402 	umull	r2, r4, r1, r2
 8009d36:	b94c      	cbnz	r4, 8009d4c <_calloc_r+0x1c>
 8009d38:	4611      	mov	r1, r2
 8009d3a:	9201      	str	r2, [sp, #4]
 8009d3c:	f7ff f93a 	bl	8008fb4 <_malloc_r>
 8009d40:	9a01      	ldr	r2, [sp, #4]
 8009d42:	4605      	mov	r5, r0
 8009d44:	b930      	cbnz	r0, 8009d54 <_calloc_r+0x24>
 8009d46:	4628      	mov	r0, r5
 8009d48:	b003      	add	sp, #12
 8009d4a:	bd30      	pop	{r4, r5, pc}
 8009d4c:	220c      	movs	r2, #12
 8009d4e:	6002      	str	r2, [r0, #0]
 8009d50:	2500      	movs	r5, #0
 8009d52:	e7f8      	b.n	8009d46 <_calloc_r+0x16>
 8009d54:	4621      	mov	r1, r4
 8009d56:	f7fe f946 	bl	8007fe6 <memset>
 8009d5a:	e7f4      	b.n	8009d46 <_calloc_r+0x16>

08009d5c <__ascii_mbtowc>:
 8009d5c:	b082      	sub	sp, #8
 8009d5e:	b901      	cbnz	r1, 8009d62 <__ascii_mbtowc+0x6>
 8009d60:	a901      	add	r1, sp, #4
 8009d62:	b142      	cbz	r2, 8009d76 <__ascii_mbtowc+0x1a>
 8009d64:	b14b      	cbz	r3, 8009d7a <__ascii_mbtowc+0x1e>
 8009d66:	7813      	ldrb	r3, [r2, #0]
 8009d68:	600b      	str	r3, [r1, #0]
 8009d6a:	7812      	ldrb	r2, [r2, #0]
 8009d6c:	1e10      	subs	r0, r2, #0
 8009d6e:	bf18      	it	ne
 8009d70:	2001      	movne	r0, #1
 8009d72:	b002      	add	sp, #8
 8009d74:	4770      	bx	lr
 8009d76:	4610      	mov	r0, r2
 8009d78:	e7fb      	b.n	8009d72 <__ascii_mbtowc+0x16>
 8009d7a:	f06f 0001 	mvn.w	r0, #1
 8009d7e:	e7f8      	b.n	8009d72 <__ascii_mbtowc+0x16>

08009d80 <__ascii_wctomb>:
 8009d80:	b149      	cbz	r1, 8009d96 <__ascii_wctomb+0x16>
 8009d82:	2aff      	cmp	r2, #255	; 0xff
 8009d84:	bf85      	ittet	hi
 8009d86:	238a      	movhi	r3, #138	; 0x8a
 8009d88:	6003      	strhi	r3, [r0, #0]
 8009d8a:	700a      	strbls	r2, [r1, #0]
 8009d8c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009d90:	bf98      	it	ls
 8009d92:	2001      	movls	r0, #1
 8009d94:	4770      	bx	lr
 8009d96:	4608      	mov	r0, r1
 8009d98:	4770      	bx	lr
	...

08009d9c <fiprintf>:
 8009d9c:	b40e      	push	{r1, r2, r3}
 8009d9e:	b503      	push	{r0, r1, lr}
 8009da0:	4601      	mov	r1, r0
 8009da2:	ab03      	add	r3, sp, #12
 8009da4:	4805      	ldr	r0, [pc, #20]	; (8009dbc <fiprintf+0x20>)
 8009da6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009daa:	6800      	ldr	r0, [r0, #0]
 8009dac:	9301      	str	r3, [sp, #4]
 8009dae:	f7ff fd33 	bl	8009818 <_vfiprintf_r>
 8009db2:	b002      	add	sp, #8
 8009db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009db8:	b003      	add	sp, #12
 8009dba:	4770      	bx	lr
 8009dbc:	20000068 	.word	0x20000068

08009dc0 <__swhatbuf_r>:
 8009dc0:	b570      	push	{r4, r5, r6, lr}
 8009dc2:	460c      	mov	r4, r1
 8009dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dc8:	2900      	cmp	r1, #0
 8009dca:	b096      	sub	sp, #88	; 0x58
 8009dcc:	4615      	mov	r5, r2
 8009dce:	461e      	mov	r6, r3
 8009dd0:	da0d      	bge.n	8009dee <__swhatbuf_r+0x2e>
 8009dd2:	89a3      	ldrh	r3, [r4, #12]
 8009dd4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009dd8:	f04f 0100 	mov.w	r1, #0
 8009ddc:	bf0c      	ite	eq
 8009dde:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009de2:	2340      	movne	r3, #64	; 0x40
 8009de4:	2000      	movs	r0, #0
 8009de6:	6031      	str	r1, [r6, #0]
 8009de8:	602b      	str	r3, [r5, #0]
 8009dea:	b016      	add	sp, #88	; 0x58
 8009dec:	bd70      	pop	{r4, r5, r6, pc}
 8009dee:	466a      	mov	r2, sp
 8009df0:	f000 f848 	bl	8009e84 <_fstat_r>
 8009df4:	2800      	cmp	r0, #0
 8009df6:	dbec      	blt.n	8009dd2 <__swhatbuf_r+0x12>
 8009df8:	9901      	ldr	r1, [sp, #4]
 8009dfa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009dfe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009e02:	4259      	negs	r1, r3
 8009e04:	4159      	adcs	r1, r3
 8009e06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e0a:	e7eb      	b.n	8009de4 <__swhatbuf_r+0x24>

08009e0c <__smakebuf_r>:
 8009e0c:	898b      	ldrh	r3, [r1, #12]
 8009e0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e10:	079d      	lsls	r5, r3, #30
 8009e12:	4606      	mov	r6, r0
 8009e14:	460c      	mov	r4, r1
 8009e16:	d507      	bpl.n	8009e28 <__smakebuf_r+0x1c>
 8009e18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e1c:	6023      	str	r3, [r4, #0]
 8009e1e:	6123      	str	r3, [r4, #16]
 8009e20:	2301      	movs	r3, #1
 8009e22:	6163      	str	r3, [r4, #20]
 8009e24:	b002      	add	sp, #8
 8009e26:	bd70      	pop	{r4, r5, r6, pc}
 8009e28:	ab01      	add	r3, sp, #4
 8009e2a:	466a      	mov	r2, sp
 8009e2c:	f7ff ffc8 	bl	8009dc0 <__swhatbuf_r>
 8009e30:	9900      	ldr	r1, [sp, #0]
 8009e32:	4605      	mov	r5, r0
 8009e34:	4630      	mov	r0, r6
 8009e36:	f7ff f8bd 	bl	8008fb4 <_malloc_r>
 8009e3a:	b948      	cbnz	r0, 8009e50 <__smakebuf_r+0x44>
 8009e3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e40:	059a      	lsls	r2, r3, #22
 8009e42:	d4ef      	bmi.n	8009e24 <__smakebuf_r+0x18>
 8009e44:	f023 0303 	bic.w	r3, r3, #3
 8009e48:	f043 0302 	orr.w	r3, r3, #2
 8009e4c:	81a3      	strh	r3, [r4, #12]
 8009e4e:	e7e3      	b.n	8009e18 <__smakebuf_r+0xc>
 8009e50:	89a3      	ldrh	r3, [r4, #12]
 8009e52:	6020      	str	r0, [r4, #0]
 8009e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e58:	81a3      	strh	r3, [r4, #12]
 8009e5a:	9b00      	ldr	r3, [sp, #0]
 8009e5c:	6163      	str	r3, [r4, #20]
 8009e5e:	9b01      	ldr	r3, [sp, #4]
 8009e60:	6120      	str	r0, [r4, #16]
 8009e62:	b15b      	cbz	r3, 8009e7c <__smakebuf_r+0x70>
 8009e64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e68:	4630      	mov	r0, r6
 8009e6a:	f000 f81d 	bl	8009ea8 <_isatty_r>
 8009e6e:	b128      	cbz	r0, 8009e7c <__smakebuf_r+0x70>
 8009e70:	89a3      	ldrh	r3, [r4, #12]
 8009e72:	f023 0303 	bic.w	r3, r3, #3
 8009e76:	f043 0301 	orr.w	r3, r3, #1
 8009e7a:	81a3      	strh	r3, [r4, #12]
 8009e7c:	89a3      	ldrh	r3, [r4, #12]
 8009e7e:	431d      	orrs	r5, r3
 8009e80:	81a5      	strh	r5, [r4, #12]
 8009e82:	e7cf      	b.n	8009e24 <__smakebuf_r+0x18>

08009e84 <_fstat_r>:
 8009e84:	b538      	push	{r3, r4, r5, lr}
 8009e86:	4d07      	ldr	r5, [pc, #28]	; (8009ea4 <_fstat_r+0x20>)
 8009e88:	2300      	movs	r3, #0
 8009e8a:	4604      	mov	r4, r0
 8009e8c:	4608      	mov	r0, r1
 8009e8e:	4611      	mov	r1, r2
 8009e90:	602b      	str	r3, [r5, #0]
 8009e92:	f7f7 fb6c 	bl	800156e <_fstat>
 8009e96:	1c43      	adds	r3, r0, #1
 8009e98:	d102      	bne.n	8009ea0 <_fstat_r+0x1c>
 8009e9a:	682b      	ldr	r3, [r5, #0]
 8009e9c:	b103      	cbz	r3, 8009ea0 <_fstat_r+0x1c>
 8009e9e:	6023      	str	r3, [r4, #0]
 8009ea0:	bd38      	pop	{r3, r4, r5, pc}
 8009ea2:	bf00      	nop
 8009ea4:	20001dfc 	.word	0x20001dfc

08009ea8 <_isatty_r>:
 8009ea8:	b538      	push	{r3, r4, r5, lr}
 8009eaa:	4d06      	ldr	r5, [pc, #24]	; (8009ec4 <_isatty_r+0x1c>)
 8009eac:	2300      	movs	r3, #0
 8009eae:	4604      	mov	r4, r0
 8009eb0:	4608      	mov	r0, r1
 8009eb2:	602b      	str	r3, [r5, #0]
 8009eb4:	f7f7 fb6b 	bl	800158e <_isatty>
 8009eb8:	1c43      	adds	r3, r0, #1
 8009eba:	d102      	bne.n	8009ec2 <_isatty_r+0x1a>
 8009ebc:	682b      	ldr	r3, [r5, #0]
 8009ebe:	b103      	cbz	r3, 8009ec2 <_isatty_r+0x1a>
 8009ec0:	6023      	str	r3, [r4, #0]
 8009ec2:	bd38      	pop	{r3, r4, r5, pc}
 8009ec4:	20001dfc 	.word	0x20001dfc

08009ec8 <abort>:
 8009ec8:	b508      	push	{r3, lr}
 8009eca:	2006      	movs	r0, #6
 8009ecc:	f000 f82c 	bl	8009f28 <raise>
 8009ed0:	2001      	movs	r0, #1
 8009ed2:	f7f7 fafd 	bl	80014d0 <_exit>

08009ed6 <_raise_r>:
 8009ed6:	291f      	cmp	r1, #31
 8009ed8:	b538      	push	{r3, r4, r5, lr}
 8009eda:	4604      	mov	r4, r0
 8009edc:	460d      	mov	r5, r1
 8009ede:	d904      	bls.n	8009eea <_raise_r+0x14>
 8009ee0:	2316      	movs	r3, #22
 8009ee2:	6003      	str	r3, [r0, #0]
 8009ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee8:	bd38      	pop	{r3, r4, r5, pc}
 8009eea:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009eec:	b112      	cbz	r2, 8009ef4 <_raise_r+0x1e>
 8009eee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ef2:	b94b      	cbnz	r3, 8009f08 <_raise_r+0x32>
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	f000 f831 	bl	8009f5c <_getpid_r>
 8009efa:	462a      	mov	r2, r5
 8009efc:	4601      	mov	r1, r0
 8009efe:	4620      	mov	r0, r4
 8009f00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f04:	f000 b818 	b.w	8009f38 <_kill_r>
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d00a      	beq.n	8009f22 <_raise_r+0x4c>
 8009f0c:	1c59      	adds	r1, r3, #1
 8009f0e:	d103      	bne.n	8009f18 <_raise_r+0x42>
 8009f10:	2316      	movs	r3, #22
 8009f12:	6003      	str	r3, [r0, #0]
 8009f14:	2001      	movs	r0, #1
 8009f16:	e7e7      	b.n	8009ee8 <_raise_r+0x12>
 8009f18:	2400      	movs	r4, #0
 8009f1a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009f1e:	4628      	mov	r0, r5
 8009f20:	4798      	blx	r3
 8009f22:	2000      	movs	r0, #0
 8009f24:	e7e0      	b.n	8009ee8 <_raise_r+0x12>
	...

08009f28 <raise>:
 8009f28:	4b02      	ldr	r3, [pc, #8]	; (8009f34 <raise+0xc>)
 8009f2a:	4601      	mov	r1, r0
 8009f2c:	6818      	ldr	r0, [r3, #0]
 8009f2e:	f7ff bfd2 	b.w	8009ed6 <_raise_r>
 8009f32:	bf00      	nop
 8009f34:	20000068 	.word	0x20000068

08009f38 <_kill_r>:
 8009f38:	b538      	push	{r3, r4, r5, lr}
 8009f3a:	4d07      	ldr	r5, [pc, #28]	; (8009f58 <_kill_r+0x20>)
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	4604      	mov	r4, r0
 8009f40:	4608      	mov	r0, r1
 8009f42:	4611      	mov	r1, r2
 8009f44:	602b      	str	r3, [r5, #0]
 8009f46:	f7f7 fab3 	bl	80014b0 <_kill>
 8009f4a:	1c43      	adds	r3, r0, #1
 8009f4c:	d102      	bne.n	8009f54 <_kill_r+0x1c>
 8009f4e:	682b      	ldr	r3, [r5, #0]
 8009f50:	b103      	cbz	r3, 8009f54 <_kill_r+0x1c>
 8009f52:	6023      	str	r3, [r4, #0]
 8009f54:	bd38      	pop	{r3, r4, r5, pc}
 8009f56:	bf00      	nop
 8009f58:	20001dfc 	.word	0x20001dfc

08009f5c <_getpid_r>:
 8009f5c:	f7f7 baa0 	b.w	80014a0 <_getpid>

08009f60 <_init>:
 8009f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f62:	bf00      	nop
 8009f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f66:	bc08      	pop	{r3}
 8009f68:	469e      	mov	lr, r3
 8009f6a:	4770      	bx	lr

08009f6c <_fini>:
 8009f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f6e:	bf00      	nop
 8009f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f72:	bc08      	pop	{r3}
 8009f74:	469e      	mov	lr, r3
 8009f76:	4770      	bx	lr
